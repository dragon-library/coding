<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python Tutorials on Library</title>
    <link>https://example.com/post/python/tutorials/</link>
    <description>Recent content in Python Tutorials on Library</description>
    <generator>Source Themes academia (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 07 May 2020 00:00:00 +0000</lastBuildDate>
    
	    <atom:link href="https://example.com/post/python/tutorials/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>File Handling Functions Explained.</title>
      <link>https://example.com/post/python/tutorials/file-handling-functions/</link>
      <pubDate>Thu, 07 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/post/python/tutorials/file-handling-functions/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/size/w2000/2020/05/Python-File-Handling-1.png&#34; alt=&#34;enter image description here&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;welcome&#34;&gt;Welcome&lt;/h2&gt;

&lt;p&gt;Hi! If you want to learn how to work with files in Python, then this article is for you. Working with files is an important skill that every Python developer should learn, so let&amp;rsquo;s get started.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In this article, you will learn:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to open a file.&lt;/li&gt;
&lt;li&gt;How to read a file.&lt;/li&gt;
&lt;li&gt;How to create a file.&lt;/li&gt;
&lt;li&gt;How to modify a file.&lt;/li&gt;
&lt;li&gt;How to close a file.&lt;/li&gt;
&lt;li&gt;How to open files for multiple operations.&lt;/li&gt;
&lt;li&gt;How to work with file object methods.&lt;/li&gt;
&lt;li&gt;How to delete files.&lt;/li&gt;
&lt;li&gt;How to work with context managers and why they are useful.&lt;/li&gt;
&lt;li&gt;How to handle exceptions that could be raised when you work with files.&lt;/li&gt;
&lt;li&gt;and more!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Let&amp;rsquo;s begin! 🔅&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;working-with-files-basic-syntax&#34;&gt;Working with Files: Basic Syntax&lt;/h2&gt;

&lt;p&gt;One of the most important functions that you will need to use as you work with files in Python is  &lt;code&gt;**open()**&lt;/code&gt;&lt;strong&gt;,&lt;/strong&gt;  a built-in function that opens a file and allows your program to use it and work with it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is the basic syntax&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/05/image-48.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;💡  &lt;strong&gt;Tip:&lt;/strong&gt;  These are the two most commonly used arguments to call this function. There are six additional optional arguments. To learn more about them, please read  &lt;a href=&#34;https://docs.python.org/3/library/functions.html#open&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt;  in the documentation.&lt;/p&gt;

&lt;h3 id=&#34;first-parameter-file&#34;&gt;First Parameter: File&lt;/h3&gt;

&lt;p&gt;The first parameter of the  &lt;code&gt;open()&lt;/code&gt;  function is  &lt;code&gt;**file**&lt;/code&gt;, the absolute or relative path to the file that you are trying to work with.&lt;/p&gt;

&lt;p&gt;We usually use a relative path, which indicates where the file is located relative to the location of the script (Python file) that is calling the  &lt;code&gt;open()&lt;/code&gt;  function.&lt;/p&gt;

&lt;p&gt;For example, the path in this function call:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;open(&amp;quot;names.txt&amp;quot;) # The relative path is &amp;quot;names.txt&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Only contains the name of the file. This can be used when the file that you are trying to open is in the same directory or folder as the Python script, like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/05/image-7.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;But if the file is within a nested folder, like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/05/image-9.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The names.txt file is in the &amp;ldquo;data&amp;rdquo; folder&lt;/p&gt;

&lt;p&gt;Then we need to use a specific path to tell the function that the file is within another folder.&lt;/p&gt;

&lt;p&gt;In this example, this would be the path:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;open(&amp;quot;data/names.txt&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that we are writing  &lt;code&gt;data/&lt;/code&gt;  first (the name of the folder followed by a  &lt;code&gt;/&lt;/code&gt;) and then  &lt;code&gt;names.txt&lt;/code&gt;  (the name of the file with the extension).&lt;/p&gt;

&lt;p&gt;💡  &lt;strong&gt;Tip:&lt;/strong&gt; The three letters  &lt;code&gt;.txt&lt;/code&gt;  that follow the dot in  &lt;code&gt;names.txt&lt;/code&gt;  is the &amp;ldquo;extension&amp;rdquo; of the file, or its type. In this case,  &lt;code&gt;.txt&lt;/code&gt;  indicates that it&amp;rsquo;s a text file.&lt;/p&gt;

&lt;h3 id=&#34;second-parameter-mode&#34;&gt;Second Parameter: Mode&lt;/h3&gt;

&lt;p&gt;The second parameter of the  &lt;code&gt;open()&lt;/code&gt;  function is the  &lt;code&gt;**mode**&lt;/code&gt;, a string with one character. That single character basically tells Python what you are planning to do with the file in your program.&lt;/p&gt;

&lt;p&gt;Modes available are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Read (&lt;code&gt;&amp;quot;r&amp;quot;&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Append (&lt;code&gt;&amp;quot;a&amp;quot;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Write (&lt;code&gt;&amp;quot;w&amp;quot;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Create (&lt;code&gt;&amp;quot;x&amp;quot;&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also choose to open the file in:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Text mode (&lt;code&gt;&amp;quot;t&amp;quot;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Binary mode (&lt;code&gt;&amp;quot;b&amp;quot;&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To use text or binary mode, you would need to add these characters to the main mode. For example:  &lt;code&gt;&amp;quot;wb&amp;quot;&lt;/code&gt;  means writing in binary mode.&lt;/p&gt;

&lt;p&gt;💡  &lt;strong&gt;Tip:&lt;/strong&gt;  The default modes are read (&lt;code&gt;&amp;quot;r&amp;quot;&lt;/code&gt;) and text (&lt;code&gt;&amp;quot;t&amp;quot;&lt;/code&gt;), which means &amp;ldquo;open for reading text&amp;rdquo; (&lt;code&gt;&amp;quot;rt&amp;quot;&lt;/code&gt;), so you don&amp;rsquo;t need to specify them in  &lt;code&gt;**open()**&lt;/code&gt;  if you want to use them because they are assigned by default. You can simply write  &lt;code&gt;open(&amp;lt;file&amp;gt;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why Modes?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It really makes sense for Python to grant only certain permissions based what you are planning to do with the file, right? Why should Python allow your program to do more than necessary? This is basically why modes exist.&lt;/p&gt;

&lt;p&gt;Think about it — allowing a program to do more than necessary can problematic. For example, if you only need to read the content of a file, it can be dangerous to allow your program to modify it unexpectedly, which could potentially introduce bugs.&lt;/p&gt;

&lt;h2 id=&#34;how-to-read-a-file&#34;&gt;How to Read a File&lt;/h2&gt;

&lt;p&gt;Now that you know more about the arguments that the  &lt;code&gt;**open()**&lt;/code&gt;  function takes, let&amp;rsquo;s see how you can open a file and store it in a variable to use it in your program.&lt;/p&gt;

&lt;p&gt;This is the basic syntax:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/05/image-41.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We are simply assigning the value returned to a variable. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;names_file = open(&amp;quot;data/names.txt&amp;quot;, &amp;quot;r&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I know you might be asking: what type of value is returned by  &lt;code&gt;**open()**&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Well,  &lt;strong&gt;a&lt;/strong&gt;  &lt;strong&gt;file object&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s talk a little bit about them.&lt;/p&gt;

&lt;h3 id=&#34;file-objects&#34;&gt;File Objects&lt;/h3&gt;

&lt;p&gt;According to the  &lt;a href=&#34;https://docs.python.org/3/glossary.html#term-file-object&#34; target=&#34;_blank&#34;&gt;Python Documentation&lt;/a&gt;, a  &lt;strong&gt;file object&lt;/strong&gt;  is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An object exposing a file-oriented API (with methods such as read() or write()) to an underlying resource.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is basically telling us that a file object is an object that lets us work and interact with existing files in our Python program.&lt;/p&gt;

&lt;p&gt;File objects have attributes, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: the name of the file.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;closed&lt;/strong&gt;:  &lt;code&gt;True&lt;/code&gt;  if the file is closed.  &lt;code&gt;False&lt;/code&gt;  otherwise.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mode&lt;/strong&gt;: the mode used to open the file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/05/image-57.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = open(&amp;quot;data/names.txt&amp;quot;, &amp;quot;a&amp;quot;)
print(f.mode) # Output: &amp;quot;a&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s see how you can access the content of a file through a file object.&lt;/p&gt;

&lt;h3 id=&#34;methods-to-read-a-file&#34;&gt;Methods to Read a File&lt;/h3&gt;

&lt;p&gt;For us to be able to work file objects, we need to have a way to &amp;ldquo;interact&amp;rdquo; with them in our program and that is exactly what methods do. Let&amp;rsquo;s see some of them.&lt;/p&gt;

&lt;h3 id=&#34;read&#34;&gt;&lt;strong&gt;Read()&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The first method that you need to learn about is  &lt;strong&gt;&lt;code&gt;read()&lt;/code&gt;&lt;/strong&gt;,  which  &lt;strong&gt;returns the entire content of the file as a string.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/05/image-11.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here we have an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = open(&amp;quot;data/names.txt&amp;quot;)
print(f.read())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Nora
Gino
Timmy
William
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use the  &lt;code&gt;type()&lt;/code&gt;  function to confirm that the value returned by  &lt;code&gt;f.read()&lt;/code&gt;  is a string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-pytohn&#34;&gt;print(type(f.read()))

# Output
&amp;lt;class &#39;str&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yes, it&amp;rsquo;s a string!&lt;/p&gt;

&lt;p&gt;In this case, the entire file was printed because we did not specify a maximum number of bytes, but we can do this as well.&lt;/p&gt;

&lt;p&gt;Here we have an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = open(&amp;quot;data/names.txt&amp;quot;)
print(f.read(3))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The value returned is limited to this number of bytes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Nor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;📌  &lt;strong&gt;Important:&lt;/strong&gt;  You need to  &lt;strong&gt;close&lt;/strong&gt; a file after the task has been completed to free the resources associated to the file. To do this, you need to call the  &lt;code&gt;**close()**&lt;/code&gt;  method, like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/05/image-22.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;readline-vs-readlines&#34;&gt;Readline() vs. Readlines()&lt;/h3&gt;

&lt;p&gt;You can read a file line by line with these two methods. They are slightly different, so let&amp;rsquo;s see them in detail.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;**readline()**&lt;/code&gt;  reads  &lt;strong&gt;one line&lt;/strong&gt; of the file until it reaches the end of that line. A trailing newline character (&lt;code&gt;\n&lt;/code&gt;) is kept in the string.&lt;/p&gt;

&lt;p&gt;💡  &lt;strong&gt;Tip:&lt;/strong&gt;  Optionally, you can pass the size, the maximum number of characters that you want to include in the resulting string.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/05/image-19.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = open(&amp;quot;data/names.txt&amp;quot;)
print(f.readline())
f.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Nora

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the first line of the file.&lt;/p&gt;

&lt;p&gt;In contrast,  &lt;code&gt;**readlines()**&lt;/code&gt;  returns a  &lt;strong&gt;list with all the lines&lt;/strong&gt;  of the file as individual elements (strings). This is the syntax:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/05/image-21.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = open(&amp;quot;data/names.txt&amp;quot;)
print(f.readlines())
f.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[&#39;Nora\n&#39;, &#39;Gino\n&#39;, &#39;Timmy\n&#39;, &#39;William&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that there is a  &lt;code&gt;\n&lt;/code&gt;  (newline character) at the end of each string, except the last one.&lt;/p&gt;

&lt;p&gt;💡  &lt;strong&gt;Tip:&lt;/strong&gt;  You can get the same list with  &lt;code&gt;list(f)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can work with this list in your program by assigning it to a variable or using it in a loop:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = open(&amp;quot;data/names.txt&amp;quot;)

for line in f.readlines():
    # Do something with each line
    
f.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can also iterate over  &lt;code&gt;f&lt;/code&gt;  directly (the file object) in a loop:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = open(&amp;quot;data/names.txt&amp;quot;, &amp;quot;r&amp;quot;)

for line in f:
	# Do something with each line

f.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Those are the main methods used to read file objects. Now let&amp;rsquo;s see how you can create files.&lt;/p&gt;

&lt;h2 id=&#34;how-to-create-a-file&#34;&gt;How to Create a File&lt;/h2&gt;

&lt;p&gt;If you need to create a file &amp;ldquo;dynamically&amp;rdquo; using Python, you can do it with the  &lt;code&gt;&amp;quot;x&amp;quot;&lt;/code&gt;  mode.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see how. This is the basic syntax:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/05/image-58.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an example. This is my current working directory:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/05/image-29.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If I run this line of code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = open(&amp;quot;new_file.txt&amp;quot;, &amp;quot;x&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A new file with that name is created:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/05/image-30.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;With this mode, you can create a file and then write to it dynamically using methods that you will learn in just a few moments.&lt;/p&gt;

&lt;p&gt;💡  &lt;strong&gt;Tip:&lt;/strong&gt;  The file will be initially empty until you modify it.&lt;/p&gt;

&lt;p&gt;A curious thing is that if you try to run this line again and a file with that name already exists, you will see this error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Traceback (most recent call last):
  File &amp;quot;&amp;lt;path&amp;gt;&amp;quot;, line 8, in &amp;lt;module&amp;gt;
    f = open(&amp;quot;new_file.txt&amp;quot;, &amp;quot;x&amp;quot;)
FileExistsError: [Errno 17] File exists: &#39;new_file.txt&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;According to the  &lt;a href=&#34;https://docs.python.org/3/library/exceptions.html#FileExistsError&#34; target=&#34;_blank&#34;&gt;Python Documentation&lt;/a&gt;, this exception (runtime error) is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Raised when trying to create a file or directory which already exists.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now that you know how to create a file, let&amp;rsquo;s see how you can modify it.&lt;/p&gt;

&lt;h2 id=&#34;how-to-modify-a-file&#34;&gt;How to Modify a File&lt;/h2&gt;

&lt;p&gt;To modify (write to) a file, you need to use the  &lt;code&gt;**write()**&lt;/code&gt;  method. You have two ways to do it (append or write) based on the mode that you choose to open it with. Let&amp;rsquo;s see them in detail.&lt;/p&gt;

&lt;h3 id=&#34;append&#34;&gt;Append&lt;/h3&gt;

&lt;p&gt;&amp;ldquo;Appending&amp;rdquo; means adding something to the end of another thing. The  &lt;code&gt;&amp;quot;a&amp;quot;&lt;/code&gt;  mode allows you to open a file to append some content to it.&lt;/p&gt;

&lt;p&gt;For example, if we have this file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/05/image-43.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And we want to add a new line to it, we can open it using the  &lt;code&gt;**&amp;quot;a&amp;quot;**&lt;/code&gt;  mode (append) and then, call the  &lt;code&gt;**write()**&lt;/code&gt;  method, passing the content that we want to append as argument.&lt;/p&gt;

&lt;p&gt;This is the basic syntax to call the  &lt;code&gt;**write()**&lt;/code&gt;  method:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/05/image-52.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = open(&amp;quot;data/names.txt&amp;quot;, &amp;quot;a&amp;quot;)
f.write(&amp;quot;\nNew Line&amp;quot;)
f.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;💡  &lt;strong&gt;Tip:&lt;/strong&gt;  Notice that I&amp;rsquo;m adding  &lt;code&gt;\n&lt;/code&gt;  before the line to indicate that I want the new line to appear as a separate line, not as a continuation of the existing line.&lt;/p&gt;

&lt;p&gt;This is the file now, after running the script:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/05/image-45.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;💡  &lt;strong&gt;Tip:&lt;/strong&gt;  The new line might not be displayed in the file until &lt;strong&gt;&lt;code&gt;f.close()&lt;/code&gt;&lt;/strong&gt;  runs.&lt;/p&gt;

&lt;h3 id=&#34;write&#34;&gt;Write&lt;/h3&gt;

&lt;p&gt;Sometimes, you may want to delete the content of a file and replace it entirely with new content. You can do this with the  &lt;code&gt;**write()**&lt;/code&gt;  method if you open the file with the  &lt;code&gt;**&amp;quot;w&amp;quot;**&lt;/code&gt;  mode.&lt;/p&gt;

&lt;p&gt;Here we have this text file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/05/image-43.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If I run this script:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = open(&amp;quot;data/names.txt&amp;quot;, &amp;quot;w&amp;quot;)
f.write(&amp;quot;New Content&amp;quot;)
f.close()

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the result:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/05/image-46.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, opening a file with the  &lt;code&gt;**&amp;quot;w&amp;quot;**&lt;/code&gt;  mode and then writing to it replaces the existing content.&lt;/p&gt;

&lt;p&gt;💡  &lt;strong&gt;Tip:&lt;/strong&gt;  The  &lt;code&gt;**write()**&lt;/code&gt;  method returns the number of characters written.&lt;/p&gt;

&lt;p&gt;If you want to write several lines at once, you can use the  &lt;code&gt;**writelines()**&lt;/code&gt;  method, which takes a list of strings. Each string represents a line to be added to the file.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an example. This is the initial file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/05/image-43.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If we run this script:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = open(&amp;quot;data/names.txt&amp;quot;, &amp;quot;a&amp;quot;)
f.writelines([&amp;quot;\nline1&amp;quot;, &amp;quot;\nline2&amp;quot;, &amp;quot;\nline3&amp;quot;])
f.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The lines are added to the end of the file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/05/image-47.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;open-file-for-multiple-operations&#34;&gt;Open File For Multiple Operations&lt;/h3&gt;

&lt;p&gt;Now you know how to create, read, and write to a file, but what if you want to do more than one thing in the same program? Let&amp;rsquo;s see what happens if we try to do this with the modes that you have learned so far:&lt;/p&gt;

&lt;p&gt;If you open a file in  &lt;code&gt;&amp;quot;r&amp;quot;&lt;/code&gt;  mode (read), and then try to write to it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = open(&amp;quot;data/names.txt&amp;quot;)
f.write(&amp;quot;New Content&amp;quot;) # Trying to write
f.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will get this error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Traceback (most recent call last):
  File &amp;quot;&amp;lt;path&amp;gt;&amp;quot;, line 9, in &amp;lt;module&amp;gt;
    f.write(&amp;quot;New Content&amp;quot;)
io.UnsupportedOperation: not writable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similarly, if you open a file in  &lt;code&gt;&amp;quot;w&amp;quot;&lt;/code&gt;  mode (write), and then try to read it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = open(&amp;quot;data/names.txt&amp;quot;, &amp;quot;w&amp;quot;)
print(f.readlines()) # Trying to read
f.write(&amp;quot;New Content&amp;quot;)
f.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will see this error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Traceback (most recent call last):
  File &amp;quot;&amp;lt;path&amp;gt;&amp;quot;, line 14, in &amp;lt;module&amp;gt;
    print(f.readlines())
io.UnsupportedOperation: not readable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The same will occur with the  &lt;code&gt;&amp;quot;a&amp;quot;&lt;/code&gt;  (append) mode.&lt;/p&gt;

&lt;p&gt;How can we solve this? To be able to read a file and perform another operation in the same program, you need to add the  &lt;code&gt;&amp;quot;+&amp;quot;&lt;/code&gt;  symbol to the mode, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = open(&amp;quot;data/names.txt&amp;quot;, &amp;quot;w+&amp;quot;) # Read + Write
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = open(&amp;quot;data/names.txt&amp;quot;, &amp;quot;a+&amp;quot;) # Read + Append
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = open(&amp;quot;data/names.txt&amp;quot;, &amp;quot;r+&amp;quot;) # Read + Write
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Very useful, right? This is probably what you will use in your programs, but be sure to include only the modes that you need to avoid potential bugs.&lt;/p&gt;

&lt;p&gt;Sometimes files are no longer needed. Let&amp;rsquo;s see how you can delete files using Python.&lt;/p&gt;

&lt;h2 id=&#34;how-to-delete-files&#34;&gt;How to Delete Files&lt;/h2&gt;

&lt;p&gt;To remove a file using Python, you need to import a module called  &lt;code&gt;**os**&lt;/code&gt;  which contains functions that interact with your operating system.&lt;/p&gt;

&lt;p&gt;💡 &lt;strong&gt;Tip:&lt;/strong&gt;  A  &lt;strong&gt;module&lt;/strong&gt; is a Python file with related variables, functions, and classes.&lt;/p&gt;

&lt;p&gt;Particularly, you need the  &lt;code&gt;**remove()**&lt;/code&gt;  function. This function takes the path to the file as argument and deletes the file automatically.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/05/image-56.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see an example. We want to remove the file called  &lt;code&gt;sample_file.txt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/05/image-34.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To do it, we write this code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os
os.remove(&amp;quot;sample_file.txt&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;The first line:  &lt;code&gt;import os&lt;/code&gt;  is called an &amp;ldquo;import statement&amp;rdquo;. This statement is written at the top of your file and it gives you access to the functions defined in the  &lt;code&gt;os&lt;/code&gt;  module.&lt;/li&gt;
&lt;li&gt;The second line:  &lt;code&gt;os.remove(&amp;quot;sample_file.txt&amp;quot;)&lt;/code&gt;  removes the file specified.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;💡  &lt;strong&gt;Tip:&lt;/strong&gt;  you can use an absolute or a relative path.&lt;/p&gt;

&lt;p&gt;Now that you know how to delete files, let&amp;rsquo;s see an interesting tool&amp;hellip; Context Managers!&lt;/p&gt;

&lt;h2 id=&#34;meet-context-managers&#34;&gt;Meet Context Managers&lt;/h2&gt;

&lt;p&gt;Context Managers are Python constructs that will make your life much easier. By using them, you don&amp;rsquo;t need to remember to close a file at the end of your program and you have access to the file in the particular part of the program that you choose.&lt;/p&gt;

&lt;h3 id=&#34;syntax&#34;&gt;Syntax&lt;/h3&gt;

&lt;p&gt;This is an example of a context manager used to work with files:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/05/image-33.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;💡  &lt;strong&gt;Tip:&lt;/strong&gt; The body of the context manager has to be indented, just like we indent loops, functions, and classes. If the code is not indented, it will not be considered part of the context manager.&lt;/p&gt;

&lt;p&gt;When the body of the context manager has been completed, the file closes automatically.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;with open(&amp;quot;&amp;lt;path&amp;gt;&amp;quot;, &amp;quot;&amp;lt;mode&amp;gt;&amp;quot;) as &amp;lt;var&amp;gt;:
    # Working with the file...

# The file is closed here!
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;Here&amp;rsquo;s an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;with open(&amp;quot;data/names.txt&amp;quot;, &amp;quot;r+&amp;quot;) as f:
    print(f.readlines()) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This context manager opens the  &lt;code&gt;names.txt&lt;/code&gt;  file for read/write operations and assigns that file object to the variable  &lt;code&gt;f&lt;/code&gt;. This variable is used in the body of the context manager to refer to the file object.&lt;/p&gt;

&lt;h3 id=&#34;trying-to-read-it-again&#34;&gt;Trying to Read it Again&lt;/h3&gt;

&lt;p&gt;After the body has been completed, the file is automatically closed, so it can&amp;rsquo;t be read without opening it again. But wait! We have a line that tries to read it again, right here below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;with open(&amp;quot;data/names.txt&amp;quot;, &amp;quot;r+&amp;quot;) as f:
    print(f.readlines())

print(f.readlines()) # Trying to read the file again, outside of the context manager
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s see what happens:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Traceback (most recent call last):
  File &amp;quot;&amp;lt;path&amp;gt;&amp;quot;, line 21, in &amp;lt;module&amp;gt;
    print(f.readlines())
ValueError: I/O operation on closed file.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This error is thrown because we are trying to read a closed file. Awesome, right? The context manager does all the heavy work for us, it is readable, and concise.&lt;/p&gt;

&lt;h2 id=&#34;how-to-handle-exceptions-when-working-with-files&#34;&gt;How to Handle Exceptions When Working With Files&lt;/h2&gt;

&lt;p&gt;When you&amp;rsquo;re working with files, errors can occur. Sometimes you may not have the necessary permissions to modify or access a file, or a file might not even exist. As a programmer, you need to foresee these circumstances and handle them in your program to avoid sudden crashes that could definitely affect the user experience.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see some of the most common exceptions (runtime errors) that you might find when you work with files:&lt;/p&gt;

&lt;h3 id=&#34;filenotfounderror&#34;&gt;FileNotFoundError&lt;/h3&gt;

&lt;p&gt;According to the  &lt;a href=&#34;https://docs.python.org/3/library/exceptions.html#FileNotFoundError&#34; target=&#34;_blank&#34;&gt;Python Documentation&lt;/a&gt;, this exception is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Raised when a file or directory is requested but doesn’t exist.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example, if the file that you&amp;rsquo;re trying to open doesn&amp;rsquo;t exist in your current working directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = open(&amp;quot;names.txt&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will see this error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Traceback (most recent call last):
  File &amp;quot;&amp;lt;path&amp;gt;&amp;quot;, line 8, in &amp;lt;module&amp;gt;
    f = open(&amp;quot;names.txt&amp;quot;)
FileNotFoundError: [Errno 2] No such file or directory: &#39;names.txt&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s break this error down this line by line:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;File &amp;quot;&amp;lt;path&amp;gt;&amp;quot;, line 8, in &amp;lt;module&amp;gt;&lt;/code&gt;. This line tells you that the error was raised when the code on the file located in  &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt;  was running. Specifically, when  &lt;code&gt;line 8&lt;/code&gt;  was executed in  &lt;code&gt;&amp;lt;module&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f = open(&amp;quot;names.txt&amp;quot;)&lt;/code&gt;. This is the line that caused the error.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FileNotFoundError: [Errno 2] No such file or directory: &#39;names.txt&#39;&lt;/code&gt;  . This line says that a  &lt;code&gt;FileNotFoundError&lt;/code&gt;  exception was raised because the file or directory  &lt;code&gt;names.txt&lt;/code&gt;  doesn&amp;rsquo;t exist.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;💡  &lt;strong&gt;Tip:&lt;/strong&gt; Python is very descriptive with the error messages, right? This is a huge advantage during the process of debugging.&lt;/p&gt;

&lt;h3 id=&#34;permissionerror&#34;&gt;PermissionError&lt;/h3&gt;

&lt;p&gt;This is another common exception when working with files. According to the  &lt;a href=&#34;https://docs.python.org/3/library/exceptions.html#PermissionError&#34; target=&#34;_blank&#34;&gt;Python Documentation&lt;/a&gt;, this exception is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Raised when trying to run an operation without the adequate access rights - for example filesystem permissions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This exception is raised when you are trying to read or modify a file that don&amp;rsquo;t have permission to access. If you try to do so, you will see this error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Traceback (most recent call last):
  File &amp;quot;&amp;lt;path&amp;gt;&amp;quot;, line 8, in &amp;lt;module&amp;gt;
    f = open(&amp;quot;&amp;lt;file_path&amp;gt;&amp;quot;)
PermissionError: [Errno 13] Permission denied: &#39;data&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;isadirectoryerror&#34;&gt;IsADirectoryError&lt;/h3&gt;

&lt;p&gt;According to the  &lt;a href=&#34;https://docs.python.org/3/library/exceptions.html#IsADirectoryError&#34; target=&#34;_blank&#34;&gt;Python Documentation&lt;/a&gt;, this exception is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Raised when a file operation is requested on a directory.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This particular exception is raised when you try to open or work on a directory instead of a file, so be really careful with the path that you pass as argument.&lt;/p&gt;

&lt;h3 id=&#34;how-to-handle-exceptions&#34;&gt;How to Handle Exceptions&lt;/h3&gt;

&lt;p&gt;To handle these exceptions, you can use a  &lt;strong&gt;try/except&lt;/strong&gt;  statement. With this statement, you can &amp;ldquo;tell&amp;rdquo; your program what to do in case something unexpected happens.&lt;/p&gt;

&lt;p&gt;This is the basic syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;try:
	# Try to run this code
except &amp;lt;type_of_exception&amp;gt;:
	# If an exception of this type is raised, stop the process and jump to this block
    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here you can see an example with  &lt;code&gt;FileNotFoundError&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;try:
    f = open(&amp;quot;names.txt&amp;quot;)
except FileNotFoundError:
    print(&amp;quot;The file doesn&#39;t exist&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This basically says:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Try to open the file  &lt;code&gt;names.txt&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If a  &lt;code&gt;FileNotFoundError&lt;/code&gt;  is thrown, don&amp;rsquo;t crash! Simply print a descriptive statement for the user.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;💡  &lt;strong&gt;Tip:&lt;/strong&gt;  You can choose how to handle the situation by writing the appropriate code in the  &lt;code&gt;except&lt;/code&gt;  block. Perhaps you could create a new file if it doesn&amp;rsquo;t exist already.&lt;/p&gt;

&lt;p&gt;To close the file automatically after the task (regardless of whether an exception was raised or not in the  &lt;code&gt;try&lt;/code&gt;  block) you can add the  &lt;code&gt;finally&lt;/code&gt;  block.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;try:
	# Try to run this code
except &amp;lt;exception&amp;gt;:
	# If this exception is raised, stop the process immediately and jump to this block
finally: 
	# Do this after running the code, even if an exception was raised
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;try:
    f = open(&amp;quot;names.txt&amp;quot;)
except FileNotFoundError:
    print(&amp;quot;The file doesn&#39;t exist&amp;quot;)
finally:
    f.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are many ways to customize the try/except/finally statement and you can even add an  &lt;code&gt;else&lt;/code&gt;  block to run a block of code only if no exceptions were raised in the  &lt;code&gt;try&lt;/code&gt;  block.&lt;/p&gt;

&lt;p&gt;💡 &lt;strong&gt;Tip:&lt;/strong&gt;  To learn more about exception handling in Python, you may like to read my article:  &lt;a href=&#34;https://www.freecodecamp.org/news/exception-handling-python/&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;How to Handle Exceptions in Python: A Detailed Visual Introduction&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;in-summary&#34;&gt;In Summary&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You can create, read, write, and delete files using Python.&lt;/li&gt;
&lt;li&gt;File objects have their own set of methods that you can use to work with them in your program.&lt;/li&gt;
&lt;li&gt;Context Managers help you work with files and manage them by closing them automatically when a task has been completed.&lt;/li&gt;
&lt;li&gt;Exception handling is key in Python. Common exceptions when you are working with files include  &lt;code&gt;FileNotFoundError&lt;/code&gt;,  &lt;code&gt;PermissionError&lt;/code&gt;  and  &lt;code&gt;IsADirectoryError&lt;/code&gt;. They can be handled using try/except/else/finally.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Reference : &lt;a href=&#34;https://www.freecodecamp.org/news/python-write-to-file-open-read-append-and-other-file-handling-functions-explained/&#34; target=&#34;_blank&#34;&gt;freeCodeCamp&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>How to Go From Beginner to Pro</title>
      <link>https://example.com/post/python/tutorials/beginner_to_pro/</link>
      <pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/post/python/tutorials/beginner_to_pro/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/size/w2000/2020/05/The-Ultimate-Guide-To-Python-1.png&#34; alt=&#34;The Ultimate Guide to Python: How to Go From Beginner to Pro&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you have an interest in Data Science, Web Development, Robotics, or IoT you must learn Python. Python has become the fastest-growing programming language due to its heavy usage and wide range of applications.&lt;/p&gt;

&lt;p&gt;For a beginner or a person from a non-tech background, learning Python is a good choice. The syntax is like talking and writing plain English. For example, consider this syntax which shows its resemblance to the English language.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Hello folks&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will use  &lt;code&gt;Python3&lt;/code&gt;  in this tutorial as it is widely used. Most of Python&amp;rsquo;s frameworks and libraries support this version.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;  Any version above 3.5.2 supports most of the libraries and frameworks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;index&#34;&gt;Index:&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#introduction-&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#installation-&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#python-shell-&#34;&gt;Python shell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#comment-&#34;&gt;Comment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#print-&#34;&gt;Print&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#indentation-&#34;&gt;Indentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#variables-&#34;&gt;Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#operators-&#34;&gt;Operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#conditional-statements-&#34;&gt;Conditional Statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#for-loops-&#34;&gt;For Loops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#while-loops-&#34;&gt;While loops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#user-input-&#34;&gt;User Input&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#typecasting-&#34;&gt;Typecasting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dictionaries-&#34;&gt;Dictionaries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lists-&#34;&gt;Lists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tuples-&#34;&gt;Tuples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sets-&#34;&gt;Sets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#functions-and-arguments-&#34;&gt;Functions and Arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#args-&#34;&gt;Args&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#keyword-arguments-&#34;&gt;keyword Arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#default-argument-&#34;&gt;Default Arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#kwargs-&#34;&gt;kwargs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#scope-&#34;&gt;Scope&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#return-statement-&#34;&gt;Return Statement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lambda-expression-&#34;&gt;Lambda Expression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#list-comprehension-&#34;&gt;List comprehension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#oops-concepts-&#34;&gt;OOPS concepts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#classes-&#34;&gt;Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#methods-&#34;&gt;Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#objects-&#34;&gt;Objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#constructor-&#34;&gt;Constructor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#instance-attributes-&#34;&gt;Instance attribute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#class-attributes-&#34;&gt;Class attributes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#self-&#34;&gt;Self&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#inheritance-&#34;&gt;Inheritance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#super-&#34;&gt;Super&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#multiple-inheritance-&#34;&gt;Multiple Inheritance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#polymorphism-&#34;&gt;Polymorphism&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#encapsulation-&#34;&gt;Encapsulation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#decorator-&#34;&gt;Decorators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#exceptions-&#34;&gt;Exceptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#package-import-&#34;&gt;Package Import&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#json-handling-&#34;&gt;JSON Handling&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;  The beginning of this guide is geared towards beginners. If you have intermediate experience in Python, feel free to skip ahead using the links above.&lt;/p&gt;

&lt;h2 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;:&lt;/h2&gt;

&lt;p&gt;As per Github&amp;rsquo;s  &lt;a href=&#34;https://octoverse.github.com/#top-languages&#34; target=&#34;_blank&#34;&gt;octoverse&lt;/a&gt;, Python is the second most used language by developers in 2019.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/04/Screenshot-2020-04-29-at-6.53.10-PM.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Octoverse graph of how languages have evolved&lt;/p&gt;

&lt;p&gt;Before learning any language, it&amp;rsquo;s helpful to know how that language came into existence. Well, Python was developed by  &lt;a href=&#34;https://en.wikipedia.org/wiki/Guido_van_Rossum&#34; target=&#34;_blank&#34;&gt;Guido van Rossum&lt;/a&gt;, a Dutch programmer, and was released in 1991.&lt;/p&gt;

&lt;p&gt;Python is an Interpreted language. It uses the  &lt;a href=&#34;https://en.wikipedia.org/wiki/CPython&#34; target=&#34;_blank&#34;&gt;CPython&lt;/a&gt;  Interpreter to compile the Python code to byte code. For a beginner, you don&amp;rsquo;t need to know much about CPython, but you must be aware of how Python works internally.&lt;/p&gt;

&lt;p&gt;The philosophy behind Python is that code must be readable. It achieves this with the help of indentation. It supports many programming paradigms like Functional and Object Oriented programming. You will understand more about these as you read through the article.&lt;/p&gt;

&lt;p&gt;The basic question that most beginners have in mind is what a language can do. Here are some of the use-cases of Python:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Server-side development ( Django, Flask )&lt;/li&gt;
&lt;li&gt;Data Science ( Pytorch, Tensor-flow )&lt;/li&gt;
&lt;li&gt;Data analysis / Visualisation ( Matplotlib )&lt;/li&gt;
&lt;li&gt;Scripting ( Beautiful Soup )&lt;/li&gt;
&lt;li&gt;Embedded development&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;  I do not endorse any of the above-mentioned libraries or frameworks in particular. They are popular and broadly used in their respective domains.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;The first step of learning any programming language is installing it. Python comes bundled with most operating systems nowadays. Use the following command in your terminal to check if Python is available:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python3 --version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;rsquo;ll see the following output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Python 3.7.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that your version of Python might be different. If you have Python installed and the version is above 3.5.2 then you can skip this section.&lt;/p&gt;

&lt;p&gt;For those who don&amp;rsquo;t have Python installed, follow the steps below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#windows-user-&#34;&gt;Windows User&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mac-user-&#34;&gt;Mac User&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#linux-user-&#34;&gt;Linux User&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;windows-user&#34;&gt;Windows User:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Go to  &lt;a href=&#34;https://www.python.org/downloads/&#34; target=&#34;_blank&#34;&gt;Python&amp;rsquo;s official website&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Click on the download button ( Download Python 3.8.2 ) [  &lt;strong&gt;Note:&lt;/strong&gt;  The version may differ based on when you are reading this article ]&lt;/li&gt;
&lt;li&gt;Go to the path where the package is downloaded and double-click the installer.&lt;/li&gt;
&lt;li&gt;Check the box indicating to &amp;ldquo;Add Python 3.x to PATH&amp;rdquo; and then click on &amp;ldquo;Install Now&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Once done you&amp;rsquo;ll get a prompt that &amp;ldquo;Setup was successful&amp;rdquo;. Check again if python is configured properly using the above command.&lt;/li&gt;
&lt;li&gt;To confirm if Python is installed and configured properly, use the command  &lt;code&gt;python3 --version&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;mac-user&#34;&gt;Mac User:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;First install  &lt;a href=&#34;https://apps.apple.com/in/app/xcode/id497799835?mt=12&#34; target=&#34;_blank&#34;&gt;xcode&lt;/a&gt;  from the app store.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you want to install Xcode using the terminal then use the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;xcode-select --install

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;After that, we will use the brew package manager to install Python. To install and configure  &lt;a href=&#34;https://brew.sh/&#34; target=&#34;_blank&#34;&gt;brew&lt;/a&gt;, use the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;/bin/bash -c &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&amp;quot;

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once brew setup is done, use the following command to update any outdated packages:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew update
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use the following command to install Python:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install python3
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To confirm if Python is installed and configured properly, use the command  &lt;code&gt;python3 --version&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;linux-user&#34;&gt;Linux User:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To install Python using  &lt;code&gt;apt&lt;/code&gt;, use the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt install python3

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To install the Python using  &lt;code&gt;yum&lt;/code&gt;, use the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo yum install python3

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To confirm if Python is installed and configured properly, use the command  &lt;code&gt;python3 --version&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;python-shell&#34;&gt;Python shell:&lt;/h2&gt;

&lt;p&gt;The shell is one of the most useful tools you&amp;rsquo;ll come across. The Python shell gives us the power to quickly test any concept before integrating it into our application.&lt;/p&gt;

&lt;p&gt;Go to the terminal or command line prompt. Enter  &lt;code&gt;python3&lt;/code&gt;  command and you&amp;rsquo;ll get the following output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;➜ python3.7
Python 3.7.0 (v3.7.0:1bf9cc5093, Jun 26 2018, 23:26:24)
[Clang 6.0 (clang-600.0.57)] on darwin
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this tutorial, we will learn some concepts with the help of the python3 shell which you can see above. From now on, whenever I mention  &lt;strong&gt;go to the Python shell&lt;/strong&gt;, it means that you have to use the  &lt;code&gt;python3&lt;/code&gt;  command.&lt;/p&gt;

&lt;p&gt;To learn the remaining concepts we will create a file called &amp;ldquo;testing&amp;rdquo; with the extension  &lt;code&gt;.py&lt;/code&gt;. To run this file we will use the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python3 testing.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s go to the Python shell. Type  &lt;code&gt;10 + 12&lt;/code&gt;  after the  &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;  mark. You&amp;rsquo;ll get the output 22:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; 10 + 12
22
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;commenting&#34;&gt;Commenting:&lt;/h2&gt;

&lt;p&gt;Comments make it easy to write code as they help us (and others) understand why a particular piece of code was written. Another awesome thing about comments is that they help improve the readability of the code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Stay Safe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you add the above syntax, the Python interpreter understands that it is a comment. Everything after  &lt;code&gt;#&lt;/code&gt;  is not executed.&lt;/p&gt;

&lt;p&gt;You may be wondering why you should use comments. Imagine you are a developer and you have been assigned to a huge project. The project has more than a thousand lines of code. To understand how everything works you&amp;rsquo;ll need to go line by line and read through all the code.&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s a better solution than that? Ah-ha! Comments. Comments help us understand why a particular piece of code was written and what it returns or does. Consider it as documentation for every piece of code.&lt;/p&gt;

&lt;h2 id=&#34;print&#34;&gt;Print:&lt;/h2&gt;

&lt;p&gt;Other than debugging tools from the editor, the thing which helps developers solve problems most often is a print statement. The print statement is one of the most underrated pieces of syntax in all of programming.&lt;/p&gt;

&lt;p&gt;So how does it help in debugging an issue? Well, consider that you have a module and you want to check the flow of execution to understand or debug it. There are two options. Either you can use a debugger or add a print statement.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not always possible to use a debugger. For example, if you are using the Python shell, then a debugger is not available. In such a scenario, print helps us. Another scenario is when your application is running. You can add a print statement that will display in the logs of your application and monitor them in runtime.&lt;/p&gt;

&lt;p&gt;Python provides a inbuilt print method with the following syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Stay safe...&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;indentation&#34;&gt;Indentation:&lt;/h2&gt;

&lt;p&gt;Another interesting part of this language is indentation. Why? Well, the answer is simple: It makes the code readable and well-formatted. It is compulsory in Python to follow the rules of indentation. If proper indentation is not followed you&amp;rsquo;ll get the following error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;IndentationError: unexpected indent
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See, even the errors in Python are so readable and easy to understand. At the start, you may be annoyed by the compulsion of indentation. But with the time you&amp;rsquo;ll understand that indentation is a developer&amp;rsquo;s friend.&lt;/p&gt;

&lt;h2 id=&#34;variables&#34;&gt;&lt;strong&gt;Variables:&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;As the name implies, a variable is something that can change. A variable is a way of referring to a memory location used by a computer program.&lt;/p&gt;

&lt;p&gt;Well in most programming languages you need to assign the type to a variable. But in Python, you don’t need to. For example, to declare an integer in C, the following syntax is used:  &lt;code&gt;int num = 5;&lt;/code&gt;. In Python it&amp;rsquo;s  &lt;code&gt;num = 5&lt;/code&gt;  .&lt;/p&gt;

&lt;p&gt;Go to the Python shell and perform the operation step by step:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Integer&lt;/code&gt;: Numerical values that can be positive, negative, or zero without a decimal point.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; num = 5
&amp;gt;&amp;gt;&amp;gt; print(num)
5
&amp;gt;&amp;gt;&amp;gt; type(num)
&amp;lt;class &#39;int&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see here we have declared a  &lt;code&gt;num&lt;/code&gt;  variable and assigned 5 as a value. Python&amp;rsquo;s inbuilt &lt;code&gt;type&lt;/code&gt;  method can be used to check the type of variable. When we check the type of  &lt;code&gt;num&lt;/code&gt;  we see the output &lt;code&gt;&amp;lt;class &#39;int&#39;&amp;gt;&lt;/code&gt;. For now, just focus on the  &lt;code&gt;int&lt;/code&gt;  in that output.  &lt;code&gt;int&lt;/code&gt;  represents an integer.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Float&lt;/code&gt;: Similar an integer but with one slight difference – floats are a numerical value with a decimal place.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; num = 5.0
&amp;gt;&amp;gt;&amp;gt; print(num)
5.0
&amp;gt;&amp;gt;&amp;gt; type(num)
&amp;lt;class &#39;float&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here we have assigned a number with a single decimal to the  &lt;code&gt;num&lt;/code&gt;. When we check the type of  &lt;code&gt;num&lt;/code&gt;  we can see it is  &lt;code&gt;float&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;String&lt;/code&gt;: A formation of characters or integers. They can be represented using double or single quotes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; greet = &amp;quot;Hello user&amp;quot;
&amp;gt;&amp;gt;&amp;gt; print(greet)
Hello user
&amp;gt;&amp;gt;&amp;gt; type(greet)
&amp;lt;class &#39;str&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here we have assigned a string to  &lt;code&gt;greet&lt;/code&gt;. The type of greet is a string as you can see from the output.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Boolean&lt;/code&gt;: A binary operator with a True or False value.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; is_available = True
&amp;gt;&amp;gt;&amp;gt; print(is_available)
True
&amp;gt;&amp;gt;&amp;gt; type(is_available)
&amp;lt;class &#39;bool&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here we have assigned a True value to  &lt;code&gt;is_available&lt;/code&gt;. The type of this variable is boolean. You can only assign  &lt;strong&gt;True&lt;/strong&gt;  or  &lt;strong&gt;False&lt;/strong&gt;. Remember  &lt;strong&gt;T&lt;/strong&gt;  and  &lt;strong&gt;F&lt;/strong&gt;  should be capital or it will give an error as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt;&amp;gt;&amp;gt; is_available = true
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
NameError: name &#39;true&#39; is not defined
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;NoneType&lt;/code&gt;: This is used when we don&amp;rsquo;t have the value of the variable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; num = None
&amp;gt;&amp;gt;&amp;gt; print(num)
None
&amp;gt;&amp;gt;&amp;gt; type(num)
&amp;lt;class &#39;NoneType&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;operators&#34;&gt;Operators:&lt;/h2&gt;

&lt;p&gt;Take a look at the image below to see all the arithmetic operators available in Python:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/04/Screenshot-2020-04-30-at-12.28.55-PM.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Operators table&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s go over the operators one by one.&lt;/p&gt;

&lt;h3 id=&#34;arithmetic-operators&#34;&gt;Arithmetic operators&lt;/h3&gt;

&lt;p&gt;These include addition, subtraction, deletion, exponentiation, modulus, and floor division. Also the shorthand syntax for some operators.&lt;/p&gt;

&lt;p&gt;First, we will declare two variables,  &lt;code&gt;a&lt;/code&gt;  and  &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = 6 # Assignment
&amp;gt;&amp;gt;&amp;gt; b = 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s try our basic arithmetic operations:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a + b # Addition
8
&amp;gt;&amp;gt;&amp;gt; a - b # Subtraction
4
&amp;gt;&amp;gt;&amp;gt; a * b # Multiplication
12
&amp;gt;&amp;gt;&amp;gt; a / b # Division
3.0
&amp;gt;&amp;gt;&amp;gt; a ** b # Exponentiation
36
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To test for other arithmetic operations let&amp;rsquo;s change the value of  &lt;code&gt;a&lt;/code&gt;  and  &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = 7
&amp;gt;&amp;gt;&amp;gt; b = 3
&amp;gt;&amp;gt;&amp;gt; a % b # Modulus
1
&amp;gt;&amp;gt;&amp;gt; a // b # Floor division
2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Shorthand arithmetic operations are also available in Python. Refer back to the image above to test them out. To print the output of the shorthand operations use the  &lt;code&gt;print&lt;/code&gt;  statement.&lt;/p&gt;

&lt;h3 id=&#34;comparison-operators&#34;&gt;Comparison operators&lt;/h3&gt;

&lt;p&gt;These include equal to, greater than, and less than.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = 5 # Assign
&amp;gt;&amp;gt;&amp;gt; b = 2 # Assign
&amp;gt;&amp;gt;&amp;gt; a &amp;gt; b # Greater than
True
&amp;gt;&amp;gt;&amp;gt; a &amp;lt; b # less then
False
&amp;gt;&amp;gt;&amp;gt; a == b # Equal to
False
&amp;gt;&amp;gt;&amp;gt; a &amp;gt;= 5 # Greater than or equal to
True
&amp;gt;&amp;gt;&amp;gt; b &amp;lt;= 1 # Less than or equal to
False
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;logical-operators&#34;&gt;Logical operators&lt;/h3&gt;

&lt;p&gt;These operators include not, and, &amp;amp; or.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = 10
&amp;gt;&amp;gt;&amp;gt; b = 2
&amp;gt;&amp;gt;&amp;gt; a == 2 and b == 10 # and
False
&amp;gt;&amp;gt;&amp;gt; a == 10 or b == 10 # or
True
&amp;gt;&amp;gt;&amp;gt; not(a == 10) # not
False
&amp;gt;&amp;gt;&amp;gt; not(a == 2)
True
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conditional-statements&#34;&gt;Conditional Statements:&lt;/h2&gt;

&lt;p&gt;As the name suggests, conditional statements are used to evaluate if a condition is true or false.&lt;/p&gt;

&lt;p&gt;Many times when you are developing an application you need to check a certain condition and do different things depending on the outcome. In such scenarios conditional statements are useful. If, elif and else are the conditional statements used in Python.&lt;/p&gt;

&lt;p&gt;We can compare variables, check if the variable has any value or if it&amp;rsquo;s a boolean, then check if it&amp;rsquo;s true or false. Go to the Python shell and perform the operation step by step:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Condition Number 1:&lt;/strong&gt; We have an integer and 3 conditions here. The first one is the  &lt;code&gt;if&lt;/code&gt;  condition. It checks if the number is equal to 10.&lt;/p&gt;

&lt;p&gt;The second one is the  &lt;code&gt;elif&lt;/code&gt;  condition. Here we are checking if the number is less than 10.&lt;/p&gt;

&lt;p&gt;The last condition is  &lt;code&gt;else&lt;/code&gt;. This condition executes when none of the above conditions match.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; number = 5
&amp;gt;&amp;gt;&amp;gt; if number == 10:
...     print(&amp;quot;Number is 10&amp;quot;)
... elif number &amp;lt; 10:
...     print(&amp;quot;Number is less than 10&amp;quot;)
... else:
...     print(&amp;quot;Number is more than 10&amp;quot;)
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Number is less than 10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; It is not compulsory to check that two conditions are equal in the  &lt;code&gt;if&lt;/code&gt;  condition. You can do it in the  &lt;code&gt;elif&lt;/code&gt;  also.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Condition Number 2:&lt;/strong&gt; We have a boolean and 2 conditions here. Have you noticed how we are checking if the condition is true? If  &lt;code&gt;is_available&lt;/code&gt;, then print &amp;ldquo;Yes it is available&amp;rdquo;, else print &amp;ldquo;Not available&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; is_available = True
&amp;gt;&amp;gt;&amp;gt; if is_available:
...     print(&amp;quot;Yes it is available&amp;quot;)
... else:
...     print(&amp;quot;Not available&amp;quot;)
...

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Yes it is available
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Condition Number 3:&lt;/strong&gt; Here we have reversed condition number 2 with the help of the not operator.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; is_available = True
&amp;gt;&amp;gt;&amp;gt; if not is_available:
...     print(&amp;quot;Not available&amp;quot;)
... else:
...     print(&amp;quot;Yes it is available&amp;quot;)
...

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Yes it is available
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Condition Number 4:&lt;/strong&gt;  Here we are declaring the data as None and checking if the data is available or not.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; data = None
&amp;gt;&amp;gt;&amp;gt; if data:
...     print(&amp;quot;data is not none&amp;quot;)
... else:
...     print(&amp;quot;data is none&amp;quot;)
...

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;data is none
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Condition Number 5:&lt;/strong&gt;  You can also use an inline if in Python. The syntax to achieve this is the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; num_a = 10
&amp;gt;&amp;gt;&amp;gt; num_b = 5
&amp;gt;&amp;gt;&amp;gt; if num_a &amp;gt; num_b: print(&amp;quot;num_a is greater than num_b&amp;quot;)
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;num_a is greater than num_b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Condition Number 6:&lt;/strong&gt; You can also use an inline if else in Python. The syntax to achieve this is the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;expression_if_true if condition else expression_if_false

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; num = 5
&amp;gt;&amp;gt;&amp;gt; print(&amp;quot;Number is five&amp;quot;) if num == 5 else print(&amp;quot;Number is not five&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Number is five
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Conditional Number 7:&lt;/strong&gt; You can also use nested if-else statements. The syntax to achieve this is the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; num = 25
&amp;gt;&amp;gt;&amp;gt; if num &amp;gt; 10:
...     print(&amp;quot;Number is greater than 10&amp;quot;)
...     if num &amp;gt; 20:
...             print(&amp;quot;Number is greater than 20&amp;quot;)
...     if num &amp;gt; 30:
...             print(&amp;quot;Number is greater than 30&amp;quot;)
... else:
...     print(&amp;quot;Number is smaller than 10&amp;quot;)
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Number is greater than 10
Number is greater than 20
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Condition Number 8:&lt;/strong&gt;  You can also use the  &lt;code&gt;and&lt;/code&gt;  operator in a conditional statement. It states if condition1 and condition2 both are true then execute it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; num = 10
&amp;gt;&amp;gt;&amp;gt; if num &amp;gt; 5 and num &amp;lt; 15:
...     print(num)
... else:
...     print(&amp;quot;Number may be small than 5 or larger than 15&amp;quot;)
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As our number is between 5 and 15 we get the output of 10.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Condition Number 9:&lt;/strong&gt;  You can also use the  &lt;code&gt;or&lt;/code&gt;  operator in a conditional statement. It states that if either condition1 or condition2 is true then execute it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; num = 10
&amp;gt;&amp;gt;&amp;gt; if num &amp;gt; 5 or num &amp;lt; 7:
...     print(num)
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Are you confused because the value of  &lt;code&gt;num&lt;/code&gt;  is 10 and our second condition states that  &lt;code&gt;num&lt;/code&gt;  is less than 7? So why do we get the output as 10? It&amp;rsquo;s because of the  &lt;code&gt;or&lt;/code&gt;  condition. As one of the conditions matches, it will execute it.&lt;/p&gt;

&lt;h2 id=&#34;for-loops&#34;&gt;For Loops:&lt;/h2&gt;

&lt;p&gt;Another useful method in any programming language is an iterator. If you have to implement something multiple times, what will you do?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Hello&amp;quot;)
print(&amp;quot;Hello&amp;quot;)
print(&amp;quot;Hello&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well, that&amp;rsquo;s one way to do it. But imagine you have to do it a hundred or a thousand times. Well, that&amp;rsquo;s a lot of print statements we have to write. There&amp;rsquo;s a better way called iterators or loops. We can either use a  &lt;code&gt;for&lt;/code&gt;  or  &lt;code&gt;while&lt;/code&gt;  loop.&lt;/p&gt;

&lt;p&gt;Here we are using the range method. It specifies the range until which the loop should be repeated. By default, the starting point is 0.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; for i in range(3):
...     print(&amp;quot;Hello&amp;quot;)
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Hello
Hello
Hello
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also specify the range in this way  &lt;code&gt;range(1,3)&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; for i in range(1,3):
...     print(&amp;quot;Hello&amp;quot;)
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Hello
Hello
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;ldquo;Hello&amp;rdquo; is only printed two times as we have specified the range here. Think of the range as  &lt;code&gt;Number on right - Number on left&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Well, you can also add an else statement in the for loop.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; for i in range(3):
...     print(&amp;quot;Hello&amp;quot;)
... else:
...     print(&amp;quot;Finished&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Hello
Hello
Hello
Finished
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See our loop iterated 3 times ( 3 - 0 ) and once that is done it executed the else statement.&lt;/p&gt;

&lt;p&gt;We can also nest a for loop inside another for loop.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; for i in range(3):
...     for j in range(2):
...             print(&amp;quot;Inner loop&amp;quot;)
...     print(&amp;quot;Outer loop&amp;quot;)
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Inner loop
Inner loop
Outer loop
Inner loop
Inner loop
Outer loop
Inner loop
Inner loop
Outer loop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see the inner loop print statement executed two times. After that outer loop print statement executed. Again the inner loop executed two times. So what is happening here? If you are confused then consider this to solve it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Our Interpreter comes and sees that there is a  &lt;code&gt;for&lt;/code&gt;  loop. It goes down again and checks there is another  &lt;code&gt;for&lt;/code&gt;  loop.&lt;/li&gt;
&lt;li&gt;So now it will execute the inner  &lt;code&gt;for&lt;/code&gt;  loop two times and exit. Once it&amp;rsquo;s finished it knows that outer for loop has instructed it to repeat two more times.&lt;/li&gt;
&lt;li&gt;It starts again and sees the inner for loop and repeats.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well, you can also choose to pass a certain  &lt;code&gt;for&lt;/code&gt;  loop condition. What does pass mean here? Well whenever that for loop will occur and the Interpreter sees the  &lt;code&gt;pass&lt;/code&gt;  statement it won&amp;rsquo;t execute it and will move to the next line.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; for i in range(3):
...     pass
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will not get any output on the shell.&lt;/p&gt;

&lt;h2 id=&#34;while-loops&#34;&gt;While loops:&lt;/h2&gt;

&lt;p&gt;Another loop or iterator available in Python is the  &lt;code&gt;while&lt;/code&gt;  loop. We can achieve some of the same results with the help of a  &lt;code&gt;while&lt;/code&gt;  loop as we achieved with the  &lt;code&gt;for&lt;/code&gt;  loop.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; i = 0
&amp;gt;&amp;gt;&amp;gt; while i &amp;lt; 5:
...     print(&amp;quot;Number&amp;quot;, i)
...     i += 1
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Number 0
Number 1
Number 2
Number 3
Number 4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remember whenever you use a while loop it&amp;rsquo;s important that you add an increment statement or a statement that will end the while loop at some point. If not then the while loop will execute forever.&lt;/p&gt;

&lt;p&gt;Another option is to add a  &lt;code&gt;break&lt;/code&gt;  statement in a  &lt;code&gt;while&lt;/code&gt;  loop. This will break the loop.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; i = 0
&amp;gt;&amp;gt;&amp;gt; while i &amp;lt; 5:
...     if i == 4:
...             break
...     print(&amp;quot;Number&amp;quot;, i)
...     i += 1
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Number 0
Number 1
Number 2
Number 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we are breaking the  &lt;code&gt;while&lt;/code&gt;  loop if we find the value of  &lt;code&gt;i&lt;/code&gt;  to be 4.&lt;/p&gt;

&lt;p&gt;Another option is to add an  &lt;code&gt;else&lt;/code&gt;  statement in  &lt;code&gt;while&lt;/code&gt;  loop. The statement will be executed after the while loop is completed.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; i = 0
&amp;gt;&amp;gt;&amp;gt; while i &amp;lt; 5:
...     print(&amp;quot;Number&amp;quot;, i)
...     i += 1
... else:
...     print(&amp;quot;Number is greater than 4&amp;quot;)
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Number 0
Number 1
Number 2
Number 3
Number 4
Number is greater than 4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The  &lt;code&gt;continue&lt;/code&gt;  statement can be used to skip the current execution and to proceed to the next.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; i = 0
&amp;gt;&amp;gt;&amp;gt; while i &amp;lt; 6:
...     i += 1
...     if i == 2:
...             continue
...     print(&amp;quot;number&amp;quot;, i)
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;number 1
number 3
number 4
number 5
number 6
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;user-input&#34;&gt;User Input:&lt;/h2&gt;

&lt;p&gt;Imagine you are building a command-line application. Now you have to take the user input and act accordingly. To do that you can use Python&amp;rsquo;s inbuilt  &lt;code&gt;input&lt;/code&gt;  method.&lt;/p&gt;

&lt;p&gt;The syntax to achieve this is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;variable = input(&amp;quot;.....&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; name = input(&amp;quot;Enter your name: &amp;quot;)
Enter your name: Sharvin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you use the  &lt;code&gt;input&lt;/code&gt;  method and press enter, you&amp;rsquo;ll be prompted with the text that you enter in the  &lt;code&gt;input&lt;/code&gt;  method. Let&amp;rsquo;s check if our assignment is working or not:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(name)
Sharvin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There it is! It is working perfectly. Here  &lt;code&gt;Sharvin&lt;/code&gt;  is of the type string.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; type(name)
&amp;lt;class &#39;str&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s try one more example where we will assign an integer rather than a string and check the type.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; date = input(&amp;quot;Today&#39;s date: &amp;quot;)
Today&#39;s date: 12
&amp;gt;&amp;gt;&amp;gt; type(date)
&amp;lt;class &#39;str&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Are you confused? We entered an integer 12 and it&amp;rsquo;s still giving us its type as a string. It&amp;rsquo;s not a bug. It&amp;rsquo;s how input is intended to work. To convert the string to integer we will use typecasting.&lt;/p&gt;

&lt;h2 id=&#34;typecasting&#34;&gt;Typecasting:&lt;/h2&gt;

&lt;p&gt;We saw that the  &lt;code&gt;input&lt;/code&gt;  method returns a string for the integer also. Now if we want to compare this output with another integer then we need a way to convert it back to an integer.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; date_to_int = int(date)
&amp;gt;&amp;gt;&amp;gt; type(date_to_int)
&amp;lt;class &#39;int&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we took the date that we have declared above in the User input section and converted it into the integer using the Python&amp;rsquo;s inbuilt  &lt;code&gt;int&lt;/code&gt;  method. This is called typecasting.&lt;/p&gt;

&lt;p&gt;Basically you can do the following conversion with the help of typecasting:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;integer to string:  &lt;code&gt;str()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;string to integer:  &lt;code&gt;int()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;integer to float:  &lt;code&gt;float()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Conversion from float to integer is also possible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; type(date)
&amp;lt;class &#39;str&#39;&amp;gt;

# Converting from string to float
&amp;gt;&amp;gt;&amp;gt; date_to_float = float(date)
&amp;gt;&amp;gt;&amp;gt; type(date_to_float)
&amp;lt;class &#39;float&#39;&amp;gt;

# Converting from float to string
&amp;gt;&amp;gt;&amp;gt; date_to_string = str(date_to_float)
&amp;gt;&amp;gt;&amp;gt; type(date_to_string)
&amp;lt;class &#39;str&#39;&amp;gt;

# Converting from float to integer
&amp;gt;&amp;gt;&amp;gt; date_to_int = int(date_to_float)
&amp;gt;&amp;gt;&amp;gt; type(date_to_int)
&amp;lt;class &#39;int&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;dictionaries&#34;&gt;Dictionaries:&lt;/h2&gt;

&lt;p&gt;Imagine you want to store some user details. So how can you store these details? Yes, we can use variable to store them as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; fname = &amp;quot;Sharvin&amp;quot;
&amp;gt;&amp;gt;&amp;gt; lname = &amp;quot;Shah&amp;quot;
&amp;gt;&amp;gt;&amp;gt; profession = &amp;quot;Developer&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To access this value we can do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(fname)
Sharvin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But is this an elegant and optimized way to access it? The answer is no. To make it more friendly, let&amp;rsquo;s store the data in a key-value dictionary.&lt;/p&gt;

&lt;p&gt;What is a dictionary? A dictionary is a collection that is unordered and mutable ( i.e. it can be updated ).&lt;/p&gt;

&lt;p&gt;Following is the format of the dictionary:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;data = {
	&amp;quot;key&amp;quot; : &amp;quot;value&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s understand the dictionary further by an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; user_details = {
...     &amp;quot;fname&amp;quot;: &amp;quot;Sharvin&amp;quot;,
...     &amp;quot;lname&amp;quot;: &amp;quot;Shah&amp;quot;,
...     &amp;quot;profession&amp;quot;: &amp;quot;Developer&amp;quot;
... }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;how-to-access-a-value-in-a-dictionary&#34;&gt;How to access a value in a dictionary&lt;/h3&gt;

&lt;p&gt;We can access the value inside a dictionary in two ways. We will take a look at both and then debug them to find out which is better.&lt;/p&gt;

&lt;p&gt;Method 1:  To access the value of  &lt;code&gt;fname&lt;/code&gt;  key from  &lt;code&gt;user_details&lt;/code&gt;  dictionary we can use the following syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; user_details[&amp;quot;fname&amp;quot;]
&#39;Sharvin&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Method 2: We can also access the value of  &lt;code&gt;fname&lt;/code&gt;  key from  &lt;code&gt;user_details&lt;/code&gt;  dictionary using  &lt;code&gt;get&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; user_details.get(&amp;quot;fname&amp;quot;)
&#39;Sharvin&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I know method 1 looks easier to understand. The problem with it occurs when we try to access the data that is not available in our dictionary.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; user_details[&amp;quot;age&amp;quot;]
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
KeyError: &#39;age&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We get a KeyError which indicates that the key is not available. Let&amp;rsquo;s try the same scenario with method 2.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; user_details.get(&amp;quot;age&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We do not get anything printed in our console. Let&amp;rsquo;s debug it further to know why this happened. Assign a variable age to our  &lt;code&gt;get&lt;/code&gt;  operation and we will print it in our console.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; age = user_details.get(&amp;quot;age&amp;quot;)
&amp;gt;&amp;gt;&amp;gt; print(age)
None
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So when  &lt;code&gt;get&lt;/code&gt;  doesn&amp;rsquo;t find the key it sets the value to None. Because of this, we do not get any error. Now you may be wondering which one is right. Most of the time using method 2  makes more sense, but for some strict checking conditions, we need to use method 1.&lt;/p&gt;

&lt;h3 id=&#34;how-to-check-if-a-key-exists&#34;&gt;How to check if a key exists&lt;/h3&gt;

&lt;p&gt;You may be wondering how to check if the dictionary has a particular key or not in it. Python provides the built-in method  &lt;code&gt;keys()&lt;/code&gt;  to solve this issue.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; if &amp;quot;age&amp;quot; in user_details.keys():
...     print(&amp;quot;Yes it is present&amp;quot;)
... else:
...     print(&amp;quot;Not present&amp;quot;)
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will get the following output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Not present
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What if we want to check if the dictionary is empty or not? To understand this let&amp;rsquo;s declare an empty dictionary as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; user_details = {}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we use if-else on a dictionary directly it either returns true if data is present or false if empty.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; if user_details:
...     print(&amp;quot;Not empty&amp;quot;)
... else:
...     print(&amp;quot;Empty&amp;quot;)
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Empty
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can also use Python&amp;rsquo;s inbuilt method  &lt;code&gt;bool&lt;/code&gt;  to check if the dictionary is empty or not. Remember bool returns False if the dictionary is empty and True if it is filled.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; bool(user_details)
False

&amp;gt;&amp;gt;&amp;gt; user_details = {
...     &amp;quot;fname&amp;quot; : &amp;quot;Sharvin&amp;quot;
... }
&amp;gt;&amp;gt;&amp;gt; bool(user_details)
True
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;how-to-update-the-value-of-an-existing-key&#34;&gt;How to update the value of an existing key&lt;/h3&gt;

&lt;p&gt;So now we know how to get a particular key and find if it exists – but how do you update it in the dictionary?&lt;/p&gt;

&lt;p&gt;Declare a dictionary as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; user_details = {
...     &amp;quot;fname&amp;quot;:&amp;quot;Sharvin&amp;quot;,
...     &amp;quot;lname&amp;quot;: &amp;quot;Shah&amp;quot;,
...     &amp;quot;profession&amp;quot;: &amp;quot;Developer&amp;quot;
... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To update the value use the following syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; user_details[&amp;quot;profession&amp;quot;] = &amp;quot;Software Developer&amp;quot;
&amp;gt;&amp;gt;&amp;gt; print(user_details)
{&#39;fname&#39;: &#39;Sharvin&#39;, &#39;lname&#39;: &#39;Shah&#39;, &#39;profession&#39;: &#39;Software Developer&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Updating a value of key in dictionary is same as assigning a value to the variable.&lt;/p&gt;

&lt;h3 id=&#34;how-to-add-a-key-value-pair&#34;&gt;How to add a key-value pair&lt;/h3&gt;

&lt;p&gt;The next question is how to add a new value to the dictionary? Let&amp;rsquo;s add an  &lt;code&gt;age&lt;/code&gt;  key with a value of 100.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; user_details[&amp;quot;age&amp;quot;] = &amp;quot;100&amp;quot;
&amp;gt;&amp;gt;&amp;gt; print(user_details)
{&#39;fname&#39;: &#39;Sharvin&#39;, &#39;lname&#39;: &#39;Shah&#39;, &#39;profession&#39;: &#39;Software Developer&#39;, &#39;age&#39;: &#39;100&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see a new key-value is added in our dictionary.&lt;/p&gt;

&lt;h3 id=&#34;how-to-remove-a-key-value-pair&#34;&gt;How to remove a key-value pair&lt;/h3&gt;

&lt;p&gt;To remove a key-value from the dictionary, Python provides an inbuilt method called  &lt;code&gt;pop&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; user_details.pop(&amp;quot;age&amp;quot;)
&#39;100&#39;

&amp;gt;&amp;gt;&amp;gt; print(user_details)
{&#39;fname&#39;: &#39;Sharvin&#39;, &#39;lname&#39;: &#39;Shah&#39;, &#39;profession&#39;: &#39;Software Developer&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This removes the  &lt;code&gt;age&lt;/code&gt;  key-value pair from the  &lt;code&gt;user_details&lt;/code&gt;  dictionary. We can also use a  &lt;code&gt;del&lt;/code&gt;  operator to delete the value.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; del user_details[&amp;quot;age&amp;quot;]

&amp;gt;&amp;gt;&amp;gt; print(user_details)
{&#39;fname&#39;: &#39;Sharvin&#39;, &#39;lname&#39;: &#39;Shah&#39;, &#39;profession&#39;: &#39;Software Developer&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The  &lt;code&gt;del&lt;/code&gt;  method can also be used to  &lt;strong&gt;delete complete dictionary&lt;/strong&gt;. Use the following syntax to delete complete dictionary  &lt;code&gt;del user_details&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;how-to-copy-a-dictionary&#34;&gt;How to copy a dictionary&lt;/h3&gt;

&lt;p&gt;A dictionary cannot be copied in a traditional way. For example, you cannot copy value of  &lt;code&gt;dictA&lt;/code&gt;  to  &lt;code&gt;dictB&lt;/code&gt;  as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dictA = dictB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To copy the values you need to use the  &lt;code&gt;copy&lt;/code&gt;  method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; dictB = user_details.copy()

&amp;gt;&amp;gt;&amp;gt; print(dictB)
{&#39;fname&#39;: &#39;Sharvin&#39;, &#39;lname&#39;: &#39;Shah&#39;, &#39;profession&#39;: &#39;Software Developer&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;lists&#34;&gt;Lists:&lt;/h2&gt;

&lt;p&gt;Imagine you have a bunch of data that is not labeled. In other words, each piece of data doesn&amp;rsquo;t have a key that defines it. So how will you store it? Lists to the rescue. They are defined as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data = [ 1, 5, &amp;quot;xyz&amp;quot;, True ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A list is a collection of random, ordered, and mutable data (i.e., it can be updated).&lt;/p&gt;

&lt;h3 id=&#34;how-to-access-list-elements&#34;&gt;How to access list elements&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s try to access the first element:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; data[1]
5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wait what happened here? We are trying to access the first element but we are getting the second element. Why?&lt;/p&gt;

&lt;p&gt;Indexing of the list begins from zero. So what do I mean by this? The indexing of the position of the elements begins from zero. The syntax to access an element is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;list[position_in_list]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To access the first element we need to access it as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; data[0]
1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also specify a range to access the element between those positions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; data[2:4]
[&#39;xyz&#39;, True]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, the first value represents the start while the last value represents the position until which we want the value.&lt;/p&gt;

&lt;h3 id=&#34;how-to-add-an-item-to-a-list&#34;&gt;How to add an item to a list&lt;/h3&gt;

&lt;p&gt;To add an item in the list we need to use the append method provided by python.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; data.append(&amp;quot;Hello&amp;quot;)

&amp;gt;&amp;gt;&amp;gt; data
[1, 5, &#39;abc&#39;, True, &#39;Hello&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;how-to-change-the-value-of-an-item&#34;&gt;How to change the value of an item&lt;/h3&gt;

&lt;p&gt;To change the value of an item, use the following syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; data[2] = &amp;quot;abc&amp;quot;

&amp;gt;&amp;gt;&amp;gt; data
[1, 5, &#39;abc&#39;, True]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;how-to-remove-an-item-from-a-list&#34;&gt;How to remove an item from a list&lt;/h3&gt;

&lt;p&gt;To remove an item from a list we can use the Python&amp;rsquo;s inbuilt  &lt;code&gt;remove&lt;/code&gt;  method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; data.remove(&amp;quot;Hello&amp;quot;)
&amp;gt;&amp;gt;&amp;gt; data
[1, 5, &#39;abc&#39;, True]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;how-to-loop-through-a-list&#34;&gt;How to loop through a list&lt;/h3&gt;

&lt;p&gt;We can also loop through the list to find a certain element and operate on it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; for i in data:
...     print(i)
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;1
5
abc
True

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;how-to-check-if-an-item-exists-or-not&#34;&gt;How to check if an item exists or not&lt;/h3&gt;

&lt;p&gt;To check if a particular item exists or not in list we can use if loop as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; if &#39;abc&#39; in data:
...     print(&amp;quot;yess..&amp;quot;)
...
yess..
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;how-to-copy-list-data&#34;&gt;How to copy list data&lt;/h3&gt;

&lt;p&gt;To copy list data from one list to another we need to use  &lt;code&gt;copy&lt;/code&gt;  method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; List2 = data.copy()
&amp;gt;&amp;gt;&amp;gt; List2
[1, 5, &#39;abc&#39;, True]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;how-to-check-the-length-of-a-list&#34;&gt;How to check the length of a list&lt;/h3&gt;

&lt;p&gt;We can also check the length of list using Python&amp;rsquo;s inbuilt  &lt;code&gt;len&lt;/code&gt;  method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; len(data)
4
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;how-to-join-two-lists&#34;&gt;How to join two lists&lt;/h3&gt;

&lt;p&gt;To join two list we can use the  &lt;code&gt;+&lt;/code&gt;  operator.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; list1 = [1, 4, 6, &amp;quot;hello&amp;quot;]
&amp;gt;&amp;gt;&amp;gt; list2 = [2, 8, &amp;quot;bye&amp;quot;]
&amp;gt;&amp;gt;&amp;gt; list1 + list2
[1, 4, 6, &#39;hello&#39;, 2, 8, &#39;bye&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What happens if we try to access a element position which is not available in the list? We get a  &lt;code&gt;list index out of range error&lt;/code&gt;  in such a condition.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; list1[6]
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
IndexError: list index out of range
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;tuples&#34;&gt;Tuples:&lt;/h2&gt;

&lt;p&gt;The tuple is a data type which is ordered and immutable (i.e. data cannot be changed).&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s create a tuple:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; data = ( 1, 3 , 5, &amp;quot;bye&amp;quot;)
&amp;gt;&amp;gt;&amp;gt; data
(1, 3, 5, &#39;bye&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;how-to-access-a-tuple-element&#34;&gt;How to access a tuple element&lt;/h3&gt;

&lt;p&gt;We can access elements in the tuple the same way as we access them in a list:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; data[3]
&#39;bye&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can access the index range as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; data[2:4]
(5, &#39;bye&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;how-to-change-a-tuple-s-value&#34;&gt;How to change a tuple&amp;rsquo;s value&lt;/h3&gt;

&lt;p&gt;If you are thinking wait – how can we change the value of tuple, then you are right my friend. We cannot change the value of tuple as it is immutable. We get the following error if we try to change the value of a tuple:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; data[1] = 8
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
TypeError: &#39;tuple&#39; object does not support item assignment
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;rsquo;s a workaround available to change the value of a tuple:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; data = ( 1, 3 , 5, &amp;quot;bye&amp;quot;)
&amp;gt;&amp;gt;&amp;gt; data_two = list(data) # Convert data to list
&amp;gt;&amp;gt;&amp;gt; data_two[1] = 8 # Update value as list is mutable
&amp;gt;&amp;gt;&amp;gt; data = tuple(data_two) # Convert again to tuple
&amp;gt;&amp;gt;&amp;gt; data
(1, 8, 5, &#39;bye&#39;)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All other methods that we have seen in the list are applicable for the tuple also.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[ Note: Once a tuple is created a new value cannot be added in it. ]&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;sets&#34;&gt;Sets:&lt;/h2&gt;

&lt;p&gt;Sets are another data type in Python which are unordered and unindexed. Sets are declared as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; data = { &amp;quot;hello&amp;quot;, &amp;quot;bye&amp;quot;, 10, 15 }
&amp;gt;&amp;gt;&amp;gt; data
{10, 15, &#39;hello&#39;, &#39;bye&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;how-to-access-a-value&#34;&gt;How to access a value&lt;/h3&gt;

&lt;p&gt;As sets are unindexed we cannot directly access the value in a set. Thus to access the value in the set you need to use a for loop.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; for i in data:
...     print(i)
...

10
15
hello
bye
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;how-to-change-a-value&#34;&gt;How to change a value&lt;/h3&gt;

&lt;p&gt;Once the set is created, values cannot be changed.&lt;/p&gt;

&lt;h3 id=&#34;how-to-add-an-item&#34;&gt;How to add an item&lt;/h3&gt;

&lt;p&gt;To add an item to the set python provides an inbuilt method called  &lt;code&gt;add&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; data.add(&amp;quot;test&amp;quot;)
&amp;gt;&amp;gt;&amp;gt; data
{10, &#39;bye&#39;, &#39;hello&#39;, 15, &#39;test&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;how-to-check-length&#34;&gt;How to check length&lt;/h3&gt;

&lt;p&gt;To check the length of the set we use the  &lt;code&gt;len&lt;/code&gt;  method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; len(data)
5
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;how-to-remove-an-item&#34;&gt;How to remove an item&lt;/h3&gt;

&lt;p&gt;To remove an item use the  &lt;code&gt;remove&lt;/code&gt;  method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; data.remove(&amp;quot;test&amp;quot;)
&amp;gt;&amp;gt;&amp;gt; data
{10, &#39;bye&#39;, &#39;hello&#39;, 15}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;functions-and-arguments&#34;&gt;Functions and Arguments:&lt;/h2&gt;

&lt;p&gt;Functions are a handy way to declare an operation that we want to perform. With the help of functions, you can separate logic according to the operation.&lt;/p&gt;

&lt;p&gt;Functions are a block of code that helps us in the reusability of the repetitive logic. Functions can be both inbuilt and user-defined.&lt;/p&gt;

&lt;p&gt;To declare a function we use the  &lt;code&gt;def&lt;/code&gt;  keyword. Following is the syntax of the functions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def hello_world():
...     print(&amp;quot;Hello world&amp;quot;)
...

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we are declaring a function which, when called, prints a &amp;ldquo;Hello world&amp;rdquo; statement. To call a function we use the following syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; hello_world()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will get the following output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Hello world
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remember that the  &lt;code&gt;()&lt;/code&gt;  brackets in a function call means to execute it. Remove those round brackets and try the call again.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; hello_world
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;rsquo;ll get the following output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;lt;function hello_world at 0x1083eb510&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we remove the round brackets from the function call then it gives us a function reference. Here above as you can see the reference of  &lt;code&gt;function hello_world&lt;/code&gt;  points to this memory address  &lt;code&gt;0x1083eb510&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Consider you have to perform an addition operation. You can do it by declaring  &lt;code&gt;a&lt;/code&gt;  and  &lt;code&gt;b&lt;/code&gt;  and then performing the addition.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = 5
&amp;gt;&amp;gt;&amp;gt; b = 10
&amp;gt;&amp;gt;&amp;gt; a + b
15
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is one way to go. But now consider that the value of  &lt;code&gt;a&lt;/code&gt;  and  &lt;code&gt;b&lt;/code&gt;  have changed and you need to do it again.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = 5
&amp;gt;&amp;gt;&amp;gt; b = 10
&amp;gt;&amp;gt;&amp;gt; a + b
15
&amp;gt;&amp;gt;&amp;gt; a = 2
&amp;gt;&amp;gt;&amp;gt; b = 11
&amp;gt;&amp;gt;&amp;gt; a + b
13
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This still looks doable. Now imagine we need to add a set of two numbers a hundred times. The numbers within the set are different for every calculation. That&amp;rsquo;s a lot to do. Don&amp;rsquo;t worry – we have a function at our disposal to solve this issue.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def add(a,b):
...     print(a+b)
...

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we are adding  &lt;code&gt;a&lt;/code&gt;  and  &lt;code&gt;b&lt;/code&gt;  as a compulsory argument to the  &lt;code&gt;add&lt;/code&gt;  function. To call this function we will use the following syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; add(10,5)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;15
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See how easy it is to define a function and use it? So what happens if we don&amp;rsquo;t pass an argument?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; add()
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
TypeError: add() missing 2 required positional arguments: &#39;a&#39; and &#39;b&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Python throws a TypeError and informs us that the function requires two arguments.&lt;/p&gt;

&lt;p&gt;Can you guess what will happen if we pass a third argument?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; add(10,5,1)
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
TypeError: add() takes 2 positional arguments but 3 were given
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well, Python will inform us that we have passed 3 arguments but there are only 2 positional arguments.&lt;/p&gt;

&lt;p&gt;So what can we do when we don&amp;rsquo;t know how many arguments a function can take? To solve this issue we use args and kwargs.&lt;/p&gt;

&lt;h2 id=&#34;args&#34;&gt;Args:&lt;/h2&gt;

&lt;p&gt;When you don&amp;rsquo;t know how many arguments will be passed to the function, use args and kwargs (kwargs are discussed below).&lt;/p&gt;

&lt;p&gt;To pass n number of arguments to a function we use args. We add a  &lt;code&gt;*&lt;/code&gt;  in front of the argument.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Remember when you attach a  &lt;code&gt;*&lt;/code&gt;  in front, you will be receiving a tuple of arguments.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def add(*num):
...     print(num)
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here  &lt;code&gt;*num&lt;/code&gt;  is an instance of args. Now when we call the function  &lt;code&gt;add&lt;/code&gt;  we can pass in n number of arguments and it won&amp;rsquo;t throw a  &lt;code&gt;TypeError&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; add(1,2,3)
(1, 2, 3)

&amp;gt;&amp;gt;&amp;gt; add(1,2,3,4)
(1, 2, 3, 4)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now to perform the addition operation we will use the Python&amp;rsquo;s builtin function  &lt;code&gt;sum&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def add(*num):
...     print(sum(num))
...

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when we call the add function we will get the following output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; add(1,2,3) # Function call
6
&amp;gt;&amp;gt;&amp;gt; add(1,2,3,4) # Function call
10
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;keyword-arguments&#34;&gt;Keyword Arguments:&lt;/h2&gt;

&lt;p&gt;There are times when we don&amp;rsquo;t know the order of the arguments that will be passed to our function when it&amp;rsquo;s called. In such a scenario we use keyword arguments because you can pass them in any order in your call and our function will know the value. Take a look at this example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def user_details(username, age):
...     print(&amp;quot;Username is&amp;quot;, username)
...     print(&amp;quot;Age is&amp;quot;, age)
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s call this function as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; user_details(&amp;quot;Sharvin&amp;quot;, 100)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will get the following output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Username is Sharvin
Age is 100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well this looks correct, but imagine if we called our function in this way:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; user_details(100, &amp;quot;Sharvin&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will get the following output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Username is 100
Age is Sharvin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This does not look right. What happened is  &lt;code&gt;username&lt;/code&gt;  took the value of 100 while  &lt;code&gt;age&lt;/code&gt;  took the value of &amp;ldquo;Sharvin&amp;rdquo;. In scenarios like this where we don&amp;rsquo;t know the order of arguments we can use keyword arguments when calling the function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; user_details(age=100, username=&amp;quot;Sharvin&amp;quot;)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Username is Sharvin
Age is 100
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;default-argument&#34;&gt;Default Argument:&lt;/h2&gt;

&lt;p&gt;Suppose there is a condition where we are not sure if a particular argument will get a value or not when the function is called. In such a scenario we can use Default arguments as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def user_details(username, age = None):
...     print(&amp;quot;Username is&amp;quot;, username)
...     print(&amp;quot;Age is&amp;quot;, age)
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we are assigning a  &lt;code&gt;None&lt;/code&gt;  to our age argument. If we don&amp;rsquo;t pass a second argument while calling the function it will take None as a default value.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s call the function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; user_details(&amp;quot;Sharvin&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Username is Sharvin
Age is None
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we pass in the second argument it will override None and use it as the value.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; user_details(&amp;quot;Sharvin&amp;quot;, 200)
Username is Sharvin
Age is 200
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But what will happen if we assign the first argument in our function as default and the second as a compulsory argument? Go to the Python shell and try this out:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def user_details(username=None, age):
...     print(&amp;quot;Username is&amp;quot;, username)
...     print(&amp;quot;Age is&amp;quot;, age)
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;rsquo;ll get the following error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1
SyntaxError: non-default argument follows default argument
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Remember:&lt;/strong&gt;  All compulsory arguments must be declared first and then the default argument must be declared.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;kwargs&#34;&gt;kwargs:&lt;/h2&gt;

&lt;p&gt;There can be a situation where you don&amp;rsquo;t know how many keyword arguments will be passed into the function. In such a scenario we can use Kwargs.&lt;/p&gt;

&lt;p&gt;To use kwargs we put  &lt;code&gt;**&lt;/code&gt;  in front of the argument.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Remember:&lt;/strong&gt;  When you attach a  &lt;code&gt;**&lt;/code&gt;  in front, you will be receiving a dictionary of arguments.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let&amp;rsquo;s understand this by example. We will declare a function which accepts username as it&amp;rsquo;s argument with  &lt;code&gt;**&lt;/code&gt;  in front of it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def user(**username):
...     print(username)
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we call the  &lt;code&gt;user&lt;/code&gt;  function as follows we will receive a dictionary.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; user(username1=&amp;quot;xyz&amp;quot;,username2=&amp;quot;abc&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;{&#39;username1&#39;: &#39;xyz&#39;, &#39;username2&#39;: &#39;abc&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So what&amp;rsquo;s happening here? It looks the same as args, right?&lt;/p&gt;

&lt;p&gt;No, it&amp;rsquo;s not. In args, you cannot access a particular value by its name as it is in the form of a tuple. Here we get the data in the form of a dictionary so we can easily access the value.&lt;/p&gt;

&lt;p&gt;Consider this example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def user(**user_details):
...     print(user_details[&#39;username&#39;])
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s call our function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; user(username=&amp;quot;Sharvin&amp;quot;,age=&amp;quot;1000&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you&amp;rsquo;ll get the following output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Sharvin
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;scope&#34;&gt;Scope:&lt;/h2&gt;

&lt;p&gt;A scope defines where a variable or function is available. There are two types of scope in Python: Global and Local.&lt;/p&gt;

&lt;h3 id=&#34;global-scope&#34;&gt;Global Scope&lt;/h3&gt;

&lt;p&gt;A variable or function created in the main body of Python code is called a global variable or function and is part of the global scope. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; greet = &amp;quot;Hello world&amp;quot;
&amp;gt;&amp;gt;&amp;gt; def testing():
...     print(greet)
...
&amp;gt;&amp;gt;&amp;gt; testing()
Hello world
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here the variable  &lt;code&gt;greet&lt;/code&gt;  is available globally because it is declared in the body of the program.&lt;/p&gt;

&lt;h3 id=&#34;local-scope&#34;&gt;Local Scope&lt;/h3&gt;

&lt;p&gt;A variable or function created inside a function is called a local variable or function and is part of the local scope:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def testing():
...     greet = &amp;quot;Hello world&amp;quot;
...     print(greet)
...
&amp;gt;&amp;gt;&amp;gt; testing()
Hello world
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here  &lt;code&gt;greet&lt;/code&gt;  is created inside the testing function and is only available there. Let&amp;rsquo;s try to access it in our main body and see what happens:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(greet)
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
NameError: name &#39;greet&#39; is not defined
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Remember:&lt;/strong&gt; Restart the Python console by pressing ctrl + d and starting the shell again by using the  &lt;code&gt;python3&lt;/code&gt;  command before testing the code above. The first example has you declare the  &lt;code&gt;greet&lt;/code&gt;  variable in the global scope meaning it will still be available in memory when you run the second example.&lt;/p&gt;

&lt;p&gt;As  &lt;code&gt;greet&lt;/code&gt;  is not available globally we get the error that it is not defined.&lt;/p&gt;

&lt;h2 id=&#34;return-statement&#34;&gt;Return Statement:&lt;/h2&gt;

&lt;p&gt;Until now our functions are pretty simple. They are receiving data, processing it, and printing them. But in the real world, you need a function to return output so that it can be used in different operations.&lt;/p&gt;

&lt;p&gt;To achieve this, return statements are used. Remember, return statements are only part of functions and methods. The syntax for the return statement is quite easy.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def add(a, b):
...     return a + b
...
&amp;gt;&amp;gt;&amp;gt; add(1,3)
4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instead of printing our addition, we are returning the output. The value of the returned output can also be stored in a variable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; sum = add(5,10)
&amp;gt;&amp;gt;&amp;gt; print(sum)
15
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;lambda-expression&#34;&gt;Lambda Expression:&lt;/h2&gt;

&lt;p&gt;Consider a situation where you don&amp;rsquo;t want to perform much computation in a function. In such a situation writing a full-fledged function doesn&amp;rsquo;t make sense. To solve this we use a lambda expression or lambda function.&lt;/p&gt;

&lt;p&gt;So what is a lambda expression? It is an anonymous function and they are restricted to a single expression. The lambda expression can take n number of arguments.&lt;/p&gt;

&lt;p&gt;The syntax for lambda expression is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;variable = lambda arguments: operation
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s understand it more by example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; sum = lambda a: a + 10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we have declared a variable  &lt;code&gt;sum&lt;/code&gt;  which we are using to call the lambda function.  &lt;code&gt;a&lt;/code&gt;  represents the argument that is passed to that function.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s call our function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; x(5)
15
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;list-comprehension&#34;&gt;List comprehension:&lt;/h2&gt;

&lt;p&gt;Consider a situation where you want a list of squares. Normally you&amp;rsquo;ll declare a &lt;code&gt;squares&lt;/code&gt;  list and then in a for loop you&amp;rsquo;ll square out the numbers.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; squares = []
&amp;gt;&amp;gt;&amp;gt; for x in range(10):
...     squares.append(x**2)
...
&amp;gt;&amp;gt;&amp;gt; squares
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well this is doable, but we can achieve this in a single line with the help of list comprehension.&lt;/p&gt;

&lt;p&gt;There are two ways to achieve this. Let&amp;rsquo;s understand both of them.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; squares = list(map(lambda x: x**2, range(10)))
&amp;gt;&amp;gt;&amp;gt; squares
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we are using  &lt;code&gt;list&lt;/code&gt;  constructor to build a list and inside that lambda function which squares out the number. Another way to achieve the same result is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; squares = list(x**2 for x in range(10))
&amp;gt;&amp;gt;&amp;gt; squares
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I prefer this way because it is easier to more concise and easier to understand.&lt;/p&gt;

&lt;p&gt;What about when we have a condition where we want a set of two numbers that are the same? Well, we need to write two for loops and one if loop.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see how that will look:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; num_list = []
&amp;gt;&amp;gt;&amp;gt; for i in range(10):
...     for j in range(10):
...             if i == j:
...                     num_list.append((i,j))
...
&amp;gt;&amp;gt;&amp;gt; num_list
[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s a lot of work. And in terms of readability it&amp;rsquo;s hard to understand.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s use list comprehension to achieve the same result.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; num_list = list((i,j) for i in range(10) for j in range(10) if i == j)

&amp;gt;&amp;gt;&amp;gt; num_list
[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See how easy it is to get the same output in a single expression? Well, that&amp;rsquo;s the power of list comprehension.&lt;/p&gt;

&lt;h2 id=&#34;oop-concepts&#34;&gt;OOP concepts:&lt;/h2&gt;

&lt;p&gt;Python is a multi-paradigm programming language. It means Python can use different approaches to solve a problem. One of the paradigms is procedural or functional programming. It structures the code like a recipe – a set of steps in the form of functions and code blocks.&lt;/p&gt;

&lt;p&gt;Another approach to solving the problem is by creating classes and objects. This is known as object-oriented oriented programming. An object is a collection of data (variables) and methods that act on those data. And classes are a blueprint for each object.&lt;/p&gt;

&lt;p&gt;The important thing to understand in object-oriented programming is that objects are at the center of the paradigm – they not only represent the data but also the structure of the program.&lt;/p&gt;

&lt;p&gt;You can choose the paradigm that best suits the problem at hand, mix different paradigms in one program, and/or switch from one paradigm to another as your program evolves.&lt;/p&gt;

&lt;h3 id=&#34;advantages-of-object-oriented-programming&#34;&gt;Advantages of object oriented programming&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Inheritance:&lt;/strong&gt;  This is one of the most useful concepts in OOP. It specifies that the child object will have all the properties and behavior of the parent object. Thus Inheritance allows us to define a class that inherits all the methods and properties from another class.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Polymorphism:&lt;/strong&gt;  To understand polymorphism let’s divide the word into two parts. The first part &amp;ldquo;poly&amp;rdquo; means many and &amp;ldquo;morph&amp;rdquo; means to form or shape. Thus polymorphism means one task can be performed in many different ways.&lt;/p&gt;

&lt;p&gt;For example, you have a class  &lt;code&gt;animal&lt;/code&gt;, and all animals speak. But they speak differently. Here, the “speak” behavior is polymorphic and depends on the animal. So, the abstract “animal” concept does not actually “speak”, but specific animals (like dogs and cats) have a concrete implementation of the action “speak”.&lt;/p&gt;

&lt;p&gt;Polymorphism means the same function name or method name being used for different types.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Encapsulation:&lt;/strong&gt;  In object-oriented programming you can restrict access to methods and variables – we can make the methods and variables private. This can prevent the data from being modified by accident and is known as encapsulation.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First, we will understand classes, objects, and constructors. Then after that, we will look into the above properties again. If you already know about classes, objects, and constructors, feel free to skip ahead.&lt;/p&gt;

&lt;h2 id=&#34;classes&#34;&gt;Classes:&lt;/h2&gt;

&lt;p&gt;There are primitive data structures available in Python, for example, numbers, strings, and lists. These can all be used for simple representations like name, place, cost, and so on.&lt;/p&gt;

&lt;p&gt;But what if we have more complex data? If there is a pattern in the repetition of the properties of that data, what can we do?&lt;/p&gt;

&lt;p&gt;Suppose we have 100 different animals. Every animal has a name, age, legs, etc. What if we want to add other properties to each animal, or one more animal gets added to that list? To manage such a complex scenario we need classes.&lt;/p&gt;

&lt;p&gt;According to the official  &lt;a href=&#34;https://docs.python.org/3/tutorial/classes.html&#34; target=&#34;_blank&#34;&gt;Python documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Classes provide a means of bundling data and functionality together. Creating a new class creates a new type of object, allowing new instances of that type to be made.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Each class instance can have attributes attached to it for maintaining its state. Class instances can also have methods (defined by its class) for modifying its state.&lt;/p&gt;

&lt;p&gt;Syntax of class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class ClassName:

    &amp;lt;expression-1&amp;gt;
    .
    .
    .
    &amp;lt;expression-N&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We use  &lt;code&gt;class&lt;/code&gt;  keyword to define a class. We will define a  &lt;code&gt;class Car&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Car:
    pass
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;methods&#34;&gt;Methods:&lt;/h2&gt;

&lt;p&gt;Methods look the same as functions. The only difference is that methods are dependent on an object. A function can be invoked by name while methods need to be invoked by using their class reference. They are defined inside the class.&lt;/p&gt;

&lt;p&gt;In our example, let&amp;rsquo;s create two methods. One is an engine and another is a wheel. These two methods define the parts available in our car.&lt;/p&gt;

&lt;p&gt;The below program will give us a better idea of classes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; class Car:
...     def engine(self):
...             print(&amp;quot;Engine&amp;quot;)
...

&amp;gt;&amp;gt;&amp;gt; Car().engine()
Engine
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we are calling the  &lt;code&gt;engine&lt;/code&gt;  method by using the  &lt;code&gt;Car()&lt;/code&gt;  reference.&lt;/p&gt;

&lt;p&gt;To summarize, the class provides a blueprint of what should be defined but it does not provide any real content. The  &lt;code&gt;Car&lt;/code&gt;  class above defines the engine but it will not state what a specific car’s engine is. It is specified by the object.&lt;/p&gt;

&lt;h2 id=&#34;objects&#34;&gt;Objects:&lt;/h2&gt;

&lt;p&gt;The object is an instance of the class. Let’s consider the above example of a car. Here Car is our  &lt;code&gt;class&lt;/code&gt;  and  &lt;code&gt;toyota&lt;/code&gt;  is the  &lt;code&gt;object&lt;/code&gt;  of the car. We can create multiple copies of the object. Every object must be defined using the class.&lt;/p&gt;

&lt;p&gt;The syntax for creating an object is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;toyota = Car()

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s consider our  &lt;code&gt;Car&lt;/code&gt;  example to understand objects a bit better:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Car:

    def engine(self):
        print(&amp;quot;Engine&amp;quot;)

    def wheel(self):
        print(&amp;quot;Wheel&amp;quot;)

toyota = Car()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above  &lt;code&gt;toyota = Car()&lt;/code&gt;  is a  &lt;strong&gt;class object&lt;/strong&gt;. Class objects support two kinds of operations: attribute references and instantiation.&lt;/p&gt;

&lt;p&gt;Class instantiation uses function notation. The instantiation operation (“calling” a class object) creates an empty object.&lt;/p&gt;

&lt;p&gt;Now we can call different methods from our class  &lt;code&gt;Car&lt;/code&gt;  using the object  &lt;code&gt;toyota&lt;/code&gt;  that we have created. let’s call the method  &lt;code&gt;engine&lt;/code&gt;  and  &lt;code&gt;wheel&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Open your editor and create a file named  &lt;code&gt;mycar.py&lt;/code&gt;. In that file copy the code below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Car:

    def engine(self):
        print(&amp;quot;Engine&amp;quot;)

    def wheel(self):
        print(&amp;quot;Wheel&amp;quot;)

if __name__ == &amp;quot;__main__&amp;quot;:
    toyota = Car()
    toyota.engine()
    toyota.wheel()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save the above code. Now let&amp;rsquo;s take a closer look at our program.&lt;/p&gt;

&lt;p&gt;Here we are creating a  &lt;code&gt;toyota&lt;/code&gt;  object with the help of  &lt;code&gt;Car&lt;/code&gt;  class. The  &lt;code&gt;toyota.engine()&lt;/code&gt;  is a method object. What exactly happens when a method object is called?&lt;/p&gt;

&lt;p&gt;In the call  &lt;code&gt;toyota.engine()&lt;/code&gt;  doesn&amp;rsquo;t take any argument but if you see the method declaration we can see that it takes a  &lt;code&gt;self&lt;/code&gt;  argument.&lt;/p&gt;

&lt;p&gt;You may be confused about why it is not throwing an error. Well whenever we use a method object, the call  &lt;code&gt;toyota.engine()&lt;/code&gt;  is converted to  &lt;code&gt;Car.engine(toyota)&lt;/code&gt;. We will understand more about the self in the upcoming section.&lt;/p&gt;

&lt;p&gt;Run the program using the following command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python mycar.py

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;rsquo;ll get the following output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Engine
Wheel
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;constructor&#34;&gt;Constructor:&lt;/h2&gt;

&lt;p&gt;The  &lt;code&gt;__init__&lt;/code&gt;  method is the constructor method in Python. The constructor method is used to initialize the data.&lt;/p&gt;

&lt;p&gt;Go to the Python shell and enter this example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; class Car():
...     def __init__(self):
...             print(&amp;quot;Hello I am the constructor method.&amp;quot;)
...

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we will call our class we will get the following output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; toyota = Car()
Hello I am the constructor method.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;  You will never have to call the  &lt;strong&gt;init&lt;/strong&gt;() method – it gets called automatically when you create a class instance.&lt;/p&gt;

&lt;h2 id=&#34;instance-attributes&#34;&gt;Instance attributes:&lt;/h2&gt;

&lt;p&gt;All the classes have objects and all the objects have attributes. Attributes are the properties. We use  &lt;code&gt;__init__()&lt;/code&gt;  method to specify an object’s initial attribute.&lt;/p&gt;

&lt;p&gt;Let’s consider our car example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Car():
    def __init__(self, model): 
        self.model = model  #instance attribute
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In our example, each  &lt;code&gt;Car()&lt;/code&gt;  has a specific model. Thus instance attributes are unique data to each instance.&lt;/p&gt;

&lt;h2 id=&#34;class-attributes&#34;&gt;Class attributes:&lt;/h2&gt;

&lt;p&gt;We saw that instance attributes are specific to each object but class attributes are the same for all the instances. Let us look at the example of the car with the help of class attributes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Car():

    no_of_wheels = 4 #class attribute
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So each car can have different models but all the cars will have only 4 wheels.&lt;/p&gt;

&lt;h2 id=&#34;self&#34;&gt;Self:&lt;/h2&gt;

&lt;p&gt;Now let’s understand what  &lt;code&gt;self&lt;/code&gt;  means and how we use it in object-oriented programming.  &lt;code&gt;self&lt;/code&gt;  represents the instance of a class. By using the  &lt;code&gt;self&lt;/code&gt;  keyword we can access the data initialized in the constructor and methods of a class.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s look at an example of how  &lt;code&gt;self&lt;/code&gt;  can be used. Let’s create a method named  &lt;code&gt;brand&lt;/code&gt;  under our class  &lt;code&gt;Car&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Inside that  &lt;code&gt;__init__&lt;/code&gt;  method, we will pass a model by passing our car’s model name when we are instantiating our object. This name can be accessed anywhere in the class, for example  &lt;code&gt;self.model&lt;/code&gt;  in our case.&lt;/p&gt;

&lt;p&gt;Go to the file named  &lt;code&gt;mycar.py&lt;/code&gt;  and replace old code with this code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Car(): 

  def __init__(self, model): 
    self.model = model
  		
  def brand(self): 
    print(&amp;quot;The brand is&amp;quot;, self.model)  

if __name__ == &amp;quot;__main__&amp;quot;:
  car = Car(&amp;quot;Bmw&amp;quot;)
  car.brand()

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when we run our above program using the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python mycar.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will get the following output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;The brand is Bmw

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;self&lt;/code&gt;  is a convention and not a real Python keyword.  &lt;code&gt;self&lt;/code&gt;  is an argument in a method and we can use another name in place of it. But it is recommended to use  &lt;code&gt;self&lt;/code&gt;  because it increases the readability of your code.&lt;/p&gt;

&lt;h2 id=&#34;inheritance&#34;&gt;Inheritance:&lt;/h2&gt;

&lt;p&gt;Inheritance refers to when a class inherits the property of another class.&lt;/p&gt;

&lt;p&gt;The class from which properties are inherited is called the base class. The class which inherits the property of another class is called the derived class.&lt;/p&gt;

&lt;p&gt;Inheritance can be defined as a parent and child relationship. The child inherits the properties of the parent. Thus making the child a derived class while parent is a base class. Here the term property refers to attributes and methods.&lt;/p&gt;

&lt;p&gt;The syntax for a derived class definition looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class DerivedClassName(BaseClassName):
    &amp;lt;statement-1&amp;gt;
    .
    .
    .
    &amp;lt;statement-N&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s important to note that child classes override or extend the attributes and behaviors of parent class methods. This is to say that child classes inherit all of the the attributes and behaviors of their parents – but they&amp;rsquo;re also able to specify different behavior to follow.&lt;/p&gt;

&lt;p&gt;The most basic type of class is an object, which generally all other classes inherit as their parent. Let’s modify our previous example to understand how inheritance works.&lt;/p&gt;

&lt;p&gt;We will create a base class named  &lt;code&gt;vehicle&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Vehicle:
    def __init__(self, name):
        self.name = name
    
    def getName(self):
        return self.name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have created a class  &lt;code&gt;Vehicle&lt;/code&gt;  and instantiated a constructor with  &lt;code&gt;self.name&lt;/code&gt;  which we are using in  &lt;code&gt;getName&lt;/code&gt;  method. Whenever this method will be called, it will return the  &lt;code&gt;name&lt;/code&gt;  that has been passed when an object is instantiated for that class.&lt;/p&gt;

&lt;p&gt;Now let’s create a child class  &lt;code&gt;Car&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Vehicle:
    def __init__(self, name):
        self.name = name
    
    def getName(self):
        return self.name

class Car(Vehicle):
  pass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Car&lt;/code&gt;  is a child class of  &lt;code&gt;Vehicle&lt;/code&gt;. It inherits all the method and attributes of parent class.&lt;/p&gt;

&lt;p&gt;Now let’s use methods and attribute from the  &lt;code&gt;Vehicle&lt;/code&gt;  class in our child class  &lt;code&gt;Car&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Vehicle:

    def __init__(self, name, color=&#39;silver&#39;):
        self.name = name
        self.color = color
    
    def get_name(self):
        return self.name
    
    def get_color(self):
        return self.color

class Car(Vehicle):
  pass

audi = Car(&amp;quot;Audi r8&amp;quot;)
print(&amp;quot;The name of our car is&amp;quot;, audi.get_name(), &amp;quot;and color is&amp;quot;, audi.get_color())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s understand what we have done here.&lt;/p&gt;

&lt;p&gt;We have declared a class named  &lt;code&gt;Vehicle&lt;/code&gt;  with a constructor that takes name as an argument while color has a default argument.&lt;/p&gt;

&lt;p&gt;We have two methods inside it.  &lt;code&gt;get_name&lt;/code&gt;  returns name while  &lt;code&gt;get_color&lt;/code&gt;  returns the color. We have instantiated an object and passed the car name.&lt;/p&gt;

&lt;p&gt;One thing you&amp;rsquo;ll notice here that we are using base class methods in our child class declaration.&lt;/p&gt;

&lt;p&gt;Run the above program using the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python mycar.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The name of our car is Audi r8 and color is silver

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can also override a parent method or attribute. In the above example, we have defined our vehicle color has silver. But what if the color of our car is black?&lt;/p&gt;

&lt;p&gt;Now for every child class, we can’t make changes in the parent class. There comes the overriding functionality.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Vehicle:

    def __init__(self, name, color=&#39;silver&#39;):
        self.name = name
        self.color = color
    
    def get_name(self):
        return self.name
    
    def get_color(self):
        return self.color

class Car(Vehicle):

    def get_color(self):
        self.color = &#39;black&#39;
        return self.color

audi = Car(&amp;quot;Audi r8&amp;quot;)
print(&amp;quot;The name of our car is&amp;quot;, audi.get_name(), &amp;quot;and color is&amp;quot;, audi.get_color()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see in the above program, I have not instantiated a constructor. The reason behind this is that our child class  &lt;code&gt;Car&lt;/code&gt;  is only using attributes from the  &lt;code&gt;Vehicle&lt;/code&gt;  class and it is already inheriting them. So in such a scenario, there is no need to re-instantiate these attributes.&lt;/p&gt;

&lt;p&gt;Now when we run the above program we will get the following output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;The name of our car is Audi r8 and color is black

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;super&#34;&gt;Super:&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;super()&lt;/code&gt;  returns a temporary object of the superclass that then allows us to call that superclass’s methods.&lt;/p&gt;

&lt;p&gt;Calling the previously built methods with  &lt;code&gt;super()&lt;/code&gt;  saves us from needing to rewrite those methods in our subclass, and allows us to swap out superclasses with minimal code changes. Thus  &lt;code&gt;super&lt;/code&gt;  extends the functionality of the inherited method.&lt;/p&gt;

&lt;p&gt;Let’s extend our car example using  &lt;code&gt;super()&lt;/code&gt;. We will instantiate a constructor with  &lt;code&gt;brand_name&lt;/code&gt;  and  &lt;code&gt;color&lt;/code&gt;  in the parent class,  &lt;code&gt;Vehicle&lt;/code&gt;. Now we will call this constructor from our child class (&lt;code&gt;Car&lt;/code&gt;) using  &lt;code&gt;super&lt;/code&gt;. We will create a  &lt;code&gt;get_description&lt;/code&gt;  method which is returning  &lt;code&gt;self.model&lt;/code&gt;  from  &lt;code&gt;Car&lt;/code&gt;  class and  &lt;code&gt;self.brand_name&lt;/code&gt;,  &lt;code&gt;self.color&lt;/code&gt;  from the  &lt;code&gt;Vehicle&lt;/code&gt;  class.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Vehicle:
 
    def __init__(self, brand_name, color):
        self.brand_name = brand_name
        self.color = color
 
    def get_brand_name(self):
        return self.brand_name
 
class Car(Vehicle):
 
    def __init__(self, brand_name, model, color):  
        super().__init__(brand_name, color)       
        self.model = model
 
    def get_description(self):
        return &amp;quot;Car Name: &amp;quot; + self.get_brand_name() + self.model + &amp;quot; Color:&amp;quot; + self.color
 
c = Car(&amp;quot;Audi &amp;quot;,  &amp;quot;r8&amp;quot;, &amp;quot; Red&amp;quot;)
print(&amp;quot;Car description:&amp;quot;, c.get_description())
print(&amp;quot;Brand name:&amp;quot;, c.get_brand_name())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we run the above program we get following output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Car description: Car Name: Audi r8 Color: Red
Brand name: Audi
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;multiple-inheritance&#34;&gt;Multiple Inheritance:&lt;/h2&gt;

&lt;p&gt;When a class inherits the method and attributes from multiple parent class then it is called multiple inheritance. This allows us to use the property from multiple base classes or parent classes in a derived or child class.&lt;/p&gt;

&lt;p&gt;The general syntax of multiple Inheritance is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class DerivedClassName(Base1, Base2, Base3):
    &amp;lt;statement-1&amp;gt;
    .
    .
    .
    &amp;lt;statement-N&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s extend our vehicle example using the multiple inheritance property. Here in this example, we will create 3 classes i.e.  &lt;code&gt;Vehicle&lt;/code&gt;,  &lt;code&gt;Cost&lt;/code&gt;  and  &lt;code&gt;Car&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The classes  &lt;code&gt;Vehicle&lt;/code&gt;  and  &lt;code&gt;Cost&lt;/code&gt;  will be the Parent class. A  &lt;code&gt;Vehicle&lt;/code&gt;  class represents the general property while the  &lt;code&gt;Cost&lt;/code&gt;  class represents its pricing.&lt;/p&gt;

&lt;p&gt;As  &lt;code&gt;Car&lt;/code&gt;  has a general property and cost will have two parent classes. Thus we will inherit multiple parent classes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Vehicle:

    def __init__(self, brand_name):
        self.brand_name = brand_name
    
    def get_brand_name(self):
        return self.brand_name


class Cost:		

    def __init__(self, cost):
        self.cost = cost
    
    def get_cost(self):
        return self.cost

 
class Car(Vehicle, Cost):	

    def __init__(self, brand_name, model, cost): 
        self.model = model 
        Vehicle.__init__(self, brand_name) 
        Cost.__init__(self, cost) 

    def get_description(self):
        return self.get_brand_name() + self.model + &amp;quot; is the car &amp;quot; + &amp;quot;and it&#39;s cost is &amp;quot; + self.get_cost()
		
c = Car(&amp;quot;Audi &amp;quot;,  &amp;quot;r8&amp;quot;, &amp;quot;2 cr&amp;quot;)
print(&amp;quot;Car description:&amp;quot;, c.get_description())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here you will find one thing in the above program that is different from all the other programs in this tutorial. I have used  &lt;code&gt;Vehicle.__init__(self, brand_name)&lt;/code&gt;  in the constructor of  &lt;code&gt;Car&lt;/code&gt;  class. This is one way of calling attributes from the parent class. Another was is  &lt;code&gt;super&lt;/code&gt;  which I have explained above.&lt;/p&gt;

&lt;p&gt;When we run the above program we will get the following output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Car description: Audi r8 is the car and it&#39;s cost is 2 cr

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Though it can be used effectively, multiple inheritance should be done with care so that our programs do not become ambiguous and difficult for other programmers to understand.&lt;/p&gt;

&lt;h2 id=&#34;polymorphism&#34;&gt;Polymorphism:&lt;/h2&gt;

&lt;p&gt;The word polymorphism means having many forms. In programming, polymorphism means same function name (but different signatures) being uses for different types.&lt;/p&gt;

&lt;p&gt;Let’s extend our car program using polymorphism. We will create two classes,  &lt;code&gt;Car&lt;/code&gt;  and  &lt;code&gt;Bike&lt;/code&gt;. Both the classes have common method or function, but they are printing different data. The program is pretty self-explanatory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Car: 

    def company(self): 
        print(&amp;quot;Car belongs to Audi company.&amp;quot;)
   
    def model(self): 
        print(&amp;quot;The Model is R8.&amp;quot;) 
   
    def color(self): 
        print(&amp;quot;The color is silver.&amp;quot;) 
   
class Bike: 

    def company(self): 
        print(&amp;quot;Bike belongs to pulsar company.&amp;quot;) 
   
    def model(self): 
        print(&amp;quot;The Model is dominar.&amp;quot;) 
   
    def color(self): 
        print(&amp;quot;The color is black.&amp;quot;) 
  
def func(obj): 
    obj.company() 
    obj.model() 
    obj.color() 
   
car = Car() 
bike = Bike() 
   
func(car) 
func(bike)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we run the above code we will get the following output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Car belongs to Audi company.
The Model is R8.
The color is silver.
Bike belongs to pulsar company.
The Model is dominar.
The color is black.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;encapsulation&#34;&gt;Encapsulation:&lt;/h2&gt;

&lt;p&gt;In most object-oriented programming, we can restrict access to methods and variables. This can prevent the data from being modified by accident and is known as encapsulation.&lt;/p&gt;

&lt;p&gt;Let’s use encapsulation in our car example. Now imagine we have a super-secret engine. In the first example, we will hide our engine using a  &lt;strong&gt;private variable&lt;/strong&gt;. In the second example, we will hide our engine using a  &lt;strong&gt;private method&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Car:

  def __init__(self): 
    self.brand_name = &#39;Audi &#39;
    self.model = &#39;r8&#39;
    self.__engine = &#39;5.2 L V10&#39;
    
  def get_description(self):
        return self.brand_name + self.model + &amp;quot; is the car&amp;quot;
  
c = Car()
print(c.get_description)
print(c.__engine)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example  &lt;code&gt;self.__engine&lt;/code&gt;  is a private attribute. When we run this program we will get the following output.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Audi r8 is the car
AttributeError: &#39;Car&#39; object has no attribute &#39;__engine&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We get an error that  &lt;code&gt;Car&lt;/code&gt;  object doesn&amp;rsquo;t have _engine because it is a private object.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We can also define a private method by adding  &lt;code&gt;__&lt;/code&gt;  in front of the method name. Following is the example of how we can define a private method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Car:

  def __init__(self):
      self.brand_name = &#39;Audi &#39;
      self.model = &#39;r8&#39;

  def __engine(self):
      return &#39;5.2 L V10&#39;

  def get_description(self):
      return self.brand_name + self.model + &amp;quot; is the car&amp;quot;
    
    
c = Car()
print(c.get_description())
print(c.__engine()) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example  &lt;code&gt;def __engine(self)&lt;/code&gt;  is a private method. When we run this program we will get the following output.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Audi r8 is the car
AttributeError: &#39;Car&#39; object has no attribute &#39;__engine&#39;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now suppose we want to access the private attribute or method we can do it in the following way:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Car:

  def __init__(self):
      self.brand_name = &#39;Audi &#39;
      self.model = &#39;r8&#39;
      self.__engine_name = &#39;5.2 L V10&#39;

  def __engine(self):
      return &#39;5.2 L V10&#39;

  def get_description(self):
      return self.brand_name + self.model + &amp;quot; is the car&amp;quot;
    
    
c = Car()
print(c.get_description())
print(&amp;quot;Accessing Private Method: &amp;quot;, c._Car__engine()) 
print(&amp;quot;Accessing Private variable: &amp;quot;, c._Car__engine_name)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output of the following program is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Audi r8 is the car
Accessing Private Method:  5.2 L V10
Accessing Private variable:  5.2 L V10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Encapsulation gives you more control over the degree of coupling in your code. It allows a class to change its implementation without affecting other parts of the code.&lt;/p&gt;

&lt;h2 id=&#34;decorator&#34;&gt;Decorator:&lt;/h2&gt;

&lt;p&gt;Imagine you have to extend the functionality of multiple functions. How will you do that?&lt;/p&gt;

&lt;p&gt;Well, one way is you can make functional calls and in that function, you can handle it. Making changes in 30 to 40 function calls and remembering where to place the call is a messy task. But the more elegant way provided by Python is with decorators.&lt;/p&gt;

&lt;p&gt;What is a decorator? A decorator is a function that takes a function and extends its functionality without modifying it explicitly. Well, I understand if you are still confused about what decorators are. Don&amp;rsquo;t worry – we have a tool named example to explain it.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s try an example to understand the decorator. There are two ways to write a decorator.&lt;/p&gt;

&lt;h3 id=&#34;method-1&#34;&gt;Method 1&lt;/h3&gt;

&lt;p&gt;We declare a decorator function and in the arguments of the function we expect the function to be passed as an argument. Inside that, we write a wrapper function where operations are carried out and it is returned.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def my_decorator(func):
...     def wrapper():
...             print(&amp;quot;Line Number 1&amp;quot;)
...             func()
...             print(&amp;quot;Line Number 3&amp;quot;)
...     return wrapper
...
&amp;gt;&amp;gt;&amp;gt; def say_hello():
...     print(&amp;quot;Hello I am line Number 2&amp;quot;)
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To call the function we assign the decorator with  &lt;code&gt;say_hello&lt;/code&gt;  as an argument.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; say_hello = my_decorator(say_hello)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can also check the reference using  &lt;code&gt;say_hello&lt;/code&gt;. We will get the output that tells us it has been wrapped by the  &lt;code&gt;my_decorator&lt;/code&gt;  function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;function my_decorator.&amp;lt;locals&amp;gt;.wrapper at 0x10dc84598&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s call our  &lt;code&gt;say_hello&lt;/code&gt;  function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; say_hello()
Line Number 1
Hello I am line Number 2
Line Number 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See the magic the line &amp;ldquo;Hello I am line Number 2&amp;rdquo; gets printed in between Line Number 1 and 3 because the function call gets executed there.&lt;/p&gt;

&lt;p&gt;Method 1 is clunky, and because of that many people prefer a different approach.&lt;/p&gt;

&lt;h3 id=&#34;method-2&#34;&gt;Method 2&lt;/h3&gt;

&lt;p&gt;Here our decorator declaration remains same but we change how the call is assigned to that decorator. Whichever function requires that decorator wraps itself with  &lt;code&gt;@decorator_name&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def my_decorator(func):
...     def wrapper():
...             print(&amp;quot;Line Number 1&amp;quot;)
...             func()
...             print(&amp;quot;Line Number 3&amp;quot;)
...     return wrapper
...
&amp;gt;&amp;gt;&amp;gt; @my_decorator
... def say_hello():
...     print(&amp;quot;Hello I am line Number 2&amp;quot;)
...
&amp;gt;&amp;gt;&amp;gt; say_hello()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output is the same:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Line Number 1
Hello I am line Number 2
Line Number 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A decorator is a powerful tool and it is used in the following development scenarios of an application:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Setup logger&lt;/li&gt;
&lt;li&gt;Setup configuration&lt;/li&gt;
&lt;li&gt;Setup Error catching&lt;/li&gt;
&lt;li&gt;Extending common functionality for all function and classes&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;exceptions&#34;&gt;Exceptions:&lt;/h2&gt;

&lt;p&gt;When we were learning various syntax we came across various errors. Those errors occurred because of the syntax. But in a real-world application, errors (or commonly known as bugs) not only occur due to syntax issues but also because of network errors or some other cause.&lt;/p&gt;

&lt;p&gt;To handle these issues we use Try - Except. In  &lt;code&gt;try&lt;/code&gt;  block, we write the expression that we want to be executed, while in  &lt;code&gt;except&lt;/code&gt;  block we catch the error. The Try-Except block looks as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;try:
	expression
except:
	catch error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s understand this by an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; try:
...     print(value)
... except:
...     print(&amp;quot;Something went wrong&amp;quot;)
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we are trying to print the value variable but it is not defined. So we get the following output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Something went wrong
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may be thinking that the line &amp;ldquo;something went wrong&amp;rdquo; is not that helpful. So how can we know what went wrong here?&lt;/p&gt;

&lt;p&gt;We can print the exception and use it to find out what went wrong. Let&amp;rsquo;s test this in our example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; try:
...     print(value)
... except Exception as e:
...     print(e)
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the result is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;name &#39;value&#39; is not defined
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Whoa! That&amp;rsquo;s magic. It is notifying me that &amp;lsquo;value&amp;rsquo; is not defined.&lt;/p&gt;

&lt;p&gt;Python also provides a tool named  &lt;code&gt;raise&lt;/code&gt;. Suppose you don&amp;rsquo;t want a certain condition to occur and if it occurs you want to raise it. In such condition you can use  &lt;code&gt;raise&lt;/code&gt;. Consider the example below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; i = 5
&amp;gt;&amp;gt;&amp;gt; if i &amp;lt; 6:
...     raise Exception(&amp;quot;Number below 6 are not allowed&amp;quot;)
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output we get is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 2, in &amp;lt;module&amp;gt;
Exception: Number below 6 are not allowed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are many sub-types of Exceptions, so I recommend that you go through the  &lt;a href=&#34;https://docs.python.org/3/tutorial/errors.html#errors-and-exceptions&#34; target=&#34;_blank&#34;&gt;Python Documentation&lt;/a&gt;  to understand them.&lt;/p&gt;

&lt;h2 id=&#34;package-import&#34;&gt;Package Import:&lt;/h2&gt;

&lt;p&gt;You have learned the basics of Python and now you are all ready to build awesome applications. But hold on – we are still missing some important topics.&lt;/p&gt;

&lt;p&gt;Without package import, you will be forced to write everything in one single file. Imagine what a mess it will be.&lt;/p&gt;

&lt;p&gt;Create two files named  &lt;code&gt;main.py&lt;/code&gt;  and  &lt;code&gt;hello.py&lt;/code&gt;. Remember both file needs to be in the same directory.&lt;/p&gt;

&lt;p&gt;Under  &lt;code&gt;hello.py&lt;/code&gt;  copy paste the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def say_hello():
    print(&amp;quot;Hello world&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Under  &lt;code&gt;main.py&lt;/code&gt;  copy paste the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import hello

if __name__ == &amp;quot;__main__&amp;quot;:
    hello.say_hello()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In  &lt;code&gt;hello.py&lt;/code&gt;  we have declared a  &lt;code&gt;say_hello()&lt;/code&gt;  function which prints &amp;ldquo;Hello world&amp;rdquo;. In  &lt;code&gt;main.py&lt;/code&gt;  you&amp;rsquo;ll see an import statement. We are importing the hello module and calling the  &lt;code&gt;say_hello()&lt;/code&gt;  function from that module.&lt;/p&gt;

&lt;p&gt;Run our program using the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;➜ python main.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Hello world
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s understand how to import a module which is in another directory.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s create a directory named &amp;ldquo;data&amp;rdquo; and move our  &lt;code&gt;hello.py&lt;/code&gt;  inside that directory.&lt;/p&gt;

&lt;p&gt;Go to the  &lt;code&gt;main.py&lt;/code&gt;  and change the previous import statement.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from data import hello

if __name__ == &amp;quot;__main__&amp;quot;:
    hello.say_hello()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are two ways to import from a directory.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Method 1:  &lt;code&gt;from data import hello&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Method 2:  &lt;code&gt;import data.hello&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I prefer method 1 because of its readability. You can choose whichever method looks better to you.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s run our application using the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;➜ python main.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And an error occurs. Wait why did this happen? We did everything right. Let&amp;rsquo;s go through the error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Traceback (most recent call last):
  File &amp;quot;main.py&amp;quot;, line 1, in &amp;lt;module&amp;gt;
    from data import hello
ImportError: No module named data
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well Python is telling us that it doesn&amp;rsquo;t recognize a module named data. To solve this issue create a  &lt;code&gt;__init__.py&lt;/code&gt;  inside data directory. Leave the file blank and run the program again and you&amp;rsquo;ll get the following output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Hello world
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well python by default does not treat a directory as a module. To inform Python to treat a directory as a module,  &lt;code&gt;__init__.py&lt;/code&gt;  is required.&lt;/p&gt;

&lt;h2 id=&#34;json-handling&#34;&gt;JSON Handling:&lt;/h2&gt;

&lt;p&gt;If you have worked previously with web development or app development you may be aware that all the API calls take place in JSON format. While JSON looks similar to a dictionary in Python, remember that it&amp;rsquo;s very different.&lt;/p&gt;

&lt;p&gt;To handle JSON, Python provides an inbuilt  &lt;code&gt;json&lt;/code&gt;  package. To use this package we need to import it as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This library provides two methods which help us in handling the JSON. Let&amp;rsquo;s understand them one by one.&lt;/p&gt;

&lt;h3 id=&#34;json-loads&#34;&gt;JSON loads:&lt;/h3&gt;

&lt;p&gt;If you have a JSON string and want to convert it back to a dictionary you need to use the  &lt;code&gt;loads&lt;/code&gt;  method. Go to the Python shell and copy-paste the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import json
&amp;gt;&amp;gt;&amp;gt; json_string = &#39;{ &amp;quot;user_name&amp;quot;:&amp;quot;Sharvin&amp;quot;, &amp;quot;age&amp;quot;:1000}&#39; #JSON String
&amp;gt;&amp;gt;&amp;gt; type(json_string)
&amp;lt;class &#39;str&#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; data = json.loads(json_string)
&amp;gt;&amp;gt;&amp;gt; type(data)
&amp;lt;class &#39;dict&#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; data
{&#39;user_name&#39;: &#39;Sharvin&#39;, &#39;age&#39;: 1000}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;json-dumps&#34;&gt;JSON dumps:&lt;/h3&gt;

&lt;p&gt;Now let&amp;rsquo;s convert our data back to the JSON string format using the  &lt;code&gt;dumps&lt;/code&gt;  method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; jsonString = json.dumps(data)
&amp;gt;&amp;gt;&amp;gt; type(jsonString)
&amp;lt;class &#39;str&#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; jsonString
&#39;{&amp;quot;user_name&amp;quot;: &amp;quot;Sharvin&amp;quot;, &amp;quot;age&amp;quot;: 1000}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To learn more about JSON Manipulation, go through the  &lt;a href=&#34;https://docs.python.org/3/library/json.html&#34; target=&#34;_blank&#34;&gt;Python Documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;that-s-it&#34;&gt;That&amp;rsquo;s it!&lt;/h2&gt;

&lt;p&gt;And we&amp;rsquo;re done! I hope you now understand the basics of Python. Congratulations! That&amp;rsquo;s a huge achievement.&lt;/p&gt;

&lt;p&gt;Feedback is welcomed. Also if you want to learn about any other topic you can tweet the topic name on Twitter and include my Twitter handle. [  &lt;strong&gt;@sharvinshah26&lt;/strong&gt;  ]&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Feel free to connect with me on  &lt;a href=&#34;https://twitter.com/sharvinshah26&#34; target=&#34;_blank&#34;&gt;Twitter&lt;/a&gt;  and  &lt;a href=&#34;https://github.com/Sharvin26&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;**Reference : &lt;a href=&#34;https://www.freecodecamp.org/news/the-ultimate-guide-to-python-from-beginner-to-intermediate-to-pro/&#34; target=&#34;_blank&#34;&gt;freeCodeCamp&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Regular Expressions</title>
      <link>https://example.com/post/python/tutorials/regular-expressions/</link>
      <pubDate>Wed, 15 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/post/python/tutorials/regular-expressions/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;featured.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Regular expressions are essentially a highly specialized programming language embedded inside Python that empowers you to specify the rules for the set of possible strings that you want to match.&lt;/p&gt;

&lt;p&gt;In Python you need the  &lt;strong&gt;re&lt;/strong&gt;  module for regular expressions usage. The grammar overview is on the bottom of this page.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Related course:&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://gum.co/dcsp&#34; target=&#34;_blank&#34;&gt;Python Programming Bootcamp: Go from zero to hero&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-match-function&#34;&gt;The Match function&lt;/h2&gt;

&lt;p&gt;The match function is defined as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;re.match(pattern, string)  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The parameters are:.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameters&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;pattern&lt;/td&gt;
&lt;td&gt;a regular expression&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;the input string&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;If you want to match a string to a numberic sequence of exactly five, you can use this code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;#!/usr/bin/python  
import re  
  
input = raw_input(&amp;quot;Enter an input string:&amp;quot;)  
m = re.match(&#39;\d{5}\Z&#39;,input)  
  
if m:  
 print(&amp;quot;True&amp;quot;)  
else:  
 print(&amp;quot;False&amp;quot;)  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example outputs:&lt;/p&gt;

&lt;h2 id=&#34;email-validation-regex&#34;&gt;Email validation regex&lt;/h2&gt;

&lt;p&gt;We can use the same function to validate  &lt;em&gt;email address&lt;/em&gt;. The grammar rules are seen in re.compile and in the grammar table.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;String	Match
12345	True
12358	True
55555	True
123	False
123K5	False
5555555	False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;#!/usr/bin/python  
import re  
  
input = raw_input(&amp;quot;Enter an input string:&amp;quot;)  
m = re.match(&#39;[^@]+@[^@]+\.[^@]+&#39;,input)  
  
if m:  
 print(&amp;quot;True&amp;quot;)  
else:  
 print(&amp;quot;False&amp;quot;)  
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-search-function&#34;&gt;The Search Function&lt;/h2&gt;

&lt;p&gt;The search function is defined as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;re.search(pattern, string)  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The parameters are:&lt;br /&gt;
Parameter   Description.&lt;br /&gt;
pattern a regular expression, defines the string to be searched
string  the search space&lt;/p&gt;

&lt;p&gt;To search if an e-mail address is in a string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;#!/usr/bin/python  
import re  
  
input = &amp;quot;Contact me by test@example.com or at the office.&amp;quot;  
  
m = re.search(&#39;[^@]+@[^@]+\.[^@]+&#39;,input)  
  
if m:  
 print(&amp;quot;String found.&amp;quot;)  
else:  
 print(&amp;quot;Nothing found.&amp;quot;)  
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;regular-expression-examples&#34;&gt;Regular Expression Examples&lt;/h2&gt;

&lt;p&gt;A few examples of regular expressions:&lt;/p&gt;

&lt;h2 id=&#34;regular-expression-grammar&#34;&gt;Regular Expression Grammar&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Example&lt;/th&gt;
&lt;th&gt;Regex&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;IP address&lt;/td&gt;
&lt;td&gt;(([2][5][0-5].)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Email&lt;/td&gt;
&lt;td&gt;[^@]+@[^@]+.[^@]+&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Date&lt;/td&gt;
&lt;td&gt;MM/DD/YY (\d+/\d+/\d+)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Integer (positive)&lt;/td&gt;
&lt;td&gt;(?&amp;lt;![-.])\b[0-9]+\b(?!.[0-9])&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Integer&lt;/td&gt;
&lt;td&gt;[+-]?(?&amp;lt;!.)\b[0-9]+\b(?!.[0-9])&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Float&lt;/td&gt;
&lt;td&gt;(?&amp;lt;=&amp;gt;)\d+.\d+&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Hexadecimal&lt;/td&gt;
&lt;td&gt;\s–([0-9a-fA-F]+)(?:–)?\s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Overview of the regex grammar:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Regex&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;\d&lt;/td&gt;
&lt;td&gt;Matches any decimal digit; this is equivalent to the class [0-9]&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;\D&lt;/td&gt;
&lt;td&gt;Matches any non-digit character; this is equivalent to the class [^0-9].&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;\s&lt;/td&gt;
&lt;td&gt;Matches any whitespace character; this is equivalent to the class [ \t\n\r\f\v].&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;\S&lt;/td&gt;
&lt;td&gt;Matches any non-whitespace character; this is equivalent to the class [^ \t\n\r\f\v].&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;\w&lt;/td&gt;
&lt;td&gt;Matches any alphanumeric character; this is equivalent to the class [a-zA-Z0-9_].&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;\W&lt;/td&gt;
&lt;td&gt;Matches any non-alphanumeric character; this is equivalent to the class [^a-zA-Z0-9_].&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;\Z&lt;/td&gt;
&lt;td&gt;Matches only at end of string&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;[..]&lt;/td&gt;
&lt;td&gt;Match single character in brackets&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;[^..]&lt;/td&gt;
&lt;td&gt;Match any single character not in brackets&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;.&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Match any character except newline&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;$&lt;/td&gt;
&lt;td&gt;Match the end of the string&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;*&lt;/td&gt;
&lt;td&gt;Match 0 or more repetitions&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;+&lt;/td&gt;
&lt;td&gt;1 or more repetitions&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;{m}&lt;/td&gt;
&lt;td&gt;Exactly m copies of the previous RE should be matched.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;`&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;?&lt;/td&gt;
&lt;td&gt;0 or 1 repetitions of the preceding RE&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;[a-z]&lt;/td&gt;
&lt;td&gt;Any lowercase character&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;[A-Z]&lt;/td&gt;
&lt;td&gt;Any uppercase character&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;[a-zA-Z]&lt;/td&gt;
&lt;td&gt;Any character&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;[0-9]&lt;/td&gt;
&lt;td&gt;Any digit&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;Reference : &lt;a href=&#34;https://pythonspot.com/regular-expressions/&#34; target=&#34;_blank&#34;&gt;pythonspot.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>The Ultimate Python Beginner&#39;s Handbook</title>
      <link>https://example.com/post/python/tutorials/beginner_handbook/</link>
      <pubDate>Wed, 15 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/post/python/tutorials/beginner_handbook/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/size/w2000/2020/04/cover-post-smaller.png&#34; alt=&#34;The Ultimate Python Beginner&#39;s Handbook&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Python has become one of the fastest-growing programming languages over the past few years.&lt;/p&gt;

&lt;p&gt;Not only it is widely used, it is also an awesome language to tackle if you want to get into the world of programming.&lt;/p&gt;

&lt;p&gt;This Python Guide for Beginners allows you to learn the core of the language in a matter of hours instead of weeks.&lt;/p&gt;

&lt;p&gt;Quick info:  &lt;a href=&#34;https://renanmf.com/python-guide-beginners/&#34; target=&#34;_blank&#34;&gt;You can download a PDF version of this Python Guide for Beginners&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ready to dive in?&lt;/p&gt;

&lt;h1 id=&#34;table-of-contents&#34;&gt;Table of contents&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-python-guide-for-beginners/#introductiontopython&#34; target=&#34;_blank&#34;&gt;Introduction to Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-python-guide-for-beginners/#installingpython3&#34; target=&#34;_blank&#34;&gt;Installing Python 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-python-guide-for-beginners/#runningcode&#34; target=&#34;_blank&#34;&gt;Running Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-python-guide-for-beginners/#syntax&#34; target=&#34;_blank&#34;&gt;Syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-python-guide-for-beginners/#comments&#34; target=&#34;_blank&#34;&gt;Comments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-python-guide-for-beginners/#variables&#34; target=&#34;_blank&#34;&gt;Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-python-guide-for-beginners/#types&#34; target=&#34;_blank&#34;&gt;Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-python-guide-for-beginners/#typecasting&#34; target=&#34;_blank&#34;&gt;Typecasting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-python-guide-for-beginners/#userinput&#34; target=&#34;_blank&#34;&gt;User Input&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-python-guide-for-beginners/#operators&#34; target=&#34;_blank&#34;&gt;Operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-python-guide-for-beginners/#conditionals&#34; target=&#34;_blank&#34;&gt;Conditionals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-python-guide-for-beginners/#lists&#34; target=&#34;_blank&#34;&gt;Lists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-python-guide-for-beginners/#tuples&#34; target=&#34;_blank&#34;&gt;Tuples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-python-guide-for-beginners/#sets&#34; target=&#34;_blank&#34;&gt;Sets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-python-guide-for-beginners/#dictionaries&#34; target=&#34;_blank&#34;&gt;Dictionaries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-python-guide-for-beginners/#whileloops&#34; target=&#34;_blank&#34;&gt;while Loops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-python-guide-for-beginners/#forloops&#34; target=&#34;_blank&#34;&gt;for Loops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-python-guide-for-beginners/#functions&#34; target=&#34;_blank&#34;&gt;Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-python-guide-for-beginners/#scope&#34; target=&#34;_blank&#34;&gt;Scope&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-python-guide-for-beginners/#listcomprehensions&#34; target=&#34;_blank&#34;&gt;List Comprehensions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-python-guide-for-beginners/#lambdafunctions&#34; target=&#34;_blank&#34;&gt;Lambda Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-python-guide-for-beginners/#modules&#34; target=&#34;_blank&#34;&gt;Modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-python-guide-for-beginners/#if__name____main__&#34; target=&#34;_blank&#34;&gt;if  &lt;strong&gt;name&lt;/strong&gt;  == &amp;lsquo;&lt;strong&gt;main&lt;/strong&gt;&amp;lsquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-python-guide-for-beginners/#files&#34; target=&#34;_blank&#34;&gt;Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-python-guide-for-beginners/#classesandobjects&#34; target=&#34;_blank&#34;&gt;Classes and Objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-python-guide-for-beginners/#inheritance&#34; target=&#34;_blank&#34;&gt;Inheritance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-python-guide-for-beginners/#exceptions&#34; target=&#34;_blank&#34;&gt;Exceptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-python-guide-for-beginners/#conclusion&#34; target=&#34;_blank&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;introduction-to-python&#34;&gt;Introduction to Python&lt;/h1&gt;

&lt;p&gt;Python was created in 1990 by Guido van Rossum in Holland.&lt;/p&gt;

&lt;p&gt;One of the objectives of the language was to be accessible to non-programmers.&lt;/p&gt;

&lt;p&gt;Python was also designed to be a second language for programmers to learn due to its low learning curve and ease of use.&lt;/p&gt;

&lt;p&gt;Python runs on Mac, Linux, Windows, and many other platforms.&lt;/p&gt;

&lt;p&gt;Python is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Interpreted: it can execute at runtime, and changes in a program are instantly perceptible. To be very technical, Python has a compiler. The difference when compared to Java or C++ is how transparent and automatic it is. With Python, we don&amp;rsquo;t have to worry about the compilation step as it&amp;rsquo;s done in real-time. The tradeoff is that interpreted languages are usually slower than compiled ones.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Semantically Dynamic: you don&amp;rsquo;t have to specify types for variables and there is nothing that makes you do it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Object-Oriented: everything in Python is an object. But you can choose to write code in an object-oriented, procedural, or even functional way.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;High level: you don&amp;rsquo;t have to deal with low-level machine details.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Python has been growing a lot recently partly because of its many uses in the following areas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;System scripting: it&amp;rsquo;s a great tool to automate everyday repetitive tasks.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Data Analysis: it is a great language to experiment with and has tons of libraries and tools to handle data, create models, visualize results and even deploy solutions. This is used in areas like Finance, E-commerce, and Research.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Web Development: frameworks like Django and Flask allow the development of web applications, API&amp;rsquo;s, and websites.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Machine Learning: Tensorflow and Pytorch are some of the libraries that allow scientists and the industry to develop and deploy Artificial Intelligence solutions in Image Recognition, Health, Self-driving cars, and many other fields.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can easily organize your code in modules and reuse them or share them with others.&lt;/p&gt;

&lt;p&gt;Finally, we have to keep in mind that Python had breaking changes between versions 2 and 3. And since Python 2 support ended in 2020, this article is solely based on Python 3.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s get started.&lt;/p&gt;

&lt;h1 id=&#34;installing-python-3&#34;&gt;Installing Python 3&lt;/h1&gt;

&lt;p&gt;If you use a Mac or Linux you already have Python installed. But Windows doesn&amp;rsquo;t come with Python installed by default.&lt;/p&gt;

&lt;p&gt;You also might have Python 2, and we are going to use Python 3. So you should check to see if you have Python 3 first.&lt;/p&gt;

&lt;p&gt;Type the following in your terminal.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python3 -V

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice the uppercase  &lt;code&gt;V&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If your result is something similar to &amp;lsquo;Python 3.x.y&amp;rsquo;, for instance,  &lt;code&gt;Python 3.8.1&lt;/code&gt;, then you are ready to go.&lt;/p&gt;

&lt;p&gt;If not, follow the next instructions according to your Operating System.&lt;/p&gt;

&lt;h2 id=&#34;installing-python-3-on-windows&#34;&gt;Installing Python 3 on Windows&lt;/h2&gt;

&lt;p&gt;Go to  &lt;a href=&#34;https://www.python.org/downloads/&#34; target=&#34;_blank&#34;&gt;https://www.python.org/downloads/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Download the latest version.&lt;/p&gt;

&lt;p&gt;After the download, double-click the installer.&lt;/p&gt;

&lt;p&gt;On the first screen, check the box indicating to &amp;ldquo;Add Python 3.x to PATH&amp;rdquo; and then click on &amp;ldquo;Install Now&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Wait for the installation process to finish until the next screen with the message &amp;ldquo;Setup was successful&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Click on &amp;ldquo;Close&amp;rdquo;.&lt;/p&gt;

&lt;h2 id=&#34;installing-python-3-on-mac&#34;&gt;Installing Python 3 on Mac&lt;/h2&gt;

&lt;p&gt;Install  &lt;a href=&#34;https://itunes.apple.com/br/app/xcode/id497799835&#34; target=&#34;_blank&#34;&gt;XCode&lt;/a&gt;  from the App Store.&lt;/p&gt;

&lt;p&gt;Install the command line tools by running the following in your terminal.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;xcode-select --install

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I recommend using Homebrew. Go to  &lt;a href=&#34;https://brew.sh/&#34; target=&#34;_blank&#34;&gt;https://brew.sh/&lt;/a&gt;  and follow the instructions on the first page to install it.&lt;/p&gt;

&lt;p&gt;After installing Homebrew, run the following  &lt;code&gt;brew&lt;/code&gt;  commands to install Python 3.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew update
brew install python3

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Homebrew already adds Python 3 to the PATH, so you don&amp;rsquo;t have to do anything else.&lt;/p&gt;

&lt;h2 id=&#34;installing-python-3-on-linux&#34;&gt;Installing Python 3 on Linux&lt;/h2&gt;

&lt;p&gt;To install using  &lt;code&gt;apt&lt;/code&gt;, available in Ubuntu and Debian, enter the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt install python3

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To install using  &lt;code&gt;yum&lt;/code&gt;, available in RedHat and CentOS, enter the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo yum install python3

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;running-code&#34;&gt;Running Code&lt;/h1&gt;

&lt;p&gt;You can run Python code directly in the terminal as commands or you can save the code in a file with the  &lt;code&gt;.py&lt;/code&gt;  extension and run the Python file.&lt;/p&gt;

&lt;h2 id=&#34;terminal&#34;&gt;Terminal&lt;/h2&gt;

&lt;p&gt;Running commands directly in the terminal is recommended when you want to run something simple.&lt;/p&gt;

&lt;p&gt;Open the command line and type  &lt;code&gt;python3&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;renan@mypc:~$ python3

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see something like this in your terminal indicating the version (in my case, Python 3.6.9), the operating system (I&amp;rsquo;m using Linux), and some basic commands to help you.&lt;/p&gt;

&lt;p&gt;The  &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;  tells us we are in the Python console.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Python 3.6.9 (default, Nov  7 2019, 10:44:02) 
[GCC 8.3.0] on linux
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s test it by running our first program to perform basic math and add two numbers.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt;&amp;gt;&amp;gt; 2 + 2

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;4

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To exit the Python console simply type  &lt;code&gt;exit()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt;&amp;gt;&amp;gt; exit()

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;running-py-files&#34;&gt;Running  &lt;code&gt;.py&lt;/code&gt;  files&lt;/h2&gt;

&lt;p&gt;If you have a complex program, with many lines of code, the Python console isn&amp;rsquo;t the best option.&lt;/p&gt;

&lt;p&gt;The alternative is simply to open a text editor, type the code, and save the file with a  &lt;code&gt;.py&lt;/code&gt;  extension.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s do that, create a file called  &lt;code&gt;second_program.py&lt;/code&gt;  with the following content.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;Second Program&#39;)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The  &lt;code&gt;print()&lt;/code&gt;  function prints a message on the screen.&lt;/p&gt;

&lt;p&gt;The message goes inside the parentheses with either single quotes or double quotes, both work the same.&lt;/p&gt;

&lt;p&gt;To run the program, on your terminal do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;renan@mypc:~$ python3 second_program.py

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Second Program

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;syntax&#34;&gt;Syntax&lt;/h1&gt;

&lt;p&gt;Python is known for its clean syntax.&lt;/p&gt;

&lt;p&gt;The language avoids using unnecessary characters to indicate some specificity.&lt;/p&gt;

&lt;h2 id=&#34;semicolons&#34;&gt;Semicolons&lt;/h2&gt;

&lt;p&gt;Python doesn&amp;rsquo;t use semicolons to finish lines. A new line is enough to tell the interpreter that a new command is beginning.&lt;/p&gt;

&lt;p&gt;The  &lt;code&gt;print()&lt;/code&gt;  method will display something.&lt;/p&gt;

&lt;p&gt;In this example, we have two commands that will display the messages inside the single quotes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;First command&#39;)
print(&#39;Second command&#39;)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;First command
Second command

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But the following is  &lt;strong&gt;wrong&lt;/strong&gt;  due to the semicolons in the end:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;First command&#39;);
print(&#39;Second command&#39;);

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;indentation&#34;&gt;Indentation&lt;/h2&gt;

&lt;p&gt;Many languages use curly-brackets to define scope.&lt;/p&gt;

&lt;p&gt;Python&amp;rsquo;s interpreter uses only indentation to define when a scope ends and another one starts.&lt;/p&gt;

&lt;p&gt;This means you have to be aware of white spaces at the beginning of each line &amp;ndash; they have meaning and might break your code if misplaced.&lt;/p&gt;

&lt;p&gt;This definition of a function works:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def my_function():
    print(&#39;First command&#39;)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This  &lt;strong&gt;doesn&amp;rsquo;t work&lt;/strong&gt;  because the indentation of the second line is missing and will throw an error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def my_function():
print(&#39;First command&#39;)

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;case-sensitivity-and-variables&#34;&gt;Case sensitivity and variables&lt;/h2&gt;

&lt;p&gt;Python is case sensitive. So the variables  &lt;code&gt;name&lt;/code&gt;  and  &lt;code&gt;Name&lt;/code&gt;  are not the same thing and store different values.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;name = &#39;Renan&#39;
Name = &#39;Moura&#39;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, variables are easily created by just assigning values to them using the  &lt;code&gt;=&lt;/code&gt;  symbol.&lt;/p&gt;

&lt;p&gt;This means  &lt;code&gt;name&lt;/code&gt;  stores &amp;lsquo;Renan&amp;rsquo; and  &lt;code&gt;Name&lt;/code&gt;  stores &amp;lsquo;Moura&amp;rsquo;.&lt;/p&gt;

&lt;h2 id=&#34;comments&#34;&gt;Comments&lt;/h2&gt;

&lt;p&gt;Finally, to comment something in your code, use the hash mark  &lt;code&gt;#&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The commented part does not influence the program flow.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# this function prints something
def my_function():
    print(&#39;First command&#39;)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This was just an overview. The details of each of these will become clearer in the next chapters with examples and broader explanations.&lt;/p&gt;

&lt;h1 id=&#34;comments-1&#34;&gt;Comments&lt;/h1&gt;

&lt;p&gt;The purpose of comments is to explain what is happening in the code.&lt;/p&gt;

&lt;p&gt;Comments are written along with your code but do not influence your program flow.&lt;/p&gt;

&lt;p&gt;When you work by yourself, maybe comments don&amp;rsquo;t feel like something you should write. After all, at the moment, you know the whys of every single line of code.&lt;/p&gt;

&lt;p&gt;But what if new people come on board your project after a year and the project has 3 modules, each with 10,000 lines of code?&lt;/p&gt;

&lt;p&gt;Think about people who don&amp;rsquo;t know a thing about your app and who are suddenly having to maintain it, fix it, or add new features.&lt;/p&gt;

&lt;p&gt;Remember, there is no single solution for a given problem. Your way of solving things is yours and yours only. If you ask 10 people to solve the same problem, they will come up with 10 different solutions.&lt;/p&gt;

&lt;p&gt;If you want others to fully understand your reasoning, good code design is mandatory, but comments are an integral part of any codebase.&lt;/p&gt;

&lt;h2 id=&#34;how-to-write-comments-in-python&#34;&gt;How to Write Comments in Python&lt;/h2&gt;

&lt;p&gt;The syntax of comments in Python is rather easy: just use the hash mark  &lt;code&gt;#&lt;/code&gt;  symbol in front of the text you want to be a comment.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#This is a comment and it won&#39;t influence my program flow

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use a comment to explain what some piece of code does.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#calculates the sum of any given two numbers
a + b

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;multiline-comments&#34;&gt;Multiline Comments&lt;/h2&gt;

&lt;p&gt;Maybe you want to comment on something very complex or describe how some process works in your code.&lt;/p&gt;

&lt;p&gt;In these cases, you can use multiline comments.&lt;/p&gt;

&lt;p&gt;To do that, just use a single hash mark  &lt;code&gt;#&lt;/code&gt;  for each line.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#Everything after the hash mark # is a comment
#This is a comment and it won&#39;t influence my program flow

#Calculates the cost of the project given variables a and b
#a is the time in months it will take until the project is finished
#b is how much money it will cost per month
a + b * 10 

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;variables&#34;&gt;Variables&lt;/h1&gt;

&lt;p&gt;In any program, you need to store and manipulate data to create a flow or some specific logic.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s what variables are for.&lt;/p&gt;

&lt;p&gt;You can have a variable to store a name, another one to store the age of a person, or even use a more complex type to store all of this at once like a dictionary.&lt;/p&gt;

&lt;h2 id=&#34;creating-also-known-as-declaring&#34;&gt;Creating, also known as Declaring&lt;/h2&gt;

&lt;p&gt;Declaring a variable is a basic and straightforward operation in Python&lt;/p&gt;

&lt;p&gt;Just pick a name and attribute a value to it using the  &lt;code&gt;=&lt;/code&gt;  symbol.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;name=&#39;Bob&#39;

age=32

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use the  &lt;code&gt;print()&lt;/code&gt;  function to show the value of a variable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(name)

print(age)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Bob

32

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that in Python there is no special word to declare a variable.&lt;/p&gt;

&lt;p&gt;The moment you assign a value, the variable is created in memory.&lt;/p&gt;

&lt;p&gt;Python also has dynamic typing, which means you don&amp;rsquo;t have to tell it if your variable is a text or a number, for instance.&lt;/p&gt;

&lt;p&gt;The interpreter infers the typing based on the value assigned.&lt;/p&gt;

&lt;p&gt;If you need it, you can also re-declare a variable just by changing its value.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#declaring name as a string
name=&#39;Bob&#39;
#re-declaring name as an int
name = 32

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Keep in my mind, though, that this is not recommended since variables must have meaning and context.&lt;/p&gt;

&lt;p&gt;If I have a variable called  &lt;code&gt;name&lt;/code&gt;  I don&amp;rsquo;t expect it to have a number stored in it.&lt;/p&gt;

&lt;h2 id=&#34;naming-conventions&#34;&gt;Naming Conventions&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s continue from the last section when I talked about meaning and context.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t use random variable names like  &lt;code&gt;x&lt;/code&gt;  or  &lt;code&gt;y&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Say you want to store the time of a party, just call it  &lt;code&gt;party_time&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Oh, did you notice the underscore  &lt;code&gt;_&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;By convention, if you want to use a variable name that is composed of two or more words, you separate them by underscores. This is called Snake Case.&lt;/p&gt;

&lt;p&gt;Another option would be using CamelCase as in  &lt;code&gt;partyTime&lt;/code&gt;. This is very common in other languages, but not the convention in Python as stated before.&lt;/p&gt;

&lt;p&gt;Variables are case sensitive, so  &lt;code&gt;party_time&lt;/code&gt;  and  &lt;code&gt;Party_time&lt;/code&gt;  are not the same. Also, keep in mind that the convention tells us to always use lower case.&lt;/p&gt;

&lt;p&gt;Remember, use names that you can recall inside your program easily. Bad naming can cost you a lot of time and cause annoying bugs.&lt;/p&gt;

&lt;p&gt;In summary, variable names:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Are Case sensitive:  &lt;code&gt;time&lt;/code&gt;  and  &lt;code&gt;TIME&lt;/code&gt;  are not the same&lt;/li&gt;
&lt;li&gt;Have to start with an underscore  &lt;code&gt;_&lt;/code&gt;  or a letter (DO NOT start with a number)&lt;/li&gt;
&lt;li&gt;Are allowed to have only numbers, letters and underscores. No special characters like: #, $, &amp;amp;, @, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This, for instance, is  &lt;strong&gt;not&lt;/strong&gt;  allowed:  &lt;code&gt;party#time&lt;/code&gt;,  &lt;code&gt;10partytime&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;types&#34;&gt;Types&lt;/h1&gt;

&lt;p&gt;To store data in Python you need to use a variable. And every variable has its type depending on the value of the data stored.&lt;/p&gt;

&lt;p&gt;Python has dynamic typing, which means you don&amp;rsquo;t have to explicitly declare the type of your variable &amp;ndash; but if you want to, you can.&lt;/p&gt;

&lt;p&gt;Lists, Tuples, Sets, and Dictionaries are all data types and have dedicated sections later on with more details, but we&amp;rsquo;ll look at them briefly here.&lt;/p&gt;

&lt;p&gt;This way I can show you the most important aspects and operations of each one in their own section while keeping this section more concise and focused on giving you a broad view of the main data types in Python.&lt;/p&gt;

&lt;h2 id=&#34;determining-the-type&#34;&gt;Determining the Type&lt;/h2&gt;

&lt;p&gt;First of all, let&amp;rsquo;s learn how to determine the data type.&lt;/p&gt;

&lt;p&gt;Just use the  &lt;code&gt;type()&lt;/code&gt;  function and pass the variable of your choice as an argument, like the example below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(type(my_variable))

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;boolean&#34;&gt;Boolean&lt;/h2&gt;

&lt;p&gt;The boolean type is one of the most basic types of programming.&lt;/p&gt;

&lt;p&gt;A boolean type variable can only represent either  &lt;em&gt;True&lt;/em&gt;  or  &lt;em&gt;False&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_bool = True
print(type(my_bool))

my_bool = bool(1024)
print(type(my_bool))

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;bool&#39;&amp;gt;
&amp;lt;class &#39;bool&#39;&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;numbers&#34;&gt;Numbers&lt;/h2&gt;

&lt;p&gt;There are three types of numeric types: int, float, and complex.&lt;/p&gt;

&lt;h3 id=&#34;integer&#34;&gt;Integer&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_int = 32
print(type(my_int))

my_int = int(32)
print(type(my_int))

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;int&#39;&amp;gt;
&amp;lt;class &#39;int&#39;&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;float&#34;&gt;Float&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_float = 32.85
print(type(my_float))

my_float = float(32.85)
print(type(my_float))

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;float&#39;&amp;gt;
&amp;lt;class &#39;float&#39;&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;complex&#34;&gt;Complex&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_complex_number = 32+4j
print(type(my_complex_number))

my_complex_number = complex(32+4j)
print(type(my_complex_number))

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;complex&#39;&amp;gt;
&amp;lt;class &#39;complex&#39;&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;string&#34;&gt;String&lt;/h2&gt;

&lt;p&gt;The text type is one of the most commons types out there and is often called  &lt;em&gt;string&lt;/em&gt;  or, in Python, just  &lt;code&gt;str&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_city = &amp;quot;New York&amp;quot;
print(type(my_city))

#Single quotes have exactly
#the same use as double quotes
my_city = &#39;New York&#39;
print(type(my_city))

#Setting the variable type explicitly
my_city = str(&amp;quot;New York&amp;quot;)
print(type(my_city))

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;str&#39;&amp;gt;
&amp;lt;class &#39;str&#39;&amp;gt;
&amp;lt;class &#39;str&#39;&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use the  &lt;code&gt;+&lt;/code&gt;  operator to concatenate strings.&lt;/p&gt;

&lt;p&gt;Concatenation is when you have two or more strings and you want to join them into one.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;word1 = &#39;New &#39;
word2 = &#39;York&#39;

print(word1 + word2)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;New York

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The string type has many built-in methods that let us manipulate them. I will demonstrate how some of these methods work.&lt;/p&gt;

&lt;p&gt;The  &lt;code&gt;len()&lt;/code&gt;  function returns the length of a string.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(len(&#39;New York&#39;))

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;8

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The  &lt;code&gt;replace()&lt;/code&gt;  method replaces a part of the string with another. As an example, let&amp;rsquo;s replace &amp;lsquo;New&amp;rsquo; for &amp;lsquo;Old&amp;rsquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;New York&#39;.replace(&#39;New&#39;, &#39;Old&#39;))

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Old York

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The  &lt;code&gt;upper()&lt;/code&gt;  method will return all characters as uppercase.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;New York&#39;.upper())

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;NEW YORK

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The  &lt;code&gt;lower()&lt;/code&gt;  method does the opposite, and returns all characters as lowercase.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;New York&#39;.lower())

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;new york

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;lists&#34;&gt;Lists&lt;/h2&gt;

&lt;p&gt;A list has its items ordered and you can add the same item as many times as you want. An important detail is that lists are mutable.&lt;/p&gt;

&lt;p&gt;Mutability means you can change a list after its creation by adding items, removing them, or even just changing their values. These operations will be demonstrated later in the section dedicated to Lists.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list = [&amp;quot;bmw&amp;quot;, &amp;quot;ferrari&amp;quot;, &amp;quot;maclaren&amp;quot;]
print(type(my_list))

my_list = list((&amp;quot;bmw&amp;quot;, &amp;quot;ferrari&amp;quot;, &amp;quot;maclaren&amp;quot;))
print(type(my_list))

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;list&#39;&amp;gt;
&amp;lt;class &#39;list&#39;&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;tuples&#34;&gt;Tuples&lt;/h2&gt;

&lt;p&gt;A tuple is just like a list: ordered, and allows repetition of items.&lt;/p&gt;

&lt;p&gt;There is just one difference: a tuple is immutable.&lt;/p&gt;

&lt;p&gt;Immutability means you can&amp;rsquo;t change a tuple after its creation. If you try to add an item or update one, for instance, the Python intepreter will show you an error. I will show that these errors occur later in the section dedicated to Tuples.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_tuple = (&amp;quot;bmw&amp;quot;, &amp;quot;ferrari&amp;quot;, &amp;quot;maclaren&amp;quot;)
print(type(my_tuple))

my_tuple = tuple((&amp;quot;bmw&amp;quot;, &amp;quot;ferrari&amp;quot;, &amp;quot;maclaren&amp;quot;))
print(type(my_tuple))

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;tuple&#39;&amp;gt;
&amp;lt;class &#39;tuple&#39;&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;sets&#34;&gt;Sets&lt;/h2&gt;

&lt;p&gt;Sets don&amp;rsquo;t guarantee the order of the items and are not indexed.&lt;/p&gt;

&lt;p&gt;A key point when using sets: they don&amp;rsquo;t allow repetition of an item.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_set = {&amp;quot;bmw&amp;quot;, &amp;quot;ferrari&amp;quot;, &amp;quot;maclaren&amp;quot;}
print(type(my_set))


my_set = set((&amp;quot;bmw&amp;quot;, &amp;quot;ferrari&amp;quot;, &amp;quot;maclaren&amp;quot;))
print(type(my_set))

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;set&#39;&amp;gt;
&amp;lt;class &#39;set&#39;&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;dictionaries&#34;&gt;Dictionaries&lt;/h2&gt;

&lt;p&gt;A dictionary doesn&amp;rsquo;t guarantee the order of the elements and is mutable.&lt;/p&gt;

&lt;p&gt;One important characteristic in dictionaries is that you can set your own access keys for each element.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_dict = {&amp;quot;country&amp;quot; : &amp;quot;France&amp;quot;, &amp;quot;worldcups&amp;quot; : 2}
print(type(my_dict))

my_dict = dict(country=&amp;quot;France&amp;quot;, worldcups=2)
print(type(my_dict))

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;dict&#39;&amp;gt;
&amp;lt;class &#39;dict&#39;&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;typecasting&#34;&gt;Typecasting&lt;/h1&gt;

&lt;p&gt;Typecasting allows you to convert between different types.&lt;/p&gt;

&lt;p&gt;This way you can have an  &lt;code&gt;int&lt;/code&gt;  turned into a  &lt;code&gt;str&lt;/code&gt;, or a  &lt;code&gt;float&lt;/code&gt;  turned into an  &lt;code&gt;int&lt;/code&gt;, for instance.&lt;/p&gt;

&lt;h2 id=&#34;explicit-conversion&#34;&gt;Explicit conversion&lt;/h2&gt;

&lt;p&gt;To cast a variable to a string just use the  &lt;code&gt;str()&lt;/code&gt;  function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# this is just a regular explicit intialization
my_str = str(&#39;32&#39;) 
print(my_str)

# int to str
my_str = str(32) 
print(my_str)

# float to str
my_str = str(32.0)
print(my_str)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;32
32
32.0

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To cast a variable to an integer just use the  &lt;code&gt;int()&lt;/code&gt;  function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# this is just a regular explicit intialization
my_int = int(32) 
print(my_int)

# float to int: rounds down to 3
my_int = int(3.2) 
print(my_int)

# str to int
my_int = int(&#39;32&#39;) 
print(my_int)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;32
3
32

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To cast a variable to a float just use the  &lt;code&gt;float()&lt;/code&gt;  function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# this is an explicit intialization
my_float = float(3.2)   
print(my_float)

# int to float
my_float = float(32)     
print(my_float)

# str to float
my_float = float(&#39;32&#39;)  
print(my_float)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3.2
32.0
32.0

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What I did above is called an  &lt;em&gt;explicit&lt;/em&gt;  type conversion.&lt;/p&gt;

&lt;p&gt;In some cases you don&amp;rsquo;t need to do the conversion explicitly, since Python can do it by itself.&lt;/p&gt;

&lt;h2 id=&#34;implicit-conversion&#34;&gt;Implicit conversion&lt;/h2&gt;

&lt;p&gt;The example below shows implicit conversion when adding an  &lt;code&gt;int&lt;/code&gt;  and a  &lt;code&gt;float&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Notice that  &lt;code&gt;my_sum&lt;/code&gt;  is  &lt;code&gt;float&lt;/code&gt;. Python uses  &lt;code&gt;float&lt;/code&gt;  to avoid data loss since the  &lt;code&gt;int&lt;/code&gt;  type can not represent the decimal digits.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_int = 32
my_float = 3.2

my_sum = my_int + my_float

print(my_sum)

print(type(my_sum))

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;35.2
&amp;lt;class &#39;float&#39;&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On the other hand, in this example, when you add an  &lt;code&gt;int&lt;/code&gt;  and a  &lt;code&gt;str&lt;/code&gt;, Python will not be able to make the implicit conversion, and the explicit type conversion is necessary.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_int = 32
my_str = &#39;32&#39;

# explicit conversion works
my_sum = my_int + int(my_str)
print(my_sum)

#implicit conversion throws an error
my_sum = my_int + my_str 

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;64

Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
TypeError: unsupported operand type(s) for +: &#39;int&#39; and &#39;str&#39;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The same error is thrown when trying to add  &lt;code&gt;float&lt;/code&gt;  and  &lt;code&gt;str&lt;/code&gt;  types without making an explicit conversion.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_float = 3.2
my_str = &#39;32&#39;

# explicit conversion works
my_sum = my_float + float(my_str)
print(my_sum)

#implicit conversion throws an error
my_sum = my_float + my_str 

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;35.2

Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
TypeError: unsupported operand type(s) for +: &#39;float&#39; and &#39;str&#39;

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;user-input&#34;&gt;User Input&lt;/h1&gt;

&lt;p&gt;If you need to interact with a user when running your program in the command line (for example, to ask for a piece of information), you can use the  &lt;code&gt;input()&lt;/code&gt;  function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;country = input(&amp;quot;What is your country? &amp;quot;) #user enters &#39;Brazil&#39;

print(country)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Brazil

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The captured value is always  &lt;code&gt;string&lt;/code&gt;. Just remember that you might need to convert it using typecasting.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;age = input(&amp;quot;How old are you? &amp;quot;) #user enters &#39;29&#39;

print(age)

print(type(age))

age = int(age)

print(type(age))

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output for each  &lt;code&gt;print()&lt;/code&gt;  is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;29

&amp;lt;class &#39;str&#39;&amp;gt;

&amp;lt;class &#39;int&#39;&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice the age 29 is captured as  &lt;code&gt;string&lt;/code&gt;  and then converted explicitly to  &lt;code&gt;int&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;operators&#34;&gt;Operators&lt;/h1&gt;

&lt;p&gt;In a programming language, operators are special symbols that you can apply to your variables and values in order to perform operations such as arithmetic/mathematical and comparison.&lt;/p&gt;

&lt;p&gt;Python has lots of operators that you can apply to your variables and I will demonstrate the most used ones.&lt;/p&gt;

&lt;h2 id=&#34;arithmetic-operators&#34;&gt;Arithmetic Operators&lt;/h2&gt;

&lt;p&gt;Arithmetic operators are the most common type of operators and also the most recognizable ones.&lt;/p&gt;

&lt;p&gt;They allow you to perform simple mathematical operations.&lt;/p&gt;

&lt;p&gt;They are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;+&lt;/code&gt;: Addition&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-&lt;/code&gt;: Subtraction&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt;: Multiplication&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/&lt;/code&gt;: Division&lt;/li&gt;
&lt;li&gt;&lt;code&gt;**&lt;/code&gt;: Exponentiation&lt;/li&gt;
&lt;li&gt;&lt;code&gt;//&lt;/code&gt;: Floor Division, rounds down the result of a division&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%&lt;/code&gt;: Modulus, gives you the remainder of a division&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s see a program that shows how each of them is used.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;Addition:&#39;, 5 + 2)
print(&#39;Subtraction:&#39;, 5 - 2)
print(&#39;Multiplication:&#39;, 5 * 2)
print(&#39;Division:&#39;, 5 / 2)
print(&#39;Floor Division:&#39;, 5 // 2)
print(&#39;Exponentiation:&#39;, 5 ** 2)
print(&#39;Modulus:&#39;, 5 % 2)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Addition: 7

Subtraction: 3

Multiplication: 10

Division: 2.5

Floor Division: 2

Exponentiation: 25

Modulus: 1

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;concatenation&#34;&gt;Concatenation&lt;/h3&gt;

&lt;p&gt;Concatenation is when you have two or more strings and you want to join them into one.&lt;/p&gt;

&lt;p&gt;This useful when you have information in multiple variables and want to combine them.&lt;/p&gt;

&lt;p&gt;For instance, in this next example I combine two variables that contain my first name and my last name respectively to have my full name.&lt;/p&gt;

&lt;p&gt;The  &lt;code&gt;+&lt;/code&gt;  operator is also used to concatenate.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;first_name = &#39;Renan &#39;
last_name = &#39;Moura&#39;

print(first_name + last_name)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Renan Moura

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since concatenation is applied to strings, to concatenate strings with other types, you have to do an explicit typecast using  &lt;code&gt;str()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I have to typecast the  &lt;code&gt;int&lt;/code&gt;  value 30 to string with  &lt;code&gt;str()&lt;/code&gt;  to concatenate it with the rest of the string.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;age = &#39;I have &#39; + str(30) + &#39; years old&#39;

print(age)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;I have 30 years old

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;comparison-operators&#34;&gt;Comparison Operators&lt;/h2&gt;

&lt;p&gt;Use comparison operators to compare two values.&lt;/p&gt;

&lt;p&gt;These operators return either  &lt;code&gt;True&lt;/code&gt;  or  &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;They are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;==&lt;/code&gt;: Equal&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!=&lt;/code&gt;: Not equal&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;: Greater than&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;: Less than&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt;: Greater than or equal to&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;=&lt;/code&gt;: Less than or equal to&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s see a program that shows how each of them is used.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;Equal:&#39;, 5 == 2)
print(&#39;Not equal:&#39;, 5 != 2)
print(&#39;Greater than:&#39;, 5 &amp;gt; 2)
print(&#39;Less than:&#39;, 5 &amp;lt; 2)
print(&#39;Greater than or equal to:&#39;, 5 &amp;gt;= 2)
print(&#39;Less than or equal to:&#39;, 5 &amp;lt;= 2)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Equal: False

Not equal: True

Greater than: True

Less than: False

Greater than or equal to: True

Less than or equal to: False

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;assignment-operators&#34;&gt;Assignment Operators&lt;/h2&gt;

&lt;p&gt;As the name implies, these operators are used to assign values to variables.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;x = 7&lt;/code&gt;  in the first example is a direct assignment storing the number  &lt;code&gt;7&lt;/code&gt;  in the variable  &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The assignment operation takes the value on the right and assigns it to the variable on the left.&lt;/p&gt;

&lt;p&gt;The other operators are simple shorthands for the Arithmetic Operators.&lt;/p&gt;

&lt;p&gt;In the second example  &lt;code&gt;x&lt;/code&gt;  starts with  &lt;code&gt;7&lt;/code&gt;  and  &lt;code&gt;x += 2&lt;/code&gt;  is just another way to write  &lt;code&gt;x = x + 2&lt;/code&gt;. This means the previous value of  &lt;code&gt;x&lt;/code&gt;  is added by  &lt;code&gt;2&lt;/code&gt;  and reassigned to  &lt;code&gt;x&lt;/code&gt;  that is now equal to  &lt;code&gt;9&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;=&lt;/code&gt;: simple assignment&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = 7
print(x)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;7

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;+=&lt;/code&gt;: addition and assignment&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = 7
x += 2
print(x)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;9

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;-=&lt;/code&gt;: subtraction and assignment&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = 7
x -= 2
print(x)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;5

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;*=&lt;/code&gt;: multiplication and assignment&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = 7
x *= 2
print(x)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;14

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;/=&lt;/code&gt;: division and assignment&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = 7
x /= 2
print(x)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3.5

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;%=&lt;/code&gt;: modulus and assignment&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = 7
x %= 2
print(x)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;//=&lt;/code&gt;: floor division and assignment&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = 7
x //= 2
print(x)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;**=&lt;/code&gt;: exponentiation and assignment&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = 7
x **= 2
print(x)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;49

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;logical-operators&#34;&gt;Logical Operators&lt;/h2&gt;

&lt;p&gt;Logical operators are used to combine statements applying boolean algebra.&lt;/p&gt;

&lt;p&gt;They are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;and&lt;/code&gt;:  &lt;code&gt;True&lt;/code&gt;  only when both statements are true&lt;/li&gt;
&lt;li&gt;&lt;code&gt;or&lt;/code&gt;:  &lt;code&gt;False&lt;/code&gt;  only when both x and y are false&lt;/li&gt;
&lt;li&gt;&lt;code&gt;not&lt;/code&gt;: The  &lt;code&gt;not&lt;/code&gt;  operator simply inverts the input,  &lt;code&gt;True&lt;/code&gt;  becomes  &lt;code&gt;False&lt;/code&gt;  and vice versa.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s see a program that shows how each one is used.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = 5
y = 2

print(x == 5 and y &amp;gt; 3) 
  
print(x == 5 or y &amp;gt; 3) 
  
print(not (x == 5))

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;False

True

False

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;membership-operators&#34;&gt;Membership Operators&lt;/h2&gt;

&lt;p&gt;These operators provide an easy way to check if a certain object is present in a sequence:  &lt;code&gt;string&lt;/code&gt;,  &lt;code&gt;list&lt;/code&gt;,  &lt;code&gt;tuple&lt;/code&gt;,  &lt;code&gt;set&lt;/code&gt;, and  &lt;code&gt;dictionary&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;They are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;in&lt;/code&gt;: returns  &lt;code&gt;True&lt;/code&gt;  if the object is present&lt;/li&gt;
&lt;li&gt;&lt;code&gt;not in&lt;/code&gt;: returns  &lt;code&gt;True&lt;/code&gt;  if the object is not present&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s see a program that shows how each one is used.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;number_list = [1, 2, 4, 5, 6]

print( 1 in number_list)

print( 5 not in number_list)

print( 3 not in number_list)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True

False

True

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;conditionals&#34;&gt;Conditionals&lt;/h1&gt;

&lt;p&gt;Conditionals are one of the cornerstones of any programming language.&lt;/p&gt;

&lt;p&gt;They allow you to control the program flow according to specific conditions you can check.&lt;/p&gt;

&lt;h2 id=&#34;the-if-statement&#34;&gt;The  &lt;code&gt;if&lt;/code&gt;  statement&lt;/h2&gt;

&lt;p&gt;The way you implement a conditional is through the  &lt;code&gt;if&lt;/code&gt;  statement.&lt;/p&gt;

&lt;p&gt;The general form of an  &lt;code&gt;if&lt;/code&gt;  statement is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if expression:
    statement

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The  &lt;code&gt;expression&lt;/code&gt;  contains some logic that returns a boolean, and the  &lt;code&gt;statement&lt;/code&gt;  is executed only if the return is  &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A simple example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;bob_age = 32
sarah_age = 29

if bob_age &amp;gt; sarah_age:
    print(&#39;Bob is older than Sarah&#39;)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Bob is older than Sarah

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have two variables indicating the ages of Bob and Sarah. The condition in plain English says &amp;ldquo;if Bob&amp;rsquo;s age is greater than Sarah&amp;rsquo;s age, then print the phrase &amp;lsquo;Bob is older than Sarah&amp;rsquo;&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Since the condition returns  &lt;code&gt;True&lt;/code&gt;, the phrase will be printed on the console.&lt;/p&gt;

&lt;h2 id=&#34;the-if-else-and-elif-statements&#34;&gt;The  &lt;code&gt;if else&lt;/code&gt;  and  &lt;code&gt;elif&lt;/code&gt;  statements&lt;/h2&gt;

&lt;p&gt;In our last example, the program only does something if the condition returns  &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But we also want it to do something if it returns  &lt;code&gt;False&lt;/code&gt;  or even check a second or third condition if the first one wasn&amp;rsquo;t met.&lt;/p&gt;

&lt;p&gt;In this example, we swapped Bob&amp;rsquo;s and Sarah&amp;rsquo;s age. The first condition will return  &lt;code&gt;False&lt;/code&gt;  since Sarah is older now, and then the program will print the phrase after the  &lt;code&gt;else&lt;/code&gt;  instead.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;bob_age = 29
sarah_age = 32

if bob_age &amp;gt; sarah_age:
    print(&#39;Bob is older than Sarah&#39;)
else:
    print(&#39;Bob is younger than Sarah&#39;)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Bob is younger than Sarah

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, consider the example below with the  &lt;code&gt;elif&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;bob_age = 32
sarah_age = 32

if bob_age &amp;gt; sarah_age:
    print(&#39;Bob is older than Sarah&#39;)
elif bob_age == sarah_age:
    print(&#39;Bob and Sarah have the same age&#39;)
else:
    print(&#39;Bob is younger than Sarah&#39;)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Bob and Sarah have the same age

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The purpose of the  &lt;code&gt;elif&lt;/code&gt;  is to provide a new condition to be checked before the  &lt;code&gt;else&lt;/code&gt;  is executed.&lt;/p&gt;

&lt;p&gt;Once again we changed their ages and now both are 32 years old.&lt;/p&gt;

&lt;p&gt;As such, the condition in the  &lt;code&gt;elif&lt;/code&gt;  is met. Since both have the same age the program will print &amp;ldquo;Bob and Sarah have the same age&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Notice you can have as many  &lt;code&gt;elif&lt;/code&gt;s as you want, just put them in sequence.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;bob_age = 32
sarah_age = 32

if bob_age &amp;gt; sarah_age:
    print(&#39;Bob is older than Sarah&#39;)
elif bob_age &amp;lt; sarah_age:
    print(&#39;Bob is younger than Sarah&#39;)
elif bob_age == sarah_age:
    print(&#39;Bob and Sarah have the same age&#39;)
else:
    print(&#39;This one is never executed&#39;)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Bob and Sarah have the same age

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example, the  &lt;code&gt;else&lt;/code&gt;  is never executed because all the possibilities are covered in the previous conditions and thus could be removed.&lt;/p&gt;

&lt;h2 id=&#34;nested-conditionals&#34;&gt;Nested conditionals&lt;/h2&gt;

&lt;p&gt;You might need to check more than one conditional for something to happen.&lt;/p&gt;

&lt;p&gt;In this case, you can nest your  &lt;code&gt;if&lt;/code&gt;  statements.&lt;/p&gt;

&lt;p&gt;For instance, the second phrase &amp;ldquo;Bob is the oldest&amp;rdquo; is printed only if both  &lt;code&gt;if&lt;/code&gt;s pass.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;bob_age = 32
sarah_age = 28
mary_age = 25

if bob_age &amp;gt; sarah_age:
    print(&#39;Bob is older than Sarah&#39;)
    if bob_age &amp;gt; mary_age:
        print(&#39;Bob is the oldest&#39;)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Bob is older than Sarah
Bob is the oldest

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or, depending on the logic, make it simpler with Boolean Algebra.&lt;/p&gt;

&lt;p&gt;This way, your code is smaller, more readable and easier to maintain.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;bob_age = 32
sarah_age = 28
mary_age = 25

if bob_age &amp;gt; sarah_age and bob_age &amp;gt; mary_age:
    print(&#39;Bob is the oldest&#39;)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Bob is the oldest

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ternary-operators&#34;&gt;Ternary Operators&lt;/h2&gt;

&lt;p&gt;The ternary operator is a one-line  &lt;code&gt;if&lt;/code&gt;  statement.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s very handy for simple conditions.&lt;/p&gt;

&lt;p&gt;This is how it looks:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;expression&amp;gt; if &amp;lt;condition&amp;gt; else &amp;lt;expression&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Consider the following Python code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = 25
b = 50
x = 0
y = 1

result = x if a &amp;gt; b else y

print(result)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we use four variables,  &lt;code&gt;a&lt;/code&gt;  and  &lt;code&gt;b&lt;/code&gt;  are for the condition, while  &lt;code&gt;x&lt;/code&gt;  and  &lt;code&gt;y&lt;/code&gt;  represent the expressions.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;a&lt;/code&gt;  and  &lt;code&gt;b&lt;/code&gt;  are the values we are checking against each other to evaluate some condition. In this case, we are checking if  &lt;code&gt;a&lt;/code&gt;  is greater than  &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If the expression holds true, i.e.,  &lt;code&gt;a&lt;/code&gt;  is greater than  &lt;code&gt;b&lt;/code&gt;, then the value of  &lt;code&gt;x&lt;/code&gt;  will be attributed to  &lt;code&gt;result&lt;/code&gt;  which will be equal to 0.&lt;/p&gt;

&lt;p&gt;However, if  &lt;code&gt;a&lt;/code&gt;  is less than  &lt;code&gt;b&lt;/code&gt;, then we have the value of  &lt;code&gt;y&lt;/code&gt;  assigned to  &lt;code&gt;result&lt;/code&gt;, and  &lt;code&gt;result&lt;/code&gt;  will hold the value  &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since  &lt;code&gt;a&lt;/code&gt;  is less than  &lt;code&gt;b&lt;/code&gt;, 25 &amp;lt; 50,  &lt;code&gt;result&lt;/code&gt;  will have  &lt;code&gt;1&lt;/code&gt;  as final value from  &lt;code&gt;y&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The easy way to remember how the condition is evaluated is to read it in plain English.&lt;/p&gt;

&lt;p&gt;Our example would read:  &lt;code&gt;result&lt;/code&gt;  will be  &lt;code&gt;x&lt;/code&gt;  if  &lt;code&gt;a&lt;/code&gt;  is greater than  &lt;code&gt;b&lt;/code&gt;  otherwise  &lt;code&gt;y&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;lists-1&#34;&gt;Lists&lt;/h1&gt;

&lt;p&gt;As promised in the  &lt;a href=&#34;https://www.freecodecamp.org/news/the-python-guide-for-beginners/#types&#34; target=&#34;_blank&#34;&gt;Types&lt;/a&gt;  section, this section and the next three about Tuples, Sets, and Dictionaries will have more in depth explanations of each of them since they are very important and broadly used structures in Python to organize and deal with data.&lt;/p&gt;

&lt;p&gt;A list has its items ordered and you can add the same item as many times as you want.&lt;/p&gt;

&lt;p&gt;An important detail is that lists are mutable.&lt;/p&gt;

&lt;p&gt;Mutability means you can change a list after its creation by adding items, removing them, or even just changing their values.&lt;/p&gt;

&lt;h3 id=&#34;initialization&#34;&gt;Initialization&lt;/h3&gt;

&lt;h4 id=&#34;empty-list&#34;&gt;Empty List&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people = []

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;list-with-initial-values&#34;&gt;List with initial values&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people = [&#39;Bob&#39;, &#39;Mary&#39;]

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;adding-in-a-list&#34;&gt;Adding in a List&lt;/h3&gt;

&lt;p&gt;To add an item in the end of a list, use  &lt;code&gt;append()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people = [&#39;Bob&#39;, &#39;Mary&#39;]
people.append(&#39;Sarah&#39;)

print(people)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&#39;Bob&#39;, &#39;Mary&#39;, &#39;Sarah&#39;]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To specify the position for the new item, use the  &lt;code&gt;insert()&lt;/code&gt;  method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people = [&#39;Bob&#39;, &#39;Mary&#39;]
people.insert(0, &#39;Sarah&#39;)

print(people)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&#39;Sarah&#39;, &#39;Bob&#39;, &#39;Mary&#39;]

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;updating-in-a-list&#34;&gt;Updating in a List&lt;/h3&gt;

&lt;p&gt;Specify the position of the item to update and set the new value&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people = [&#39;Bob&#39;, &#39;Mary&#39;]
people[1] = &#39;Sarah&#39;
print(people)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&#39;Bob&#39;, &#39;Sarah&#39;]

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;deleting-in-a-list&#34;&gt;Deleting in a List&lt;/h3&gt;

&lt;p&gt;Use the  &lt;code&gt;remove()&lt;/code&gt;  method to delete the item given as an argument.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people = [&#39;Bob&#39;, &#39;Mary&#39;]
people.remove(&#39;Bob&#39;)
print(people)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&#39;Mary&#39;]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To delete everybody, use the  &lt;code&gt;clear()&lt;/code&gt;  method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people = [&#39;Bob&#39;, &#39;Mary&#39;]
people.clear()

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;retrieving-in-a-list&#34;&gt;Retrieving in a List&lt;/h3&gt;

&lt;p&gt;Use the index to reference the item.&lt;/p&gt;

&lt;p&gt;Remember that the index starts at 0.&lt;/p&gt;

&lt;p&gt;So to access the second item use the index 1.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people = [&#39;Bob&#39;, &#39;Mary&#39;]
print(people[1])

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Mary

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;check-if-a-given-item-already-exists-in-a-list&#34;&gt;Check if a given item already exists in a List&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people = [&#39;Bob&#39;, &#39;Mary&#39;]

if &#39;Bob&#39; in people:
  print(&#39;Bob exists!&#39;)
else:
  print(&#39;There is no Bob!&#39;)

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;tuples-1&#34;&gt;Tuples&lt;/h1&gt;

&lt;p&gt;A tuple is similar to a list: it&amp;rsquo;s ordered, and allows repetition of items.&lt;/p&gt;

&lt;p&gt;There is just one difference: a tuple is immutable.&lt;/p&gt;

&lt;p&gt;Immutability, if you remember, means you can&amp;rsquo;t change a tuple after its creation. If you try to add an item or update one, for instance, the Python interpreter will show you an error.&lt;/p&gt;

&lt;h3 id=&#34;initialization-1&#34;&gt;Initialization&lt;/h3&gt;

&lt;h4 id=&#34;empty-tuple&#34;&gt;Empty Tuple&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people = ()

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;tuple-with-initial-values&#34;&gt;Tuple with initial values&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people = (&#39;Bob&#39;, &#39;Mary&#39;)

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;adding-in-a-tuple&#34;&gt;Adding in a Tuple&lt;/h3&gt;

&lt;p&gt;Tuples are immutable. This means that if you try to add an item, you will see an error.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people = (&#39;Bob&#39;, &#39;Mary&#39;)
people[2] = &#39;Sarah&#39;

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
TypeError: &#39;tuple&#39; object does not support item assignment

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;updating-in-a-tuple&#34;&gt;Updating in a Tuple&lt;/h3&gt;

&lt;p&gt;Updating an item will also return an error.&lt;/p&gt;

&lt;p&gt;But there is a trick: you can convert into a list, change the item, and then convert it back to a tuple.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people = (&#39;Bob&#39;, &#39;Mary&#39;)
people_list = list(people)
people_list[1] = &#39;Sarah&#39;
people = tuple(people_list)
print(people)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(&#39;Bob&#39;, &#39;Sarah&#39;)

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;deleting-in-a-tuple&#34;&gt;Deleting in a Tuple&lt;/h3&gt;

&lt;p&gt;For the same reason you can&amp;rsquo;t add an item, you also can&amp;rsquo;t delete an item, since they are immutable.&lt;/p&gt;

&lt;h3 id=&#34;retrieving-in-a-tuple&#34;&gt;Retrieving in a Tuple&lt;/h3&gt;

&lt;p&gt;Use the index to reference the item.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people = (&#39;Bob&#39;, &#39;Mary&#39;)
print(people[1])

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Mary

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;check-if-a-given-item-already-exists-in-a-tuple&#34;&gt;Check if a given item already exists in a Tuple&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people = (&#39;Bob&#39;, &#39;Mary&#39;)

if &#39;Bob&#39; in people:
  print(&#39;Bob exists!&#39;)
else:
  print(&#39;There is no Bob!&#39;)

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;sets-1&#34;&gt;Sets&lt;/h1&gt;

&lt;p&gt;Sets don&amp;rsquo;t guarantee the order of items and are not indexed.&lt;/p&gt;

&lt;p&gt;A key point when using sets: they don&amp;rsquo;t allow repetition of an item.&lt;/p&gt;

&lt;h3 id=&#34;initialization-2&#34;&gt;Initialization&lt;/h3&gt;

&lt;h4 id=&#34;empty-set&#34;&gt;Empty Set&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people = set()

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;set-with-initial-values&#34;&gt;Set with initial values&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people = {&#39;Bob&#39;, &#39;Mary&#39;}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;adding-in-a-set&#34;&gt;Adding in a Set&lt;/h3&gt;

&lt;p&gt;Use the  &lt;code&gt;add()&lt;/code&gt;  method to add one item.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people.add(&#39;Sarah&#39;)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use the  &lt;code&gt;update()&lt;/code&gt;  method to add multiple items at once.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people.update([&#39;Carol&#39;, &#39;Susan&#39;])

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remember, Sets do not allow repetition, so if you add &amp;lsquo;Mary&amp;rsquo; again, nothing changes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people = {&#39;Bob&#39;, &#39;Mary&#39;}

people.add(&#39;Mary&#39;)

print(people)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;{&#39;Bob&#39;, &#39;Mary&#39;}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;updating-in-a-set&#34;&gt;Updating in a Set&lt;/h3&gt;

&lt;p&gt;Items in a set are not mutable. You have to either add or delete an item.&lt;/p&gt;

&lt;h3 id=&#34;deleting-in-a-set&#34;&gt;Deleting in a Set&lt;/h3&gt;

&lt;p&gt;To remove Bob from the dictionary:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people = {&#39;Bob&#39;, &#39;Mary&#39;}
people.remove(&#39;Bob&#39;)
print(people)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;{&#39;Mary&#39;}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To delete everybody:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people.clear()

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;check-if-a-given-item-already-exists-in-a-set&#34;&gt;Check if a given item already exists in a set&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people = {&#39;Bob&#39;, &#39;Mary&#39;}

if &#39;Bob&#39; in people:
  print(&#39;Bob exists!&#39;)
else:
  print(&#39;There is no Bob!&#39;)

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;dictionaries-1&#34;&gt;Dictionaries&lt;/h1&gt;

&lt;p&gt;The dictionary doesn&amp;rsquo;t guarantee the order of the elements and it is mutable.&lt;/p&gt;

&lt;p&gt;One important characteristic of dictionaries is that you can set your customized access keys for each element.&lt;/p&gt;

&lt;h3 id=&#34;initialization-of-a-dictionary&#34;&gt;Initialization of a Dictionary&lt;/h3&gt;

&lt;h4 id=&#34;empty-dictionary&#34;&gt;Empty Dictionary&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people = {}

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;dictionary-with-initial-values&#34;&gt;Dictionary with initial values&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people = {&#39;Bob&#39;:30, &#39;Mary&#39;:25}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;adding-in-a-dictionary&#34;&gt;Adding in a Dictionary&lt;/h3&gt;

&lt;p&gt;If the key doesn&amp;rsquo;t exist yet, it is appended to the dictionary.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people[&#39;Sarah&#39;]=32

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;updating-a-dictionary&#34;&gt;Updating a Dictionary&lt;/h3&gt;

&lt;p&gt;If the key already exists, the value is just updated.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#Bob&#39;s age is 28 now
people[&#39;Bob&#39;]=28

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that the code is pretty much the same.&lt;/p&gt;

&lt;h3 id=&#34;deleting-in-a-dictionary&#34;&gt;Deleting in a Dictionary&lt;/h3&gt;

&lt;p&gt;To remove Bob from the dictionary:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people.pop(&#39;Bob&#39;)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To delete everybody:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people.clear()

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;retrieving-in-a-dictionary&#34;&gt;Retrieving in a Dictionary&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;bob_age = people[&#39;Bob&#39;]
print(bob_age)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;30

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;check-if-a-given-key-already-exists-in-a-dictionary&#34;&gt;Check if a given key already exists in a Dictionary&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if &#39;Bob&#39; in people:
  print(&#39;Bob exists!&#39;)
else:
  print(&#39;There is no Bob!&#39;)

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;while-loops&#34;&gt;&lt;code&gt;while&lt;/code&gt;  Loops&lt;/h1&gt;

&lt;p&gt;Loops are used when you need to repeat a block of code a certain number of times or apply the same logic over each item in a collection.&lt;/p&gt;

&lt;p&gt;There are two types of loops:  &lt;code&gt;for&lt;/code&gt;  and  &lt;code&gt;while&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You will learn about  &lt;code&gt;for&lt;/code&gt;  loops in the next section.&lt;/p&gt;

&lt;h2 id=&#34;basic-syntax&#34;&gt;Basic Syntax&lt;/h2&gt;

&lt;p&gt;The basic syntax of a  &lt;code&gt;while&lt;/code&gt;  loop is as below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;while condition:
    statement

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The loop will continue  &lt;em&gt;while&lt;/em&gt;  the condition is  &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;the-square-of-a-number-is&#34;&gt;The square of a number is&lt;/h2&gt;

&lt;p&gt;The example below takes each value of  &lt;code&gt;number&lt;/code&gt;  and calculates its squared value.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;number = 1
while number &amp;lt;= 5:
    print(number, &#39;squared is&#39;, number**2)
    number = number + 1

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1 squared is 1
2 squared is 4
3 squared is 9
4 squared is 16
5 squared is 25

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use any variable name, but I chose  &lt;code&gt;number&lt;/code&gt;  because it makes sense in the context. A common generic choice would be simply  &lt;code&gt;i&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The loop will go on until  &lt;code&gt;number&lt;/code&gt;  (initialized with 1) is less than or equal to 5.&lt;/p&gt;

&lt;p&gt;Notice that after the  &lt;code&gt;print()&lt;/code&gt;  command, the variable  &lt;code&gt;number&lt;/code&gt;  is incremented by 1 to take the next value.&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t do the incrementation you will have an infinite loop since  &lt;code&gt;number&lt;/code&gt;  will never reach a value greater than 5. This is a very important detail!&lt;/p&gt;

&lt;h2 id=&#34;else-block&#34;&gt;&lt;code&gt;else&lt;/code&gt;  block&lt;/h2&gt;

&lt;p&gt;When the condition returns  &lt;code&gt;False&lt;/code&gt;, the  &lt;code&gt;else&lt;/code&gt;  block will be called.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;number = 1
while number &amp;lt;= 5:
    print(number, &#39;squared is&#39;, number**2)
    number = number + 1
else:
    print(&#39;No numbers left!&#39;)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1 squared is 1
2 squared is 4
3 squared is 9
4 squared is 16
5 squared is 25
No numbers left!

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice the phrase &amp;lsquo;No numbers left!&amp;rsquo; is printed after the loop ends, that is after the condition  &lt;code&gt;number &amp;lt;= 5&lt;/code&gt;  evaluates to  &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;how-to-break-out-of-a-while-loop-in-python&#34;&gt;How to break out of a  &lt;code&gt;while&lt;/code&gt;  loop in Python&lt;/h2&gt;

&lt;p&gt;Simply use the  &lt;code&gt;break&lt;/code&gt;  keyword, and the loop will stop its execution.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;number = 1
while number &amp;lt;= 5:
    print(number, &#39;squared is&#39;, number**2)
    number = number + 1
    if number == 4:
        break

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1 squared is 1
2 squared is 4
3 squared is 9

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The loop runs normally, and when  &lt;code&gt;number&lt;/code&gt;  reaches 4 the  &lt;code&gt;if&lt;/code&gt;  statement evaluates to  &lt;code&gt;True&lt;/code&gt;  and the  &lt;code&gt;break&lt;/code&gt;  command is called. This finishes the loop before the squared value of the numbers 4 and 5 are calculated.&lt;/p&gt;

&lt;h2 id=&#34;how-to-skip-an-item-in-a-while-loop&#34;&gt;How to skip an item in a  &lt;code&gt;while&lt;/code&gt;  loop&lt;/h2&gt;

&lt;p&gt;The  &lt;code&gt;continue&lt;/code&gt;  will do that for you.&lt;/p&gt;

&lt;p&gt;I had to invert the order of the  &lt;code&gt;if&lt;/code&gt;  statement and the  &lt;code&gt;print()&lt;/code&gt;  to show how it works properly.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;number = 0
while number &amp;lt; 5:
    number = number + 1
    if number == 4:
        continue
    print(number, &#39;squared is&#39;, number**2)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1 squared is 1
2 squared is 4
3 squared is 9
5 squared is 25

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The program always checks if 4 is the current value of  &lt;code&gt;number&lt;/code&gt;. If it is, the square of 4 won&amp;rsquo;t be calculated and the  &lt;code&gt;continue&lt;/code&gt;  will skip to the next iteration when the value of  &lt;code&gt;number&lt;/code&gt;  is 5.&lt;br /&gt;
*&lt;/p&gt;

&lt;h1 id=&#34;for-loops&#34;&gt;&lt;code&gt;for&lt;/code&gt;  Loops&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;for&lt;/code&gt;  loops are similar to  &lt;code&gt;while&lt;/code&gt;  loops in the sense that they are used to repeat blocks of code.&lt;/p&gt;

&lt;p&gt;The most important difference is that you can easily iterate over sequential types.&lt;/p&gt;

&lt;h2 id=&#34;basic-syntax-1&#34;&gt;Basic Syntax&lt;/h2&gt;

&lt;p&gt;The basic syntax of a  &lt;code&gt;for&lt;/code&gt;  loop is as below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for item in collection:
    statement

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;loop-over-a-list&#34;&gt;Loop over a list&lt;/h2&gt;

&lt;p&gt;To loop over a list or any other collection, just proceed as shown in the example below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cars = [&#39;BMW&#39;, &#39;Ferrari&#39;, &#39;McLaren&#39;]
for car in cars:
    print(car)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;BMW
Ferrari
McLaren

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The list of  &lt;code&gt;cars&lt;/code&gt;  contains three items. The  &lt;code&gt;for&lt;/code&gt;  loop will iterate over the list and store each item in the  &lt;code&gt;car&lt;/code&gt;  variable, and then execute a statement, in this case  &lt;code&gt;print(car)&lt;/code&gt;, to print each car in the console.&lt;/p&gt;

&lt;h2 id=&#34;range-function&#34;&gt;&lt;code&gt;range()&lt;/code&gt;  function&lt;/h2&gt;

&lt;p&gt;The range function is widely used in for loops because it gives you a simple way to list numbers.&lt;/p&gt;

&lt;p&gt;This code will loop through the numbers 0 to 5 and print each of them.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for number in range(5):
    print(number)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0
1
2
3
4

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In contrast, without the  &lt;code&gt;range()&lt;/code&gt;  function, we would do something like this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;numbers = [0, 1, 2, 3, 4]
for number in numbers:
    print(number)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0
1
2
3
4

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also define a  &lt;code&gt;start&lt;/code&gt;  and  &lt;code&gt;stop&lt;/code&gt;  using  &lt;code&gt;range()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here we are starting in 5 and a stoping in 10. The number you set to stop is not included.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for number in range(5, 10):
    print(number)


&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;5
6
7
8
9

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, it is also possible to set a step.&lt;/p&gt;

&lt;p&gt;Here we starting in 10 and incrementing by 2 until 20, since 20 is the  &lt;code&gt;stop&lt;/code&gt;, it is not included.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for number in range(10, 20, 2):
    print(number)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;10
12
14
16
18

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;else-block-1&#34;&gt;&lt;code&gt;else&lt;/code&gt;  block&lt;/h2&gt;

&lt;p&gt;When the items in the list are over, the  &lt;code&gt;else&lt;/code&gt;  block will be called.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cars = [&#39;BMW&#39;, &#39;Ferrari&#39;, &#39;McLaren&#39;]
for car in cars:
    print(car)
else:
    print(&#39;No cars left!&#39;)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;BMW
Ferrari
McLaren
No cars left!

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;how-to-break-out-of-a-for-loop-in-python&#34;&gt;How to break out of a for loop in Python&lt;/h2&gt;

&lt;p&gt;Simply use the  &lt;code&gt;break&lt;/code&gt;  keyword, and the loop will stop its execution.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cars = [&#39;BMW&#39;, &#39;Ferrari&#39;, &#39;McLaren&#39;]
for car in cars:
    print(car)
    if car == &#39;Ferrari&#39;:
        break

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;BMW
Ferrari

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The loop will iterate through the list and print each car.&lt;/p&gt;

&lt;p&gt;In this case, after the loop reaches &amp;lsquo;Ferrari&amp;rsquo;, the  &lt;code&gt;break&lt;/code&gt;  is called and &amp;lsquo;McLaren&amp;rsquo; won&amp;rsquo;t be printed.&lt;/p&gt;

&lt;h2 id=&#34;how-to-skip-an-item-in-a-for-loop&#34;&gt;How to skip an item in a for loop&lt;/h2&gt;

&lt;p&gt;In this section, we&amp;rsquo;ll learn how  &lt;code&gt;continue&lt;/code&gt;  can do this for you.&lt;/p&gt;

&lt;p&gt;I had to invert the order of the  &lt;code&gt;if&lt;/code&gt;  statement and the  &lt;code&gt;continue&lt;/code&gt;  to show how it works properly.&lt;/p&gt;

&lt;p&gt;Notice that I always check if &amp;lsquo;Ferrari&amp;rsquo; is the current item. If it is, &amp;lsquo;Ferrari&amp;rsquo; won&amp;rsquo;t be printed, and the  &lt;code&gt;continue&lt;/code&gt;  will skip to the next item &amp;lsquo;McLaren&amp;rsquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cars = [&#39;BMW&#39;, &#39;Ferrari&#39;, &#39;McLaren&#39;]
for car in cars:
    if car == &#39;Ferrari&#39;:
        continue
    print(car)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;BMW
McLaren

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;loop-over-a-loop-nested-loops&#34;&gt;Loop over a Loop: Nested Loops&lt;/h2&gt;

&lt;p&gt;Sometimes you have more complex collections, like a list of lists.&lt;/p&gt;

&lt;p&gt;To iterate over these lists, you need nested  &lt;code&gt;for&lt;/code&gt;  loops.&lt;/p&gt;

&lt;p&gt;In this case, I have three lists: one of BMW models, another on Ferrari models, and finally one with McLaren models.&lt;/p&gt;

&lt;p&gt;The first loop iterates over each brand&amp;rsquo;s list, and the second will iterate over the models of each brand.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;car_models = [ 
[&#39;BMW I8&#39;, &#39;BMW X3&#39;, 
&#39;BMW X1&#39;], 
[&#39;Ferrari 812&#39;, &#39;Ferrari F8&#39;, 
&#39;Ferrari GTC4&#39;], 
[&#39;McLaren 570S&#39;, &#39;McLaren 570GT&#39;, 
&#39;McLaren 720S&#39;]
]

for brand in car_models:
    for model in brand:
        print(model)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;BMW I8
BMW X3
BMW X1
Ferrari 812
Ferrari F8
Ferrari GTC4
McLaren 570S
McLaren 570GT
McLaren 720S

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;loop-over-other-data-structures&#34;&gt;Loop over other Data Structures&lt;/h2&gt;

&lt;p&gt;The same logic that applies  &lt;code&gt;for&lt;/code&gt;  loops over a  &lt;code&gt;list&lt;/code&gt;  can be extended to the other data structures:  &lt;code&gt;tuple&lt;/code&gt;,  &lt;code&gt;set&lt;/code&gt;, and  &lt;code&gt;dictionary&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I will briefly demonstrate how to make a basic loop over each one of them.&lt;/p&gt;

&lt;h3 id=&#34;loop-over-a-tuple&#34;&gt;Loop over a Tuple&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people = (&#39;Bob&#39;, &#39;Mary&#39;)

for person in people:
  print(person)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Bob
Mary

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;loop-over-a-set&#34;&gt;Loop over a Set&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people = {&#39;Bob&#39;, &#39;Mary&#39;}

for person in people:
  print(person)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Bob
Mary

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;loop-over-a-dictionary&#34;&gt;Loop over a Dictionary&lt;/h3&gt;

&lt;p&gt;To print the keys:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people = {&#39;Bob&#39;:30, &#39;Mary&#39;:25}

for person in people:
  print(person)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Bob
Mary

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To print the values:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people = {&#39;Bob&#39;:30, &#39;Mary&#39;:25}

for person in people:
  print(people[person])

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;30
25

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;functions&#34;&gt;Functions&lt;/h1&gt;

&lt;p&gt;As the code grows the complexity also grows. And functions help organize the code.&lt;/p&gt;

&lt;p&gt;Functions are a handy way to create blocks of code that you can reuse.&lt;/p&gt;

&lt;h2 id=&#34;definition-and-calling&#34;&gt;Definition and Calling&lt;/h2&gt;

&lt;p&gt;In Python use the  &lt;code&gt;def&lt;/code&gt;  keyword to define a function.&lt;/p&gt;

&lt;p&gt;Give it a name and use parentheses to inform 0 or more arguments.&lt;/p&gt;

&lt;p&gt;In the line after the declaration starts, remember to indent the block of code.&lt;/p&gt;

&lt;p&gt;Here is an example of a function called  &lt;code&gt;print_first_function()&lt;/code&gt;  that only prints a phrase &amp;lsquo;My first function!&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;To call the function just use its name as defined.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def print_first_function():
    print(&#39;My first function!&#39;)

print_first_function()

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language--&#34;&gt;My first function!

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;return-a-value&#34;&gt;&lt;code&gt;return&lt;/code&gt;  a value&lt;/h2&gt;

&lt;p&gt;Use the  &lt;code&gt;return&lt;/code&gt;  keyword to return a value from the function.&lt;/p&gt;

&lt;p&gt;In this example the function  &lt;code&gt;second_function()&lt;/code&gt;  returns the string &amp;lsquo;My second function!&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;Notice that  &lt;code&gt;print()&lt;/code&gt;  is a built-in function and our function is called from inside it.&lt;/p&gt;

&lt;p&gt;The string returned by  &lt;code&gt;second_function()&lt;/code&gt;  is passed as an argument to the  &lt;code&gt;print()&lt;/code&gt;  function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def second_function():
    return &#39;My second function!&#39;

print(second_function())

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;My second function!

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;return-multiple-values&#34;&gt;&lt;code&gt;return&lt;/code&gt;  multiple values&lt;/h2&gt;

&lt;p&gt;Functions can also return multiple values at once.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;return_numbers()&lt;/code&gt;  returns two values simultaneously.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def return_numbers():
    return 10, 2

print(return_numbers())

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(10, 2)

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;arguments&#34;&gt;Arguments&lt;/h2&gt;

&lt;p&gt;You can define parameters between the parentheses.&lt;/p&gt;

&lt;p&gt;When calling a function with parameters you have to pass arguments according to the parameters defined.&lt;/p&gt;

&lt;p&gt;The past examples had no parameters, so there was no need for arguments. The parentheses remained empty when the functions were called.&lt;/p&gt;

&lt;h3 id=&#34;one-argument&#34;&gt;One Argument&lt;/h3&gt;

&lt;p&gt;To specify one parameter, just define it inside the parentheses.&lt;/p&gt;

&lt;p&gt;In this example, the function  &lt;code&gt;my_number&lt;/code&gt;  expects one number as argument defined by the parameter  &lt;code&gt;num&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The value of the argument is then accessible inside the function to be used.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def my_number(num):
    return &#39;My number is: &#39; + str(num)

print(my_number(10))

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;My number is: 10

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;two-or-more-arguments&#34;&gt;Two or more Arguments&lt;/h3&gt;

&lt;p&gt;To define more parameters, just use a comma to separate them.&lt;/p&gt;

&lt;p&gt;Here we have a function that adds two numbers called  &lt;code&gt;add&lt;/code&gt;. It expects two arguments defined by  &lt;code&gt;first_num&lt;/code&gt;  and  &lt;code&gt;second_num&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The arguments are added by the  &lt;code&gt;+&lt;/code&gt;  operator and the result is then returned by the  &lt;code&gt;return&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def add(first_num, second_num):
    return first_num + second_num

print(add(10,2))

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;12

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example is very similar to the last one. The only difference is that we have 3 parameters instead of 2.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def add(first_num, second_num, third_num):
    return first_num + second_num + third_num

print(add(10,2,3))

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;15

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This logic of defining parameters and passing arguments is the same for any number of parameters.&lt;/p&gt;

&lt;p&gt;It is important to point out that the arguments have to be passed in the same order that the parameters are defined.&lt;/p&gt;

&lt;h3 id=&#34;default-value&#34;&gt;Default value.&lt;/h3&gt;

&lt;p&gt;You can set a default value for a parameter if no argument is given using the  &lt;code&gt;=&lt;/code&gt;  operator and a value of choice.&lt;/p&gt;

&lt;p&gt;In this function, if no argument is given, the number 30 is assumed as the expected value by default.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def my_number(my_number = 30):
    return &#39;My number is: &#39; + str(my_number)

print(my_number(10))
print(my_number())

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;My number is: 10
My number is: 30

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;keyword-or-named-arguments&#34;&gt;Keyword or Named Arguments&lt;/h3&gt;

&lt;p&gt;When calling a function, the order of the arguments have to match the order of the parameters.&lt;/p&gt;

&lt;p&gt;The alternative is if you use keyword or named arguments.&lt;/p&gt;

&lt;p&gt;Set the arguments to their respective parameters directly using the name of the parameters and the  &lt;code&gt;=&lt;/code&gt;  operators.&lt;/p&gt;

&lt;p&gt;This example flips the arguments, but the function works as expected because I tell it which value goes to which parameter by name.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def my_numbers(first_number, second_number):
    return &#39;The numbers are: &#39; + str(first_number) + &#39; and &#39; + str(second_number)

print(my_numbers(second_number=30, first_number=10))

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;The numbers are: 10 and 30

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;any-number-of-arguments-args&#34;&gt;Any number of arguments:  &lt;code&gt;*args&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;If you don&amp;rsquo;t want to specify the number of parameters, just use the  &lt;code&gt;*&lt;/code&gt;  before the parameter name. Then the function will take as many arguments as necessary.&lt;/p&gt;

&lt;p&gt;The parameter name could be anything like  &lt;code&gt;*numbers&lt;/code&gt;, but there is a convention in Python to use  &lt;code&gt;*args&lt;/code&gt;  for this definition of a variable number of arguments.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def my_numbers(*args):
    for arg in args:
        print(number)

my_numbers(10,2,3)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;10
2
3

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;any-number-of-keyword-named-arguments-kwargs&#34;&gt;Any number of Keyword/Named arguments:  &lt;code&gt;**kwargs&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Similar to  &lt;code&gt;*args&lt;/code&gt;, we can use  &lt;code&gt;**kwargs&lt;/code&gt;  to pass as many keyword arguments as we want, as long as we use  &lt;code&gt;**&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Again, the name could be anything like  &lt;code&gt;**numbers&lt;/code&gt;, but  &lt;code&gt;**kwargs&lt;/code&gt;  is a convention.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def my_numbers(**kwargs):
    for key, value in kwargs.items():
        print(key)
        print(value)

my_numbers(first_number=30, second_number=10)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;first_number
30
second_number
10

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;other-types-as-arguments&#34;&gt;Other types as arguments&lt;/h3&gt;

&lt;p&gt;The past examples used mainly numbers, but you can pass any type as argument and they will be treated as such inside the function.&lt;/p&gt;

&lt;p&gt;This example takes strings as arguments.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def my_sport(sport):
    print(&#39;I like &#39; + sport)

my_sport(&#39;football&#39;)
my_sport(&#39;swimming&#39;)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;I like football
I like swimming

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function takes a list as argument.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def my_numbers(numbers):
    for number in numbers:
        print(number)

my_numbers([30, 10, 64, 92, 105])

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;30
10
64
92
105

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;scope&#34;&gt;Scope&lt;/h1&gt;

&lt;p&gt;The place where a variable is created defines its availability to be accessed and manipulated by the rest of the code. This is known as  &lt;strong&gt;scope&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There are two types of scope: local and global.&lt;/p&gt;

&lt;h2 id=&#34;global-scope&#34;&gt;Global Scope&lt;/h2&gt;

&lt;p&gt;A global scope allows you to use the variable anywhere in your program.&lt;/p&gt;

&lt;p&gt;If your variable is outside a function, it has global scope by default.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;name = &#39;Bob&#39;

def print_name():
  print(&#39;My name is &#39; + name)

print_name()

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;My name is Bob

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that the function could use the variable  &lt;code&gt;name&lt;/code&gt;  and print  &lt;code&gt;My name is Bob&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;local-scope&#34;&gt;Local Scope&lt;/h2&gt;

&lt;p&gt;When you declare a variable inside a function, it only exists inside that function and can&amp;rsquo;t be accessed from the outside.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def print_name():
	name = &amp;quot;Bob&amp;quot;
	print(&#39;My name is &#39; + name)

print_name()

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;My name is Bob

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The variable  &lt;code&gt;name&lt;/code&gt;  was declared inside the function, so the output is the same as before.&lt;/p&gt;

&lt;p&gt;But this will throw an error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def print_name():
	name = &#39;Bob&#39;
	print(&#39;My name is &#39; + name)

print(name)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output of the code above is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
NameError: name &#39;name&#39; is not defined

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I tried to print the variable  &lt;code&gt;name&lt;/code&gt;  from outside the function, but the scope of the variable was local and could not be found in a global scope.&lt;/p&gt;

&lt;h2 id=&#34;mixing-scopes&#34;&gt;Mixing Scopes&lt;/h2&gt;

&lt;p&gt;If you use the same name for variables inside and outside a function, the function will use the one inside its scope.&lt;/p&gt;

&lt;p&gt;So when you call  &lt;code&gt;print_name()&lt;/code&gt;, the  &lt;code&gt;name=&#39;Bob&#39;&lt;/code&gt;  is used to print the phrase.&lt;/p&gt;

&lt;p&gt;On the other hand, when calling  &lt;code&gt;print()&lt;/code&gt;  outside the function scope,  &lt;code&gt;name=&amp;quot;Sarah&amp;quot;&lt;/code&gt;  is used because of its global scope.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;name = &amp;quot;Sarah&amp;quot;

def print_name():
	name = &#39;Bob&#39;
	print(&#39;My name is &#39; + name)

print_name()

print(name)


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output of the code above is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;My name is Bob

Sarah

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;list-comprehensions&#34;&gt;List Comprehensions&lt;/h1&gt;

&lt;p&gt;Sometimes we want to perform some very simple operations over the items of a list.&lt;/p&gt;

&lt;p&gt;List comprehensions give us a succinct way to work on lists as an alternative to other methods of iteration, such as  &lt;code&gt;for&lt;/code&gt;  loops.&lt;/p&gt;

&lt;h2 id=&#34;basic-syntax-2&#34;&gt;Basic syntax&lt;/h2&gt;

&lt;p&gt;To use a list comprehension to replace a regular for loop, we can make:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[expression for item in list]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which is the same as doing:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for item in list:
    expression

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we want some conditional to apply the expression, we have:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[expression for item in list if conditional ]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which is the same as doing:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for item in list:
    if conditional:
        expression

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;example-1-calculating-the-cube-of-a-number&#34;&gt;Example 1: calculating the cube of a number&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Regular way&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;numbers = [1, 2, 3, 4, 5]
new_list = []

for n in numbers:
    new_list.append(n**3)

print(new_list)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1, 8, 27, 64, 125]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Using list comprehensions&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;numbers = [1, 2, 3, 4, 5]
new_list = []

new_list = [n**3 for n in numbers]

print(new_list)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt; [1, 8, 27, 64, 125]

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;example-2-calculating-the-cube-of-a-number-only-if-it-is-greater-than-3&#34;&gt;Example 2: calculating the cube of a number only if it is greater than 3&lt;/h2&gt;

&lt;p&gt;Using the conditional, we can filter only the values we want the expression to be applied to.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Regular way&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;numbers = [1, 2, 3, 4, 5]
new_list = []

for n in numbers:
    if(n &amp;gt; 3):
        new_list.append(n**3)

print(new_list)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[64, 125]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Using list comprehensions&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;numbers = [1, 2, 3, 4, 5]
new_list = []

new_list = [n**3 for n in numbers if n &amp;gt; 3]

print(new_list)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[64, 125]

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;example-3-calling-functions-with-list-comprehensions&#34;&gt;Example 3: calling functions with list comprehensions&lt;/h2&gt;

&lt;p&gt;We can also call functions using the list comprehension syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;numbers = [1, 2, 3, 4, 5]
new_list = []

def cube(number):
    return number**3

new_list = [cube(n) for n in numbers if n &amp;gt; 3]

print(new_list)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[64, 125]

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;lambda-functions&#34;&gt;Lambda Functions&lt;/h1&gt;

&lt;p&gt;A Python lambda function can only have one expression and can&amp;rsquo;t have multiple lines.&lt;/p&gt;

&lt;p&gt;It is supposed to make it easier to create some small logic in one line instead of a whole function as is usually done.&lt;/p&gt;

&lt;p&gt;Lambda functions are also anonymous, which means there is no need to name them.&lt;/p&gt;

&lt;h2 id=&#34;basic-syntax-3&#34;&gt;Basic Syntax&lt;/h2&gt;

&lt;p&gt;The basic syntax is very simple: just use the  &lt;code&gt;lambda&lt;/code&gt;  keyword, define the parameters needed, and use &amp;ldquo;:&amp;rdquo; to separate the parameters from the expression.&lt;/p&gt;

&lt;p&gt;The general forms is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lambda arguments : expression

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;one-parameter-example&#34;&gt;One parameter example&lt;/h3&gt;

&lt;p&gt;Look at this example using only one parameter&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cubic = lambda number : number**3
print(cubic(2))

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;8

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;multiple-parameter-example&#34;&gt;Multiple parameter example&lt;/h3&gt;

&lt;p&gt;If you want, you can also have multiple parameters.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;exponential = lambda multiplier, number, exponent : multiplier * number**exponent
print(exponential(2, 2, 3))

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;16

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;calling-the-lambda-function-directly&#34;&gt;Calling the Lambda Function directly&lt;/h3&gt;

&lt;p&gt;You don&amp;rsquo;t need to use a variable as we did before. Instead you can make use of parenthesis around the lambda function and another pair of parenthesis around the arguments.&lt;/p&gt;

&lt;p&gt;The declaration of the function and the execution will happen in the same line.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;(lambda multiplier, number, exponent : multiplier * number**exponent)(2, 2, 3)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;16

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;examples-using-lambda-functions-with-other-built-in-functions&#34;&gt;Examples using lambda functions with other built-in functions&lt;/h2&gt;

&lt;h3 id=&#34;map&#34;&gt;Map&lt;/h3&gt;

&lt;p&gt;The Map function applies the expression to each item in a list.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s calculate the cubic of each number in the list.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;numbers = [2, 5, 10]
cubics = list(map(lambda number : number**3, numbers))
print(cubics)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[8, 125, 1000]

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;filter&#34;&gt;Filter&lt;/h3&gt;

&lt;p&gt;The Filter function will filter the list based on the expression.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s filter to have only the numbers greater than 5.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;numbers = [2, 5, 10]
filtered_list = list(filter(lambda number : number &amp;gt; 5, numbers))
print(filtered_list)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[10]

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;modules&#34;&gt;Modules&lt;/h1&gt;

&lt;p&gt;After some time your code starts to get more complex with lots of functions and variables.&lt;/p&gt;

&lt;p&gt;To make it easier to organize the code we use Modules.&lt;/p&gt;

&lt;p&gt;A well-designed Module also has the advantage of being reusable, so you write code once and reuse it everywhere.&lt;/p&gt;

&lt;p&gt;You can write a module with all the mathematical operations and other people can use it.&lt;/p&gt;

&lt;p&gt;And, if you need, you can use someone else&amp;rsquo;s modules to simplify your code, speeding up your project.&lt;/p&gt;

&lt;p&gt;In other programming languages, these are also referred to as libraries.&lt;/p&gt;

&lt;h2 id=&#34;using-a-module&#34;&gt;Using a Module&lt;/h2&gt;

&lt;p&gt;To use a module we use the  &lt;code&gt;import&lt;/code&gt;  keyword.&lt;/p&gt;

&lt;p&gt;As the name implies we have to tell our program what module to import.&lt;/p&gt;

&lt;p&gt;After that, we can use any function available in that module.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see an example using the  &lt;code&gt;math&lt;/code&gt;  module.&lt;/p&gt;

&lt;p&gt;First, let&amp;rsquo;s see how to have access to a constant, Euler&amp;rsquo;s number.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import math

math.e

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2.718281828459045

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this second example, we are going to use a function that calculates the square root of a number.&lt;/p&gt;

&lt;p&gt;It is also possible to use the  &lt;code&gt;as&lt;/code&gt;  keyword to create an alias.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import math as m

m.sqrt(121)

m.sqrt(729)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;11
27

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, using the  &lt;code&gt;from&lt;/code&gt;  keyword, we can specify exactly what to import instead of the whole module and use the function directly without the module&amp;rsquo;s name.&lt;/p&gt;

&lt;p&gt;This example uses the  &lt;code&gt;floor()&lt;/code&gt;  function that returns the largest integer less than or equal to a given number.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from math import floor

floor(9.8923)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;9

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;creating-a-module&#34;&gt;Creating a Module&lt;/h2&gt;

&lt;p&gt;Now that we know how to use modules, let&amp;rsquo;s see how to create one.&lt;/p&gt;

&lt;p&gt;It is going to be a module with the basic math operations  &lt;code&gt;add&lt;/code&gt;,  &lt;code&gt;subtract&lt;/code&gt;,  &lt;code&gt;multiply&lt;/code&gt;,  &lt;code&gt;divide&lt;/code&gt;  and it is gonna be called  &lt;code&gt;basic_operations&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Create the  &lt;code&gt;basic_operations.py&lt;/code&gt;  file with the four functions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def add(first_num, second_num):
    return first_num + second_num

def subtract(first_num, second_num):
    return first_num - second_num

def multiply(first_num, second_num):
    return first_num * second_num

def divide(first_num, second_num):
    return first_num / second_num

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, just import the  &lt;code&gt;basic_operations&lt;/code&gt;  module and use the functions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import basic_operations

basic_operations.add(10,2)
basic_operations.subtract(10,2)
basic_operations.multiply(10,2)
basic_operations.divide(10,2)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;12
8
20
5.0

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;if-name-main&#34;&gt;&lt;code&gt;if __name__ == &#39;__main__&#39;&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;You are in the process of building a module with the basic math operations  &lt;code&gt;add&lt;/code&gt;,  &lt;code&gt;subtract&lt;/code&gt;,  &lt;code&gt;multiply&lt;/code&gt;, and  &lt;code&gt;divide&lt;/code&gt;  called  &lt;code&gt;basic_operations&lt;/code&gt;  saved in the  &lt;code&gt;basic_operations.py&lt;/code&gt;  file.&lt;/p&gt;

&lt;p&gt;To guarantee everything is fine, you can run some tests.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def add(first_num, second_num):
    return first_num + second_num

def subtract(first_num, second_num):
    return first_num - second_num

def multiply(first_num, second_num):
    return first_num * second_num

def divide(first_num, second_num):
    return first_num / second_num

print(add(10, 2)) 
print(subtract(10,2))
print(multiply(10,2))
print(divide(10,2))

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After running the code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;renan@pro-home:~$ python3 basic_operations.py

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;12
8
20
5.0

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output for those tests are what we expected.&lt;/p&gt;

&lt;p&gt;Our code is right and ready to share.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s import the new module run it in the Python console.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Python 3.6.9 (default, Nov  7 2019, 10:44:02) 
[GCC 8.3.0] on linux
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt; import basic_operations
12
8
20
5.0
&amp;gt;&amp;gt;&amp;gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the module is imported our tests are displayed on the screen even though we didn&amp;rsquo;t do anything besides importing  &lt;code&gt;basic_operations&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To fix that we use  &lt;code&gt;if __name__ == &#39;__main__&#39;&lt;/code&gt;  in the  &lt;code&gt;basic_operations.py&lt;/code&gt;  file like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def add(first_num, second_num):
    return first_num + second_num

def subtract(first_num, second_num):
    return first_num - second_num

def multiply(first_num, second_num):
    return first_num * second_num

def divide(first_num, second_num):
    return first_num / second_num

if __name__ == &#39;__main__&#39;:
    print(add(10, 2)) 
    print(subtract(10,2))
    print(multiply(10,2))
    print(divide(10,2))

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running the code directly on the terminal will continue to display the tests. But when you import it like a module, the tests won&amp;rsquo;t show and you can use the functions the way you intended.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Python 3.6.9 (default, Nov  7 2019, 10:44:02) 
[GCC 8.3.0] on linux
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt; import basic_operations
&amp;gt;&amp;gt;&amp;gt; basic_operations.multiply(10,2)
20
&amp;gt;&amp;gt;&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that you know how to use the  &lt;code&gt;if __name__ == &#39;__main__&#39;&lt;/code&gt;, let&amp;rsquo;s understand how it works.&lt;/p&gt;

&lt;p&gt;The condition tells when the interpreter is treating the code as a module or as a program itself being executed directly.&lt;/p&gt;

&lt;p&gt;Python has this native variable called  &lt;code&gt;__name__&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This variable represents the name of the module which is the name of the  &lt;code&gt;.py&lt;/code&gt;  file.&lt;/p&gt;

&lt;p&gt;Create a file  &lt;code&gt;my_program.py&lt;/code&gt;  with the following and execute it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(__name__)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output will be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;__main__

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This tells us that when a program is executed directly, the variable  &lt;code&gt;__name__&lt;/code&gt;  is defined as  &lt;code&gt;__main__&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But when it is imported as a module, the value of  &lt;code&gt;__name__&lt;/code&gt;  is the name of the module.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Python 3.6.9 (default, Nov  7 2019, 10:44:02) 
[GCC 8.3.0] on linux
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt; import my_program
my_program
&amp;gt;&amp;gt;&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is how the Python interpreter differentiates the behavior of an imported module and a program executed directly on the terminal.&lt;/p&gt;

&lt;h1 id=&#34;files&#34;&gt;Files&lt;/h1&gt;

&lt;p&gt;Creating, deleting, reading, and many other functions applied to files are an integral part of many programs.&lt;/p&gt;

&lt;p&gt;As such, it is very important to know how to organize and deal with files directly from your code.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see how to handle files in Python.&lt;/p&gt;

&lt;h2 id=&#34;file-create&#34;&gt;File create&lt;/h2&gt;

&lt;p&gt;First things first, create!&lt;/p&gt;

&lt;p&gt;We are going to use the  &lt;code&gt;open()&lt;/code&gt;  function.&lt;/p&gt;

&lt;p&gt;This function opens a file and returns its corresponding object.&lt;/p&gt;

&lt;p&gt;The first argument is the name of the file we are handling, the second refers to the operation we are using.&lt;/p&gt;

&lt;p&gt;The code below creates the file &amp;ldquo;people.txt&amp;rdquo;, the  &lt;code&gt;x&lt;/code&gt;  argument is used when we just want to create the file. If a file with the same name already exists, it will throw an exception.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people_file = open(&amp;quot;people.txt&amp;quot;, &amp;quot;x&amp;quot;)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also use the  &lt;code&gt;w&lt;/code&gt;  mode to create a file. Unlike the  &lt;code&gt;x&lt;/code&gt;  mode, it will not throw an exception since this mode indicates the  &lt;em&gt;writing&lt;/em&gt;  mode. We are opening a file to write data into it and, if the file doesn&amp;rsquo;t exist, it is created.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people_file = open(&amp;quot;people.txt&amp;quot;, &amp;quot;w&amp;quot;)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last one is the  &lt;code&gt;a&lt;/code&gt;  mode which stands for  &lt;em&gt;append&lt;/em&gt;. As the name implies, you can append more data to the file, while the  &lt;code&gt;w&lt;/code&gt;  mode simply overwrites any existing data.&lt;/p&gt;

&lt;p&gt;When appending, if the file doesn&amp;rsquo;t exist, it also creates it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people_file = open(&amp;quot;people.txt&amp;quot;, &amp;quot;a&amp;quot;)

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;file-write&#34;&gt;File write&lt;/h2&gt;

&lt;p&gt;To write data into a file, you simply open a file with the  &lt;code&gt;w&lt;/code&gt;  mode.&lt;/p&gt;

&lt;p&gt;Then, to add data, you use the object return by the  &lt;code&gt;open()&lt;/code&gt;  function. In this case, the object is called  &lt;code&gt;people_file&lt;/code&gt;. Then you call the  &lt;em&gt;write()&lt;/em&gt;  function passing the data as argument.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people_file = open(&amp;quot;people.txt&amp;quot;, &amp;quot;w&amp;quot;)
people_file.write(&amp;quot;Bob\n&amp;quot;)
people_file.write(&amp;quot;Mary\n&amp;quot;)
people_file.write(&amp;quot;Sarah\n&amp;quot;)
people_file.close()

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We use  &lt;code&gt;\n&lt;/code&gt;  at the end to break the line, otherwise the content in the file will stay in the same line as &amp;ldquo;BobMarySarah&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;One more detail is to  &lt;em&gt;close()&lt;/em&gt;  the file. This is not only a good practice, but also ensures that your changes were applied to the file.&lt;/p&gt;

&lt;p&gt;Remember that when using  &lt;code&gt;w&lt;/code&gt;  mode, the data that already existed in the file will be overwritten by the new data. To add new data without losing what was already there, we have to use the append mode.&lt;/p&gt;

&lt;h2 id=&#34;file-append&#34;&gt;File append&lt;/h2&gt;

&lt;p&gt;The  &lt;code&gt;a&lt;/code&gt;  mode appends new data to the file, keeping the existing one.&lt;/p&gt;

&lt;p&gt;In this example, after the first writing with  &lt;code&gt;w&lt;/code&gt;  mode, we are using the  &lt;code&gt;a&lt;/code&gt;  mode to append. The result is that each name will appear twice in the file &amp;ldquo;people.txt&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#first write
people_file = open(&amp;quot;people.txt&amp;quot;, &amp;quot;w&amp;quot;)
people_file.write(&amp;quot;Bob\n&amp;quot;)
people_file.write(&amp;quot;Mary\n&amp;quot;)
people_file.write(&amp;quot;Sarah\n&amp;quot;)
people_file.close()

#appending more data
#keeping the existing data
people_file = open(&amp;quot;people.txt&amp;quot;, &amp;quot;a&amp;quot;)
people_file.write(&amp;quot;Bob\n&amp;quot;)
people_file.write(&amp;quot;Mary\n&amp;quot;)
people_file.write(&amp;quot;Sarah\n&amp;quot;)
people_file.close()

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;file-read&#34;&gt;File read&lt;/h2&gt;

&lt;p&gt;Reading the file is also very straightforward: just use the  &lt;code&gt;r&lt;/code&gt;  mode like so.&lt;/p&gt;

&lt;p&gt;If you read the &amp;ldquo;people.txt&amp;rdquo; file created in the last example, you should see 6 names in your output.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people_file = open(&amp;quot;people.txt&amp;quot;, &amp;quot;r&amp;quot;)
print(people_file.read())

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Bob
Mary
Sarah
Bob
Mary
Sarah

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The  &lt;code&gt;read()&lt;/code&gt;  function reads the whole file at once. If you use the  &lt;code&gt;readline()&lt;/code&gt;  function, you can read the file line by line.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people_file = open(&amp;quot;people.txt&amp;quot;, &amp;quot;r&amp;quot;)
print(people_file.readline())
print(people_file.readline())
print(people_file.readline())

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Bob
Mary
Sarah

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also loop to read the lines like the example below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;people_file = open(&amp;quot;people.txt&amp;quot;, &amp;quot;r&amp;quot;)
for person in people_file:
  print(person)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Bob
Mary
Sarah
Bob
Mary
Sarah

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;delete-a-file&#34;&gt;Delete a File&lt;/h2&gt;

&lt;p&gt;To delete a file, you also need the  &lt;code&gt;os&lt;/code&gt;  module.&lt;/p&gt;

&lt;p&gt;Use the  &lt;code&gt;remove()&lt;/code&gt;  method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os

os.remove(&#39;my_file.txt&#39;)

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;check-if-a-file-exists&#34;&gt;Check if a File Exists&lt;/h2&gt;

&lt;p&gt;Use the  &lt;code&gt;os.path.exists()&lt;/code&gt;  method to check the existence of a file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os

if os.path.exists(&#39;my_file.txt&#39;):
  os.remove(&#39;my_file.txt&#39;)
else:
  print(&#39;There is no such file!&#39;)

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;copy-a-file&#34;&gt;Copy a File&lt;/h2&gt;

&lt;p&gt;For this one, I like to use the  &lt;code&gt;copyfile()&lt;/code&gt;  method from the  &lt;code&gt;shutil&lt;/code&gt;  module.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from shutil import copyfile

copyfile(&#39;my_file.txt&#39;,&#39;another_file.txt&#39;)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are a few options to copy a file, but  &lt;code&gt;copyfile()&lt;/code&gt;  is the fastest one.&lt;/p&gt;

&lt;h2 id=&#34;rename-and-move-a-file&#34;&gt;Rename and Move a File&lt;/h2&gt;

&lt;p&gt;If you need to move or rename a file you can use the  &lt;code&gt;move()&lt;/code&gt;  method from the  &lt;code&gt;shutil&lt;/code&gt;  module.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from shutil import move

move(&#39;my_file.txt&#39;,&#39;another_file.txt&#39;)

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;classes-and-objects&#34;&gt;Classes and Objects&lt;/h1&gt;

&lt;p&gt;Classes and Objects are the fundamental concepts of Object-Oriented Programming.&lt;/p&gt;

&lt;p&gt;In Python,  &lt;strong&gt;everything is an object&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;A variable (object) is just an instance of its type (class).&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s why when you check the type of a variable you can see the  &lt;code&gt;class&lt;/code&gt;  keyword right next to its type (class).&lt;/p&gt;

&lt;p&gt;This code snippet shows that  &lt;code&gt;my_city&lt;/code&gt;  is an object and it is an instance of the class  &lt;code&gt;str&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_city = &amp;quot;New York&amp;quot;
print(type(my_city))

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;str&#39;&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;differentiate-class-x-object&#34;&gt;Differentiate Class x Object&lt;/h2&gt;

&lt;p&gt;The class gives you a standard way to create objects. A class is like a base project.&lt;/p&gt;

&lt;p&gt;Say you are an engineer working for Boeing.&lt;/p&gt;

&lt;p&gt;Your new mission is to build the new product for the company, a new model called 747-Space. This aircraft flies higher altitudes than other commercial models.&lt;/p&gt;

&lt;p&gt;Boeing needs to build dozens of those to sell to airlines all over the world, and the aircrafts have to be all the same.&lt;/p&gt;

&lt;p&gt;To guarantee that the aircrafts (objects) follow the same standards, you need to have a project (class) that can be replicable.&lt;/p&gt;

&lt;p&gt;The class is a project, a blueprint for an object.&lt;/p&gt;

&lt;p&gt;This way you make the project once, and reuse it many times.&lt;/p&gt;

&lt;p&gt;In our code example before, consider that every string has the same behavior and the same attributes. So it only makes sense for strings to have a class  &lt;code&gt;str&lt;/code&gt;  to define them.&lt;/p&gt;

&lt;h2 id=&#34;attributes-and-methods&#34;&gt;Attributes and Methods&lt;/h2&gt;

&lt;p&gt;Objects have some behavior which is is given by attributes and methods.&lt;/p&gt;

&lt;p&gt;In simple terms, in the context of an object, attributes are variables and methods are functions attached to an object.&lt;/p&gt;

&lt;p&gt;For example, a string has many built-in methods that we can use.&lt;/p&gt;

&lt;p&gt;They work like functions, you just need to separate them from the objects using a  &lt;code&gt;.&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In this code snippet, I&amp;rsquo;m calling the  &lt;code&gt;replace()&lt;/code&gt;  method from the string variable  &lt;code&gt;my_city&lt;/code&gt;  which is an object, and an instance of the class  &lt;code&gt;str&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The  &lt;code&gt;replace()&lt;/code&gt;  method replaces a part of the string for another and returns a new string with the change. The original string remains the same.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s replace &amp;lsquo;New&amp;rsquo; for &amp;lsquo;Old&amp;rsquo; in &amp;lsquo;New York&amp;rsquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_city = &#39;New York&#39;
print(my_city.replace(&#39;New&#39;, &#39;Old&#39;))
print(my_city)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Old York
New York

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;creating-a-class&#34;&gt;Creating a Class&lt;/h2&gt;

&lt;p&gt;We have used many objects (instances of classes) like strings, integers, lists, and dictionaries. All of them are instances of predefined classes in Python.&lt;/p&gt;

&lt;p&gt;To create our own classes we use the  &lt;code&gt;class&lt;/code&gt;  keyword.&lt;/p&gt;

&lt;p&gt;By convention, the name of the class matches the name of the  &lt;code&gt;.py&lt;/code&gt;  file and the module by consequence. It is also a good practice to organize the code.&lt;/p&gt;

&lt;p&gt;Create a file  &lt;code&gt;vehicle.py&lt;/code&gt;  with the following class  &lt;code&gt;Vehicle&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Vehicle:
    def __init__(self, year, model, plate_number, current_speed = 0):
        self.year = year
        self.model = model
        self.plate_number = plate_number
        self.current_speed = current_speed

    def move(self):
        self.current_speed += 1

    def accelerate(self, value):
        self.current_speed += value
    
    def stop(self):
        self.current_speed = 0
    
    def vehicle_details(self):
        return self.model + &#39;, &#39; + str(self.year) + &#39;, &#39; + self.plate_number

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s break down the class to explain it in parts.&lt;/p&gt;

&lt;p&gt;The  &lt;code&gt;class&lt;/code&gt;  keyword is used to specify the name of the class  &lt;code&gt;Vehicle&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The  &lt;code&gt;__init__&lt;/code&gt;  function is a built-in function that all classes have. It is called when an object is created and is often used to initialize the attributes, assigning values to them, similar to what is done to variables.&lt;/p&gt;

&lt;p&gt;The first parameter  &lt;code&gt;self&lt;/code&gt;  in the  &lt;code&gt;__init__&lt;/code&gt;  function is a reference to the object (instance) itself. We call it  &lt;code&gt;self&lt;/code&gt;  by convention and it has to be the first parameter in every instance method, as you can see in the other method definitions  &lt;code&gt;def move(self)&lt;/code&gt;,  &lt;code&gt;def accelerate(self, value)&lt;/code&gt;,  &lt;code&gt;def stop(self)&lt;/code&gt;, and  &lt;code&gt;def vehicle_details(self)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Vehicle&lt;/code&gt;  has 5 attributes (including self):  &lt;code&gt;year&lt;/code&gt;,  &lt;code&gt;model&lt;/code&gt;,  &lt;code&gt;plate_number&lt;/code&gt;, and  &lt;code&gt;current_speed&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Inside the  &lt;code&gt;__init__&lt;/code&gt;, each one of them is initialized with the parameters given when the object is instantiated.&lt;/p&gt;

&lt;p&gt;Notice that  &lt;code&gt;current_speed&lt;/code&gt;  is initialized with  &lt;code&gt;0&lt;/code&gt;  by default, meaning that if no value is given,  &lt;code&gt;current_speed&lt;/code&gt;  will be equal to 0 when the object is first instantiated.&lt;/p&gt;

&lt;p&gt;Finally, we have three methods to manipulate our vehicle regarding its speed:  &lt;code&gt;def move(self)&lt;/code&gt;,  &lt;code&gt;def accelerate(self, value)&lt;/code&gt;, and  &lt;code&gt;def stop(self)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And one method to give back information about the vehicle:  &lt;code&gt;def vehicle_details(self)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The implementation inside the methods work the same way as in functions. You can also have a  &lt;code&gt;return&lt;/code&gt;  to give you back some value at the end of the method as demonstrated by  &lt;code&gt;def vehicle_details(self)&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;using-the-class&#34;&gt;Using the Class&lt;/h2&gt;

&lt;p&gt;To use the class in your terminal, import the  &lt;code&gt;Vehicle&lt;/code&gt;  class from the  &lt;code&gt;vehicle&lt;/code&gt;  module.&lt;/p&gt;

&lt;p&gt;Create an instance called  &lt;code&gt;my_car&lt;/code&gt;, initializing  &lt;code&gt;year&lt;/code&gt;  with 2009,  &lt;code&gt;model&lt;/code&gt;  with &amp;lsquo;F8&amp;rsquo;,  &lt;code&gt;plate_number&lt;/code&gt;  with &amp;lsquo;ABC1234&amp;rsquo;, and  &lt;code&gt;current_speed&lt;/code&gt;  with 100.&lt;/p&gt;

&lt;p&gt;The  &lt;code&gt;self&lt;/code&gt;  parameter is not taken into consideration when calling methods. The Python interpreter infers its value as being the current object/instance automatically, so we just have to pass the other arguments when instantiating and calling methods.&lt;/p&gt;

&lt;p&gt;Now use the methods to  &lt;code&gt;move()&lt;/code&gt;  the car which increases its  &lt;code&gt;current_speed&lt;/code&gt;  by 1,  &lt;code&gt;accelerate(10)&lt;/code&gt;  which increases its  &lt;code&gt;current_speed&lt;/code&gt;  by the value given in the argument, and  &lt;code&gt;stop()&lt;/code&gt;  which sets the  &lt;code&gt;current_speed&lt;/code&gt;  to 0.&lt;/p&gt;

&lt;p&gt;Remember to print the value of  &lt;code&gt;current_speed&lt;/code&gt;  at every command to see the changes.&lt;/p&gt;

&lt;p&gt;To finish the test, call  &lt;code&gt;vehicle_details()&lt;/code&gt;  to print the information about our vehicle.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from vehicle import Vehicle
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; my_car = Vehicle(2009, &#39;F8&#39;, &#39;ABC1234&#39;, 100)
&amp;gt;&amp;gt;&amp;gt; print(my_car.current_speed)
100
&amp;gt;&amp;gt;&amp;gt; my_car.move()
&amp;gt;&amp;gt;&amp;gt; print(my_car.current_speed)
101
&amp;gt;&amp;gt;&amp;gt; my_car.accelerate(10)
&amp;gt;&amp;gt;&amp;gt; print(my_car.current_speed)
111
&amp;gt;&amp;gt;&amp;gt; my_car.stop()
&amp;gt;&amp;gt;&amp;gt; print(my_car.current_speed)
0
&amp;gt;&amp;gt;&amp;gt; print(my_car.vehicle_details())
F8, 2009, ABC1234

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we don&amp;rsquo;t set the initial value for  &lt;code&gt;current_speed&lt;/code&gt;, it will be zero by default as stated before and demonstrated in the next example.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from vehicle import Vehicle
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; my_car = Vehicle(2009, &#39;F8&#39;, &#39;ABC1234&#39;)
&amp;gt;&amp;gt;&amp;gt; print(my_car.current_speed)
0
&amp;gt;&amp;gt;&amp;gt; my_car.move()
&amp;gt;&amp;gt;&amp;gt; print(my_car.current_speed)
1
&amp;gt;&amp;gt;&amp;gt; my_car.accelerate(10)
&amp;gt;&amp;gt;&amp;gt; print(my_car.current_speed)
11
&amp;gt;&amp;gt;&amp;gt; my_car.stop()
&amp;gt;&amp;gt;&amp;gt; print(my_car.current_speed)
0
&amp;gt;&amp;gt;&amp;gt; print(my_car.vehicle_details())
F8, 2009, ABC1234

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;inheritance&#34;&gt;Inheritance&lt;/h1&gt;

&lt;p&gt;Let&amp;rsquo;s define a generic  &lt;code&gt;Vehicle&lt;/code&gt;  class and save it inside the  &lt;code&gt;vehicle.py&lt;/code&gt;  file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Vehicle:
    def __init__(self, year, model, plate_number, current_speed):
        self.year = year
        self.model = model
        self.plate_number = plate_number
        self.current_speed = current_speed

    def move(self):
        self.current_speed += 1

    def accelerate(self, value):
        self.current_speed += value
    
    def stop(self):
        self.current_speed = 0
    
    def vehicle_details(self):
        return self.model + &#39;, &#39; + str(self.year) + &#39;, &#39; + self.plate_number

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A vehicle has attributes  &lt;code&gt;year&lt;/code&gt;,  &lt;code&gt;model&lt;/code&gt;,  &lt;code&gt;plate_number&lt;/code&gt;, and  &lt;code&gt;current_speed&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The definition of vehicle in the  &lt;code&gt;Vehicle&lt;/code&gt;  is very generic and might not be suitable for trucks, for instance, because it should include a  &lt;code&gt;cargo&lt;/code&gt;  attribute.&lt;/p&gt;

&lt;p&gt;On the other hand, a cargo attribute does not make much sense for small vehicles like motorcycles.&lt;/p&gt;

&lt;p&gt;To solve this we can use  &lt;em&gt;inheritance&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;When a class (child) inherits another class (parent), all the attributes and methods from the parent class are inherited by the child class.&lt;/p&gt;

&lt;h2 id=&#34;parent-and-child&#34;&gt;Parent and Child&lt;/h2&gt;

&lt;p&gt;In our case, we want a new  &lt;code&gt;Truck&lt;/code&gt;  class to inherit everything from the  &lt;code&gt;Vehicle&lt;/code&gt;  class. Then we want it to add its own specific attribute  &lt;code&gt;current_cargo&lt;/code&gt;  to control the addition and removal of cargo from the truck.&lt;/p&gt;

&lt;p&gt;The  &lt;code&gt;Truck&lt;/code&gt;  class is called a  &lt;em&gt;child&lt;/em&gt;  class that inherits from its  &lt;em&gt;parent&lt;/em&gt;  class  &lt;code&gt;Vehicle&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A  &lt;em&gt;parent&lt;/em&gt;  class is also called a  &lt;em&gt;superclass&lt;/em&gt;  while a  &lt;em&gt;child&lt;/em&gt;  class is also known as a  &lt;em&gt;subclass&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Create the class  &lt;code&gt;Truck&lt;/code&gt;  and save it inside the  &lt;code&gt;truck.py&lt;/code&gt;  file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from vehicle import Vehicle

class Truck(Vehicle):
    def __init__(self, year, model, plate_number, current_speed, current_cargo):
        super().__init__(year, model, plate_number, current_speed)
        self.current_cargo = current_cargo

    def add_cargo(self, cargo):
        self.current_cargo += cargo

    def remove_cargo(self, cargo):
        self.current_cargo -= cargo

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s break down the class to explain it in parts.&lt;/p&gt;

&lt;p&gt;The class  &lt;code&gt;Vehicle&lt;/code&gt;  inside the parentheses when defining the class  &lt;code&gt;Truck&lt;/code&gt;  indicates that the  &lt;em&gt;parent&lt;/em&gt;  &lt;code&gt;Vehicle&lt;/code&gt;  is being inherited by its child  &lt;code&gt;Truck&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The  &lt;code&gt;__init__&lt;/code&gt;  method has  &lt;code&gt;self&lt;/code&gt;  as its first parameter, as usual.&lt;/p&gt;

&lt;p&gt;The parameters  &lt;code&gt;year&lt;/code&gt;,  &lt;code&gt;model&lt;/code&gt;,  &lt;code&gt;plate_number&lt;/code&gt;, and  &lt;code&gt;current_speed&lt;/code&gt;  are there to match the ones in the  &lt;code&gt;Vehicle&lt;/code&gt;  class.&lt;/p&gt;

&lt;p&gt;We added a new parameter  &lt;code&gt;current_cargo&lt;/code&gt;  suited for the  &lt;code&gt;Truck&lt;/code&gt;  class.&lt;/p&gt;

&lt;p&gt;In the first line of the  &lt;code&gt;__init__&lt;/code&gt;  method of the  &lt;code&gt;Truck&lt;/code&gt;  class we have to call the  &lt;code&gt;__init__&lt;/code&gt;  method of the  &lt;code&gt;Vehicle&lt;/code&gt;  class.&lt;/p&gt;

&lt;p&gt;To do that we use  &lt;code&gt;super()&lt;/code&gt;  to make a reference to the  &lt;em&gt;supperclass&lt;/em&gt;  &lt;code&gt;Vehicle&lt;/code&gt;, so when  &lt;code&gt;super().__init__(year, model, plate_number, current_speed)&lt;/code&gt;  is called we avoid repetition of our code.&lt;/p&gt;

&lt;p&gt;After that, we can assign the value of  &lt;code&gt;current_cargo&lt;/code&gt;  normally.&lt;/p&gt;

&lt;p&gt;Finally, we have two methods to deal with the  &lt;code&gt;current_cargo&lt;/code&gt;:  &lt;code&gt;def add_cargo(self, cargo):&lt;/code&gt;, and  &lt;code&gt;def remove_cargo(self, cargo):&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Remember that  &lt;code&gt;Truck&lt;/code&gt;  inherits attributes and methods from  &lt;code&gt;Vehicle&lt;/code&gt;, so we also have an implicit access to the methods that manipulate the speed:  &lt;code&gt;def move(self)&lt;/code&gt;,  &lt;code&gt;def accelerate(self, value)&lt;/code&gt;, and  &lt;code&gt;def stop(self)&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;using-the-truck-class&#34;&gt;Using the  &lt;code&gt;Truck&lt;/code&gt;  class&lt;/h2&gt;

&lt;p&gt;To use the class in your terminal, import the  &lt;code&gt;Truck&lt;/code&gt;  class from the  &lt;code&gt;truck&lt;/code&gt;  module.&lt;/p&gt;

&lt;p&gt;Create an instance called  &lt;code&gt;my_truck&lt;/code&gt;, initializing  &lt;code&gt;year&lt;/code&gt;  with 2015,  &lt;code&gt;model&lt;/code&gt;  with &amp;lsquo;V8&amp;rsquo;,  &lt;code&gt;plate_number&lt;/code&gt;  with &amp;lsquo;XYZ1234&amp;rsquo;,  &lt;code&gt;current_speed&lt;/code&gt;  with 0, and  &lt;code&gt;current_cargo&lt;/code&gt;  with 0.&lt;/p&gt;

&lt;p&gt;Use  &lt;code&gt;add_cargo(10)&lt;/code&gt;  to increase  &lt;code&gt;current_cargo&lt;/code&gt;  by 10,  &lt;code&gt;remove_cargo(4)&lt;/code&gt;, to decrease  &lt;code&gt;current_cargo&lt;/code&gt;  by 4.&lt;/p&gt;

&lt;p&gt;Remember to print the value of  &lt;code&gt;current_cargo&lt;/code&gt;  at every command to see the changes.&lt;/p&gt;

&lt;p&gt;By inheritance, we can use the methods from the  &lt;code&gt;Vehicle&lt;/code&gt;  class to  &lt;code&gt;move()&lt;/code&gt;  the truck which increases its  &lt;code&gt;current_speed&lt;/code&gt;  by 1,  &lt;code&gt;accelerate(10)&lt;/code&gt;  which increases its  &lt;code&gt;current_speed&lt;/code&gt;  by the value given in the argument, and  &lt;code&gt;stop()&lt;/code&gt;  which sets the  &lt;code&gt;current_speed&lt;/code&gt;  to 0.&lt;/p&gt;

&lt;p&gt;Remember to print the value of  &lt;code&gt;current_speed&lt;/code&gt;  at every interaction to see the changes.&lt;/p&gt;

&lt;p&gt;To finish the test, call  &lt;code&gt;vehicle_details()&lt;/code&gt;  inherited from the  &lt;code&gt;Vehicle&lt;/code&gt;  class to print the information about our truck.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from truck import Truck
&amp;gt;&amp;gt;&amp;gt; 
&amp;gt;&amp;gt;&amp;gt; my_truck = Truck(2015, &#39;V8&#39;, &#39;XYZ1234&#39;, 0, 0)
&amp;gt;&amp;gt;&amp;gt; print(my_truck.current_cargo)
0
&amp;gt;&amp;gt;&amp;gt; my_truck.add_cargo(10)
&amp;gt;&amp;gt;&amp;gt; print(my_truck.current_cargo)
10
&amp;gt;&amp;gt;&amp;gt; my_truck.remove_cargo(4)
&amp;gt;&amp;gt;&amp;gt; print(my_truck.current_cargo)
6
&amp;gt;&amp;gt;&amp;gt; print(my_truck.current_speed)
0
&amp;gt;&amp;gt;&amp;gt; my_truck.accelerate(10)
&amp;gt;&amp;gt;&amp;gt; print(my_truck.current_speed)
10
&amp;gt;&amp;gt;&amp;gt; my_truck.stop()
&amp;gt;&amp;gt;&amp;gt; print(my_truck.current_speed)
0
&amp;gt;&amp;gt;&amp;gt; print(my_truck.vehicle_details())
V8, 2015, XYZ1234

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;exceptions&#34;&gt;Exceptions&lt;/h1&gt;

&lt;p&gt;Errors are a part of every programmer&amp;rsquo;s life, and knowing how to deal with them is a skill on its own.&lt;/p&gt;

&lt;p&gt;The way Python deals with errors is called &amp;lsquo;Exception Handling&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;If some piece of code runs into an error, the Python interpreter will  &lt;em&gt;raise&lt;/em&gt;  an exception.&lt;/p&gt;

&lt;h2 id=&#34;types-of-exceptions&#34;&gt;Types of Exceptions&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s try to raise some exceptions on purpose and see the errors they produce.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First, try to add a string and an integer&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;I am a string&#39; + 32

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
TypeError: must be str, not int

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IndexError&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, try to access an index that doesn&amp;rsquo;t exist in a list.&lt;/p&gt;

&lt;p&gt;A common mistake is to forget that sequences are 0-indexed, meaning the first item has index 0, not 1.&lt;/p&gt;

&lt;p&gt;In this example, the list  &lt;code&gt;car_brands&lt;/code&gt;  ends at index 2.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;car_brands = [&#39;ford&#39;, &#39;ferrari&#39;, &#39;bmw&#39;]
print(car_brands[3])

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
IndexError: list index out of range

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NameError&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we try to print a variable that doesn&amp;rsquo;t exist:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(my_variable)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
NameError: name &#39;my_variable&#39; is not defined

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ZeroDivisionError&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Math doesn&amp;rsquo;t allow division by zero, so trying to do so will raise an error, as expected.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;32/0

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
ZeroDivisionError: division by zero

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This was just a sample of the kinds of exceptions you might see during your daily routine and what can cause each of them.&lt;/p&gt;

&lt;h2 id=&#34;exception-handling&#34;&gt;Exception Handling&lt;/h2&gt;

&lt;p&gt;Now we know how to cause errors that will crash our code and show us some message saying something is wrong.&lt;/p&gt;

&lt;p&gt;To handle these exceptions just make use of the  &lt;code&gt;try/except&lt;/code&gt;  statement.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;try:
  32/0
except:
  print(&#39;Dividing by zero!&#39;)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Dividing by zero!

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The example above shows the use of the  &lt;code&gt;try&lt;/code&gt;  statement.&lt;/p&gt;

&lt;p&gt;Put the block of code that may cause an exception inside the  &lt;code&gt;try&lt;/code&gt;  scope. If everything runs alright, the  &lt;code&gt;except&lt;/code&gt;  block is not invoked. But if an exception is raised, the block of code inside the  &lt;code&gt;except&lt;/code&gt;  is executed.&lt;/p&gt;

&lt;p&gt;This way the program doesn&amp;rsquo;t crash and if you have some code after the exception, it will keep running if you want it to.&lt;/p&gt;

&lt;h2 id=&#34;specific-exception-handling&#34;&gt;Specific Exception Handling&lt;/h2&gt;

&lt;p&gt;In the last example the  &lt;code&gt;except&lt;/code&gt;  block was generic, meaning it was catching anything.&lt;/p&gt;

&lt;p&gt;Good practice it to specify the type of exception we are trying to catch, which helps a lot when debugging the code later.&lt;/p&gt;

&lt;p&gt;If you know a block of code can throw an  &lt;code&gt;IndexError&lt;/code&gt;, specify it in the  &lt;code&gt;except&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;try:
  car_brands = [&#39;ford&#39;, &#39;ferrari&#39;, &#39;bmw&#39;]
  print(car_brands[3])
except IndexError:
  print(&#39;There is no such index!&#39;)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;There is no such index!

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use a tuple to specify as many exception types as you want in a single  &lt;code&gt;except&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;try:
  print(&#39;My code!&#39;)
except(IndexError, ZeroDivisionError, TypeError):
  print(&#39;My Excepetion!&#39;)

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;else&#34;&gt;&lt;code&gt;else&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;It is possible to add an  &lt;code&gt;else&lt;/code&gt;  command at the end of the  &lt;code&gt;try/except&lt;/code&gt;. It runs only if there are no exceptions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_variable = &#39;My variable&#39;
try:
  print(my_variable)
except NameError:
  print(&#39;NameError caught!&#39;)
else:
  print(&#39;No NameError&#39;)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;My variable
No NameError

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;raising-exceptions&#34;&gt;Raising Exceptions&lt;/h2&gt;

&lt;p&gt;The  &lt;code&gt;raise&lt;/code&gt;  command allows you to manually raise an exception.&lt;/p&gt;

&lt;p&gt;This is particularly useful if you want to catch an exception and do something with it &amp;ndash; like logging the error in some personalized way like redirecting it to a log aggregator, or ending the execution of the code since the error should not allow the progress of the program.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;try:
  raise IndexError(&#39;This index is not allowed&#39;)
except:
  print(&#39;Doing something with the exception!&#39;)
  raise

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Doing something with the exception!
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 2, in &amp;lt;module&amp;gt;
IndexError: This index is not allowed

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;finally&#34;&gt;&lt;code&gt;finally&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The  &lt;code&gt;finally&lt;/code&gt;  block is executed independently of exceptions being raised or not.&lt;/p&gt;

&lt;p&gt;They are usually there to allow the program to clean up resources like files, memory, network connections, etc.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;try:
  print(my_variable)
except NameError:
  print(&#39;Except block&#39;)
finally:
  print(&#39;Finally block&#39;)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Except block
Finally block

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;That&amp;rsquo;s it!&lt;/p&gt;

&lt;p&gt;Congratulations on reaching the end.&lt;/p&gt;

&lt;p&gt;I want to thank you for reading this article.&lt;/p&gt;

&lt;p&gt;If you want to learn more, checkout my blog  &lt;a href=&#34;https://renanmf.com/&#34; target=&#34;_blank&#34;&gt;renanmf.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Remember  &lt;a href=&#34;https://renanmf.com/python-guide-beginners/&#34; target=&#34;_blank&#34;&gt;to download a PDF version of this Python Guide for Beginners&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can also find me on Twitter:  &lt;a href=&#34;https://twitter.com/renanmouraf&#34; target=&#34;_blank&#34;&gt;@renanmouraf&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Reference : &lt;a href=&#34;https://www.freecodecamp.org/news/the-python-guide-for-beginners/&#34; target=&#34;_blank&#34;&gt;freeCodeCamp&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Python List Append VS Python List Extend</title>
      <link>https://example.com/post/python/tutorials/list_append/</link>
      <pubDate>Sun, 22 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/post/python/tutorials/list_append/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/size/w2000/2020/03/Image---Append-vs-Extend-1.png&#34; alt=&#34;Python List Append VS Python List Extend – The Difference Explained with Array Method Examples&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;welcome&#34;&gt;👋 Welcome&lt;/h2&gt;

&lt;p&gt;If you want to learn how to work with  &lt;code&gt;.append()&lt;/code&gt;  and  &lt;code&gt;.extend()&lt;/code&gt;  and understand their differences, then you have come to the right place. They are powerful list methods that you will definitely use in your Python projects.&lt;/p&gt;

&lt;p&gt;In this article, you will learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How and when to use the  &lt;code&gt;.append()&lt;/code&gt;  method.&lt;/li&gt;
&lt;li&gt;How and when to use the  &lt;code&gt;.extend()&lt;/code&gt;  method.&lt;/li&gt;
&lt;li&gt;Their main differences.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s begin 🔅&lt;/p&gt;

&lt;h2 id=&#34;append&#34;&gt;🔸 Append&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s see how the  &lt;code&gt;.append()&lt;/code&gt;  method works behind the scenes.&lt;/p&gt;

&lt;h3 id=&#34;use-cases&#34;&gt;Use Cases&lt;/h3&gt;

&lt;p&gt;You should use this method when you want to  &lt;strong&gt;add a single item to the end&lt;/strong&gt;  of a list.&lt;/p&gt;

&lt;p&gt;💡 &lt;strong&gt;Tips:&lt;/strong&gt; You can add items of any data type since lists can have elements of different data types.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/03/image-105.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;syntax-and-arguments&#34;&gt;Syntax and Arguments&lt;/h3&gt;

&lt;p&gt;To call the  &lt;code&gt;.append()&lt;/code&gt;  method, you will need to use this syntax:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/03/image-104.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;From Left to Right:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The list that will be modified. This is usually a variable that references a list.&lt;/li&gt;
&lt;li&gt;A dot, followed by the name of the method  &lt;code&gt;.append()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Within parentheses, the item that will be added to the end of the list.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;💡  &lt;strong&gt;Tips:&lt;/strong&gt; The dot is very important. This is called &amp;ldquo;dot notation&amp;rdquo;. The dot basically says &amp;ldquo;call this method on this particular list&amp;rdquo;, so the effect of the method will be applied to the list that is located before the dot.&lt;/p&gt;

&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;

&lt;p&gt;Here&amp;rsquo;s an example of how to use  &lt;code&gt;.append()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Define the list
&amp;gt;&amp;gt;&amp;gt; nums = [1, 2, 3, 4]

# Add the integer 5 to the end of the existing list
&amp;gt;&amp;gt;&amp;gt; nums.append(5)

# See the updated value of the list
&amp;gt;&amp;gt;&amp;gt; nums
[1, 2, 3, 4, 5]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;💡  &lt;strong&gt;Tips:&lt;/strong&gt;  When you use  &lt;code&gt;.append()&lt;/code&gt;  the original list is modified. The method does not create a copy of the list – it mutates the original list in memory.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s pretend that we are conducting a research and that we want to analyze the data collected using Python. We need to add a new measurement to the existing list of values.&lt;/p&gt;

&lt;p&gt;How do we do it? We use the  &lt;code&gt;.append()&lt;/code&gt;  method!&lt;/p&gt;

&lt;p&gt;You can see it right here:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Existing list
&amp;gt;&amp;gt;&amp;gt; nums = [5.6, 7.44, 6.75, 4.56, 2.3]

# Add the float (decimal number) to the end of the existing list
&amp;gt;&amp;gt;&amp;gt; nums.append(7.34)

# See the updated value of the list
&amp;gt;&amp;gt;&amp;gt; nums
[5.6, 7.44, 6.75, 4.56, 2.3, 7.34]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;equivalent-to&#34;&gt;Equivalent to&amp;hellip;&lt;/h3&gt;

&lt;p&gt;If you are familiar with string, list, or tuple slicing, what  &lt;code&gt;.append()&lt;/code&gt;  really does behind the scenes is equivalent to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a[len(a):] = [x]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this example, you can see that they are equivalent.&lt;/p&gt;

&lt;p&gt;Using  &lt;code&gt;.append()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; nums = [5.6, 7.44, 6.75, 4.56, 2.3]
&amp;gt;&amp;gt;&amp;gt; nums.append(4.52)
&amp;gt;&amp;gt;&amp;gt; nums
[5.6, 7.44, 6.75, 4.56, 2.3, 4.52]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using list slicing:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; nums = [5.6, 7.44, 6.75, 4.56, 2.3]
&amp;gt;&amp;gt;&amp;gt; nums[len(nums):] = [4.52]
&amp;gt;&amp;gt;&amp;gt; nums
[5.6, 7.44, 6.75, 4.56, 2.3, 4.52]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;appending-a-sequence&#34;&gt;Appending a Sequence&lt;/h3&gt;

&lt;p&gt;Now, what do you think about this example? What do you think will be output?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; nums = [5.6, 7.44, 6.75, 4.56, 2.3]
&amp;gt;&amp;gt;&amp;gt; nums.append([5.67, 7.67, 3.44])
&amp;gt;&amp;gt;&amp;gt; nums
# OUTPUT?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Are you ready? This will be the output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[5.6, 7.44, 6.75, 4.56, 2.3, [5.67, 7.67, 3.44]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You might be asking, why was the full list added as a single item? It&amp;rsquo;s because the  &lt;code&gt;.append()&lt;/code&gt;  method adds the entire item to the end of the list. If the item is a sequence such as a list, dictionary, or tuple, the entire sequence will be added as a single item of the existing list.&lt;/p&gt;

&lt;p&gt;Here we have another example (below). In this case, the item is a tuple and it is added as a single item of the list, not as individual items:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; names = [&amp;quot;Lulu&amp;quot;, &amp;quot;Nora&amp;quot;, &amp;quot;Gino&amp;quot;, &amp;quot;Bryan&amp;quot;]
&amp;gt;&amp;gt;&amp;gt; names.append((&amp;quot;Emily&amp;quot;, &amp;quot;John&amp;quot;))
&amp;gt;&amp;gt;&amp;gt; names
[&#39;Lulu&#39;, &#39;Nora&#39;, &#39;Gino&#39;, &#39;Bryan&#39;, (&#39;Emily&#39;, &#39;John&#39;)]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;extend&#34;&gt;🔸 Extend&lt;/h2&gt;

&lt;p&gt;Now let&amp;rsquo;s dive into the functionality of the  &lt;code&gt;.extend()&lt;/code&gt;  method.&lt;/p&gt;

&lt;h3 id=&#34;use-cases-1&#34;&gt;Use Cases&lt;/h3&gt;

&lt;p&gt;You should use this method if you need to  &lt;strong&gt;append several items to a list as individual items&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let me illustrate the importance of this method with a familiar friend that you just learned: the  &lt;code&gt;.append()&lt;/code&gt;  method. Based on what you&amp;rsquo;ve learned so far, if we wanted to add several  &lt;strong&gt;individual&lt;/strong&gt; items to a list using  &lt;code&gt;.append()&lt;/code&gt;, we would need to use  &lt;code&gt;.append()&lt;/code&gt;  several times, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# List that we want to modify
&amp;gt;&amp;gt;&amp;gt; nums = [5.6, 7.44, 6.75, 4.56, 2.3]

# Appending the items
&amp;gt;&amp;gt;&amp;gt; nums.append(2.3)
&amp;gt;&amp;gt;&amp;gt; nums.append(9.6)
&amp;gt;&amp;gt;&amp;gt; nums.append(4.564)
&amp;gt;&amp;gt;&amp;gt; nums.append(7.56)

# Updated list
&amp;gt;&amp;gt;&amp;gt; nums
[5.6, 7.44, 6.75, 4.56, 2.3, 2.3, 9.6, 4.564, 7.56]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;m sure that you are probably thinking that this would not be very efficient, right? What if I need to add thousands or millions of values? I cannot write thousands or millions of lines for this simple task. That would take forever!&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s see an alternative. We can store the values that we want to add in a separate list and then use a for loop to call  &lt;code&gt;.append()&lt;/code&gt;  as many times as needed:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# List that we want to modify
&amp;gt;&amp;gt;&amp;gt; nums = [5.6, 7.44, 6.75, 4.56, 2.3]

# Values that we want to add
&amp;gt;&amp;gt;&amp;gt; new_values = [2.3, 9.6, 4.564, 7.56]

# For loop that is going to append the value
&amp;gt;&amp;gt;&amp;gt; for num in new_values:
	nums.append(num)

# Updated value of the list
&amp;gt;&amp;gt;&amp;gt; nums
[5.6, 7.44, 6.75, 4.56, 2.3, 2.3, 9.6, 4.564, 7.56]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is more efficient, right? We are only writing a few lines. But there is an even more efficient, readable, and compact way to achieve the same purpose:  &lt;code&gt;.extend()&lt;/code&gt;!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; nums = [5.6, 7.44, 6.75, 4.56, 2.3]
&amp;gt;&amp;gt;&amp;gt; new_values = [2.3, 9.6, 4.564, 7.56]

# This is where the magic occurs! No more for loops
&amp;gt;&amp;gt;&amp;gt; nums.extend(new_values)

# The list was updated with individual values
&amp;gt;&amp;gt;&amp;gt; nums
[5.6, 7.44, 6.75, 4.56, 2.3, 2.3, 9.6, 4.564, 7.56]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s see how this method works behind the scenes.&lt;/p&gt;

&lt;h3 id=&#34;syntax-and-arguments-1&#34;&gt;Syntax and Arguments&lt;/h3&gt;

&lt;p&gt;To call the  &lt;code&gt;.extend()&lt;/code&gt;  method, you will need to use this syntax:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/03/image-110.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;From Left to Right:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The list that will be modified. This is usually a variable that refers to the list.&lt;/li&gt;
&lt;li&gt;A dot  &lt;code&gt;.&lt;/code&gt;  (So far, everything is exactly the same as before).&lt;/li&gt;
&lt;li&gt;The name of the method  &lt;code&gt;extend&lt;/code&gt;. (Now things start to change&amp;hellip;).&lt;/li&gt;
&lt;li&gt;Within parentheses, an  &lt;strong&gt;iterable&lt;/strong&gt; (list, tuple, dictionary, set, or string) that contains the items that will be added as individual elements of the list.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;💡 &lt;strong&gt;Tips:&lt;/strong&gt;  According to the  &lt;a href=&#34;https://docs.python.org/3/glossary.html&#34; target=&#34;_blank&#34;&gt;Python documentation&lt;/a&gt;, an iterable is defined as &amp;ldquo;an object capable of returning its members one at a time&amp;rdquo;. Iterables can be used in a for loop and because they return their elements one at a time, we can &amp;ldquo;do something&amp;rdquo; with each one of them, one per iteration.&lt;/p&gt;

&lt;h3 id=&#34;behind-the-scenes&#34;&gt;Behind the Scenes&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s see how  &lt;code&gt;.extend()&lt;/code&gt;  works behind the scenes. Here we have an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# List that will be modified
&amp;gt;&amp;gt;&amp;gt; a = [1, 2, 3, 4]

# Sequence of values that we want to add to the list a
&amp;gt;&amp;gt;&amp;gt; b = [5, 6, 7]

# Calling .extend()
&amp;gt;&amp;gt;&amp;gt; a.extend(b)

# See the updated list. Now the list a has the values 5, 6, and 7
&amp;gt;&amp;gt;&amp;gt; a
[1, 2, 3, 4, 5, 6, 7]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can think of  &lt;code&gt;.extend()&lt;/code&gt;  as a method that appends the individual elements of the iterable in the same order as they appear.&lt;/p&gt;

&lt;p&gt;In this case, we have a list  &lt;code&gt;a = [1, 2, 3, 4]&lt;/code&gt;  as illustrated in the diagram below. We also have a list  &lt;code&gt;b = [5, 6, 7]&lt;/code&gt;  that contains the sequence of values that we want to add. The method takes each element of  &lt;code&gt;b&lt;/code&gt;  and appends it to list  &lt;code&gt;a&lt;/code&gt;  in the same order.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/03/image-106.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Step 1. First element is appended.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/03/image-107.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Step 2. Second element appended.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/03/image-108.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Step 3. Third element appended&lt;/p&gt;

&lt;p&gt;After this process is completed, we have the updated list  &lt;code&gt;a&lt;/code&gt;  and we can work with the values as individual elements of  &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/03/image-109.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;💡  &lt;strong&gt;Tips:&lt;/strong&gt;  The list  &lt;code&gt;b&lt;/code&gt;  used to extend list  &lt;code&gt;a&lt;/code&gt;  remains intact after this process. You can work with it after the call to  &lt;code&gt;.extend()&lt;/code&gt;. Here is the proof:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = [1, 2, 3, 4]
&amp;gt;&amp;gt;&amp;gt; b = [5, 6, 7]
&amp;gt;&amp;gt;&amp;gt; a.extend(b)
&amp;gt;&amp;gt;&amp;gt; a
[1, 2, 3, 4, 5, 6, 7]

# List b is intact!
&amp;gt;&amp;gt;&amp;gt; b
[5, 6, 7]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;examples-1&#34;&gt;Examples&lt;/h3&gt;

&lt;p&gt;You may be curious to know how the  &lt;code&gt;.extend()&lt;/code&gt;  method works when you pass different types of iterables. Let&amp;rsquo;s see how in the following examples:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For tuples:&lt;/strong&gt;&lt;br /&gt;
The process works exactly the same if you pass a tuple. The individual elements of the tuple are appended one by one in the order that they appear.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# List that will be extended
&amp;gt;&amp;gt;&amp;gt; a = [1, 2, 3, 4]

# Values that will be added (the iterable is a tuple!)
&amp;gt;&amp;gt;&amp;gt; b = (1, 2, 3, 4)

# Method call
&amp;gt;&amp;gt;&amp;gt; a.extend(b)

# The value of the list a was updated
&amp;gt;&amp;gt;&amp;gt; a
[1, 2, 3, 4, 1, 2, 3, 4]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;For sets:&lt;/strong&gt;&lt;br /&gt;
The same occurs if you pass a set. The elements of the set are appended one by one.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# List that will be extended
&amp;gt;&amp;gt;&amp;gt; a = [1, 2, 3, 4]

# Values that will be appended (the iterable is a set!)
&amp;gt;&amp;gt;&amp;gt; c = {5, 6, 7}

# Method call
&amp;gt;&amp;gt;&amp;gt; a.extend(c)

# The value of a was updated
&amp;gt;&amp;gt;&amp;gt; a
[1, 2, 3, 4, 5, 6, 7]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;For strings:&lt;/strong&gt;&lt;br /&gt;
Strings work a little bit different with the  &lt;code&gt;.extend()&lt;/code&gt;  method. Each character of the string is considered an &amp;ldquo;item&amp;rdquo;, so the characters are appended one by one in the order that they appear in the string.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# List that will be extended
&amp;gt;&amp;gt;&amp;gt; a = [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;]

# String that will be used to extend the list
&amp;gt;&amp;gt;&amp;gt; b = &amp;quot;Hello, World!&amp;quot;

# Method call
&amp;gt;&amp;gt;&amp;gt; a.extend(b)

# The value of a was updated
&amp;gt;&amp;gt;&amp;gt; a
[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39;,&#39;, &#39; &#39;, &#39;W&#39;, &#39;o&#39;, &#39;r&#39;, &#39;l&#39;, &#39;d&#39;, &#39;!&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;For dictionaries:&lt;/strong&gt;&lt;br /&gt;
Dictionaries have a particular behavior when you pass them as arguments to  &lt;code&gt;.extend()&lt;/code&gt;. In this case, the  &lt;strong&gt;keys&lt;/strong&gt; of the dictionary are appended one by one. The values of the corresponding key-value pairs are not appended.&lt;/p&gt;

&lt;p&gt;In this example (below), the keys are &amp;ldquo;d&amp;rdquo;, &amp;ldquo;e&amp;rdquo;, and &amp;ldquo;f&amp;rdquo;. These values are appended to the list  &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# List that will be extended
&amp;gt;&amp;gt;&amp;gt; a = [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;]

# Dictionary that will be used to extend the list
&amp;gt;&amp;gt;&amp;gt; b = {&amp;quot;d&amp;quot;: 5, &amp;quot;e&amp;quot;: 6, &amp;quot;f&amp;quot;: 7}

# Method call
&amp;gt;&amp;gt;&amp;gt; a.extend(b)

# The value of a was updated
&amp;gt;&amp;gt;&amp;gt; a
[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;equivalent-to-1&#34;&gt;Equivalent to&amp;hellip;&lt;/h3&gt;

&lt;p&gt;What  &lt;code&gt;.extend()&lt;/code&gt;  does is equivalent to  &lt;code&gt;a[len(a):] = iterable&lt;/code&gt;. Here we have an example to illustrate that they are equivalent:&lt;/p&gt;

&lt;p&gt;Using  &lt;code&gt;.extend()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# List that will be extended
&amp;gt;&amp;gt;&amp;gt; a = [1, 2, 3, 4]

# Values that will be appended
&amp;gt;&amp;gt;&amp;gt; b = (6, 7, 8)

# Method call
&amp;gt;&amp;gt;&amp;gt; a.extend(b)

# The list was updated
&amp;gt;&amp;gt;&amp;gt; a
[1, 2, 3, 4, 6, 7, 8]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using list slicing:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# List that will be extended
&amp;gt;&amp;gt;&amp;gt; a = [1, 2, 3, 4]

# Values that will be appended
&amp;gt;&amp;gt;&amp;gt; b = (6, 7, 8)

# Assignment statement. Assign the iterable b as the final portion of the list a
&amp;gt;&amp;gt;&amp;gt; a[len(a):] = b

# The value of a was updated
&amp;gt;&amp;gt;&amp;gt; a
[1, 2, 3, 4, 6, 7, 8]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The result is the same, but using  &lt;code&gt;.extend()&lt;/code&gt;  is much more readable and compact, right? Python truly offers amazing tools to improve our workflow.&lt;/p&gt;

&lt;h2 id=&#34;summary-of-their-differences&#34;&gt;🔸 Summary of their Differences&lt;/h2&gt;

&lt;p&gt;Now that you know how to work with  &lt;code&gt;.append()&lt;/code&gt;  and  &lt;code&gt;.extend()&lt;/code&gt;, let&amp;rsquo;s see a summary of their key differences:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Effect&lt;/strong&gt;:  &lt;code&gt;.append()&lt;/code&gt;  adds a single element to the end of the list while  &lt;code&gt;.extend()&lt;/code&gt;  can add multiple individual elements to the end of the list.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Argument&lt;/strong&gt;:  &lt;code&gt;.append()&lt;/code&gt;  takes a single element as argument while  &lt;code&gt;.extend()&lt;/code&gt;  takes an iterable as argument (list, tuple, dictionaries, sets, strings).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;I really hope that you liked my article and found it helpful.&lt;/strong&gt; Now you can work with  &lt;code&gt;.append()&lt;/code&gt;  and  &lt;code&gt;.extend()&lt;/code&gt;  in your Python projects.  &lt;a href=&#34;https://www.udemy.com/user/estefania-cn/&#34; target=&#34;_blank&#34;&gt;Check out my online courses&lt;/a&gt;. Follow me on  &lt;a href=&#34;https://twitter.com/EstefaniaCassN&#34; target=&#34;_blank&#34;&gt;Twitter&lt;/a&gt;. 👍&lt;/p&gt;

&lt;p&gt;Reference : &lt;a href=&#34;https://www.freecodecamp.org/news/python-list-append-vs-python-list-extend/&#34; target=&#34;_blank&#34;&gt;freeCodeCamp&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python Lists Explained</title>
      <link>https://example.com/post/python/tutorials/python-lists-explained/</link>
      <pubDate>Fri, 31 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/post/python/tutorials/python-lists-explained/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://images.unsplash.com/photo-1507925921958-8a62f3d1a50d?ixlib=rb-1.2.1&amp;amp;q=80&amp;amp;fm=jpg&amp;amp;crop=entropy&amp;amp;cs=tinysrgb&amp;amp;w=2000&amp;amp;fit=max&amp;amp;ixid=eyJhcHBfaWQiOjExNzczfQ&#34; alt=&#34;Python Lists Explained: Len, Pop, Index, and List Comprehension&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Lists in Python are similar to arrays in JavaScript. They are one of the built in data types in Python used to store collections of data.&lt;/p&gt;

&lt;h2 id=&#34;basic-usage&#34;&gt;Basic usage&lt;/h2&gt;

&lt;h3 id=&#34;how-to-create-a-list&#34;&gt;How to create a list&lt;/h3&gt;

&lt;p&gt;An empty  &lt;code&gt;list&lt;/code&gt;  is created using a pair of square brackets:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; empty_list = []
&amp;gt;&amp;gt;&amp;gt; type(empty_list)
&amp;lt;class &#39;list&#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; len(empty_list)
0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A  &lt;code&gt;list&lt;/code&gt;  can be created with elements by enclosing a comma separated list of elements with square brackets. Lists allow for the elements to be of different types (heterogeneous) but are most commonly of a single type (homogeneous):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; homogeneous_list = [1, 1, 2, 3, 5, 8]
&amp;gt;&amp;gt;&amp;gt; type(homogeneous_list)
&amp;lt;class &#39;list&#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; print(homogeneous_list)
[1, 1, 2, 3, 5, 8]
&amp;gt;&amp;gt;&amp;gt; len(homogeneous_list)
6
&amp;gt;&amp;gt;&amp;gt; heterogeneous_list = [1, &amp;quot;Hello Campers!&amp;quot;]
&amp;gt;&amp;gt;&amp;gt; print(heterogeneous_list)
[1, &amp;quot;Hello Campers!&amp;quot;]
&amp;gt;&amp;gt;&amp;gt; len(heterogeneous_list)
2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The  &lt;code&gt;list&lt;/code&gt;  constructor can also be used to create a  &lt;code&gt;list&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; empty_list = list()                            # Creates an empty list
&amp;gt;&amp;gt;&amp;gt; print(empty_list)
[]
&amp;gt;&amp;gt;&amp;gt; list_from_iterable = list(&amp;quot;Hello campers!&amp;quot;)    # Creates a list from an iterable.
&amp;gt;&amp;gt;&amp;gt; print(list_from_iterable)
[&#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39; &#39;, &#39;c&#39;, &#39;a&#39;, &#39;m&#39;, &#39;p&#39;, &#39;e&#39;, &#39;r&#39;, &#39;s&#39;, &#39;!&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also use List Comprehension to create lists, which we&amp;rsquo;ll cover later in the article.&lt;/p&gt;

&lt;h3 id=&#34;access-elements-in-a-list&#34;&gt;Access elements in a list&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; my_list = [1, 2, 9, 16, 25]
&amp;gt;&amp;gt;&amp;gt; print(my_list)
[1, 2, 9, 16, 25]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Zero indexed&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; my_list[0]
1
&amp;gt;&amp;gt;&amp;gt; my_list[1]
2
&amp;gt;&amp;gt;&amp;gt; my_list[2]
9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Wrap around indexing&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; my_list[-1]
25
&amp;gt;&amp;gt;&amp;gt; my_list[-2]
16
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Unpacking lists for python-3&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(*my_list)
1 2 9 16 25
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;lists-are-mutable&#34;&gt;Lists are mutable&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;lists&lt;/code&gt;  are mutable containers. Mutable containers are containers that allow changes to which objects are contained by the container.&lt;/p&gt;

&lt;p&gt;Elements from a  &lt;code&gt;list&lt;/code&gt;  may be extracted and re-arranged using another  &lt;code&gt;list&lt;/code&gt;  as index.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; my_list = [1, 2, 9, 16, 25, 34, 53, 21]
&amp;gt;&amp;gt;&amp;gt; my_index = [5, 2, 0]
&amp;gt;&amp;gt;&amp;gt; my_new_list = [my_list[i] for i in my_index]
&amp;gt;&amp;gt;&amp;gt; print(my_new_list)
[34, 9, 1]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;list-methods&#34;&gt;List methods&lt;/h2&gt;

&lt;h3 id=&#34;len&#34;&gt;&lt;code&gt;len()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The  &lt;code&gt;len()&lt;/code&gt;  method returns the length of an object, whether that be a list, a string, tuple, or dictionary.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;len()&lt;/code&gt;  takes one argument, which can be a sequence (such as a string, bytes, tuple, list, or range) or collection (such as a dictionary, set, or frozen set).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;list1 = [123, &#39;xyz&#39;, &#39;zara&#39;] # list
print(len(list1)) # prints 3 as there are 3 elements in the list1

str1 = &#39;basketball&#39; # string
print(len(str1)) # prints 10 as the str1 is made of 10 characters

tuple1 = (2, 3, 4, 5) # tuple 
print(len(tuple1)) # prints 4 as there are 4 elements in the tuple1

dict1 = {&#39;name&#39;: &#39;John&#39;, &#39;age&#39;: 4, &#39;score&#39;: 45} # dictionary
print(len(dict1)) # prints 3 as there are 3 key and value pairs in the dict1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;index&#34;&gt;&lt;code&gt;index()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;index()&lt;/code&gt;  returns the the first occurrence/index of the element in the list given as an argument to the function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;numbers = [1, 2, 2, 3, 9, 5, 6, 10]
words = [&amp;quot;I&amp;quot;, &amp;quot;love&amp;quot;, &amp;quot;Python&amp;quot;, &amp;quot;I&amp;quot;, &amp;quot;love&amp;quot;]

print(numbers.index(9)) # 4
print(numbers.index(2)) # 1
print(words.index(&amp;quot;I&amp;quot;)) # 0
print(words.index(&amp;quot;am&amp;quot;)) # returns a ValueError as &#39;am&#39; is not in the `words` list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here the first output is very obvious, but the second and third might seem confusing at first. But remember  &lt;code&gt;index()&lt;/code&gt;  returns the first occurrence of the element and hence in this case  &lt;code&gt;1&lt;/code&gt;  and  &lt;code&gt;0&lt;/code&gt;  are the indices where  &lt;code&gt;2&lt;/code&gt;  and  &lt;code&gt;&amp;quot;I&amp;quot;&lt;/code&gt;  occur first in the lists respectively.&lt;/p&gt;

&lt;p&gt;Also, if an element is not found in the list, a  &lt;code&gt;ValueError&lt;/code&gt;  is returned as in the case of indexing  &lt;code&gt;&amp;quot;am&amp;quot;&lt;/code&gt;  in the  &lt;code&gt;words&lt;/code&gt;  list.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Optional arguments&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can also use optional arguments to limit your search to a particular sub-sequence of the list:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;words = [&amp;quot;I&amp;quot;, &amp;quot;am&amp;quot;, &amp;quot;a&amp;quot;, &amp;quot;I&amp;quot;, &amp;quot;am&amp;quot;, &amp;quot;Pythonista&amp;quot;]

print(words.index(&amp;quot;am&amp;quot;, 2, 5)) # 4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Although the element is searched between the indices 2 (inclusive) and 5 (not inclusive), the returned index is computed relative to the beginning of the full list rather than the start argument.&lt;/p&gt;

&lt;h3 id=&#34;pop&#34;&gt;&lt;code&gt;pop()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The  &lt;code&gt;pop()&lt;/code&gt;  method removes and returns the last element from a list.&lt;/p&gt;

&lt;p&gt;There is an optional parameter which is the index of the element to be removed from the list. If no index is specified,  &lt;code&gt;pop()&lt;/code&gt;  removes and returns the last item in the list.&lt;/p&gt;

&lt;p&gt;If the index passed to the  &lt;code&gt;pop()&lt;/code&gt;  method is not in the range, it throws the  &lt;code&gt;IndexError: pop index out of range&lt;/code&gt;  exception.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;cities = [&#39;New York&#39;, &#39;Dallas&#39;, &#39;San Antonio&#39;, &#39;Houston&#39;, &#39;San Francisco&#39;];

print &amp;quot;City popped is: &amp;quot;, cities.pop() # City popped is: San Francisco
print &amp;quot;City at index 2 is  : &amp;quot;, cities.pop(2) # City at index 2 is: San Antonio
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Basic stack functionality&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The  &lt;code&gt;pop()&lt;/code&gt;  method is often used in conjunction with  &lt;code&gt;append()&lt;/code&gt;  to implement basic stack functionality in a Python application:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;stack = []

for i in range(5):
    stack.append(i)

while len(stack):
    print(stack.pop())
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;list-comprehension&#34;&gt;List Comprehension&lt;/h3&gt;

&lt;p&gt;List Comprehension is a way of looping through a list to produce a new list based on some conditions. It can be confusing at first but once you are acclimated to the syntax it is very powerful and quick.&lt;/p&gt;

&lt;p&gt;The first step in learning how to use list comprehension is to look at the traditional way of looping through a list. The following is a simple example that returns a new list of even numbers.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Example list for demonstration
some_list = [1, 2, 5, 7, 8, 10]

# Empty list that will be populate with a loop
even_list = []

for number in some_list:
  if number % 2 == 0:
    even_list.append(number)

# even_list now equals [2, 8, 10]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First a list is created with some numbers. You then create an empty list that will hold your results from the loop. In the loop you check to see if each number is divisible by 2 and if so you add it the the  &lt;code&gt;even_list&lt;/code&gt;. This took 5 lines of code not including comments and white space which isn’t much in this example.&lt;/p&gt;

&lt;p&gt;Now for the list comprehension example.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Example list for demonstration
some_list = [1, 2, 5, 7, 8, 10]

# List Comprehension
even_list = [number for number in some_list if number % 2 == 0]

# even_list now equals [2, 8, 10]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another example, with the same two steps: The following will create a list of numbers that correspond to the numbers in  &lt;code&gt;my_starting_list&lt;/code&gt;  multiplied by 7.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;my_starting_list = [1, 2, 3, 4, 5, 6, 7, 8]
my_new_list = []

for item in my_starting_list:
my_new_list.append(item * 7)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When this code is run, the final value of  &lt;code&gt;my_new_list&lt;/code&gt;  is:  &lt;code&gt;[7, 14, 21, 28, 35, 42, 49, 56]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A developer using list comprehension could achieve the same result using the following list comprehension, which results in the same  &lt;code&gt;my_new_list&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;my_starting_list = [1, 2, 3, 4, 5, 6, 7, 8]

my_new_list = [item * 7 for item in my_starting_list]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A simple formula to write in a list comprehension way is:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;my_list = [{operation with input n} for n in {python iterable}]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Replace  &lt;code&gt;{operation with input n}&lt;/code&gt;  with however you want to change the item returned from the iterable. The above example uses  &lt;code&gt;n * 7&lt;/code&gt;  but the operation can be as simple or as complex as necessary.&lt;/p&gt;

&lt;p&gt;Replace  &lt;code&gt;{python iterable}&lt;/code&gt;  with any iterable. Sequence types will be most common. A list was used in the above example, but tuples and ranges are also common.&lt;/p&gt;

&lt;p&gt;List comprehension adds an element from an existing list to a new list if some condition is met. It is neater, but is also much faster in most cases. In some cases, list comprehension may hinder readability, so the developer must weigh their options when choosing to use list comprehension.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Examples of list comprehension with conditionals&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The flow of control in list comprehensions can be controlled using conditionals. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;only_even_list = [i for i in range(13) if i%2==0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is equivalent to the following loop:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;only_even_list = list()
for i in range(13):
  if i%2 == 0:
    only_even_list.append(i)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;List comprehension can also contain nested if conditions. Consider the following loop:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;divisible = list()
for i in range(50):
  if i%2 == 0:
    if i%3 == 0:
      divisible.append(i)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using list comprehension this can be written as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;divisible = [i for i in range(50) if i%2==0 if i%3==0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If-Else statement can also be used along with list comprehension.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;list_1 = [i if i%2==0 else i*-1 for i in range(10)]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;more-information&#34;&gt;&lt;strong&gt;More Information:&lt;/strong&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/python-example/&#34; target=&#34;_blank&#34;&gt;The Best Python Code Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Reference : &lt;a href=&#34;https://www.freecodecamp.org/news/python-lists-explained-len-pop-index-and-list-comprehension/&#34; target=&#34;_blank&#34;&gt;freeCodeCamp&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Python Virtual Environments Explained with Examples</title>
      <link>https://example.com/post/python/tutorials/virtual-environments/</link>
      <pubDate>Fri, 31 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/post/python/tutorials/virtual-environments/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;featured.jpg&#34; alt=&#34;Python Virtual Environments Explained with Examples&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Virtual environments can be described as isolated installation directories. This isolation allows you to localized the installation of your project’s dependencies, without forcing you to install them system-wide.&lt;/p&gt;

&lt;p&gt;Imagine you have two applications, App1 and App2. Both use the package Pak, but require different versions. If you install Pak version 2.3 for App1, you would not be able to run App2 because it requires version 3.1.&lt;/p&gt;

&lt;p&gt;This is where virtual environments come in handy.&lt;/p&gt;

&lt;p&gt;Benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can have multiple environments, with multiple sets of packages, without conflicts among them. This way, different projects’ requirements can be satisfied at the same time.&lt;/li&gt;
&lt;li&gt;You can easily release your project with its own dependent modules.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are two ways you can create Python virtual environments.&lt;/p&gt;

&lt;h2 id=&#34;virtualenv&#34;&gt;&lt;strong&gt;Virtualenv&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;[virtualenv](https://virtualenv.pypa.io/en/stable/)&lt;/code&gt;  is a tool used to create isolated Python environments. It creates a folder which contains all the necessary executables to use the packages that a Python project would need.&lt;/p&gt;

&lt;p&gt;You can install it with  &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;pip install virtualenv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Verify the installation with the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;virtualenv --version
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;create-an-environment&#34;&gt;&lt;strong&gt;Create an Environment&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;To create a virtual environment use:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;virtualenv --no-site-packages my-env
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This creates a folder in the current directory with the name of the environment (&lt;code&gt;my-env/&lt;/code&gt;). This folder contains the directories for installing modules and Python executables.&lt;/p&gt;

&lt;p&gt;You can also specify the Python version you want to work with. Just use the argument  &lt;code&gt;--python=/path/to/python/version&lt;/code&gt;. For instance,  &lt;code&gt;python2.7&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;virtualenv --python=/usr/bin/python2.7 my-env
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;list-environments&#34;&gt;&lt;strong&gt;List Environments&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;You can list the available environments with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;lsvirtualenv
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;activate-an-environment&#34;&gt;&lt;strong&gt;Activate an Environment&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Before you can start using the environment you need to activate it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;source my-env/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This ensures that only packages under  &lt;code&gt;my-env/&lt;/code&gt;  are used.&lt;/p&gt;

&lt;p&gt;You will notice that the name of the environment is shown on the left of the prompt. This way you can see which is the active environment.&lt;/p&gt;

&lt;h3 id=&#34;install-packages&#34;&gt;&lt;strong&gt;Install Packages&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;You can install packages one by one, or by setting a  &lt;code&gt;requirements.txt&lt;/code&gt;  file for your project.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;pip install some-package
pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to create a  &lt;code&gt;requirements.txt&lt;/code&gt;  file from the already installed packages, run the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;pip freeze &amp;gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The file will contain the list of all the packages installed in the current environment, and their respective versions. This will help you release your project with its own dependent modules.&lt;/p&gt;

&lt;h3 id=&#34;deactivate-an-environment&#34;&gt;&lt;strong&gt;Deactivate an Environment&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;If you are done working with the virtual environment you can deactivate it with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;deactivate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This puts you back to the system’s default Python interpreter with all its installed libraries.&lt;/p&gt;

&lt;h3 id=&#34;delete-an-environment&#34;&gt;&lt;strong&gt;Delete an Environment&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Simply delete the environment folder.&lt;/p&gt;

&lt;h2 id=&#34;conda&#34;&gt;&lt;strong&gt;Conda&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://conda.io/docs/index.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;Conda&lt;/code&gt;&lt;/a&gt;  is a package, dependency and environment management for many languages, including Python.&lt;/p&gt;

&lt;p&gt;To install Conda, follow these  &lt;a href=&#34;https://conda.io/docs/user-guide/install/index.html&#34; target=&#34;_blank&#34;&gt;instructions&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;create-an-environment-1&#34;&gt;&lt;strong&gt;Create an Environment&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;To create a virtual environment use:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;conda create --name my-env
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Conda will create the corresponding folder inside the Conda installation directory.&lt;/p&gt;

&lt;p&gt;You can also specify which version of Python you want to work with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;conda create --name my-env python=3.6
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;list-environments-1&#34;&gt;&lt;strong&gt;List Environments&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;You can list all the available environments with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;conda info --envs
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;activate-an-environment-1&#34;&gt;&lt;strong&gt;Activate an Environment&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Before you can start using the environment you need to activate it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;source activate my-env
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;install-packages-1&#34;&gt;&lt;strong&gt;Install Packages&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The same as with  &lt;code&gt;virtualenv&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;deactivate-an-environment-1&#34;&gt;&lt;strong&gt;Deactivate an Environment&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;If you are done working with the virtual environment you can deactivate it with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;source deactivate
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;remove-an-environment&#34;&gt;&lt;strong&gt;Remove an Environment&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;If you want to remove an environment from Conda use:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;conda remove --name my-env
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Reference : &lt;a href=&#34;https://www.freecodecamp.org/news/python-virtual-environments-explained-with-examples/&#34; target=&#34;_blank&#34;&gt;freeCodeCamp&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Python String Methods Explained with Examples.</title>
      <link>https://example.com/post/python/tutorials/string-strip-method/</link>
      <pubDate>Thu, 30 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/post/python/tutorials/string-strip-method/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;featured.jpg&#34; alt=&#34;Python String Methods Explained with Examples&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;string-find-method&#34;&gt;&lt;strong&gt;String Find Method&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;There are two options for finding a substring within a string in Python,  &lt;code&gt;find()&lt;/code&gt;  and  &lt;code&gt;rfind()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Each will return the position that the substring is found at. The difference between the two is that  &lt;code&gt;find()&lt;/code&gt;  returns the lowest position, and  &lt;code&gt;rfind()&lt;/code&gt;  returns the highest position.&lt;/p&gt;

&lt;p&gt;Optional start and end arguments can be provided to limit the search for the substring to within portions of the string.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt;&amp;gt;&amp;gt; string = &amp;quot;Don&#39;t you call me a mindless philosopher, you overweight glob of grease!&amp;quot;
&amp;gt;&amp;gt;&amp;gt; string.find(&#39;you&#39;)
6
&amp;gt;&amp;gt;&amp;gt; string.rfind(&#39;you&#39;)
42
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the substring is not found, -1 is returned.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt;&amp;gt;&amp;gt; string = &amp;quot;Don&#39;t you call me a mindless philosopher, you overweight glob of grease!&amp;quot;
&amp;gt;&amp;gt;&amp;gt; string.find(&#39;you&#39;, 43)  # find &#39;you&#39; in string anywhere from position 43 to the end of the string
-1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More Information:&lt;/p&gt;

&lt;p&gt;String methods  &lt;a href=&#34;https://docs.python.org/3/library/stdtypes.html#string-methods&#34; target=&#34;_blank&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;string-join-method&#34;&gt;&lt;strong&gt;String Join Method&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;The  &lt;code&gt;str.join(iterable)&lt;/code&gt;  method is used to join all elements in an  &lt;code&gt;iterable&lt;/code&gt;  with a specified string  &lt;code&gt;str&lt;/code&gt;. If the iterable contains any non-string values, it raises a TypeError exception.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;iterable&lt;/code&gt;: All iterables of string. Could a list of strings, tuple of string or even a plain string.&lt;/p&gt;

&lt;h4 id=&#34;examples&#34;&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Join a ist of strings with  &lt;code&gt;&amp;quot;:&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print &amp;quot;:&amp;quot;.join([&amp;quot;freeCodeCamp&amp;quot;, &amp;quot;is&amp;quot;, &amp;quot;fun&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;freeCodeCamp:is:fun
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Join a tuple of strings with  &lt;code&gt;&amp;quot; and &amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print &amp;quot; and &amp;quot;.join([&amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;C&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;A and B and C
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Insert a  &lt;code&gt;&amp;quot; &amp;quot;&lt;/code&gt;  after every character in a string&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print &amp;quot; &amp;quot;.join(&amp;quot;freeCodeCamp&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;f r e e C o d e C a m p
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Joining with empty string.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;list1 = [&#39;p&#39;,&#39;r&#39;,&#39;o&#39;,&#39;g&#39;,&#39;r&#39;,&#39;a&#39;,&#39;m&#39;]  
print(&amp;quot;&amp;quot;.join(list1))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;program
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Joining with sets.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;test =  {&#39;2&#39;, &#39;1&#39;, &#39;3&#39;}
s = &#39;, &#39;
print(s.join(test))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;2, 3, 1
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;more-information&#34;&gt;&lt;strong&gt;More Information:&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.python.org/2/library/stdtypes.html#str.join&#34; target=&#34;_blank&#34;&gt;Python Documentation on String Join&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;string-replace-method&#34;&gt;&lt;strong&gt;String Replace Method&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;The  &lt;code&gt;str.replace(old, new, max)&lt;/code&gt;  method is used to replace the substring  &lt;code&gt;old&lt;/code&gt;  with the string  &lt;code&gt;new&lt;/code&gt;  for a total of  &lt;code&gt;max&lt;/code&gt;  times. This method returns a new copy of the string with the replacement. The original string  &lt;code&gt;str&lt;/code&gt;  is unchanged.&lt;/p&gt;

&lt;h4 id=&#34;examples-1&#34;&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Replace all occurrences of  &lt;code&gt;&amp;quot;is&amp;quot;&lt;/code&gt;  with  &lt;code&gt;&amp;quot;WAS&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;string = &amp;quot;This is nice. This is good.&amp;quot;
newString = string.replace(&amp;quot;is&amp;quot;,&amp;quot;WAS&amp;quot;)
print(newString)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Output&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ThWAS WAS nice. ThWAS WAS good.
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Replace the first 2 occurrences of  &lt;code&gt;&amp;quot;is&amp;quot;&lt;/code&gt;  with  &lt;code&gt;&amp;quot;WAS&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;string = &amp;quot;This is nice. This is good.&amp;quot;
newString = string.replace(&amp;quot;is&amp;quot;,&amp;quot;WAS&amp;quot;, 2)
print(newString)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Output&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ThWAS WAS nice. This is good.
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;more-information-1&#34;&gt;&lt;strong&gt;More Information:&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Read more about string replacement in the  &lt;a href=&#34;https://docs.python.org/2/library/string.html#string.replace&#34; target=&#34;_blank&#34;&gt;Python docs&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;string-strip-method&#34;&gt;&lt;strong&gt;String Strip Method&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;There are three options for stripping characters from a string in Python,  &lt;code&gt;lstrip()&lt;/code&gt;,  &lt;code&gt;rstrip()&lt;/code&gt;  and  &lt;code&gt;strip()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Each will return a copy of the string with characters removed, at from the beginning, the end or both beginning and end. If no arguments are given the default is to strip whitespace characters.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; string = &#39;   Hello, World!    &#39;
&amp;gt;&amp;gt;&amp;gt; strip_beginning = string.lstrip()
&amp;gt;&amp;gt;&amp;gt; strip_beginning
&#39;Hello, World!    &#39;
&amp;gt;&amp;gt;&amp;gt; strip_end = string.rstrip()
&amp;gt;&amp;gt;&amp;gt; strip_end
&#39;   Hello, World!&#39;
&amp;gt;&amp;gt;&amp;gt; strip_both = string.strip()
&amp;gt;&amp;gt;&amp;gt; strip_both
&#39;Hello, World!&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An optional argument can be provided as a string containing all characters you wish to strip.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; url = &#39;www.example.com/&#39;
&amp;gt;&amp;gt;&amp;gt; url.strip(&#39;w./&#39;)
&#39;example.com&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, do notice that only the first  &lt;code&gt;.&lt;/code&gt;  got stripped from the string. This is because the  &lt;code&gt;strip&lt;/code&gt;  function only strips the argument characters that lie at the left or rightmost. Since w comes before the first  &lt;code&gt;.&lt;/code&gt;  they get stripped together, whereas ‘com’ is present in the right end before the  &lt;code&gt;.&lt;/code&gt;  after stripping  &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;string-split-method&#34;&gt;String Split Method&lt;/h2&gt;

&lt;p&gt;The  &lt;code&gt;split()&lt;/code&gt;  function is commonly used for string splitting in Python.&lt;/p&gt;

&lt;h4 id=&#34;the-split-method&#34;&gt;&lt;strong&gt;The  &lt;code&gt;split()&lt;/code&gt;  method&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Template:  &lt;code&gt;string.split(separator, maxsplit)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;separator&lt;/code&gt;: The delimiter string. You split the string based on this character. For eg. it could be ” ”, ”:”, ”;” etc&lt;/p&gt;

&lt;p&gt;&lt;code&gt;maxsplit&lt;/code&gt;: The number of times to split the string based on the  &lt;code&gt;separator&lt;/code&gt;. If not specified or -1, the string is split based on all occurrences of the  &lt;code&gt;separator&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This method returns a list of substrings delimited by the  &lt;code&gt;separator&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;examples-2&#34;&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Split string on space: ” ”&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;string = &amp;quot;freeCodeCamp is fun.&amp;quot;
print(string.split(&amp;quot; &amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[&#39;freeCodeCamp&#39;, &#39;is&#39;, &#39;fun.&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Split string on comma: ”,”&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;string = &amp;quot;freeCodeCamp,is fun, and informative&amp;quot;
print(string.split(&amp;quot;,&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[&#39;freeCodeCamp&#39;, &#39;is fun&#39;, &#39; and informative&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No  &lt;code&gt;separator&lt;/code&gt;  specified&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;string = &amp;quot;freeCodeCamp is fun and informative&amp;quot;
print(string.split())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[&#39;freeCodeCamp&#39;, &#39;is&#39;, &#39;fun&#39;, &#39;and&#39;, &#39;informative&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: If no  &lt;code&gt;separator&lt;/code&gt;  is specified, then the string is stripped of  *&lt;strong&gt;&lt;em&gt;all&lt;/em&gt;&lt;/strong&gt;*  whitespace&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;string = &amp;quot;freeCodeCamp        is     fun and    informative&amp;quot;
print(string.split())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[&#39;freeCodeCamp&#39;, &#39;is&#39;, &#39;fun&#39;, &#39;and&#39;, &#39;informative&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Split string using  &lt;code&gt;maxsplit&lt;/code&gt;. Here we split the string on ” ” twice:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;string = &amp;quot;freeCodeCamp is fun and informative&amp;quot;
print(string.split(&amp;quot; &amp;quot;, 2))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[&#39;freeCodeCamp&#39;, &#39;is&#39;, &#39;fun and informative&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;more-information-2&#34;&gt;&lt;strong&gt;More Information&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Check out the  &lt;a href=&#34;https://www.freecodecamp.org/news/the-string-strip-method-in-python-explained/&#34; target=&#34;_blank&#34;&gt;Python docs on string splitting&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Reference : &lt;a href=&#34;https://www.freecodecamp.org/news/the-string-strip-method-in-python-explained/&#34; target=&#34;_blank&#34;&gt;freeCodeCamp&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Python Function Guide</title>
      <link>https://example.com/post/python/tutorials/python-function-guide/</link>
      <pubDate>Tue, 28 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/post/python/tutorials/python-function-guide/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://images.unsplash.com/photo-1555949963-aa79dcee981c?ixlib=rb-1.2.1&amp;amp;q=80&amp;amp;fm=jpg&amp;amp;crop=entropy&amp;amp;cs=tinysrgb&amp;amp;w=2000&amp;amp;fit=max&amp;amp;ixid=eyJhcHBfaWQiOjExNzczfQ&#34; alt=&#34;Python Function Guide with Examples&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;introduction-to-functions-in-python&#34;&gt;Introduction to Functions in Python&lt;/h2&gt;

&lt;p&gt;A function allows you to define a reusable block of code that can be executed many times within your program.&lt;/p&gt;

&lt;p&gt;Functions allow you to create more modular and  &lt;a href=&#34;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&#34; target=&#34;_blank&#34;&gt;DRY&lt;/a&gt;  solutions to complex problems.&lt;/p&gt;

&lt;p&gt;While Python already provides many built-in functions such as  &lt;code&gt;print()&lt;/code&gt;  and  &lt;code&gt;len()&lt;/code&gt;, you can also define your own functions to use within your projects.&lt;/p&gt;

&lt;p&gt;One of the great advantages of using functions in your code is that it reduces the overall number of lines of code in your project.&lt;/p&gt;

&lt;h3 id=&#34;syntax&#34;&gt;&lt;strong&gt;Syntax&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;In Python, a function definition has the following features:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The keyword  &lt;code&gt;def&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;a function name&lt;/li&gt;
&lt;li&gt;paranthesis’()’, and within paranthesis input parameters,although the input parameters are optional.&lt;/li&gt;
&lt;li&gt;a colon ’:’&lt;/li&gt;
&lt;li&gt;some block of code to execute&lt;/li&gt;

&lt;li&gt;&lt;p&gt;a return statement (optional)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# a function with no parameters or returned values
def sayHello():
print(&amp;quot;Hello!&amp;quot;)

sayHello()  # calls the function, &#39;Hello!&#39; is printed to the console

# a function with a parameter
def helloWithName(name):
print(&amp;quot;Hello &amp;quot; + name + &amp;quot;!&amp;quot;)

helloWithName(&amp;quot;Ada&amp;quot;)  # calls the function, &#39;Hello Ada!&#39; is printed to the console

# a function with multiple parameters with a return statement
def multiply(val1, val2):
return val1 * val2

multiply(3, 5)  # prints 15 to the console
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Functions are blocks of code that can be reused simply by calling the function. This enables simple, elegant code reuse without explicitly re-writing sections of code. This makes code both more readable, makes for easier debugging, and limits typing errors.&lt;/p&gt;

&lt;p&gt;Functions in Python are created using the  &lt;code&gt;def&lt;/code&gt;  keyword, followed by a function name and function parameters inside parentheses.&lt;/p&gt;

&lt;p&gt;A function always returns a value,The  &lt;code&gt;return&lt;/code&gt;  keyword is used by the function to return a value, if you don’t want to return any value, the default value  &lt;code&gt;None&lt;/code&gt;  will returned.&lt;/p&gt;

&lt;p&gt;The function name is used to call the function, passing the needed parameters inside parentheses.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# this is a basic sum function
def sum(a, b):
  return a + b

result = sum(1, 2)
# result = 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can define default values for the parameters, that way Python will interpretate that the value of that parameter is the default one if none is given.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def sum(a, b=3):
  return a + b

result = sum(1)
# result = 4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can pass the parameters in the order you want, using the name of the parameter.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;result = sum(b=2, a=2)
# result = 4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, it is not possible to pass a keyword argument before a non-keyword one&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;result = sum(3, b=2)
#result = 5
result2 = sum(b=2, 3)
#Will raise SyntaxError
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Functions are also Objects, so you can assign them to a variable, and use that variable like a function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;s = sum
result = s(1, 2)
# result = 3
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;notes&#34;&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;If a function definition includes parameters, you must provide the same number of parameters when you call the function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(multiply(3))  # TypeError: multiply() takes exactly 2 arguments (0 given)

print(multiply(&#39;a&#39;, 5))  # &#39;aaaaa&#39; printed to the console

print(multiply(&#39;a&#39;, &#39;b&#39;))  # TypeError: Python can&#39;t multiply two strings
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The block of code that the function will run includes all statements indented within the function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def myFunc():
print(&#39;this will print&#39;)
print(&#39;so will this&#39;)

x = 7
# the assignment of x is not a part of the function since it is not indented
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Variables defined within a function only exist within the scope of that function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def double(num):
x = num * 2
return x

print(x)  # error - x is not defined
print(double(4))  # prints 8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Python interprets the function block only when the function is called and not when the function is defined.So even if the function definition block contains some sort of error, the python interpreter will point that out only when the function is called.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s look at some specific functions with examples.&lt;/p&gt;

&lt;h2 id=&#34;max-function&#34;&gt;max() function&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;max()&lt;/code&gt;  is a built-in function in Python 3. It returns the largest item in an iterable or the largest of two or more arguments.&lt;/p&gt;

&lt;h3 id=&#34;arguments&#34;&gt;Arguments&lt;/h3&gt;

&lt;p&gt;This function takes two or more numbers or any kind of iterable as an argument. While giving an iterable as an argument we must make sure that all the elements in the iterable are of the same type. This means that we cannot pass a list which has both string and integer values stored in it. Syntax: max(iterable, *iterables[,key, default]) max(arg1, arg2, *args[, key])&lt;/p&gt;

&lt;p&gt;Valid Arguments:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;max(2, 3)
max([1, 2, 3])
max(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Invalid Arguments:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;max(2, &#39;a&#39;)
max([1, 2, 3, &#39;a&#39;])
max([])
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;return-value&#34;&gt;Return Value&lt;/h3&gt;

&lt;p&gt;The largest item in the iterable is returned. If two or more positional arguments are provided, the largest of the positional arguments is returned. If the iterable is empty and default is not provided, a  &lt;code&gt;ValueError&lt;/code&gt;  is raised.&lt;/p&gt;

&lt;h3 id=&#34;code-sample&#34;&gt;Code Sample&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(max(2, 3)) # Returns 3 as 3 is the largest of the two values
print(max(2, 3, 23)) # Returns 23 as 23 is the largest of all the values

list1 = [1, 2, 4, 5, 54]
print(max(list1)) # Returns 54 as 54 is the largest value in the list

list2 = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39; ]
print(max(list2)) # Returns &#39;c&#39; as &#39;c&#39; is the largest in the list because c has ascii value larger then &#39;a&#39; ,&#39;b&#39;.

list3 = [1, 2, &#39;abc&#39;, &#39;xyz&#39;]
print(max(list3)) # Gives TypeError as values in the list are of different type

#Fix the TypeError mentioned above first before moving on to next step

list4 = []
print(max(list4)) # Gives ValueError as the argument is empty
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://repl.it/CVok&#34; target=&#34;_blank&#34;&gt;Run Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/library/functions.html#max&#34; target=&#34;_blank&#34;&gt;Official Docs&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;min-function&#34;&gt;min() function&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;min()&lt;/code&gt;  is a built-in function in Python 3. It returns the smallest item in an iterable or the smallest of two or more arguments.&lt;/p&gt;

&lt;h3 id=&#34;arguments-1&#34;&gt;Arguments&lt;/h3&gt;

&lt;p&gt;This function takes two or more numbers or any kind of iterable as an argument. While giving an iterable as an argument we must make sure that all the elements in the iterable are of the same type. This means that we cannot pass a list which has both string and integer values stored in it.&lt;/p&gt;

&lt;p&gt;Valid Arguments:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;min(2, 3)
min([1, 2, 3])
min(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Invalid Arguments:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;min(2, &#39;a&#39;)
min([1, 2, 3, &#39;a&#39;])
min([])
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;return-value-1&#34;&gt;Return Value&lt;/h3&gt;

&lt;p&gt;The smallest item in the iterable is returned. If two or more positional arguments are provided, the smallest of the positional arguments&lt;br /&gt;
is returned. If the iterable is empty and default is not provided, a ValueError is raised.&lt;/p&gt;

&lt;h3 id=&#34;code-sample-1&#34;&gt;Code Sample&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(min(2, 3)) # Returns 2 as 2 is the smallest of the two values
print(min(2, 3, -1)) # Returns -1 as -1 is the smallest of the two values

list1 = [1, 2, 4, 5, -54]
print(min(list1)) # Returns -54 as -54 is the smallest value in the list

list2 = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39; ]
print(min(list2)) # Returns &#39;a&#39; as &#39;a&#39; is the smallest in the list in alphabetical order

list3 = [1, 2, &#39;abc&#39;, &#39;xyz&#39;]
print(min(list3)) # Gives TypeError as values in the list are of different type

#Fix the TypeError mentioned above first before moving on to next step

list4 = []
print(min(list4)) # Gives ValueError as the argument is empty
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://repl.it/CVir/4&#34; target=&#34;_blank&#34;&gt;Run Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/library/functions.html#min&#34; target=&#34;_blank&#34;&gt;Official Docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;divmod()&lt;/code&gt;  is a built-in function in Python 3, which returns the quotient and remainder when dividing the number  &lt;code&gt;a&lt;/code&gt;  by the number  &lt;code&gt;b&lt;/code&gt;. It takes two numbers as arguments  &lt;code&gt;a&lt;/code&gt;  &amp;amp;  &lt;code&gt;b&lt;/code&gt;. The argument can’t be a complex number.&lt;/p&gt;

&lt;h3 id=&#34;argument&#34;&gt;Argument&lt;/h3&gt;

&lt;p&gt;It takes two arguments  &lt;code&gt;a&lt;/code&gt;  &amp;amp;  &lt;code&gt;b&lt;/code&gt;  - an integer, or a decimal number.It can’t be a complex number.&lt;/p&gt;

&lt;h3 id=&#34;return-value-2&#34;&gt;Return Value&lt;/h3&gt;

&lt;p&gt;The return value will be the pair of positive numbers consisting of quotient and remainder obtained by dividing  &lt;code&gt;a&lt;/code&gt;  by  &lt;code&gt;b&lt;/code&gt;. In case of mixed operand types, rules for binary arithmetic operators will be applied.&lt;br /&gt;
For  *&lt;strong&gt;&lt;em&gt;Integer number arguments&lt;/em&gt;&lt;/strong&gt;*, return value will be same as  &lt;code&gt;(a // b, a % b)&lt;/code&gt;.&lt;br /&gt;
For  *&lt;strong&gt;&lt;em&gt;Decimal number arguments&lt;/em&gt;&lt;/strong&gt;*, return value will be same as  &lt;code&gt;(q, a % b)&lt;/code&gt;, where  &lt;code&gt;q&lt;/code&gt;  is usually  *&lt;strong&gt;&lt;em&gt;math.floor(a / b)&lt;/em&gt;&lt;/strong&gt;*  but may be 1 less than that.&lt;/p&gt;

&lt;h3 id=&#34;code-sample-2&#34;&gt;Code Sample&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(divmod(5,2)) # prints (2,1)
print(divmod(13.5,2.5)) # prints (5.0, 1.0)
q,r = divmod(13.5,2.5)  # Assigns q=quotient &amp;amp; r= remainder
print(q) # prints 5.0 because math.floor(13.5/2.5) = 5.0
print(r) # prints 1.0 because (13.5 % 2.5) = 1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://repl.it/FGLK/0&#34; target=&#34;_blank&#34;&gt;REPL It!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/library/functions.html#divmod&#34; target=&#34;_blank&#34;&gt;Official Docs&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;hex-x-function&#34;&gt;Hex(x) function&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;hex(x)&lt;/code&gt;  is a built-in function in Python 3 to convert an integer number to a lowercase  &lt;a href=&#34;https://www.mathsisfun.com/hexadecimals.html&#34; target=&#34;_blank&#34;&gt;hexadecimal&lt;/a&gt;  string prefixed with “0x”.&lt;/p&gt;

&lt;h3 id=&#34;argument-1&#34;&gt;Argument&lt;/h3&gt;

&lt;p&gt;This function takes one argument,  &lt;code&gt;x&lt;/code&gt;, that should be of integer type.&lt;/p&gt;

&lt;h3 id=&#34;return&#34;&gt;Return&lt;/h3&gt;

&lt;p&gt;This function returns a lowercase hexadecimal string prefixed with “0x”.&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(hex(16))    # prints  0x10
print(hex(-298))  # prints -0x12a
print(hex(543))   # prints  0x21f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://repl.it/CV0S&#34; target=&#34;_blank&#34;&gt;Run Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/library/functions.html#hex&#34; target=&#34;_blank&#34;&gt;Official Documentation&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;len-function&#34;&gt;len() function&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;len()&lt;/code&gt;  is a built-in function in Python 3. This method returns the length (the number of items) of an object. It takes one argument  &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;arguments-2&#34;&gt;Arguments&lt;/h3&gt;

&lt;p&gt;It takes one argument,  &lt;code&gt;x&lt;/code&gt;. This argument may be a sequence (such as a string, bytes, tuple, list, or range) or a collection (such as a dictionary, set, or frozen set).&lt;/p&gt;

&lt;h3 id=&#34;return-value-3&#34;&gt;Return Value&lt;/h3&gt;

&lt;p&gt;This function returns the number of elements in the argument which is passed to the  &lt;code&gt;len()&lt;/code&gt;  function.&lt;/p&gt;

&lt;h3 id=&#34;code-sample-3&#34;&gt;Code Sample&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;list1 = [123, &#39;xyz&#39;, &#39;zara&#39;] # list
print(len(list1)) # prints 3 as there are 3 elements in the list1

str1 = &#39;basketball&#39; # string
print(len(str1)) # prints 10 as the str1 is made of 10 characters

tuple1 = (2, 3, 4, 5) # tuple 
print(len(tuple1)) # prints 4 as there are 4 elements in the tuple1

dict1 = {&#39;name&#39;: &#39;John&#39;, &#39;age&#39;: 4, &#39;score&#39;: 45} # dictionary
print(len(dict1)) # prints 3 as there are 3 key and value pairs in the dict1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://repl.it/CUmt/15&#34; target=&#34;_blank&#34;&gt;Run Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/library/functions.html#len&#34; target=&#34;_blank&#34;&gt;Official Docs&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;ord-function&#34;&gt;&lt;strong&gt;Ord function&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ord()&lt;/code&gt;  is a built-in function in Python 3, to convert the string representing one Unicode character into integer representing the Unicode code of the character.&lt;/p&gt;

&lt;h4 id=&#34;examples&#34;&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; ord(&#39;d&#39;)
100
&amp;gt;&amp;gt;&amp;gt; ord(&#39;1&#39;)
49
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;chr-function&#34;&gt;chr function&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;chr()&lt;/code&gt;  is a built-in function in Python 3, to convert the integer representing the Unicode code into a string representing a corresponding character.&lt;/p&gt;

&lt;h4 id=&#34;examples-1&#34;&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; chr(49)
&#39;1&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One thing is to be noted that, if the integer value passed to  &lt;code&gt;chr()&lt;/code&gt;  is out of range then, a ValueError will be raised.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; chr(-10)
&#39;Traceback (most recent call last):
  File &amp;quot;&amp;lt;pyshell#24&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
    chr(-1)
ValueError: chr() arg not in range(0x110000)&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;input-functions&#34;&gt;input() functions&lt;/h2&gt;

&lt;p&gt;Many a time, in a program we need some input from the user. Taking inputs from the user makes the program feel interactive. In Python 3, to take input from the user we have a function  &lt;code&gt;input()&lt;/code&gt;. If the input function is called, the program flow will be stopped until the user has given an input and has ended the input with the return key. Let’s see some examples:&lt;/p&gt;

&lt;p&gt;When we just want to take the input:&lt;/p&gt;

&lt;p&gt;inp = input()&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://repl.it/CUqX/0&#34; target=&#34;_blank&#34;&gt;Run Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To give a prompt with a message:&lt;/p&gt;

&lt;p&gt;prompt_with_message = input(’‘)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://repl.it/CUqX/1&#34; target=&#34;_blank&#34;&gt;Run Code&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;When we want to take an integer input:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;number = int(input(&#39;Please enter a number: &#39;))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;https://repl.it/CUqX/2&#34; target=&#34;_blank&#34;&gt;Run Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you enter a non integer value then Python will throw an error  &lt;code&gt;ValueError&lt;/code&gt;.  *&lt;strong&gt;&lt;em&gt;So whenever you use this, please make sure that you catch it too.&lt;/em&gt;&lt;/strong&gt;*  Otherwise, your program will stop unexpectedly after the prompt.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;number = int(input(&#39;Please enter a number: &#39;))
# Please enter a number: as
# Enter a string and it will throw this error
# ValueError: invalid literal for int() with base 10 &#39;as&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;When we want a string input:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;string = str(input(&#39;Please enter a string: &#39;))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;https://repl.it/CUqX/3&#34; target=&#34;_blank&#34;&gt;Run Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Though, inputs are stored by default as a string. Using the  &lt;code&gt;str()&lt;/code&gt;  function makes it clear to the code-reader that the input is going to be a ‘string’. It is a good practice to mention what type of input will be taken beforehand.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/library/functions.html#input&#34; target=&#34;_blank&#34;&gt;Official Docs&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;how-to-call-a-function-in-python&#34;&gt;How to call a function in Python&lt;/h2&gt;

&lt;p&gt;A function definition statement does not execute the function. Executing (calling) a function is done by using the name of the function followed by parenthesis enclosing required arguments (if any).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def say_hello():
...     print(&#39;Hello&#39;)
...
&amp;gt;&amp;gt;&amp;gt; say_hello()
Hello
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The execution of a function introduces a new symbol table used for the local variables of the function. More precisely, all variable assignments in a function store the value in the local symbol table; whereas variable references first look in the local symbol table, then in the local symbol tables of enclosing functions, then in the global symbol table, and finally in the table of built-in names. Thus, global variables cannot be directly assigned a value within a function (unless named in a global statement), although they may be referenced.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = 1
&amp;gt;&amp;gt;&amp;gt; b = 10
&amp;gt;&amp;gt;&amp;gt; def fn():
...     print(a)    # local a is not assigned, no enclosing function, global a referenced.
...     b = 20      # local b is assigned in the local symbol table for the function.
...     print(b)    # local b is referenced.
...
&amp;gt;&amp;gt;&amp;gt; fn()
1
20
&amp;gt;&amp;gt;&amp;gt; b               # global b is not changed by the function call.
10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The actual parameters (arguments) to a function call are introduced in the local symbol table of the called function when it is called; thus, arguments are passed using call by value (where the value is always an object reference, not the value of the object). When a function calls another function, a new local symbol table is created for that call.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def greet(s):
...     s = &amp;quot;Hello &amp;quot; + s    # s in local symbol table is reassigned.
...     print(s)
...
&amp;gt;&amp;gt;&amp;gt; person = &amp;quot;Bob&amp;quot;
&amp;gt;&amp;gt;&amp;gt; greet(person)
Hello Bob
&amp;gt;&amp;gt;&amp;gt; person                  # person used to call remains bound to original object, &#39;Bob&#39;.
&#39;Bob&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The arguments used to call a function cannot be reassigned by the function, but arguments that reference mutable objects can have their values changed:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def fn(arg):
...     arg.append(1)
...
&amp;gt;&amp;gt;&amp;gt; a = [1, 2, 3]
&amp;gt;&amp;gt;&amp;gt; fn(a)
&amp;gt;&amp;gt;&amp;gt; a
[1, 2, 3, 1]
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Reference : &lt;a href=&#34;https://www.freecodecamp.org/news/python-function-guide-with-examples/&#34; target=&#34;_blank&#34;&gt;freeCodeCamp&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Lambda Expressions in Python.</title>
      <link>https://example.com/post/python/tutorials/lambda-expressions/</link>
      <pubDate>Sat, 04 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/post/python/tutorials/lambda-expressions/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;featured.jpg&#34; alt=&#34;Lambda Expressions in Python&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;lambda-expressions&#34;&gt;&lt;strong&gt;Lambda Expressions&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Lambda Expressions are ideally used when we need to do something simple and are more interested in getting the job done quickly rather than formally naming the function. Lambda expressions are also known as anonymous functions.&lt;/p&gt;

&lt;p&gt;Lambda Expressions in Python are a short way to declare small and anonymous functions (it is not necessary to provide a name for lambda functions).&lt;/p&gt;

&lt;p&gt;Lambda functions behave just like regular functions declared with the  &lt;code&gt;def&lt;/code&gt;  keyword. They come in handy when you want to define a small function in a concise way. They can contain only one expression, so they are not best suited for functions with control-flow statements.&lt;/p&gt;

&lt;h3 id=&#34;syntax-of-a-lambda-function&#34;&gt;Syntax of a Lambda Function&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;lambda arguments: expression&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Lambda functions can have any number of arguments but only one expression.&lt;/p&gt;

&lt;h3 id=&#34;example-code&#34;&gt;Example code&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# Lambda function to calculate square of a number
square = lambda x: x ** 2
print(square(3)) # Output: 9

# Traditional function to calculate square of a number
def square1(num):
  return num ** 2
print(square(5)) # Output: 25
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above lambda example,  &lt;code&gt;lambda x: x ** 2&lt;/code&gt;  yields an anonymous function object which can be associated with any name. So, we associated the function object with  &lt;code&gt;square&lt;/code&gt;. So from now on we can call the  &lt;code&gt;square&lt;/code&gt;  object like any traditional function, for example  &lt;code&gt;square(10)&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;examples-of-lambda-functions&#34;&gt;&lt;strong&gt;Examples of lambda functions&lt;/strong&gt;&lt;/h2&gt;

&lt;h3 id=&#34;beginner&#34;&gt;&lt;strong&gt;Beginner&lt;/strong&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;lambda_func = lambda x: x**2 # Function that takes an integer and returns its square
lambda_func(3) # Returns 9
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;intermediate&#34;&gt;&lt;strong&gt;Intermediate&lt;/strong&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;lambda_func = lambda x: True if x**2 &amp;gt;= 10 else False
lambda_func(3) # Returns False
lambda_func(4) # Returns True
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;complex&#34;&gt;&lt;strong&gt;Complex&lt;/strong&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;my_dict = {&amp;quot;A&amp;quot;: 1, &amp;quot;B&amp;quot;: 2, &amp;quot;C&amp;quot;: 3}
sorted(my_dict, key=lambda x: my_dict[x]%3) # Returns [&#39;C&#39;, &#39;A&#39;, &#39;B&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;use-case&#34;&gt;Use-case&lt;/h2&gt;

&lt;p&gt;Let’s say you want to filter out odd numbers from a  &lt;code&gt;list&lt;/code&gt;. You could use a  &lt;code&gt;for&lt;/code&gt;  loop:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
filtered = []

for num in my_list:
     if num % 2 != 0:
         filtered.append(num)

print(filtered)      # Python 2: print filtered
# [1, 3, 5, 7, 9]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or you could write this as a one liner with list-comprehensions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;filtered = [x for x in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] if x % 2 != 0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But you might be tempted to use the built-in  &lt;code&gt;filter&lt;/code&gt;  function. Why? The first example is a bit too verbose and the one-liner can be harder to understand. But  &lt;code&gt;filter&lt;/code&gt;  offers the best of both words. What is more, the built-in functions are usually faster.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

filtered = filter(lambda x: x % 2 != 0, my_list)

list(filtered)
# [1, 3, 5, 7, 9]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NOTE: in Python 3 built in functions return generator objects, so you have to call  &lt;code&gt;list&lt;/code&gt;. In Python 2, on the other hand, they return a  &lt;code&gt;list&lt;/code&gt;,  &lt;code&gt;tuple&lt;/code&gt;or  &lt;code&gt;string&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So what happened? You told  &lt;code&gt;filter&lt;/code&gt;  to take each element in  &lt;code&gt;my_list&lt;/code&gt;  and apply the lambda expressions. The values that return  &lt;code&gt;False&lt;/code&gt;  are filtered out.&lt;/p&gt;

&lt;h4 id=&#34;more-information&#34;&gt;&lt;strong&gt;More Information:&lt;/strong&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3/reference/expressions.html#lambda&#34; target=&#34;_blank&#34;&gt;Official Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Reference : &lt;a href=&#34;https://www.freecodecamp.org/news/lambda-expressions-in-python/&#34; target=&#34;_blank&#34;&gt;freeCodeCamp&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Regular Expressions Explained</title>
      <link>https://example.com/post/python/tutorials/regular-expressions-explained/</link>
      <pubDate>Sun, 07 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/post/python/tutorials/regular-expressions-explained/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;featured.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.thedataschool.co.uk/natalia-miteva/regex-what-why-and-how/&#34; target=&#34;_blank&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I bet you all have encountered regular expressions at some points. They are very powerful tools that are universally supported in many platforms, including programming languages like Python, R, Java, SQL, Scala.&lt;/p&gt;

&lt;p&gt;As a data scientist/developer, having a solid understanding of Regex can help you perform various data munging and text mining tasks very easily. Personally, I use them for lots of random stuffs, mostly when I have to work with text data or do Natural Language Processing projects.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/687/1*ZXTb1lt1LYysa1yki__0Aw.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Regular expressions can seem intimidating at first, but they are very rewarding once you grasp the basics and apply them to your work properly.&lt;/p&gt;

&lt;h1 id=&#34;what-is-regular-expression-regex&#34;&gt;What is Regular Expression (RegEx)?&lt;/h1&gt;

&lt;p&gt;A regular expression or regex is a text string that defines a  &lt;em&gt;search pattern.&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;quot;\w+&amp;quot; # this is a regex
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Typically, these patterns are used for four main tasks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Find&lt;/strong&gt;  text within a larger body of text&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Validate&lt;/strong&gt;  that a string conforms to a desired format&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Replace&lt;/strong&gt; or  &lt;strong&gt;insert&lt;/strong&gt; text&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Split&lt;/strong&gt;  strings&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s take a quick look at some common regex patterns before we apply them to our codes.&lt;/p&gt;

&lt;h1 id=&#34;common-patterns&#34;&gt;Common Patterns&lt;/h1&gt;

&lt;p&gt;Earlier, we have this regex example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;\w+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;“w” here means  &lt;em&gt;word&lt;/em&gt;. “+” means  &lt;em&gt;one or more.&lt;/em&gt; The backlash character “\” is the escape character for regular expressions.  This regex matches word characters, including ASCII letter, digit, or underscore. Now, suppose we want to match the first word we can find in a string. First, we import the  &lt;code&gt;re&lt;/code&gt; module.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;import re
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we define a pattern, and use the function  &lt;code&gt;re.match()&lt;/code&gt;  to match the first word it finds:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# define a regex pattern  
word_regex = &#39;\w+&#39;re.match(word_regex, &#39;hello world!&#39;) _# this matches the first word it finds  
_&amp;gt;&amp;gt;&amp;gt;&amp;lt;re.Match object; span=(0, 2), match=&#39;hi&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some common patterns:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;w&lt;/strong&gt;  matches word characters&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;d&lt;/strong&gt;  matches digits, while  &lt;strong&gt;D&lt;/strong&gt;  matches non-digit characters&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;s&lt;/strong&gt;  matches whitespace characters, while  &lt;strong&gt;S&lt;/strong&gt;  matches non-whitespace characters&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.&lt;/strong&gt;  (dot) matches any letter or symbol (wildcard)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[a-z]&lt;/strong&gt;  matches lowercase group. The bracket [] matches characters in it&lt;/li&gt;
&lt;li&gt;Use  &lt;strong&gt;()&lt;/strong&gt;  to define a group&lt;/li&gt;
&lt;li&gt;Use  &lt;strong&gt;[]&lt;/strong&gt;  to define explicit character ranges&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now as you already have some regex patterns in hand, let’s move on to some important functions.&lt;/p&gt;

&lt;h2 id=&#34;the-match-function&#34;&gt;The match() function&lt;/h2&gt;

&lt;p&gt;This function matches  &lt;em&gt;pattern&lt;/em&gt;  to  &lt;em&gt;string&lt;/em&gt;. It returns a  &lt;strong&gt;match&lt;/strong&gt;  object on success,  &lt;strong&gt;&lt;em&gt;None&lt;/em&gt;&lt;/strong&gt;  on failure.
The match function is defined as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;re.match(&#39;\w+&#39;, &#39;hello world!&#39;)  
&amp;gt;&amp;gt;&amp;gt;&amp;lt;re.Match object; span=(0, 5), match=&#39;hello&#39;&amp;gt;
The match function is defined as:
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-findall-function&#34;&gt;The findall() function&lt;/h2&gt;

&lt;p&gt;This function returns a list of all instances of the pattern in the string. Matches are returned in the order left-to-right of the original string.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;re.findall(&#39;[A-Z]\w+&#39;, &#39;hello World!&#39;)  
&amp;gt;&amp;gt;&amp;gt;[&#39;World&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;The search() function&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The  &lt;strong&gt;search()&lt;/strong&gt;  function scans through string, looking for instances of the pattern in the string. It returns a  &lt;strong&gt;match&lt;/strong&gt;  object on success,  &lt;strong&gt;&lt;em&gt;None&lt;/em&gt;&lt;/strong&gt;  on failure. This function is like the match() function, but it goes through the whole string. See  &lt;a href=&#34;https://docs.python.org/3/library/re.html#search-vs-match&#34; target=&#34;_blank&#34;&gt;search() vs match()&lt;/a&gt;  for more details.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;re.search(&#39;ef&#39;, &#39;abcdef&#39;)  
&amp;gt;&amp;gt;&amp;gt;&amp;lt;re.Match object; span=(4, 6), match=&#39;ef&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;The split() function&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This function splits  &lt;em&gt;string&lt;/em&gt;  by the occurrences of  &lt;em&gt;pattern.&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;re.split(&#39;\s+&#39;, &#39;hello world this is andre&#39;)  
&amp;gt;&amp;gt;&amp;gt;[&#39;hello&#39;, &#39;world&#39;, &#39;this&#39;, &#39;is&#39;, &#39;andre&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;random-thoughts&#34;&gt;Random Thoughts&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/60/1*rD8bpKAGWGct2ThM2jKOaw.png?q=20&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/921/1*rD8bpKAGWGct2ThM2jKOaw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Who else loves Regex?&lt;/p&gt;

&lt;p&gt;I love regular expressions. However, it is important to remember that while regex are very powerful tools, it is extraordinarily easy to overuse them. A few things to note:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Start small. Use them responsibly. Break it down into smaller regexes if needed. You would not want to end up with one huge multiple-line regex. It decreases visibility of your codes and is just not worth it.&lt;/li&gt;
&lt;li&gt;Comment your regex! No one wants to waste time staring at your 20-line monster regex trying to figure out what it means.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;In this article, you have learned the main concept of regex, common patterns, and how to apply regex using  &lt;strong&gt;re&lt;/strong&gt;  functions. Regex is a small computer language of their own, and it requires practice too. Here are my favorite resources to get you started:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.rexegg.com/regex-quickstart.html&#34; target=&#34;_blank&#34;&gt;https://www.rexegg.com/regex-quickstart.html&lt;/a&gt;: your go-to regex cheatsheet&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.regular-expressions.info/&#34; target=&#34;_blank&#34;&gt;https://www.regular-expressions.info&lt;/a&gt;: another comprehensive regex tutorial site&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://regexr.com/&#34; target=&#34;_blank&#34;&gt;https://regexr.com&lt;/a&gt;: an online tool to learn, build, and test your regex&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pythex.org/&#34; target=&#34;_blank&#34;&gt;https://pythex.org&lt;/a&gt;: a Python regular expression editor. A quick way to test regular expressions as you write them&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3/library/re.html&#34; target=&#34;_blank&#34;&gt;https://docs.python.org/3/library/re.html&lt;/a&gt;: official Python docs on regex&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;This is my first post on Towards Data Science. Leave comments if you have any suggestions for how to improve this post. Follow me up at  &lt;a href=&#34;https://medium.com/@andreduong07&#34; target=&#34;_blank&#34;&gt;Medium&lt;/a&gt;  or connect with me on  &lt;a href=&#34;https://www.linkedin.com/in/andreduong/&#34; target=&#34;_blank&#34;&gt;LinkedIn&lt;/a&gt;  for more quality content!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Reference : &lt;a href=&#34;https://towardsdatascience.com/regular-expressions-explained-c9bce508e672&#34; target=&#34;_blank&#34;&gt;towardsdatascience.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Learning Python From Zero to Hero</title>
      <link>https://example.com/post/python/tutorials/zero_to_hero/</link>
      <pubDate>Sat, 30 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/post/python/tutorials/zero_to_hero/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/1*ueWmI48uuShON-hX7LwI0w.png&#34; alt=&#34;Learning Python: From Zero to Hero&#34; /&gt;&lt;/p&gt;

&lt;p&gt;First of all, what is Python? According to its creator, Guido van Rossum, Python is a:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;“high-level programming language, and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code.”&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For me, the first reason to learn Python was that it is, in fact, a beautiful  programming language. It was really natural to code in it and express my thoughts.&lt;/p&gt;

&lt;p&gt;Another reason was that we can use coding in Python in multiple ways: data science, web development, and machine learning all shine here. Quora, Pinterest and Spotify all use Python for their backend web development. So let’s learn a bit about it.&lt;/p&gt;

&lt;h3 id=&#34;the-basics&#34;&gt;The Basics&lt;/h3&gt;

&lt;h4 id=&#34;1-variables&#34;&gt;1. Variables&lt;/h4&gt;

&lt;p&gt;You can think about variables as words that store a value. Simple as that.&lt;/p&gt;

&lt;p&gt;In Python, it is really easy to define a variable and set a value to it. Imagine you want to store number 1 in a variable called “one.” Let’s do it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;one = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How simple was that? You just assigned the value 1 to the variable “one.”&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;two = 2
some_number = 10000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you can assign any other  &lt;strong&gt;value&lt;/strong&gt;  to whatever other  &lt;strong&gt;variables&lt;/strong&gt; you want. As you see in the table above, the variable “&lt;strong&gt;two&lt;/strong&gt;” stores the integer  &lt;strong&gt;2&lt;/strong&gt;, and “&lt;strong&gt;some_number&lt;/strong&gt;” stores  &lt;strong&gt;10,000&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Besides integers, we can also use booleans (True / False), strings, float, and so many other data types.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# booleans
true_boolean = True
false_boolean = False

# string
my_name = &amp;quot;Leandro Tk&amp;quot;

# float
book_price = 15.80
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;2-control-flow-conditional-statements&#34;&gt;2. Control Flow: conditional statements&lt;/h4&gt;

&lt;p&gt;“&lt;strong&gt;If&lt;/strong&gt;” uses an expression to evaluate whether a statement is True or False. If it is True, it executes what is inside the “if” statement. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;if True:
  print(&amp;quot;Hello Python If&amp;quot;)

if 2 &amp;gt; 1:
  print(&amp;quot;2 is greater than 1&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2&lt;/strong&gt;  is greater than  &lt;strong&gt;1&lt;/strong&gt;, so the “&lt;strong&gt;print&lt;/strong&gt;” code is executed.&lt;/p&gt;

&lt;p&gt;The “&lt;strong&gt;else&lt;/strong&gt;” statement will be executed if the “&lt;strong&gt;if&lt;/strong&gt;” expression is  &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;if 1 &amp;gt; 2:
  print(&amp;quot;1 is greater than 2&amp;quot;)
else:
  print(&amp;quot;1 is not greater than 2&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt;  is not greater than  &lt;strong&gt;2&lt;/strong&gt;, so the code inside the “&lt;strong&gt;else&lt;/strong&gt;” statement will be executed.&lt;/p&gt;

&lt;p&gt;You can also use an “&lt;strong&gt;elif&lt;/strong&gt;” statement:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;if 1 &amp;gt; 2:
  print(&amp;quot;1 is greater than 2&amp;quot;)
elif 2 &amp;gt; 1:
  print(&amp;quot;1 is not greater than 2&amp;quot;)
else:
  print(&amp;quot;1 is equal to 2&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-looping-iterator&#34;&gt;3. Looping / Iterator&lt;/h4&gt;

&lt;p&gt;In Python, we can iterate in different forms. I’ll talk about two:  &lt;strong&gt;while&lt;/strong&gt; and  &lt;strong&gt;for&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;While&lt;/strong&gt; Looping: while the statement is True, the code inside the block will be executed. So, this code will print the number from  &lt;strong&gt;1&lt;/strong&gt;  to  &lt;strong&gt;10&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;num = 1

while num &amp;lt;= 10:
    print(num)
    num += 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The  &lt;strong&gt;while&lt;/strong&gt;  loop needs a “&lt;strong&gt;loop condition.&lt;/strong&gt;” If it stays True, it continues iterating. In this example, when  &lt;code&gt;num&lt;/code&gt;  is  &lt;code&gt;11&lt;/code&gt;  the  &lt;strong&gt;loop condition&lt;/strong&gt;  equals  &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another basic bit of code to better understand it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;loop_condition = True

while loop_condition:
    print(&amp;quot;Loop Condition keeps: %s&amp;quot; %(loop_condition))
    loop_condition = False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The  &lt;strong&gt;loop condition&lt;/strong&gt;  is  &lt;code&gt;True&lt;/code&gt;  so it keeps iterating — until we set it to  &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For Looping&lt;/strong&gt;: you apply the variable “&lt;strong&gt;num&lt;/strong&gt;” to the block, and the “&lt;strong&gt;for&lt;/strong&gt;” statement will iterate it for you. This code will print the same as  &lt;strong&gt;while&lt;/strong&gt;  code: from  &lt;strong&gt;1&lt;/strong&gt;  to  &lt;strong&gt;10&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;for i in range(1, 11):
  print(i)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See? It is so simple. The range starts with  &lt;code&gt;1&lt;/code&gt;  and goes until the  &lt;code&gt;11&lt;/code&gt;th element (&lt;code&gt;10&lt;/code&gt;  is the  &lt;code&gt;10&lt;/code&gt;th element).&lt;/p&gt;

&lt;h3 id=&#34;list-collection-array-data-structure&#34;&gt;List: Collection | Array | Data Structure&lt;/h3&gt;

&lt;p&gt;Imagine you want to store the integer 1 in a variable. But maybe now you want to store 2. And 3, 4, 5 …&lt;/p&gt;

&lt;p&gt;Do I have another way to store all the integers that I want, but not in  &lt;strong&gt;millions of variables&lt;/strong&gt;? You guessed it — there is indeed another way to store them.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;List&lt;/code&gt;  is a collection that can be used to store a list of values (like these integers that you want). So let’s use it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;my_integers = [1, 2, 3, 4, 5]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is really simple. We created an array and stored it on  &lt;strong&gt;my_integer&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;But maybe you are asking: “How can I get a value from this array?”&lt;/p&gt;

&lt;p&gt;Great question.  &lt;code&gt;List&lt;/code&gt;  has a concept called  &lt;strong&gt;index&lt;/strong&gt;. The first element gets the index 0 (zero). The second gets 1, and so on. You get the idea.&lt;/p&gt;

&lt;p&gt;To make it clearer, we can represent the array and each element with its index. I can draw it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/1*ReMk6NgghLII20vPD6uNEA.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Using the Python syntax, it’s also simple to understand:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;my_integers = [5, 7, 1, 3, 4]
print(my_integers[0]) # 5
print(my_integers[1]) # 7
print(my_integers[4]) # 4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Imagine that you don’t want to store integers. You just want to store strings, like a list of your relatives’ names. Mine would look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;relatives_names = [
  &amp;quot;Toshiaki&amp;quot;,
  &amp;quot;Juliana&amp;quot;,
  &amp;quot;Yuji&amp;quot;,
  &amp;quot;Bruno&amp;quot;,
  &amp;quot;Kaio&amp;quot;
]

print(relatives_names[4]) # Kaio
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It works the same way as integers. Nice.&lt;/p&gt;

&lt;p&gt;We just learned how  &lt;code&gt;Lists&lt;/code&gt;  indices work. But I still need to show you how we can add an element to the  &lt;code&gt;List&lt;/code&gt;  data structure (an item to a list).&lt;/p&gt;

&lt;p&gt;The most common method to add a new value to a  &lt;code&gt;List&lt;/code&gt;  is  &lt;code&gt;append&lt;/code&gt;. Let’s see how it works:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;bookshelf = []
bookshelf.append(&amp;quot;The Effective Engineer&amp;quot;)
bookshelf.append(&amp;quot;The 4 Hour Work Week&amp;quot;)
print(bookshelf[0]) # The Effective Engineer
print(bookshelf[1]) # The 4 Hour Work Week
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;append&lt;/code&gt;  is super simple. You just need to apply the element (eg. “&lt;strong&gt;The Effective Engineer&lt;/strong&gt;”) as the  &lt;code&gt;append&lt;/code&gt;  parameter.&lt;/p&gt;

&lt;p&gt;Well, enough about  &lt;code&gt;Lists&lt;/code&gt;&lt;strong&gt;&lt;em&gt;.&lt;/em&gt;&lt;/strong&gt;  Let’s talk about another data structure.&lt;/p&gt;

&lt;h3 id=&#34;dictionary-key-value-data-structure&#34;&gt;Dictionary: Key-Value Data Structure&lt;/h3&gt;

&lt;p&gt;Now we know that  &lt;code&gt;Lists&lt;/code&gt;  are indexed with integer numbers. But what if we don’t want to use integer numbers as indices? Some data structures that we can use are numeric, string, or other types of indices.&lt;/p&gt;

&lt;p&gt;Let’s learn about the  &lt;code&gt;Dictionary&lt;/code&gt;  data structure.  &lt;code&gt;Dictionary&lt;/code&gt;  is a collection of key-value pairs. Here’s what it looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;dictionary_example = {
  &amp;quot;key1&amp;quot;: &amp;quot;value1&amp;quot;,
  &amp;quot;key2&amp;quot;: &amp;quot;value2&amp;quot;,
  &amp;quot;key3&amp;quot;: &amp;quot;value3&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The  &lt;strong&gt;key&lt;/strong&gt;  is the index pointing to the &lt;strong&gt;value&lt;/strong&gt;. How do we access the  &lt;code&gt;Dictionary&lt;/code&gt;  &lt;strong&gt;value&lt;/strong&gt;? You guessed it — using the  &lt;strong&gt;key&lt;/strong&gt;. Let’s try it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;dictionary_tk = {
  &amp;quot;name&amp;quot;: &amp;quot;Leandro&amp;quot;,
  &amp;quot;nickname&amp;quot;: &amp;quot;Tk&amp;quot;,
  &amp;quot;nationality&amp;quot;: &amp;quot;Brazilian&amp;quot;
}

print(&amp;quot;My name is %s&amp;quot; %(dictionary_tk[&amp;quot;name&amp;quot;])) # My name is Leandro
print(&amp;quot;But you can call me %s&amp;quot; %(dictionary_tk[&amp;quot;nickname&amp;quot;])) # But you can call me Tk
print(&amp;quot;And by the way I&#39;m %s&amp;quot; %(dictionary_tk[&amp;quot;nationality&amp;quot;])) # And by the way I&#39;m Brazilian
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I created a  &lt;code&gt;Dictionary&lt;/code&gt;  about me. My name, nickname, and nationality. Those attributes are the  &lt;code&gt;Dictionary&lt;/code&gt;  &lt;strong&gt;keys&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;As we learned how to access the  &lt;code&gt;List&lt;/code&gt;  using index, we also use indices (&lt;strong&gt;keys&lt;/strong&gt;  in the  &lt;code&gt;Dictionary&lt;/code&gt;  context) to access the  &lt;strong&gt;value&lt;/strong&gt;  stored in the  &lt;code&gt;Dictionary&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the example, I printed a phrase about me using all the values stored in the  &lt;code&gt;Dictionary&lt;/code&gt;. Pretty simple, right?&lt;/p&gt;

&lt;p&gt;Another cool thing about  &lt;code&gt;Dictionary&lt;/code&gt;  is that we can use anything as the value. In the  &lt;code&gt;Dictionary&lt;/code&gt;  I created, I want to add the  &lt;strong&gt;key&lt;/strong&gt;  “age” and my real integer age in it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;dictionary_tk = {
  &amp;quot;name&amp;quot;: &amp;quot;Leandro&amp;quot;,
  &amp;quot;nickname&amp;quot;: &amp;quot;Tk&amp;quot;,
  &amp;quot;nationality&amp;quot;: &amp;quot;Brazilian&amp;quot;,
  &amp;quot;age&amp;quot;: 24
}

print(&amp;quot;My name is %s&amp;quot; %(dictionary_tk[&amp;quot;name&amp;quot;])) # My name is Leandro
print(&amp;quot;But you can call me %s&amp;quot; %(dictionary_tk[&amp;quot;nickname&amp;quot;])) # But you can call me Tk
print(&amp;quot;And by the way I&#39;m %i and %s&amp;quot; %(dictionary_tk[&amp;quot;age&amp;quot;], dictionary_tk[&amp;quot;nationality&amp;quot;])) # And by the way I&#39;m Brazilian
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we have a  &lt;strong&gt;key&lt;/strong&gt;  (age)  &lt;strong&gt;value&lt;/strong&gt;  (24) pair using string as the  &lt;strong&gt;key&lt;/strong&gt;  and integer as the  &lt;strong&gt;value&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;As we did with  &lt;code&gt;Lists&lt;/code&gt;, let’s learn how to add elements to a  &lt;code&gt;Dictionary&lt;/code&gt;. The  &lt;strong&gt;key&lt;/strong&gt; pointing to a &lt;strong&gt;value&lt;/strong&gt;  is a big part of what  &lt;code&gt;Dictionary&lt;/code&gt;  is. This is also true when we are talking about adding elements to it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;dictionary_tk = {
  &amp;quot;name&amp;quot;: &amp;quot;Leandro&amp;quot;,
  &amp;quot;nickname&amp;quot;: &amp;quot;Tk&amp;quot;,
  &amp;quot;nationality&amp;quot;: &amp;quot;Brazilian&amp;quot;
}

dictionary_tk[&#39;age&#39;] = 24

print(dictionary_tk) # {&#39;nationality&#39;: &#39;Brazilian&#39;, &#39;age&#39;: 24, &#39;nickname&#39;: &#39;Tk&#39;, &#39;name&#39;: &#39;Leandro&#39;}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We just need to assign a  &lt;strong&gt;value&lt;/strong&gt;  to a  &lt;code&gt;Dictionary&lt;/code&gt; &lt;strong&gt;key&lt;/strong&gt;. Nothing complicated here, right?&lt;/p&gt;

&lt;h3 id=&#34;iteration-looping-through-data-structures&#34;&gt;Iteration: Looping Through Data Structures&lt;/h3&gt;

&lt;p&gt;As we learned in the  &lt;a href=&#34;https://medium.com/the-renaissance-developer/python-101-the-basics-441136fb7cc3&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Python Basics&lt;/strong&gt;&lt;/a&gt;, the  &lt;code&gt;List&lt;/code&gt;  iteration is very simple. We  &lt;code&gt;Python&lt;/code&gt;  developers commonly use  &lt;code&gt;For&lt;/code&gt;  looping. Let’s do it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;bookshelf = [
  &amp;quot;The Effective Engineer&amp;quot;,
  &amp;quot;The 4-hour Workweek&amp;quot;,
  &amp;quot;Zero to One&amp;quot;,
  &amp;quot;Lean Startup&amp;quot;,
  &amp;quot;Hooked&amp;quot;
]

for book in bookshelf:
    print(book)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So for each book in the bookshelf, we (&lt;strong&gt;can do everything with it&lt;/strong&gt;) print it. Pretty simple and intuitive. That’s Python.&lt;/p&gt;

&lt;p&gt;For a hash data structure, we can also use the  &lt;code&gt;for&lt;/code&gt;  loop, but we apply the  &lt;code&gt;key&lt;/code&gt;  :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;dictionary = { &amp;quot;some_key&amp;quot;: &amp;quot;some_value&amp;quot; }

for key in dictionary:
    print(&amp;quot;%s --&amp;gt; %s&amp;quot; %(key, dictionary[key]))
    
# some_key --&amp;gt; some_value
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is an example how to use it. For each  &lt;code&gt;key&lt;/code&gt;  in the  &lt;code&gt;dictionary&lt;/code&gt;  , we  &lt;code&gt;print&lt;/code&gt;  the  &lt;code&gt;key&lt;/code&gt;  and its corresponding  &lt;code&gt;value&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another way to do it is to use the  &lt;code&gt;iteritems&lt;/code&gt;  method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;dictionary = { &amp;quot;some_key&amp;quot;: &amp;quot;some_value&amp;quot; }

for key, value in dictionary.items():
    print(&amp;quot;%s --&amp;gt; %s&amp;quot; %(key, value))

# some_key --&amp;gt; some_value
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We did name the two parameters as  &lt;code&gt;key&lt;/code&gt;  and  &lt;code&gt;value&lt;/code&gt;, but it is not necessary. We can name them anything. Let’s see it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;dictionary_tk = {
  &amp;quot;name&amp;quot;: &amp;quot;Leandro&amp;quot;,
  &amp;quot;nickname&amp;quot;: &amp;quot;Tk&amp;quot;,
  &amp;quot;nationality&amp;quot;: &amp;quot;Brazilian&amp;quot;,
  &amp;quot;age&amp;quot;: 24
}

for attribute, value in dictionary_tk.items():
    print(&amp;quot;My %s is %s&amp;quot; %(attribute, value))
    
# My name is Leandro
# My nickname is Tk
# My nationality is Brazilian
# My age is 24
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can see we used attribute as a parameter for the  &lt;code&gt;Dictionary&lt;/code&gt;  &lt;code&gt;key&lt;/code&gt;, and it works properly. Great!&lt;/p&gt;

&lt;h3 id=&#34;classes-objects&#34;&gt;Classes &amp;amp; Objects&lt;/h3&gt;

&lt;h4 id=&#34;a-little-bit-of-theory&#34;&gt;A little bit of theory:&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Objects&lt;/strong&gt;  are a representation of real world objects like cars, dogs, or bikes. The objects share two main characteristics:  &lt;strong&gt;data&lt;/strong&gt;  and  &lt;strong&gt;behavior&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Cars have  &lt;strong&gt;data,&lt;/strong&gt;  like number of wheels, number of doors, and seating capacity They also exhibit  &lt;strong&gt;behavior&lt;/strong&gt;: they can accelerate, stop, show how much fuel is left, and so many other things.&lt;/p&gt;

&lt;p&gt;We identify  &lt;strong&gt;data&lt;/strong&gt;  as  &lt;strong&gt;attributes&lt;/strong&gt;  and  &lt;strong&gt;behavior&lt;/strong&gt;  as  &lt;strong&gt;methods&lt;/strong&gt;  in object-oriented programming. Again:&lt;/p&gt;

&lt;p&gt;Data → Attributes and Behavior → Methods&lt;/p&gt;

&lt;p&gt;And a  &lt;strong&gt;Class&lt;/strong&gt;  is the blueprint from which individual objects are created. In the real world, we often find many objects with the same type. Like cars. All the same make and model (and all have an engine, wheels, doors, and so on). Each car was built from the same set of blueprints and has the same components.&lt;/p&gt;

&lt;h4 id=&#34;python-object-oriented-programming-mode-on&#34;&gt;Python Object-Oriented Programming mode: ON&lt;/h4&gt;

&lt;p&gt;Python, as an Object-Oriented programming language, has these concepts:  &lt;strong&gt;class&lt;/strong&gt;  and  &lt;strong&gt;object&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A class is a blueprint, a model for its objects.&lt;/p&gt;

&lt;p&gt;So again, a class it is just a model, or a way to define  &lt;strong&gt;attributes&lt;/strong&gt;  and  &lt;strong&gt;behavior&lt;/strong&gt;  (as we talked about in the theory section). As an example, a vehicle  &lt;strong&gt;class&lt;/strong&gt;  has its own  &lt;strong&gt;attributes&lt;/strong&gt;  that define what  &lt;strong&gt;objects&lt;/strong&gt; are vehicles. The number of wheels, type of tank, seating capacity, and maximum velocity are all attributes of a vehicle.&lt;/p&gt;

&lt;p&gt;With this in mind, let’s look at Python syntax for  &lt;strong&gt;classes&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class Vehicle:
    pass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We define classes with a  &lt;strong&gt;class statement —&lt;/strong&gt; and that’s it. Easy, isn’t it?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Objects&lt;/strong&gt;  are instances of a  &lt;strong&gt;class&lt;/strong&gt;. We create an instance by naming the class.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;car = Vehicle()
print(car) # &amp;lt;__main__.Vehicle instance at 0x7fb1de6c2638&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here  &lt;code&gt;car&lt;/code&gt;  is an  &lt;strong&gt;object&lt;/strong&gt;  (or instance) of the  &lt;strong&gt;class&lt;/strong&gt;  &lt;code&gt;Vehicle&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Remember that our vehicle  &lt;strong&gt;class&lt;/strong&gt;  has four  &lt;strong&gt;attributes&lt;/strong&gt;: number of wheels, type of tank, seating capacity, and maximum velocity. We set all these  &lt;strong&gt;attributes&lt;/strong&gt;  when creating a vehicle  &lt;strong&gt;object&lt;/strong&gt;. So here, we define our  &lt;strong&gt;class&lt;/strong&gt;  to receive data when it initiates it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class Vehicle:
    def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):
        self.number_of_wheels = number_of_wheels
        self.type_of_tank = type_of_tank
        self.seating_capacity = seating_capacity
        self.maximum_velocity = maximum_velocity
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We use the  &lt;code&gt;init&lt;/code&gt;  &lt;strong&gt;method&lt;/strong&gt;. We call it a constructor method. So when we create the vehicle  &lt;strong&gt;object&lt;/strong&gt;, we can define these  &lt;strong&gt;attributes&lt;/strong&gt;. Imagine that we love the  &lt;strong&gt;Tesla Model S,&lt;/strong&gt;  and we want to create this kind of  &lt;strong&gt;object&lt;/strong&gt;. It has four wheels, runs on electric energy, has space for five seats, and the maximum velocity is 250km/hour (155 mph). Let’s create this  &lt;strong&gt;object:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;tesla_model_s = Vehicle(4, &#39;electric&#39;, 5, 250)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Four wheels + electric “tank type” + five seats + 250km/hour maximum speed.&lt;/p&gt;

&lt;p&gt;All attributes are set. But how can we access these attributes’ values? We  &lt;strong&gt;send a message to the object asking about them&lt;/strong&gt;. We call it a  &lt;strong&gt;method&lt;/strong&gt;. It’s the  &lt;strong&gt;object’s behavior&lt;/strong&gt;. Let’s implement it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class Vehicle:
    def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):
        self.number_of_wheels = number_of_wheels
        self.type_of_tank = type_of_tank
        self.seating_capacity = seating_capacity
        self.maximum_velocity = maximum_velocity

    def number_of_wheels(self):
        return self.number_of_wheels

    def set_number_of_wheels(self, number):
        self.number_of_wheels = number
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is an implementation of two methods:  &lt;strong&gt;number_of_wheels&lt;/strong&gt;  and  &lt;strong&gt;set_number_of_wheels&lt;/strong&gt;. We call it  &lt;code&gt;getter&lt;/code&gt;  &amp;amp;  &lt;code&gt;setter&lt;/code&gt;. Because the first gets the attribute value, and the second sets a new value for the attribute.&lt;/p&gt;

&lt;p&gt;In Python, we can do that using  &lt;code&gt;@property&lt;/code&gt;  (&lt;code&gt;decorators&lt;/code&gt;) to define  &lt;code&gt;getters&lt;/code&gt;  and  &lt;code&gt;setters&lt;/code&gt;. Let’s see it with code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class Vehicle:
    def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):
        self.number_of_wheels = number_of_wheels
        self.type_of_tank = type_of_tank
        self.seating_capacity = seating_capacity
        self.maximum_velocity = maximum_velocity
    
    @property
    def number_of_wheels(self):
        return self.__number_of_wheels
    
    @number_of_wheels.setter
    def number_of_wheels(self, number):
        self.__number_of_wheels = number
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we can use these methods as attributes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;tesla_model_s = Vehicle(4, &#39;electric&#39;, 5, 250)
print(tesla_model_s.number_of_wheels) # 4
tesla_model_s.number_of_wheels = 2 # setting number of wheels to 2
print(tesla_model_s.number_of_wheels) # 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is slightly different than defining methods. The methods work as attributes. For example, when we set the new number of wheels, we don’t apply two as a parameter, but set the value 2 to  &lt;code&gt;number_of_wheels&lt;/code&gt;. This is one way to write  &lt;code&gt;pythonic&lt;/code&gt;  &lt;code&gt;getter&lt;/code&gt;  and  &lt;code&gt;setter&lt;/code&gt;  code.&lt;/p&gt;

&lt;p&gt;But we can also use methods for other things, like the “&lt;strong&gt;make_noise&lt;/strong&gt;” method. Let’s see it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class Vehicle:
    def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):
        self.number_of_wheels = number_of_wheels
        self.type_of_tank = type_of_tank
        self.seating_capacity = seating_capacity
        self.maximum_velocity = maximum_velocity

    def make_noise(self):
        print(&#39;VRUUUUUUUM&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we call this method, it just returns a string  &lt;strong&gt;_“_VRRRRUUUUM.&lt;em&gt;”&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;tesla_model_s = Vehicle(4, &#39;electric&#39;, 5, 250)
tesla_model_s.make_noise() # VRUUUUUUUM
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;encapsulation-hiding-information&#34;&gt;Encapsulation: Hiding Information&lt;/h3&gt;

&lt;p&gt;Encapsulation is a mechanism that restricts direct access to objects’ data and methods. But at the same time, it facilitates operation on that data (objects’ methods).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Encapsulation can be used to hide data members and members function. Under this definition, encapsulation means that the internal representation of an  &lt;a href=&#34;https://en.wikipedia.org/wiki/Object_(computer_science)&#34; target=&#34;_blank&#34;&gt;object&lt;/a&gt;  is generally hidden from view outside of the object’s definition.” — Wikipedia&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;All internal representation of an object is hidden from the outside. Only the object can interact with its internal data.&lt;/p&gt;

&lt;p&gt;First, we need to understand how  &lt;code&gt;public&lt;/code&gt;  and  &lt;code&gt;non-public&lt;/code&gt;  instance variables and methods work.&lt;/p&gt;

&lt;h4 id=&#34;public-instance-variables&#34;&gt;Public Instance Variables&lt;/h4&gt;

&lt;p&gt;For a Python class, we can initialize a  &lt;code&gt;public instance variable&lt;/code&gt;  within our constructor method. Let’s see this:&lt;/p&gt;

&lt;p&gt;Within the constructor method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class Person:
    def __init__(self, first_name):
        self.first_name = first_name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we apply the  &lt;code&gt;first_name&lt;/code&gt;  value as an argument to the  &lt;code&gt;public instance variable&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;tk = Person(&#39;TK&#39;)
print(tk.first_name) # =&amp;gt; TK
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Within the class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class Person:
    first_name = &#39;TK&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, we do not need to apply the  &lt;code&gt;first_name&lt;/code&gt;  as an argument, and all instance objects will have a  &lt;code&gt;class attribute&lt;/code&gt;  initialized with  &lt;code&gt;TK&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;tk = Person()
print(tk.first_name) # =&amp;gt; TK
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cool. We have now learned that we can use  &lt;code&gt;public instance variables&lt;/code&gt;  and  &lt;code&gt;class attributes&lt;/code&gt;. Another interesting thing about the  &lt;code&gt;public&lt;/code&gt;  part is that we can manage the variable value. What do I mean by that? Our  &lt;code&gt;object&lt;/code&gt;  can manage its variable value:  &lt;code&gt;Get&lt;/code&gt;  and  &lt;code&gt;Set&lt;/code&gt;  variable values.&lt;/p&gt;

&lt;p&gt;Keeping the  &lt;code&gt;Person&lt;/code&gt;  class in mind, we want to set another value to its  &lt;code&gt;first_name&lt;/code&gt;  variable:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;tk = Person(&#39;TK&#39;)
tk.first_name = &#39;Kaio&#39;
print(tk.first_name) # =&amp;gt; Kaio
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There we go. We just set another value (&lt;code&gt;kaio&lt;/code&gt;) to the  &lt;code&gt;first_name&lt;/code&gt;  instance variable and it updated the value. Simple as that. Since it’s a  &lt;code&gt;public&lt;/code&gt;  variable, we can do that.&lt;/p&gt;

&lt;h4 id=&#34;non-public-instance-variable&#34;&gt;Non-public Instance Variable&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;We don’t use the term “private” here, since no attribute is really private in Python (without a generally unnecessary amount of work). —  &lt;a href=&#34;https://www.python.org/dev/peps/pep-0008/#designing-for-inheritance&#34; target=&#34;_blank&#34;&gt;PEP 8&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As the  &lt;code&gt;public instance variable&lt;/code&gt;  , we can define the  &lt;code&gt;non-public instance variable&lt;/code&gt;  both within the constructor method or within the class. The syntax difference is: for  &lt;code&gt;non-public instance variables&lt;/code&gt;  , use an underscore (&lt;code&gt;_&lt;/code&gt;) before the  &lt;code&gt;variable&lt;/code&gt;  name.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“‘Private’ instance variables that cannot be accessed except from inside an object don’t exist in Python. However, there is a convention that is followed by most Python code: a name prefixed with an underscore (e.g.  &lt;code&gt;_spam&lt;/code&gt;) should be treated as a non-public part of the API (whether it is a function, a method or a data member)” —  &lt;a href=&#34;https://docs.python.org/2/tutorial/classes.html#private-variables-and-class-local-references&#34; target=&#34;_blank&#34;&gt;Python Software Foundation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here’s an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class Person:
    def __init__(self, first_name, email):
        self.first_name = first_name
        self._email = email
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Did you see the  &lt;code&gt;email&lt;/code&gt;  variable? This is how we define a  &lt;code&gt;non-public variable&lt;/code&gt;  :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;tk = Person(&#39;TK&#39;, &#39;tk@mail.com&#39;)
print(tk._email) # tk@mail.com
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;We can access and update it.  &lt;code&gt;Non-public variables&lt;/code&gt;  are just a convention and should be treated as a non-public part of the API.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So we use a method that allows us to do it inside our class definition. Let’s implement two methods (&lt;code&gt;email&lt;/code&gt;  and  &lt;code&gt;update_email&lt;/code&gt;) to understand it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class Person:
    def __init__(self, first_name, email):
        self.first_name = first_name
        self._email = email

    def update_email(self, new_email):
        self._email = new_email

    def email(self):
        return self._email
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can update and access  &lt;code&gt;non-public variables&lt;/code&gt;  using those methods. Let’s see:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;tk = Person(&#39;TK&#39;, &#39;tk@mail.com&#39;)
print(tk.email()) # =&amp;gt; tk@mail.com
# tk._email = &#39;new_tk@mail.com&#39; -- treat as a non-public part of the class API
print(tk.email()) # =&amp;gt; tk@mail.com
tk.update_email(&#39;new_tk@mail.com&#39;)
print(tk.email()) # =&amp;gt; new_tk@mail.com
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;We initiated a new object with  &lt;code&gt;first_name&lt;/code&gt;  TK and  &lt;code&gt;email&lt;/code&gt;  tk@mail.com&lt;/li&gt;
&lt;li&gt;Printed the email by accessing the  &lt;code&gt;non-public variable&lt;/code&gt;  with a method&lt;/li&gt;
&lt;li&gt;Tried to set a new  &lt;code&gt;email&lt;/code&gt;  out of our class&lt;/li&gt;
&lt;li&gt;We need to treat  &lt;code&gt;non-public variable&lt;/code&gt;  as  &lt;code&gt;non-public&lt;/code&gt;  part of the API&lt;/li&gt;
&lt;li&gt;Updated the  &lt;code&gt;non-public variable&lt;/code&gt;  with our instance method&lt;/li&gt;
&lt;li&gt;Success! We can update it inside our class with the helper method&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;public-method&#34;&gt;Public Method&lt;/h4&gt;

&lt;p&gt;With  &lt;code&gt;public methods&lt;/code&gt;, we can also use them out of our class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class Person:
    def __init__(self, first_name, age):
        self.first_name = first_name
        self._age = age

    def show_age(self):
        return self._age
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s test it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;tk = Person(&#39;TK&#39;, 25)
print(tk.show_age()) # =&amp;gt; 25
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great — we can use it without any problem.&lt;/p&gt;

&lt;h4 id=&#34;non-public-method&#34;&gt;Non-public Method&lt;/h4&gt;

&lt;p&gt;But with  &lt;code&gt;non-public methods&lt;/code&gt;  we aren’t able to do it. Let’s implement the same  &lt;code&gt;Person&lt;/code&gt;  class, but now with a  &lt;code&gt;show_age&lt;/code&gt;  &lt;code&gt;non-public method&lt;/code&gt;  using an underscore (&lt;code&gt;_&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class Person:
    def __init__(self, first_name, age):
        self.first_name = first_name
        self._age = age

    def _show_age(self):
        return self._age
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now, we’ll try to call this  &lt;code&gt;non-public method&lt;/code&gt;  with our object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;tk = Person(&#39;TK&#39;, 25)
print(tk._show_age()) # =&amp;gt; 25
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;We can access and update it.  &lt;code&gt;Non-public methods&lt;/code&gt;  are just a convention and should be treated as a non-public part of the API.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here’s an example for how we can use it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class Person:
    def __init__(self, first_name, age):
        self.first_name = first_name
        self._age = age

    def show_age(self):
        return self._get_age()

    def _get_age(self):
        return self._age

tk = Person(&#39;TK&#39;, 25)
print(tk.show_age()) # =&amp;gt; 25
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we have a  &lt;code&gt;_get_age&lt;/code&gt;  &lt;code&gt;non-public method&lt;/code&gt;  and a  &lt;code&gt;show_age&lt;/code&gt;  &lt;code&gt;public method&lt;/code&gt;. The  &lt;code&gt;show_age&lt;/code&gt;  can be used by our object (out of our class) and the  &lt;code&gt;_get_age&lt;/code&gt;  only used inside our class definition (inside  &lt;code&gt;show_age&lt;/code&gt;  method). But again: as a matter of convention.&lt;/p&gt;

&lt;h4 id=&#34;encapsulation-summary&#34;&gt;Encapsulation Summary&lt;/h4&gt;

&lt;p&gt;With encapsulation we can ensure that the internal representation of the object is hidden from the outside.&lt;/p&gt;

&lt;h3 id=&#34;inheritance-behaviors-and-characteristics&#34;&gt;Inheritance: behaviors and characteristics&lt;/h3&gt;

&lt;p&gt;Certain objects have some things in common: their behavior and characteristics.&lt;/p&gt;

&lt;p&gt;For example, I inherited some characteristics and behaviors from my father. I inherited his eyes and hair as characteristics, and his impatience and introversion as behaviors.&lt;/p&gt;

&lt;p&gt;In object-oriented programming, classes can inherit common characteristics (data) and behavior (methods) from another class.&lt;/p&gt;

&lt;p&gt;Let’s see another example and implement it in Python.&lt;/p&gt;

&lt;p&gt;Imagine a car. Number of wheels, seating capacity and maximum velocity are all attributes of a car. We can say that an  &lt;strong&gt;ElectricCar&lt;/strong&gt; class inherits these same attributes from the regular  &lt;strong&gt;Car&lt;/strong&gt;  class.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class Car:
    def __init__(self, number_of_wheels, seating_capacity, maximum_velocity):
        self.number_of_wheels = number_of_wheels
        self.seating_capacity = seating_capacity
        self.maximum_velocity = maximum_velocity
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our  &lt;strong&gt;Car&lt;/strong&gt;  class implemented:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;my_car = Car(4, 5, 250)
print(my_car.number_of_wheels)
print(my_car.seating_capacity)
print(my_car.maximum_velocity)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once initiated, we can use all  &lt;code&gt;instance variables&lt;/code&gt;  created. Nice.&lt;/p&gt;

&lt;p&gt;In Python, we apply a  &lt;code&gt;parent class&lt;/code&gt;  to the  &lt;code&gt;child class&lt;/code&gt;  as a parameter. An  &lt;strong&gt;ElectricCar&lt;/strong&gt;  class can inherit from our  &lt;strong&gt;Car&lt;/strong&gt;  class.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class ElectricCar(Car):
    def __init__(self, number_of_wheels, seating_capacity, maximum_velocity):
        Car.__init__(self, number_of_wheels, seating_capacity, maximum_velocity)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Simple as that. We don’t need to implement any other method, because this class already has it (inherited from  &lt;strong&gt;Car&lt;/strong&gt;  class). Let’s prove it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;my_electric_car = ElectricCar(4, 5, 250)
print(my_electric_car.number_of_wheels) # =&amp;gt; 4
print(my_electric_car.seating_capacity) # =&amp;gt; 5
print(my_electric_car.maximum_velocity) # =&amp;gt; 250
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Beautiful.&lt;/p&gt;

&lt;h3 id=&#34;that-s-it&#34;&gt;That’s it!&lt;/h3&gt;

&lt;p&gt;We learned a lot of things about Python basics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How Python variables work&lt;/li&gt;
&lt;li&gt;How Python conditional statements work&lt;/li&gt;
&lt;li&gt;How Python looping (while &amp;amp; for) works&lt;/li&gt;
&lt;li&gt;How to use Lists: Collection | Array&lt;/li&gt;
&lt;li&gt;Dictionary Key-Value Collection&lt;/li&gt;
&lt;li&gt;How we can iterate through these data structures&lt;/li&gt;
&lt;li&gt;Objects and Classes&lt;/li&gt;
&lt;li&gt;Attributes as objects’ data&lt;/li&gt;
&lt;li&gt;Methods as objects’ behavior&lt;/li&gt;
&lt;li&gt;Using Python getters and setters &amp;amp; property decorator&lt;/li&gt;
&lt;li&gt;Encapsulation: hiding information&lt;/li&gt;
&lt;li&gt;Inheritance: behaviors and characteristics&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Congrats! You completed this dense piece of content about Python.&lt;/p&gt;

&lt;p&gt;If you want a complete Python course, learn more real-world coding skills and build projects, try  &lt;a href=&#34;https://onemonth.com/courses/python?campaignid=33447&amp;amp;discount_code=TKPython1&amp;amp;mbsy=lG6tv&amp;amp;mbsy_source=7d89eeb0-0031-478c-a60c-6a96d762712a&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;&lt;em&gt;One Month Python Bootcamp&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;. See you there ☺&lt;/p&gt;

&lt;p&gt;For more stories and posts about my journey learning &amp;amp; mastering programming, follow my publication  &lt;a href=&#34;https://medium.com/the-renaissance-developer&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;The Renaissance Developer&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Have fun, keep learning, and always keep coding.&lt;/p&gt;

&lt;p&gt;My  &lt;a href=&#34;https://twitter.com/LeandroTk_&#34; target=&#34;_blank&#34;&gt;Twitter&lt;/a&gt;  &amp;amp;  &lt;a href=&#34;https://github.com/LeandroTk&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;. ☺&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Reference : &lt;a href=&#34;https://www.freecodecamp.org/news/learning-python-from-zero-to-hero-120ea540b567/?source=facebookShare-8f150b66bb03-1558106387&amp;amp;fbclid=IwAR0O0prBH0H98xXZj4rWuybDJlMi7-DDC75QRDyoYa5-n8WyJusba0H00Bk&amp;amp;_branch_match_id=623139837775019247&#34; target=&#34;_blank&#34;&gt;freeCodeCamp&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>
