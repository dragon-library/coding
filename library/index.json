[{"authors":["admin"],"categories":null,"content":"Nelson Bighetti is a professor of artificial intelligence at the Stanford AI Lab. His research interests include distributed robotics, mobile computing and programmable matter. He leads the Robotic Neurobiology group, which develops self-reconfiguring robots, systems of self-organizing robots, and mobile sensor networks.\nIt is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum. The point of using Lorem Ipsum. distracted by the readable content of a page.\n","date":1588809600,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1588809600,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://example.com/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"Nelson Bighetti is a professor of artificial intelligence at the Stanford AI Lab. His research interests include distributed robotics, mobile computing and programmable matter. He leads the Robotic Neurobiology group, which develops self-reconfiguring robots, systems of self-organizing robots, and mobile sensor networks.\nIt is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum.","tags":null,"title":"Little Dragon","type":"authors"},{"authors":null,"categories":null,"content":"ชายผู้เป็นตำนานที่ยิ่งใหญ่แห่งวงการเทคโนโลยีโลก ผู้อยู่เบื้องหลังความสำเร็จตลอดหลายทศวรรษที่ผ่านมาของ Microsoft การที่ผู้ชายคนนึงได้ก้าวข้ามผ่านยุคการเปลี่ยนผ่านของเทคโนโลยี ตั้งแต่ยุคเริ่มต้นของคอมพิวเตอร์ส่วนบุคคล การเกิดขึ้นของ internet การเข้าสู่โลก Social Network และ การก้าวเข้าสู่ยุคมือถืออย่างที่เราได้เห็นในปัจจุบัน ต้องบอกว่า มีเพียงไม่กี่คนในโลกที่ได้เห็นการเปลี่ยนผ่านเหล่านี้ ผ่านบริษัทตัวเองอย่าง Microsoft ทำให้ Microsoft กลายเป็นยักษ์ใหญ่ทางเทคโนโลยีที่แข็งแกร่ง ที่ผ่านมรสุมการเปลี่ยนแปลงของเทคโนโลยีมามากมายได้อย่างไร\nต้องบอกว่า Bill Gates ถือเป็นบุคคลสำคัญที่อยู่เบื้องหลังความสำเร็จของ Microsoft ในทุก ๆ ยุค เป็นเรื่องน่าสนใจอย่างมาก ว่าเค้าสามารถรับมือกับความเปลี่ยนแปลงอย่างรวดเร็วของเทคโนโลยีที่ก้าวไปข้างหน้าได้อย่างไร Blog Series ชุดนี้จะมานำเสนอเรื่องราวของชายที่น่าสนใจคนนี้กันครับ โดยเนื้อหาหลักนั้นจะมาจากหนังสือสองเล่ม คือ The Road Ahead ที่แปลโดย น.ต. วุฒิพงศ์ พงศ์สุวรรณ รวมถึงอีกเล่มหนึ่งคือ หนังสือ Bill Gates Speaks : Insight from the world’s greatest entrepreneur ร่วมกับข้อมูลอื่น ๆ ที่มีอยู่ในโลก internet\n Source : blockdit.com : ด.ดล Blog.\n ","date":1586563200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1586563200,"objectID":"16dea79cac53639763a33f4e9aca5d39","permalink":"https://example.com/book/gates/","publishdate":"2020-04-11T00:00:00Z","relpermalink":"/book/gates/","section":"book","summary":"Bill Gates-The Man Behind Microsoft Empire","tags":null,"title":"ประวัติ Bill Gates","type":"docs"},{"authors":null,"categories":null,"content":"หนังสือชื่อ Sapiens และ Homo Deus ที่เขียน โดย Yuval Noah Harari ปกติเรามักจะมองว่า วิชาประวัติศาสตร์เป็นเรื่องที่โบราณ เรียนรู้ศึกษาแต่เรื่องเก่าๆ ที่ถึงรู้ไป ก็นำมาใช้ประโยชน์ในปัจจุบันได้น้อย แต่ Yuval Noah Harari จะทำให้เราต้องมองประวัติศาสตร์เปลี่ยนไป\nYuval Noah Harari เป็นนักประวัติศาสตร์ชาวยิว ที่เกิดและเติบโตในประเทศอิสราเอล ปัจจุบันมีอายุ 41 ปี เป็นผู้เขียนหนังสือขายดีระดับนานาชาติอย่าง \u0026ldquo;Sapiens: A Brief History of Humankind\u0026rdquo; และ \u0026ldquo;Homo Deus: A Brief History of Tomorrow Harari\u0026rdquo; เรียนจบทั้งปริญญาตรี โทและเอกด้านประวัติศาสตร์ และหลังจากจบปริญญาเอกเมื่อปี 2545 ก็มาเป็นนักวิจัย (ทำ Postdoctoral) ร่วมกับ Yad Hanadiv หรือที่เราอาจจะคุ้นหูกันในชื่อ Rothschild Foundation ทุกวันนี้ เขาเป็นอาจารย์ประจำคณะประวัติศาสตร์ที่ Hebrew University of Jerusalem ซึ่งเป็นมหาวิทยาลัยที่เขาจบปริญญาตรีและโท และถือเป็นผู้เชี่ยวชาญด้านประวัติศาสตร์โลก ประวัติศาสตร์ยุคกลางและประวัติศาสตร์ทางทหาร\nนอกจากนี้ ยังเป็นคนที่ปฏิบัติวิปัสสนากรรมฐานอย่างต่อเนื่องมานานกว่า 15 ปี โดยมองว่าการวิปัสสนา ถือเป็นการวิจัยทางหนึ่ง และสิ่งที่เขาได้รับมานั้น ช่วยให้เขาสามารถเขียนหนังสือ Homo Deus ขึ้นมาได้ ปัจจุบันเขาเน้นค้นคว้าและทำวิจัยเพื่อตอบคำถามเกี่ยวกับประวัติศาสตร์มหภาค (Macro-history) เช่น อะไรคือความเกี่ยวเนื่องกันระหว่างประวัติศาสตร์และชีววิทยา?\nอะไรคือข้อแตกต่างที่สำคัญระหว่าง Homo sapiens กับสัตว์ชนิดอื่นๆ? และ คนมีความสุขขึ้นหรือไม่? เมื่อประวัติศาสตร์ถูกเปิดเผยออกมา เป็นต้น จากบทความและหนังสือที่เขาเขียนขึ้นมากมาย Sapiens: A Brief History of Humankind ถือเป็นหนังสือที่ทำให้เขาโด่งดังเป็นที่รู้จักในวงกว้าง ตีพิมพ์ขึ้นครั้งแรกเป็นภาษาฮีบรู เมื่อปี 2554 เป็นภาษาอังกฤษปี 2557 และหลังจากนั้นก็ถูกแปลเพิ่มอีกกว่า 30 ภาษา Sapiens บอกเล่าถึงเรื่องราวประวัติความเป็นมาของมนุษย์ ย้อนกลับไปตั้งแต่การวิวัฒน์ของเผ่าพันธุ์ Homo sapiens ในยุคหิน จนมาถึงยุคแห่งการปฏิวัติเทคโนโลยีในปัจจุบัน ส่วน Homo Deus นั้น ก็เป็นเหมือนกับภาคต่อ ที่จะบอกเล่าเรื่องราวจากปัจจุบัน ไปยังอนาคต โดยเฉพาะเรื่องผลกระทบของนวัตกรรมเทคโนโลยีทางชีวภาพ และ AI ต่อเผ่าพันธุ์ของมนุษย์เรา ซึ่งอาจจะทำให้เราก้าวข้ามธรรมชาติไป และเข้าใกล้กับคำว่า พระเจ้า ซึ่งแม้แต่ 1 ในผู้มีอิทธิพลในโลกเทคโนโลยี อย่าง Mark Zuckerberg เจ้าของ Facebook ก็ยังแนะนำให้อ่านหนังสือเล่มนี้เมื่อ 2 ปีก่อน (Bill Gates กับ Obama ก็อ่าน) และหนังสือเล่มนี้อาจจะมีอิทธิพลเบื้องหลังทำให้ Mark Zuckerberg และ Bill Gates พูดถึง AI บ่อยขึ้นในช่วงที่ผ่านมา\nสรุปแล้ว Harari พยายามอธิบายว่า เรื่องราวต่างๆ ในประวัติศาสตร์ที่เกิดขึ้นกับ Homo sapiens อธิบายถึงตัวตนความเป็นมนุษย์ในปัจจุบัน และยังรวมไปถึงสิ่งที่มนุษย์จะเป็นในอนาคต และได้นำเสนอแนวความคิดที่น่าสนใจมากมาย อย่างเช่น Homo sapiens อยู่รอดและครองโลกมาได้ เพราะเป็นสัตว์เผ่าพันธุ์เดียวในโลก ที่สามารถเชื่อในสิ่งที่จับต้องไม่ได้และตัวเองจินตนาการขึ้น เช่น พระเจ้า ศาสนา ประเทศ เงินตรา และสิทธิมนุษยชน ซึ่งทำให้กลุ่มที่มีความเชื่อเหมือนกัน ร่วมมือกันได้ นั่นทำให้มนุษย์เราในปัจจุบัน มีชีวิตอยู่ในโลกความเป็นจริงครึ่งนึง (Physical Reality) โลกจินตนาการอีกครึ่งนึง (Imagined Reality) และศาสนาที่ประสบความสำเร็จมากที่สุดในสายตาของเขาก็คือ ระบบทุนนิยม..\n ที่มา ลงทุนแมน.\n ","date":1586390400,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1586390400,"objectID":"cfa814a647ff367aefd0d10dc32109e0","permalink":"https://example.com/book/sapiens/","publishdate":"2020-04-09T00:00:00Z","relpermalink":"/book/sapiens/","section":"book","summary":"เซเปียนส์ - ประวัติย่อมนุษยชาติ ไขปัญหาที่ยิ่งใหญ่ที่สุดในประวัติศาสตร์และในโลกยุคใหม่.","tags":null,"title":"Homo Sapiens - A Brief History of Humankind","type":"docs"},{"authors":null,"categories":null,"content":" Flexibility This feature can be used for publishing content such as:\n Online courses Project or software documentation Tutorials  The courses folder may be renamed. For example, we can rename it to docs for software/project documentation or tutorials for creating an online course.\nDelete tutorials To remove these pages, delete the courses folder and see below to delete the associated menu link.\nUpdate site menu After renaming or deleting the courses folder, you may wish to update any [[main]] menu links to it by editing your menu configuration at config/_default/menus.toml.\nFor example, if you delete this folder, you can remove the following from your menu configuration:\n[[main]] name = \u0026quot;Courses\u0026quot; url = \u0026quot;courses/\u0026quot; weight = 50  Or, if you are creating a software documentation site, you can rename the courses folder to docs and update the associated Courses menu configuration to:\n[[main]] name = \u0026quot;Docs\u0026quot; url = \u0026quot;docs/\u0026quot; weight = 50  Update the docs menu If you use the docs layout, note that the name of the menu in the front matter should be in the form [menu.X] where X is the folder name. Hence, if you rename the courses/example/ folder, you should also rename the menu definitions in the front matter of files within courses/example/ from [menu.example] to [menu.\u0026lt;NewFolderName\u0026gt;].\n","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"01d39688af48040d7111d20c6b01d10b","permalink":"https://example.com/courses/example.1/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/courses/example.1/","section":"courses","summary":"Learn how to use Academia's docs layout for publishing online courses, software documentation, and tutorials.","tags":null,"title":"Overview 2","type":"docs"},{"authors":null,"categories":null,"content":" Flexibility This feature can be used for publishing content such as:\n Online courses Project or software documentation Tutorials  The courses folder may be renamed. For example, we can rename it to docs for software/project documentation or tutorials for creating an online course.\nDelete tutorials To remove these pages, delete the courses folder and see below to delete the associated menu link.\nUpdate site menu After renaming or deleting the courses folder, you may wish to update any [[main]] menu links to it by editing your menu configuration at config/_default/menus.toml.\nFor example, if you delete this folder, you can remove the following from your menu configuration:\n[[main]] name = \u0026quot;Courses\u0026quot; url = \u0026quot;courses/\u0026quot; weight = 50  Or, if you are creating a software documentation site, you can rename the courses folder to docs and update the associated Courses menu configuration to:\n[[main]] name = \u0026quot;Docs\u0026quot; url = \u0026quot;docs/\u0026quot; weight = 50  Update the docs menu If you use the docs layout, note that the name of the menu in the front matter should be in the form [menu.X] where X is the folder name. Hence, if you rename the courses/example/ folder, you should also rename the menu definitions in the front matter of files within courses/example/ from [menu.example] to [menu.\u0026lt;NewFolderName\u0026gt;].\n","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"970b63766f241ba034ef2d1838dad4b3","permalink":"https://example.com/courses/example.2/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/courses/example.2/","section":"courses","summary":"Learn how to use Academia's docs layout for publishing online courses, software documentation, and tutorials.","tags":null,"title":"Overview 3","type":"docs"},{"authors":null,"categories":null,"content":" Flexibility This feature can be used for publishing content such as:\n Online courses Project or software documentation Tutorials  The courses folder may be renamed. For example, we can rename it to docs for software/project documentation or tutorials for creating an online course.\nDelete tutorials To remove these pages, delete the courses folder and see below to delete the associated menu link.\nUpdate site menu After renaming or deleting the courses folder, you may wish to update any [[main]] menu links to it by editing your menu configuration at config/_default/menus.toml.\nFor example, if you delete this folder, you can remove the following from your menu configuration:\n[[main]] name = \u0026quot;Courses\u0026quot; url = \u0026quot;courses/\u0026quot; weight = 50  Or, if you are creating a software documentation site, you can rename the courses folder to docs and update the associated Courses menu configuration to:\n[[main]] name = \u0026quot;Docs\u0026quot; url = \u0026quot;docs/\u0026quot; weight = 50  Update the docs menu If you use the docs layout, note that the name of the menu in the front matter should be in the form [menu.X] where X is the folder name. Hence, if you rename the courses/example/ folder, you should also rename the menu definitions in the front matter of files within courses/example/ from [menu.example] to [menu.\u0026lt;NewFolderName\u0026gt;].\n","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"59c3ce8e202293146a8a934d37a4070b","permalink":"https://example.com/courses/example/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/courses/example/","section":"courses","summary":"Learn how to use Academia's docs layout for publishing online courses, software documentation, and tutorials.","tags":null,"title":"Overview","type":"docs"},{"authors":null,"categories":null,"content":"  “This is the best reason to learn history: not in order to predict the future, but to free yourself of the past and imagine alternative destinies. Of course this is not total freedom – we cannot avoid being shaped by the past. But some freedom is better than none.”    เมื่อเราเข้าใจ “เรื่องราวที่แท้จริง” ของมนุษย์ เมื่อนั้นเราก็จะเข้าใจ “เป้าหมาย” ของการเดินทางของมนุษยชาติ\n Homo Deus คือ หนังสือภาคต่อจาก Sapiens ของ Yuval Noah Harari ศาสตราจารย์ทางประวัติศาสตร์ผู้นำเสนอเรื่องราวของ “อนาคต” ของมนุษยชาติผ่านการศึกษาความเป็นมาทางประวัติศาสตร์ของเผ่าพันธุ์ Homo Sapiens ที่พัฒนาตนเองขึ้นจากการเป็น “สัตว์” อันไร้ซึ่งความสำคัญใดๆมาเป็น “เทพเจ้า” ผู้กำหนดชะตาชีวิตของทุกสรรพสิ่ง แต่เมื่อสิ่งที่ถูกมนุษย์สร้างขึ้นอย่าง algorithm เริ่มมีสติปัญญาที่ชาญฉลาดกว่ามันสมองของมนุษย์ โลกของเราทุกคนจะเปลี่ยนแปลงไปอย่างไร\nKey Messages Homo Deus: When Men Play God จะเกิดอะไรขึ้น หาก Homo Sapiens (“Knowing Man”) คิดจะอัพเกรดตน กลายเป็น Homo Deus (“God Man”) หนังสือ Homo Deus: A Brief History of Tomorrow (หรือชื่อเล่มฉบับแปลไทย โฮโมดีอุส: ประวัติย่อของวันพรุ่งนี้) คือภาคต่อของ Sapiens ซึ่งยังคงความยอดเยี่ยมในการนำข้อมูลจากประวัติศาสตร์ และปัจจุบัน มาผสานรวมกับมุมมองของผู้เขียน ออกมาเป็นหนังสือที่เล่าเรื่องราวของมนุษย์ และตั้งคำถามต่อสิ่งต่างๆ ได้อย่างแหลมคม ชวนคิด และน่าทึ่ง\nHomo Deus บอกเล่าเรื่องราวต่อจากหนังสือ Sapiens ที่ Harari ได้อธิบายว่า ทำไมสิ่งมีชีวิต ที่ไม่ได้มีความสลักสำคัญใด ๆ กับโลก จึงสามารถขึ้นมาเป็น “The only Dominant Species”ของโลกใบนี้ได้ โดยใช้เวลาเพียงแค่ 75,000 ปี\nคำถามต่อมาคือมันจะสิ้นสุดแค่นี้หรือ? มนุษยชาติจะพอใจในสิ่งที่ตัวเองมีอยู่นี้ได้หรือไม่ ?\nจากประวัติศาสตร์ มนุษย์ก็ดูไม่ได้เป็นสิ่งมีชีวิตที่พอใจกับการหยุดนิ่งกับที่ ก็ในเมื่อ เราสามารถพัฒนาจนเอาชนะชะตาที่ธรรมชาติกำหนดมาได้ในระดับหนึ่ง มีเหตุผลอันใดที่เราจะไม่ไปต่อ พัฒนาสิ่งต่างๆ ต่อไปเรื่อย ๆ จนกลายมาเป็นผู้กำหนดชะตาธรรมชาติเสียเอง?\nจะเกิดอะไรขึ้น หากมนุษย์สามารถไปถึงจุดนั้นได้?\nหนังสือ Homo Deus จึงเป็นความพยายามอีกครั้งของ Harari ที่จะนำผู้อ่านออกเดินทางสู่โลกของความเป็นไปได้ในอนาคต โดยอาศัยสิ่งที่เคยเกิดขึ้นในประวัติศาสตร์ อาศัยข้อมูลความก้าวหน้าด้านต่างๆ องค์ความรู้ทั้งศาสตร์และศิลป์ มาสังเคราะห์เป็นโลกแห่งความเป็นไปได้ในอนาคต ให้ผู้อ่านได้ไตร่ตรอง พิจารณา\n ผู้เขียน : Yuval Noah Harari.\nสำนักพิมพ์ : Vintage.\nจำนวนหน้า : 513 หน้า.\nGenre : Social Science.\nISBN : 1784703931.\nพิมพ์ครั้งแรก : March 2015.\n ","date":1586390400,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1586390400,"objectID":"d000ef6082f19033548934f821dbcd80","permalink":"https://example.com/book/deus/","publishdate":"2020-04-09T00:00:00Z","relpermalink":"/book/deus/","section":"book","summary":"A Brief History of Tomorrow.","tags":null,"title":"Overview","type":"docs"},{"authors":null,"categories":null,"content":"  ผู้เขียน : Yuval Noah Harari สำนักพิมพ์ : Vintage จำนวนหน้า : 513 หน้า Genre : Social Science ISBN : 1784703931 พิมพ์ครั้งแรก : March 2015\n Key Messages Homo Deus: When Men Play God จะเกิดอะไรขึ้น หาก Homo Sapiens (“Knowing Man”) คิดจะอัพเกรดตน กลายเป็น Homo Deus (“God Man”)\nหนังสือ Homo Deus: A Brief History of Tomorrow (หรือชื่อเล่มฉบับแปลไทย โฮโมดีอุส: ประวัติย่อของวันพรุ่งนี้) คือภาคต่อของ Sapiens ซึ่งยังคงความยอดเยี่ยมในการนำข้อมูลจากประวัติศาสตร์ และปัจจุบัน มาผสานรวมกับมุมมองของผู้เขียน ออกมาเป็นหนังสือที่เล่าเรื่องราวของมนุษย์ และตั้งคำถามต่อสิ่งต่างๆ ได้อย่างแหลมคม ชวนคิด และน่าทึ่ง\nHomo Deus บอกเล่าเรื่องราวต่อจากหนังสือ Sapiens ที่ Harari ได้อธิบายว่า ทำไมสิ่งมีชีวิตที่ไม่ได้มีความสลักสำคัญใดๆกับโลก จึงสามารถขึ้นมาเป็น “The only Dominant Species”ของโลกใบนี้ได้ โดยใช้เวลาเพียงแค่ 75,000 ปี\nคำถามต่อมาคือมันจะสิ้นสุดแค่นี้หรือ? มนุษยชาติจะพอใจในสิ่งที่ตัวเองมีอยู่นี้ได้หรือไม่ ?\nจากประวัติศาสตร์ มนุษย์ก็ดูไม่ได้เป็นสิ่งมีชีวิตที่พอใจกับการหยุดนิ่งกับที่ ก็ในเมื่อเราสามารถพัฒนาจนเอาชนะชะตาที่ธรรมชาติกำหนดมาได้ในระดับหนึ่ง มีเหตุผลอันใดที่เราจะไม่ไปต่อ พัฒนาสิ่งต่างๆ ต่อไปเรื่อยๆ จนกลายมาเป็นผู้กำหนดชะตาธรรมชาติเสียเอง?\nจะเกิดอะไรขึ้น หากมนุษย์สามารถไปถึงจุดนั้นได้?\nหนังสือ Homo Deus จึงเป็นความพยายามอีกครั้งของ Harari ที่จะนำผู้อ่านออกเดินทางสู่โลกของความเป็นไปได้ในอนาคต โดยอาศัยสิ่งที่เคยเกิดขึ้นในประวัติศาสตร์ อาศัยข้อมูลความก้าวหน้าด้านต่างๆ องค์ความรู้ทั้งศาสตร์และศิลป์ มาสังเคราะห์เป็นโลกแห่งความเป็นไปได้ในอนาคต ให้ผู้อ่านได้ไตร่ตรอง พิจารณา\nYuval Noah Harari (Credit: ynharari.com)\nNote : คำเฉพาะภาษาไทยที่ใช้นี้มาจากผมลองแปลจาก Version ภาษาอังกฤษเองนะครับ น่าจะมีหลายๆคำ ที่ไม่ตรงกันกับฉบับ Official แปลไทย\nThe Human Agenda Harari เริ่มต้น Homo Deus ด้วยประเด็นว่า มนุษย์นั้นได้บรรลุความใฝ่ฝันของผู้คนในอดีตแล้ว เช่น หากคุณเกิดมาสมัยยุคกลางของยุโรป มันก็เป็นเรื่องปกติที่อายุขัยคนรอบๆตัวคุณจะไม่ได้ยืนยาวเกิน 60 ปี เป็นเรื่องปกติที่วันดีคืนดีคุณจะติดเชื้อโรคระบาดแล้วก็ตายไป วันดีคืนดีคุณจะไม่มีอะไรกิน หรือโดนเมืองข้างๆเปิดสงคราม บุกโจมตี คนในสมัยก่อนคงไม่คิดว่าจะมีวันใดที่มนุษย์สามารถเอาชนะ ภาวะอดอยาก (Famine), โรคระบาด (Plaque) และสงคราม(War) ไปได้ พวกเขาแค่อยู่รอดไปวันๆก็เก่งแล้ว\nแต่ไม่ใช่ในสมัยนี้ ที่ สามเรื่องดังกล่าวเป็นอะไรที่เราคุมได้ เราผลิตอาหารได้มากพอ ที่ภาวะอดอยากนั้นเป็นเรื่องของปัญหาการเมือง หากมีโรคระบาดเกิดขึ้น นั่นคือความผิดพลาดในการดำเนินนโยบายทางสาธารสุข และเรามีคนเสียชีวิตจากการฆ่าตัวตาย มากกว่าการฆาตกรรมหรือจากสงครามรวมกันเสียอีก\nฉะนั้นแล้วเมื่อมนุษย์สามารถเติมเต็มสิ่งต่างๆเหล่านี้ได้แล้ว ก็ไม่มีเหตุผลอะไรที่มันจะพอใจแค่นั้น เราได้กลายเป็นเจ้าของชะตาชีวิตของเราเอง ไม่มีอะไรมาหยุดเราไม่ให้ Upgrade ตัวเราให้ดีขึ้น เพื่อชีวิตที่อมตะ (Immortality) เพื่อสุขนิรัน (Bliss) และอำนาจเหนือพระเจ้า (Divinity)\nThe Hive Switch แต่ก่อนที่ Harrari จะพยายามอธิบายว่า อะไรจะเกิดขึ้นกับมนุษย์ในอนาคต เขากลับมาตั้งคำถามอีกครั้ง นำผู้อ่านย้อนสู่หนังสือ Sapiens โดยเน้นประเด็นที่ว่าเรามาถึงจุดนี้ได้อย่างไร?\nเรามาอยู่ในจุดที่มนุษย์เป็น Species เดียวที่สามารถกำหนดความเป็นไปของระบบนิเวศได้ทั่วทั้งโลก ซึ่งแม้จะมีสิ่งมีชีวิตเกิดมาล่วงหน้าเราหลายล้านปี ก็ไม่เคยมี Species ที่ใดที่ทำเช่นนี้ได้\nHarari เสนอว่าที่มนุษย์ทำเช่นนี้ได้ ไม่ใช่จากที่มันรู้ภาษา ไม่ใช่จากที่มันทำเครื่องมือหินได้ ไม่ใช่จากที่มันเป็นสัตว์ประเสริฐอะไรใดๆ ไม่ใช่เพราะมันมีความรู้สึกนึกคิดละเอียดอ่อนใดๆ แต่เพราะด้วยความเปลี่ยนแปลงอะไรบางอย่างในสมอง ทำให้เราสามารถแต่งนิยาย(Story)ได้ ซึ่งนิยายในที่นี้ทำให้เกิดสิ่งที่เรียกว่า “ความเชื่อที่แชร์ร่วมกัน” (Inter-subjective reality) เช่น เราเชื่อว่าเงินมีค่า เพราะคนอื่นๆก็เชื่อว่าเงินมีค่า แต่ถ้าเราเอาเหรียญหรือธนบัตรไปให้คนป่าดู พวกเขาก็คงไม่ได้เห็นค่าอะไร เพราะเขาไม่ได้แชร์ความเชื่อนั้นกับเรา\nการที่มนุษย์เชื่อใน Intersubjective reality นี้เอง ทำให้เราสามารถสร้างความร่วมมือได้ในระดับมวลมหาประชาชน ซึ่งไม่มีสัตว์Speciesใดทำได้\nถามว่า Intersubjective Reality นี้ ทำให้มนุษย์ร่วมมือกันได้อย่างไร? นั่นเพราะมันทำให้มนุษย์มีเป้าหมายในชีวีต และ มันให้ความหมายของชีวิตมนุษย์ เช่น ชาวอียิปโบราณเชื่อในฟาโรห์ เชื่อว่าฟาโรห์เป็นพระเจ้า และตนมีชีวิต เกิดมาเพื่อรับใช้ จึงยอมอดทนใช้แรงงานสร้างสิ่งมหัศจรรย์ต่างๆมากมาย รวมถึงสามารถสร้างพีระมิดด้วยความลำบากลำบนได้\nThe Pie นอกจากนี้ Intersubjective Reality ยังทำให้สังคมมนุษย์ อยู่อย่างสงบสุข และเกิดสมดุลในการใช้ทรัพยากร\nทำไมจึงเกี่ยวกับความสงบ? เพราะการจะตัดสินได้ ว่าอะไรคือสิ่งที่ดี หรือไม่ดี (Morally Right or Morally Wrong) ก็ต้องใช้หลักคิด คำสอนต่างๆ มาตัดสิน เช่นคำสอนที่มาจากศาสนา (เช่น ขโมยของเป็นบาป การพนันเป็นบาป เป็นต้น)\nส่วนเรื่องความสมดุลในทรัพยากร ก็เริ่มจากว่า มนุษย์ในอดีตไม่เชื่อในเรื่องการเติบโต (Growth) ของเศรษฐกิจ นั่นเพราะธรรมชาติไม่ได้มีกลไกเช่นนั้น ธรรมชาติไม่เชื่อใน Credit\nลองคิดดูว่า ในทุ่งหญ้าแห่งหนึ่ง จะเกิดอะไรขึ้นถ้ามีจำนวนหมาป่าเกิดขึ้นเยอะ จนอัตราการบริโภคกระต่ายแซงหน้าการเกิดของกระต่าย? หรือ หมาป่าบริโภคกระต่ายเกินความจำเป็น? ช่วงแรกนั้นหมาป่าก็จะอวบอ้วนสมบูรณ์ แต่เมื่อกระต่ายลดลงเร็วเกินไป แน่นอนว่าหมาป่าก็จะลดจำนวนลง เพราะพวกมันจะอดตาย หรือ แย่งอาหารกันเอง กลับสู่สมดุล ซึ่งนี่คือธรรมชาติ\nและคงไม่มีหมาป่าตัวไหน ที่ไปขอแบ่งเนื้อกระต่าย 1 ตัว จากหมาป่าตัวอื่น แล้วสัญญาว่าเดือนหน้าจะคืนกระต่ายให้อีก 2 ตัว\nโลกในอดีตก็เช่นกัน คนเห็นทรัพยากรเป็น Fixed Size Pie ถ้าใครได้ชิ้นใหญ่ไป คนอื่นๆก็จะได้ชิ้นเล็ก ถ้าเมืองใดเมืองหนึ่งรุ่งเรือง นั่นหมายความว่ามีเมืองหนึ่งที่ย่อยยับชิบหาย เพราะว่าถูกยึดทรัพสินมา\nวิธีที่จะแก้ปัญหาความขาดแคลนได้นั้น จึงต้องมี Story อะไรบางอย่าง ที่คุมคนไม่ให้แย่งทรัพยากรกัน อาจเป็นการคุมสิทธิเสรีภาพ คุมความทะยานอยากของคนไว้ในคำสอนต่างๆ หรือ ง่ายกว่านั้น ก็บอกว่ามีพายชิ้นใหญ่รออยู่ ในหลังชีวิตความตาย\n(Promising pie in the sky) ตอนนี้ก็จงขยัน ทำงาน ทำความดีไว้มากๆซะ\nดังนั้น เมื่อมนุษย์ในอดีตไม่เชื่อใน Growth เศรษฐกิจของโลกก็ไม่เจริญ การใช้ทรัพยากรต่างๆ ก็ไม่ได้เพิ่มสูง ไม่ได้มีการพัฒนาอะไรมากนัก\nจนเมื่อ Modernity มาถึง มนุษย์พบว่าเราไม่ต้องอยู่อย่างขัดสน ทุกคนสามารถมีกินมีใช้ได้ มีทรัพยากรพอสำหรับทุกๆคน เพียงแค่เราเพิ่มขนาด Pie ด้วยความเชื่อในการเจริญเติบโตของเศรษฐกิจ (ผ่านระบบ Credit)\nฉะนั้น คนที่ได้ Pie ชิ้นใหญ่อยู่แล้ว ก็จะได้ชิ้นใหญ่ขึ้นไปอีก คนที่ได้ Pie ชิ้นเล็ก ที่ตอนแรกไม่พอกิน ก็จะได้ Pie ชิ้นใหญ่ขึ้น พอให้อิ่มท้อง\nความเชื่อใน Growth นี้ ขัดกับอำนาจและคำสอนเดิมๆ ที่กักขังความทะเยอทะยานของเหล่าปัจเจก จึงทำให้เกิดการท้าทายต่ออำนาจเดิมที่คุมมนุษย์ไว้ ซึ่งก็คุมไว้ไม่ได้นาน เพราะ Growth นั้นทำให้ทุกคน Win-Win อย่างเห็นได้ชัด\nเมื่อมนุษย์ละทิ้งความเชื่อเก่า ก็ไม่มีอะไรมากำหนดความหมายของมนุษย์\nเมื่อไม่มีอะไรมากำหนดความหมายของมนุษย์ แล้วมนุษย์จะมีคุณค่าอะไร? ใช้ชีวิตเพื่อเป้าหมายอันใด?\nGod Is Dead ทำไมการเป็นสิ่งมีชีวิตที่ไม่มีความหมายใดๆ ไม่ได้ทำให้สังคมมนุษย์เกิดความโกลาหล ทำไมมันยังwork ต่อไปได้?\nนั่นเพราะ โดยธรรมชาติ มนุษย์ไม่สามารถ Go on ต่อได้ หากขาด นิยาย บางอย่างที่ให้มันยึดเหนี่ยว มันจึงได้สร้างสิ่งที่รองรับแนวคิดเรื่อง Growth นี้ ผ่านหลักการที่เรียกว่า Humanism\nมนุษย์สร้างนิยายชุดใหม่ขึ้นมา เรียกว่า Liberal Humanism\nHumanism (มนุษยนิยม) คือการที่ มนุษย์หันมาสร้างคุณค่าของมนุษย์ด้วยตัวของเขาเอง\nหลักการ (Dogma) ของHumanism คือ อะไรที่ทำให้มนุษย์มีความสุข สิ่งนั้นก็คือสิ่งที่ถูกต้อง\nความเชื่อนี้บอกว่า มนุษย์คือศูนย์กลาง คือผู้ให้ความหมายของจักรวาล มนุษย์จะทำอะไรก็ได้ ที่ทำให้พวกเขามีความสุข\nหลักการนี้ ซึ่งก่อร่างพร้อมด้วยกับ Industrial revolution จึงทำให้สังคมมนุษย์เจริญเติบโตอย่างก้าวกระโดด ไม่มีอะไรจะมาหยุดมนุษย์ได้อีกแล้ว ด้วยความรู้ทาง Genetic engineer , Artificial Intelligence และวิทยาการต่างๆ ที่พัฒนาขึ้นทุกวันๆ ก็ดูเหมือนว่าไม่มีอะไรจะมาหยุดเรา ไม่ให้มีอำนาจเทียมเท่าพระเจ้าได้\nซึ่ง Harari เสนอว่า การที่เราพยายามจะ play god นี่แหละ ที่เป็นจุดเริ่มต้นของหายนะมวลมนุษยชาติ เพราะสุดท้ายแล้ว ความเจริญนี้ จะย้อนกลับมาทำลาย “ความหมายของมนุษย์” อันเป็นเสาหลักของ Humanism\nThe Algorithm อะไรคือความหมายของมนุษย์? อะไรคือ “แก่นของมนุษย์”\nดังที่กล่าวว่า ความพิเศษของมนุษย์อยู่ที่การร่วมมือระดับมวลมหาประชาชน ไม่ใช่ในระดับปัจจเจก ตัว Harari นั้น ไม่เชื่อในจิตวิญญาณ ไม่เชื่อใน Free will ของปัจเจกใดๆทั้งสิ้น\nในมุมมองของ Harari, มนุษย์เดี่ยวๆนั้น ไม่มีความพิเศษอะไรไปมากกว่าสัตว์ชนิดอื่นๆเลย\nเขาเสนอให้มองว่าสิ่งมีชิวิตนั้น ก็คือ Algorithm ชนิดหนึ่ง ที่เรียกว่า Biological algorithm\nBiological algorithm นี้มีหน้าที่ในการรับ Input และแปลงให้ได้ Output ใดๆก็ตามให้มันสามารถอยู่รอด และสืบพันธุ์ ได้ต่อไป\nเมื่อเป็น Algorithm ก็แสดงว่าเรามี Pattern ที่เราสามารถทำนาย ควบคุม และเลียนแบบได้\nดังนั้นจะเกิดอะไรขึ้นเมื่อความเจริญด้านชีววิทยา สามารถ Crack the code ถอดรหัส Algorithm ของสมองมนุษย์ได้ สามารถคุมการทำงานของความคิดมนุษย์ได้ และจะเกิดอะไรขึ้น หาก AI สามารถพัฒนา Algorithm ให้ก้าวหน้าจนสามารถทำอะไรต่างๆ ได้เก่งกว่ามนุษย์\nลางหายนะข้อที่หนึ่ง จึงเป็นว่าเมื่อ AI มาแทนที่มนุษย์ จนทำอะไรต่างๆได้ดี มนุษย์เดิมที่มีคุณค่าอย่างน้อยที่สุดในงานแรงงาน ก็จะกลายเป็น ชนชั้นที่ไม่มีคุณค่าใดๆ (Useless class of human) โดยสมบูรณ์แบบ\nอาจมีข้อค้านว่า แม้AI จะเก่งยังไง มันก็ไม่มีความรู้สึกนึกคิด (Consciousness) แม้ในปัจจุบันAIจะพัฒนาเร็วแค่ไหน ด้านพัฒนาความรู้สึกก็ยังดูห่างไกล ไม่ได้มีความคืบหน้าใดๆ ยังไงเสีย เมื่อมนุษย์นั้น ยังมีความรู้สึกนึกคิด ฉะนั้น AI ก็น่าจะยังตามหลังเราอยู่เสมอ\nแต่ ปัญหาคืออะไรสำคัญกว่าหละ ในการทำงาน ระหว่าง ความฉลาด (Intelligence) หรือ ความรู้สึก (Consciousness) ถ้า AI สามารถทำงานได้เก่งกว่ามนุษย์ จำเป็นด้วยหรือ ที่มันต้องมีความรู้สึก?\nหายนะข้อที่สองที่จะมาท้าทายความเป็นมนุษย์ ก็คือความเจริญของ Biogenetic และ Bioengineering\nจะเกิดอะไรขึ้น เมื่อเราสามารถปรับแต่งพันธุกรรมได้สมบูรณ์ เราสามารถกำหนดคุณสมบัติของมนุษย์ได้ตั้งแต่ปฏิสนธิ และเราสามารถปรับเสริมเติมแต่ง ใส่นุ่นนี่นั่นให้มนุษย์ได้ (สร้างCyborg) จนสุดท้ายเราอาจสามารถเปลี่ยนสมอง คุมความคิดของมนุษย์ได้ อุปนิสัยอะไรที่ไม่ดี เราก็กด Switch ปิดมัน อุปนิสัยที่ดีๆ เราก็ขยายสัญญาณมันมากๆขึ้นๆ\nเมื่อความก้าวหน้ามาถึงขั้นเราสามารถ Manipulate ความรู้สึกของคนได้แล้ว เรายังจะเรียกได้หรือไม่ ว่าแต่ละคน Unique หรือ มีตัวตนอันเป็นเอกลักษณ์จริงๆ\nหายนะที่ต่อเนื่องมาคือ หากการ Engineer มนุษย์นี้ เกิดขึ้นจริง มันย่อมเกิดขึ้นก่อนในหมู่ Elite ซึ่งนั่นจะยิ่งทำให้ความสามารถของคนธรรมดากับคนที่ได้รับการปรับแต่ง ห่างชั้นกันมากขึ้น พวก Elite ที่ได้รับการปรับแต่ง อาจมีการทำงานร่างกายที่ไม่เหมือนเรา อาจมีสมองที่คิด รู้สึก ประสบการณ์ต่างจากเราไปมากเรื่อยๆ เหมือนที่เราไม่มีวันเข้าใจความคิดของหมู ของไก่\nพวกเขาอาจเปลี่ยนไปเป็นสิ่งมีชีวิตใหม่ ที่Sapiens ไม่มีวันเข้าใจ เกิดเป็นมนุษย์สายพันธุ์ใหม่ เรียกว่า Homo Deus\nIt’s all about the Data Flow เมื่อเสาหลักของ Humanism ซึ่งก็คือความ Unique และความหมายของแต่ละคน ถูกท้าทาย และมีแนวโน้มจะถูกทำลายไป นั่นแปลว่า Liberal humanism อาจถูกทำลายได้ในอนาคต\nเมื่อนั้นแล้วอะไรจะมาแทนที่มันหละ อะไรจะมากำหนดความหมาย กำหนดเป้าหมายให้ Homo Sapiens ได้อีก?\nHarari เสนอว่า สิ่งนั้นอาจเป็น Dataism\nDataism ยึดหลักที่ว่า Universe ไม่ใช่อะไรอื่น มันคือ Data flow\nคุณค่าหรือความหมายของสิ่งใดๆ ขึ้นกับว่ามันสามารถ มอบอะไรให้กับการสร้าง แปรผล และผลิตซ้ำ แบ่งปัน Data ได้มากน้อยแค่ไหน\nถ้ามันทำให้เกิด Data Flow ได้มาก แสดงว่ามันมีคุณค่า และมันได้ไปต่อ\nการที่มนุษย์มาถึงจุดนี้ได้ ก็เพราะมันเป็นสิ่งมีชีวิตที่สามารถ contribute data flow ได้ดีกว่าสัตว์ตัวอื่นๆ โดยเฉพาะการที่มันสามารถร่วมมือเป็นมวลมหาประชาชนนี้ได้ ยิ่งทำให้เกิด Processor อันทรงพลัง มันจึงเป็นผู้ชนะในโลกนี้\nกรณีอื่นๆ เช่น การที่ ทุนนิยม เอาชนะ คอมมิวนิส ได้นั้น ไม่ใช่เพราะ ทุนนิยมคือพระเอก คอมมิวนิสคือซาตาน แต่เพราะทุนนิยมใช้ระบบ Distributed Data processing ในขณะที่ Communist ใช้ Centralised Data processing ซึ่งช้ากว่า มันเลยแพ้ไป\nDataism เกิดจาก การพยายามผสานรวมกันของสองทฤษฏีที่สำคัญ คือ การมองสิ่งมีชีวิตทุกชนิดเป็น ฺBiochemical algorithm และ การเกิดมาของ Computer ซึ่งเป็น Electronic algorithm\nDataism เสนอว่า เราควร ควบรวม ทั้งสองอย่างนี้เข้าด้วยกัน ทำลายบาเรียกั้นระหว่างสัตว์และเครื่องจักร เมื่อนั้นแล้วองค์ความรู้ทั้งศาสตร์และศิลป์ ก็สามารถผนวกรวมกัน เกิดเป็น Single Processing algorithm ที่ทำให้ข้อมูลมีการ Flow อย่างดีที่สุดโดยที่ไม่เคยเป็นมาก่อน\nและโลก ก็จะอยู่ในยุคสมัยแห่งความรุ่งเรือง ก้าวหน้า อย่างที่ไม่เคยมีมาก่อน เช่นกัน\nหาก Dataism สามารถครองโลกได้สำเร็จ จะเกิดอะไรขึ้นกับมวลมนุษชาติ?\nHarari เสนอว่า ในช่วงแรก มนุษย์จะได้รับประโยชน์อย่างมหาศาล จากความเจริญรุ่งเรืองต่างๆ\nแต่แน่นอนว่าสิ่งที่จะรับมือกับข้อมูลปริมาณมหาศาลนี้ได้ มิใช่สมองมนุษย์ มันคือ AI\nสุดท้ายแล้ว AI จะสำคัญมากขึ้นเรื่อยๆ และ มนุษย์ จะไม่เกี่ยวอะไรกับโลกนี้อีกต่อไป\nความสุขของมนุษย์จะไม่มีความสำคัญใดๆอีกต่อไปมนุษย์ จะไม่มีความหมายใดๆอีกต่อไป เพราะBiological algorithm ที่ล้าหลังของมนุษย์ จะถูกแทนที่ด้วย Electrical Algorithm\nมนุษย์จะยังคงมีอยู่ อยู่ดี กินดี แต่ชีวิตเหล่ามนุษย์ที่ไม่มีความหมายเหล่านี้ มันจะเกิดอะไรขึ้นกับพวกเขา?\nสุดท้ายแล้ว มนุษซึ่งสร้าง Electric Algorithm ขึ้นมา ก็จะถูกลดสภาพเป็นแค่ฟันเฟืองหนึ่งในระบบ แล้วอาจหายไปกับกลุ่มข้อมูลต่างๆ\nบั้นปลายของ Dataism จึงชี้ให้เห็นว่า สุดท้าย มนุษย์จะกลายเป็นสิ่งที่ทำมันทำสัตว์ร่วมโลกใบนี้ ที่มันทำกับหมู ทำกับไก่\nสุดท้าย Homo Sapiens จะเป็นสัตว์ล้าหลังตัวหนึ่ง ที่ไม่มีความสลักสำคัญใดๆต่อโลกใบนี้\nHarari ทิ้งท้ายหนังสือ ด้วยคำถามสำคัญสามข้อ ซึ่งเขาเชื่อว่าสามารถตอบทุกๆปัญหา และพอชี้ให้เราเห็นแนวทางในอนาคตได้ นั่นคือ\n1. Are organism really just algorithm, and is life really just data processing? (สิ่งมีชีวิตเป็นแค่ Algorithm และ ชีวิตเป็นแค่ Data processor จริงๆหรือ)\n2. What’s more valuable – intelligence or consciousness? (อะไรสำคัญกว่า ความรู้สึก หรือ ความฉลาด)\n3. What will happen to society, politics and daily life when non-conscious but highly intelligent algorithm know us better than we know ourselves? (อะไรจะเกิดขึ้นต่อระบบสังคม การเมือง และชีวิตประจำวันของพวกเรา หากมี algorithm ที่ไม่มีความรู้สึกใดๆ แต่ฉลาดมากๆ รู้จักตัวเรา ดีกว่าเรารู้จักตัวเองสะอีก)\nOpinion นี่คือหนังสือที่เสนอมุมมอง และแง่มองต่างๆ ของสิ่งที่เคยเกิดขึ้นในโลกใบนี้ อธิบายว่าเรามาถึงจุดนี้ได้อย่างไร และอธิบายว่าเรากำลังจะเดินไปทางไหนในอนาคต ได้อย่างละเมียดละไม มีชั้นเชิง เป็นหนังสือที่มีอำนาจที่สุดเท่าที่ผมเคยมา เพราะมันปลุกความคิด ท้าทายปัญญา เปิดหูเปิดตา และเปลี่ยนตัวตน และมุมมองของผมที่มีต่อกลไก การทำงานของโลกใบนี้ ไปอย่างมหาศาล\nเป็นหนังสือที่เกิดมาชาตินี้ ต้องอ่านครับ\nอย่างไรก็ตาม ผมคิดว่าหนังสือเล่มนี้มีข้อควรระวังในการอ่าน คือ\n เราต้องไม่ลืมว่า Harari นั้นเป็นนักประวัติศาสตร์ การนำข้อมูลทางวิทยาศาสตร์ต่างๆมาอ้างอิงของเขาจึงดู ฉาบฉวย (Face Value)ไปบ้าง และอาจดู Extrapolate ผลการทดลองหลายๆอย่างมากไปหน่อย ซึ่งผมเชื่อว่าหลายๆคนที่อ่านเล่มนี้ หรืออ่าน Review อาจคิดว่า นี่มันหนังสือนิยายไซไฟชัดๆ ดังนั้นแล้วเราจึงไม่ควรเชื่อเป็นตุเป็นตะว่าสิ่งต่างๆนั้นจะเกิดขึ้นจริง Focus in the process แต่ที่สุดยอดและน่าทึงมาก และเราควรศึกษาเรียนรู้ คือ การที่ Harari สามารถเก็บรวบรวมข้อมูลต่างๆ ในหลายๆศาสตร์ มา Integrate เข้ากับระเบียบวิธีคิดแบบนักวิทยาศาสตร์ ออกมาเป็นแนวทางของเขาได้อ่ยางไร ที่น่าทึ่งไม่แพ้กันคือ ความสามารถเขียนอธิบายข้อมูลต่างๆ ไล่มาเป็นฉากๆ ได้อย่างลื่นไหล เขาได้อย่างไร ซึ่งต้องไปอ่านเองครับ ผมไม่รู้จะเอาคำไหนมาบรรยาย บอกได้แค่มันสนุกและน่าทึ่งมากๆ ไม่มีใครทำนายอนาคตได้ อนาคตที่ดูทำนายได้แม่นยำ มันจะไม่เกิด สิ่งที่มักจะเกิดคือสิ่งที่ผู้คนคิดไม่ถึง ในประเด็นนี้มี Discuss อย่างละเอียดในบทนำครับ  สรุปเนื้อหา Homo Deus แต่ละบท บทที่ 1 : The New Human Agenda จุดมุ่งหมายเดิมของมนุษยชาติ (Origin human Agenda) คือ การแก้ไขปัญหา ความอดอยาก (Famine) โรคระบาด(Plaque) และภาวะสงคราม (Wars)\nแต่ในโลกสมัยใหม่นี้ ปัญหาดังกล่าวได้บรรเทาเบาบางลงไปแล้ว\n1. Famine ไม่มีการอดอยากที่เกิดจากธรรมชาติอีกแล้วในโลกนี้ เพราะจริงๆแล้ว เราสามารถผลิตอาหารได้พอกับความต้องการทั้งโลก จะมีเหลือก็แต่การอดอยากเพราะปัญหาจากการเมืองเท่านั้น\nปัญหาการบริโภคเกินความต้องการ น้ำหนักเกิน โรคอ้วน กลับกลายเป็นปัญหาหนักว่าการอดอยาก\nในปี 2010 มีคนตายด้วยโรคอ้วน 3 ล้านคน ในขณะที่ตายจากขาดสารอาหารเพียง 1 ล้านคน\n2.Plagues มนุษย์เราสามารถคุมการระบาดของโรคติดเชื้อได้อย่างมีประสิทธิภาพ หากมีการระบาดของโรค นั่นคือความผิดพลาดของการบริหารจัดการ เป็นความผิดของรัฐบาล ของสาธารณสุข ไม่ใช่ความโหดร้ายของธรรมชาติ\n3.Wars ในปี 2012 สถิติคนตายทั้งโลกอยู่ที่ 56 ล้านคน\nในนี้มีอยู่ 6 แสนคน ที่ตายด้วย ฝีมือมนุษย์ แบ่งเป็น 1.2 แสนคนที่ตายจากสงคราม , 5 แสนคนตายจากฆาตกรรม ในขณะที่มีถึง 800,000 คนที่ฆ่าตัวตาย\nสงครามไม่ค่อยมีประโยชน์อีกต่อไป มันทำกำไรไม่ค่อยได้แล้ว เพราะจากเดิมที่ความมั่งคั่งสร้างขึ้นมาจาก สินทรัพย์ต่างๆ เช่นเหมืองทองคำ น้ำมัน พื้นที่การเกษตร\nปัจจุบัน ความรู้คือทรัพยากรที่มีค่ามากที่สุด\nWorld Peace (สันติภาพ) มีความหมายใหม่ จากเดิมนั้น Peace หมายถึงช่วงลมสงบชั่วคราวก่อนที่จะมีสงครามครั้งต่อไปเกิดขึ้น ปัจจุบันนี้ Peace คือสิ่งที่เป็นปกติ (new normal) แต่สงครามคือสิ่งที่มาเกิดทำให้สันติภาพซึ่งเป็นของปกตินั้น เสื่อมเสียไป\nอาจจะมองว่า การก่อการร้ายจะดูมีมากขึ้น และดูน่ากลัวมากขึ้น แต่แท้จริงแล้วการก่อการร้ายไม่ได้มีอำนาจอะไรเลย คนตายจาก Coca-Cola มากกว่า Al-Qaeda\nฉะนั้น หากการก่อการร้ายจะทำให้เกิดความเสียหายรุนแรง หรือสงครามครั้งใหญ่ นั่นก็เป็นความผิดของ ปฏิกิริยาของประเทศต่างๆ ไม่ใช่ของขบวนการก่อการร้าย\nจึงกล่าวได้ว่า Famine, Plaque , Wars นั้นเป็นปัญหาที่อยู่ในอำนาจของมนุษย์ที่จะจัดการให้มันหมดไปได้ มนุษย์ไม่สามารถที่มัวจะโทษธรรมชาติ ชะตากรรม หรือพระเจ้า ได้อีกต่อไป\nแต่ ประวัติศาสตร์ จะไม่อดทนต่อภาวะสุญญากาศ\nหากปัญหาสามอย่างนั้นลดลง ก็จะมีบางอย่างเกิดขึ้นมาใหม่ เป็นปัญหาใหม่ เป็นเป้าหมายใหม่ ที่มนุษย์จะใฝ่อีกครั้ง\nที่ใกล้ตัวเราที่สุด คือ ปัญหาสิ่งแวดล้อม (Ecological Equilibrium) ซึ่ง Harari เชื่อว่ายังไงมนุษย์ก็หาทางแก้มันได้\nดังนั้นถ้ามนุษย์สามารคุม Famine, Plaque, Wars และ Ecological equilibrium ได้ จะเกิดอะไรต่อ มนุษย์จะสามารถพอใจอยู่แค่นั้น แล้วใช้ชีวิตอย่างปกติสุขต่อไปหรือไม่?\nแน่นอนว่าไม่ใช่อย่างนั้น โดยปกติมนุษย์จะไม่พอใจในสิ่งที่มีอยู่ เพราะ ปฏิกิริยาต่อความสำเร็จ ไม่ใช่ความพอใจ แต่การต้องการเพิ่มยิ่งขึ้น (Craving for more)\nเป้าหมายของมนุษย์นั้นก็เป็นอะไรที่ดียิ่งขึ้น ยิ่งใหญ่ขึ้น ให้อำนาจมนุษย์มากขึ้น\n …เมื่อเราคุมความเป็นความตาย ( Mortality )ได้แล้ว เราก็จะแสวงหาความเป็นอมตะ ( Immortality )\n…เมื่อเราลดความทุกข์โศก (Misery) ได้แล้ว เราก็จะแสวงหาสุขนิรันดร์ (Happiness)\n..เมื่อเราไม่ต้องมากังวลกับการตัวรอดไปวันๆ ( Survival Struggles) ดังเช่นสัตว์ Species อื่นๆแล้ว เราก็จะยกตนเหนือกว่าพวกมัน สัตว์เดรัจฉาน และนำเราไปสู่ อำนาจเทียมทัดเทพเจ้า (Divinity)\n 3 สิ่งนี้ คือ New human Agenda : ความเป็นอมตะ (Immortality),สุขนิรันดร์ ( Happiness) และ อำนาจเทียมทัดเทพเจ้า (Divinity)\n1. Immortality : The last day of death Homo sapiens มีอายุขัย 70-80 ปี โดยธรรมชาติอยู่แล้ว ในอดีตที่การแพทย์ไม่เจริญ ก็มีคนจำนวนหนึ่งมีชีวิตยืนยาวได้ถึงช่วงนี้\nจะเห็นได้ว่า การแพทย์สมัยใหม่ ไม่ได้ทำให้ชีวิตเรายืนยาวขึ้น มันแค่ไม่ทำให้เราตายก่อนอายุขัยที่ควรจะเป็นเท่านั้น\nยังไงเสีย มนุษย์เราต้องค้นหาหนทางในการยืดอายุขัย เพราะเรามีความกลัวตาย ฝังลึกลงในจิตใจ (Fear of death ingrained in human mind)\n2. Happiness : The right to happiness ความสุขเป็นสิ่งที่มนุษย์ใฝ่หามาตั้งแต่อดีตกาล\nในเมื่อมนุษย์สามารถบรรลุ Original agenda ได้แล้ว โดยรวมแล้ว มนุษย์ก็ควรจะมีความสุขขึ้น\nแน่นอน ความสุขไม่ได้เป็นสิ่งที่ง่ายดายขนาดนั้น แม้ว่าโลกเราจะร่ำรวยมากขึ้น มีความปลอดภัยมากขึ้น แต่อัตราการฆ่าตัวตายกลับมีมากขึ้น (โดยเฉพาะในประเทศที่พัฒนาแล้ว)\nแม้จะมีความเจริญมากขึ้น มนุษย์ก็ไม่ได้มีความสุขขึ้นเลย\nอะไรที่เป็นเพดาน (Glass ceiling) บังไม่ให้มนุษย์มีความสุขมากขึ้น แม้ว่าเราจะประสบความสำเร็จต่างๆมากมาย\nGlass Ceiling of happiness and the pillars Harari กล่าวไว้ว่า ความสุขของมนุษย์มีขีดจำกัด เสมือนกับมันมี Glass Ceiling of Happiness (เพดานแก้วจำกัดความสุข) คอยกั้นอยู่ ซึ่งเพดานนี้มีเสา (Pillar) สองต้นคอยค้ำจุน ถ้าเสามีขนาดสูง เราก็จะมีพบความสุขได้มากขึ้น เข้มข้นขึ้น ถ้าเสามันเตี้ย คุณก็จะมีความสุขได้ลดลง เสาสองต้นที่ว่านี้ คือ\n2.1 Psychological Pillar: ความสุขขึ้นอยู่กับ ความคาดหวัง (มากกว่า สภาพปัจจุบัน) ชีวิตที่สงบสุข มักไม่ได้ทำให้ Sapiens มีความสุข\nกลับกัน เรารู้สึกพอใจหากความคาดหวังเราเป็นจริง และเมื่อเราบรรลุมันมากเท่าไหร่ เราก็จะยิ่งหวังสูงขึ้นไปเรื่อยๆ\nดังนั้นแล้ว แม้เราจะสมหวังมากแค่ไหน เราจะไม่มีวันที่มีความสุขง่ายๆ\n2.2 Biological Pillar: ความสุขขึ้นอยู่กับสารเคมีในร่างกาย ความสุขมาจากความรู้สึกพอใจ ความทุกมาจากความรู้สึกเจ็บปวด\nไม่มีใครมีทุกข์เพราะตกงาน เราทุกข์ เพราะเรา “รู้สึก” ว่าการตกงานทำให้เรารู้สึก “ไม่ดี” อันเป็นสิ่งที่เกิดในสมอง\nคุณสามารถเป็นคนตกงานที่มีความสุขที่สุดในโลกได้ หากคุณไปเล่นยา หลังจากตกงาน\nปัญหาคือ ความรู้สึกพอใจที่เกิดจากสารเคมีในสมอง จะมีช่วงเวลาที่สั้นมาก ภายในเวลาไม่นาน มันก็จะกลายเป็นความรู้สึกไม่พึงพอใจ\nคุณอาจจะได้รับการเลื่อนตำแหน่ง คุณอาจจะดีใจตอนที่มีคนแจ้งข่าว แต่ความพอใจนั้นก็มีแค่ประเดี๋ยวประด๋าว ในไม่ช้า คุณก็จะไม่รู้สึกอะไร และหากปีหน้าคุณไม่ได้รับการเลื่อนตำแหน่ง คุณก็จะมีความทุก อาจจะมีความทุกมากขึ้นด้วยซ้ำ เทียบกับหากคุณไม่ได้รับการ promote ตั้งแต่แรก\nทำไมมันจึงเป็นเช่นนี้?\nก็ต้องโทษ วิวัฒนาการ (Evolution) ที่ทำให้เรามีความรู้สึกพึงพอใจได้แค่ช่วงสั้นๆ\nEvolution ทำให้ระบบสารเคมีในร่างกายปรับตัวเพื่อความอยู่รอด และการสืบพันธ์ ไม่ใช่เพื่อความสุข\nจินตนาการว่าหากคุณเป็นกระรอกกลายพันธุ์ ที่เกิดมาแล้ว กินถั่วเม็ดเดียว ก็มีความสุขตลอดกาล\nคุณจะเป็นกระรอกที่โชคดีมาก แต่ชีวิตก็จะสั้นมาก และคุณลักษณะนี้ จะสูญพันธ์ไปอย่างรวดเร็ว\nสิ่งมีชีวิตที่จะรอดและสืบตระกูลได้ ต้องหิวกระหายขึ้นเรื่อยๆ (Hunger for more \u0026amp; Craving for more)\nซึ่งหากความสุขและพึงพอใจนั้นเกิดจากสารเคมีในร่างกาย ก็มีทางเดียวเท่านั้น ที่จะทำให้มนุษย์ทุกคนมีความสุขได้ นั่นคือ การควบคุมสารเคมีในสมองโดยตรง (Manipulate Human Chemistry)\nจึงจะเห็นได้ว่าการควบคุมความสุขนั้น ก็แบ่งหลักๆเป็นสองส่วน ตามเสาทั้งสอง\n Psychological : เราสามารถฝึกจิตเรา ให้ละกิเลสต่างๆ ฝึกให้มันอยู่กับปัจจุบัน เพราะมันเป็นบ่อเกิดของความทุกทั้งสิ้น ดังเช่นคำสอนของพระพุทธเจ้า หรือ\n Biochemical : สร้างผลิตภันฑ์ที่ไปยุ่งเกี่ยวกับสารเคมีในสมอง เพื่อทำให้มนุษย์มีความสุขตลอดการ\n  ซึ่งคงไม่ต้องถาม ว่ามนุษย์จะเลือกพัฒนาวิธีไหน\n3. Divinity : The Gods of planet Earth Homo sapien จะกลายเป็นเทพเจ้า (Homo deus – God men)\nการอัพเกรดสู่อำนาจแห่งพระเจ้านี้ เกิดจากความก้าวหน้าของ 3 แขนงวิชาสำคัญ คือ\n3.1 Biological Engineering ดัดแปลง เปลี่ยนแปลงรหัสพันธุกรรม เปลี่ยนวงจรการทำงาน และสารเคมีของสมองมนุษย์ 3.2 Cyborg Engineering ผสานรวมสิ่งมีชีวิต เข้ากับเครื่องมือจักรกลต่างๆ (Merging Organic body with non-organic device) 3.3 Engineering of non-organic being ปัญญาประดิษฐ์ หุ่นยนตร์ และ Neural Network Homo sapiens จะอัพเกรดตัวมันอย่างเป็นลำดับขั้น จนถึงวันนึงที่ลูกหลานเรามองย้อนกลับมาและพบว่าเขาเป็นคนละเผ่าพันธุ์กับเรา\nซึ่งที่จริง กระบวนการนี้ได้เกิดขึ้นแล้วในปัจจุบัน ในยุคที่ผู้คนพึ่งsmart phone มากขึ้น ยุคที่มีการผ่าตัดเปลี่ยนแปลงใบหน้า เปลี่ยนแปลงรูปร่าง ยุคที่ใช้ยาควบคุมความรู้สึกต่างๆในสมองของตนเองมากขึ้น จนเป็นเรื่องปกติ\nดูเหมือนว่าอนาคตนั้น มนุษย์จะมีการเปลี่ยนแปลงที่รวดเร็วและรุนแรง โดยที่เราไม่รู้ด้วยซ้ำว่ามันจะเกิดประโยชน์หรือโทษอะไรยังไงบ้าง\nจะดีกว่าใหม หากเราพยายามชะลอให้มันค่อยๆเป็นค่อยๆไป? คำตอบคือ เป็นไปไม่ได้ นั่นเพราะ\n ไม่มีใครเข้าใจปัญหาทั้งหมด ทุกคนเป็นแค่ผู้เชี่ยวชาญในสาขาใดสาขาหนึ่ง ข้อมูลมันมหาศาลเกินไปที่จะมีใครคนใดคนหนึ่ง เข้าใจถึงปัญหาทั้งหมด\n ถ้าสมมติว่าเราสามารถชะลอการเปลี่ยนแปลง นั่นหมายถึงเราชะลอการเติบโต ซึ่งจะทำให้ระบบเศรษฐกิจทั้งหมดพังพินาศ และสังคมมนุษย์ก็จะพังไปด้วย เพราะเศรษฐกิจทุนนิยมของเราดำเนินได้ด้วยความเชื่อที่ว่ามันจะโตขึ้นเรื่อยๆ หากวันใดเศรษฐกิจหยุดโต หายจะก็จะมาถึง ทุนนิยมนี่เองที่ส่งเสริมให้มนุษย์แสวงหาสิ่งใหม่ๆอยู่เรื่อยๆ\n  แล้วเราสามารถทำนายได้ใหมว่าจะเกิดอะไรในอนาคต? ไม่ได้ เนื่องจากสิ่งที่เรียกว่า Paradox of knowledge\n หากเรามีข้อมูลน้อย หรือไม่ได้มีข้อมูลที่มีผลกระทบอะไร มันก็จะเป็นข้อมูลที่ไม่มีประโยชน์ (Knowledge that dose not change behavior is useless)\n แต่หากเรามีข้อมูลมากพอ และเรามีข้อมูลที่ดีพอที่สามารถเปลี่ยนการกระทำของเราได้ ข้อมูลนั้นก็จะสูญเสียความสำคัญไปในไม่ช้า (Quickly lose its relevance) -\u0026gt; ยิ่งเรารู้มากเท่าไหร่ว่าจะเกิดอะไร มันก็จะไม่เกิดขึ้นจริง\n  ยกตัวอย่าง Karl Marx ที่ทำนายว่า ในไม่ช้า ระบบทุนนิยม จะทำให้ชนชั้นทางสังคม เหลื่อมล้ำกันมากขึ้น นำไปสู่การแตกหักระหว่างชนชั้น และจบลงด้วยการล่มสลายของทุนนิยม -\u0026gt; แต่ปรากฏว่าข้อมูลอันหลักแหลมนี้ ก็ทำให้พวกทุนนิยมสามารถใช้มันมาป้องกันแก้ไขสิ่งที่จะเกิดขึ้น “Commune”ที่ Marx ทำนายไว้ จึงไม่เกิดขึ้นจริง\nยิ่งเรามีข้อมูลมากเท่าไหร่ รู้ดีเท่าไหร่ สิ่งนั้นก็จะไม่เกิดขึ้น ทำให้เราทำนายอนาคตไม่ได้\n… แล้วเราจะศึกษาประวัติศาสตร์ไปทำไม? คำตอบคือ\n “Each and Everyone of us has been born into a given historical reality, ruled by particular norms and values, and managed by a unique economic and political system. We take this reality for granted, thinking it is natural, inevitable and immutable” – Yuval Noah Harari\n เราอาจจะคิดว่าเราเกิดมาในโลกที่มันเป็นเช่นนี้อยู่แล้ว โลกที่เราเกิดมา มันมีความเชื่อเช่นนี้ มีระบบเช่นนี้ เป็นธรรมดา และเราทำอะไรมันไม่ได้ แต่อันที่จริงแล้วโลกที่เราอยู่ เป็นผลจากเหตุการณ์ต่างๆที่เกิดมาในอดีต และส่งผลกระทบเป็นห่วงโซ่ตามๆกันมา\nสิ่งต่างๆที่เกิดในอดีต ต่างเป็นปัจจัยหนึ่งที่มา Shape เทคโนโลยี การเมือง สังคม และ ความคิด ความกลัว ความฝันของเรา\nมันเหมือนกับมีมือของบรรพบุรุษจากหลุมศพ มาตรึงรัดคอของเรา ให้เรามองไปยังเป้าหมายเพียงอันเดียว มันเล่นงานเราตั้งแต่เกิด ทำให้เราอาจไม่เคยพยายามสะบัดคอหนีมัน และหลุดออกจากมันได้\nการศึกษาประวัติศาสตร์ เป็นการพยายามที่จะลดความแน่นจากการถูกบีบคอนี้ (Loosen the grip from the past) ทำให้เรามองเห็นตัวเลือกมากขึ้น เห็นสิ่งบรรพบุรุษของเราไม่เคยเห็น หรือ ที่ไม่ต้องการให้เราเห็น\nประวัติศาสตร์ไม่ได้ช่วยเราในการตัดสินใจในการเลือกสิ่งต่างๆ แต่มันช่วยให้เราเห็นตัวเลือกมากยิ่งขึ้น ( Studying history will not tell us what to choose , but at least It gives us more options. )\nThe Lawn Harari ยกตัวอย่างเรื่องสนามหญ้า\nหากคุณจะสร้างบ้านสักหลัง คุณอยากมีสนามหญ้าหน้าบ้านหรือไม่\nถ้าคุณอยากมี คุณจะมีไปทำไม?\nคุณอาจจะคิดว่า ก็มันสวยดี ใครๆเขาก็มีกัน ถามอะไรแปลกๆ\nประเด็นคือมันเป็นเช่นนั้นจริงหรือไม่?\nประวัติศาสตร์บอกเราว่า สนามหญ้า ไม่เคยมีอยู่ในถิ่นอาศัยของมนุษย์ถ้ำ ในวิหารกรีซ ในกรุงโรม หรือ ในพระราชวังต้องห้ามของจีน\nวัฒนธรรมการทำสนามหญ้าสวยๆไว้ต้อนรับแขก เกิดในพระราชวังของอังกฤษและฝรั่งเศส ในช่วงยุคกลาง\nน่าเหลือเชื่อว่านิสัยนี้ยังฝังรากลึก และกลายเป็นเครื่องหมายของความเป็นชนชั้นนำ ในยุคสมัยใหม่นี้\nเมื่อคิดในด้านอรรถประโยชน์ สนามหญ้านั้นเป็นอะไรที่ไร้ประโยชน์มาก คุณต้องลงแรง ลงเงิน ทนุถนอมมันอย่างดีเพื่อจะได้มีผืนหญ้าสวยๆไว้โชว์หน้าบ้าน มันไม่ได้มีคุณค่าอะไรอื่นเลย จะเอาพื้นที่มาเพาะปลูกก็ไม่ได้ เลี้ยงสัตว์ก็ไม่ได้\nสนามหญ้าจึงเป็นเครื่องหมายของความผู้มีความมั่งคั่งและอำนาจ\nคุณจึงเห็นสนามหญ้าผืนใหญ่ในพระราชวัง ในสถานที่สำคัญของทางราชการ ในสนามกีฬา\nไปๆมาๆ มนุษย์ก็เลยโยง “สนามหญ้า” เข้าด้วยกับ อำนาจทางการเมือง หน้าตาทางสังคม และความมั่งคั่งส่วนตน\nดังนั้นหากในอนาคตคุณต้องการมีสนามหญ้าเป็นของตัวเอง ลองถามตัวเองสักครั้งว่า คุณต้องการมันไปทำไม?\nแน่นอน สุดท้ายมันก็เป็นเรื่องของคุณ แต่คราวนี้คุณก็จะมีความเข้าใจมากขึ้นว่า ทำไมคุณถึงต้องนึกถึงสนามหญ้า?\nนี่คือเหตุผลที่สำคัญที่สุดของการศึกษาประวัติศาสตร์ มิใช่เพื่อทำนายอนาคต แต่เพื่อปลดปล่อยคุณให้เป็นอิสระจากอดีต เพื่อให้คุณเห็นทางเลือกที่มากขึ้น\n “Not in order to predict the future , But to free yourself of the past and imagine alternative destinies”\n ดังนั้นเพื่อให้เข้าใจถึง ความเป็นไปได้ของมนุษย์…หนังสือเล่มนี้จะพยายามหาคำตอบว่า  แท้จริงแล้ว Homo Sapiens คืออะไร มันแตกต่างกันอย่างไรกับสัตว์ชนิดอื่นๆ อะไรทำให้มันพิเศษ เพื่อเป็นการทำนายว่า ถ้าอนาคตเกิด SuperHuman ขึ้นมาจริงๆ เขาจะรู้สึกกับพวกเราเหล่า Sapiens ที่ล้าหลัง อย่างไร?\n Homo Sapiens ที่เคยใช้เวลาเกือบทั้งหมดของเผ่าพันธ์ เชื่อในภูติผี เชื่อในพระเจ้า เชื่อในอำนาจลึกลับ มาลงเอยด้วยการเชื่อใน Humanism ได้อย่างไร? Humanism คือความเชื่อว่า ตัวมันเองเป็นศูนย์กลางจักรวาล และเป็นต้นกำเนิดของทุกๆความหมายและความชอบธรรมต่างๆ ในโลก …ความเชื่อนี้ ได้เปลี่ยนแปลงมนุษย์ไปอย่างไรบ้าง\n ทำไมความพยายามที่จะสานฝัน Humanism จะนำไปสู่การสูญสิ้นความหมายของ Sapiens เสียเอง …และหาก Humanism อยู่ในอันตราย จะมีอะไรมาแทนที่มัน?\n  Part 1 : Homo Sapiens Conquers the World บทที่ 2 : The Anthropocene ปัจจุบันนี้เราอยู่ในยุค Holocene ซึ่งเป็นการแบ่งยุคของโลกตามธรณีวิทยา ยุค Holocene เริ่มขึ้นตั้งแต่ 11,500 ปีก่อน หลังจากที่ยุคน้ำแข็งยุติลง\nแต่คุณอาจจะเรียก 70,000 ปีที่ผ่านมาว่ายุค Anthropocene ซึ่งหมายถึงยุคที่ Homo sapiens ขึ้นมามีบทบาทต่อสิ่งแวดล้อมและระบบนิเวศทั่วทั้งโลก ซึ่งนี่เป็นปรากฏการณ์ที่ไม่เคยขึ้นมาก่อน ที่มีสิ่งมีชีวิตแค่ Species เดียว จะสามารถกำหนดความเป็นไปของระบบนิเวศวิทยาทั้งหมดของโลกใบนี้ได้\nมนุษย์ทำให้สิ่งมีชีวิตอื่นๆ และระบบนิเวศวิทยาในโลกเปลี่ยนไป แบบที่ปรากฏการณ์ธรรมชาติไหนๆ ก็ยังทำไม่ได้ เพราะมนุษย์ได้เปลี่ยนโลกนี้เป็น Single Ecosystem\nSerpent children หลักฐานทางมานุษวิทยาต่างๆ ชี้ว่า ในอดีต เหล่า Sapiens ที่ใช้ชีวิตแบบ Hunter-Gatherer นั้นน่าจะเป็น Animism คือกลุ่มที่เชื่อในเรื่องภูติผีปีศาจ เชื่อว่ามีวิญญาณในต้นไม้ ก้อนหิน ในสัตว์ป่าต่างๆ พวกเขาเชื่อว่าคนและสัตว์อื่นๆ เท่าเทียมกัน ไม่มีช่องว่างใดแยก โลกนี้เป็นของทุกสิ่งมีชิวิต ไม่ว่าจะสัตว์ พืช หรือก้อนหิน\nที่น่าสนใจคือ ในตำนานของ Animism หลายๆแห่ง จะมีความเชื่อว่าคนพัฒนามาจากงู หรือสัตว์เลื่อยคลานต่างๆ\nในขณะที่ผู้แต่งคัมภีร์ไบเบิล ซึ่งมาทีหลัง ปฏิเสธความเชื่อนี้ของ Animism นี้ ปฏิเสธความเชื่อว่าคนพัฒนามาจากงู เพราะคนนั้นถูกสร้างโดยพระเจ้า ส่วนงูคือสิ่งที่จะนำมาพาซึ่งหายนะ นำมาซึ่งความเสียหายระหว่างมนุษย์ กับพระเจ้า\nเรื่องตลกคือ เมื่อวิทยาศาสตร์พบว่าสมองของเราก็พัฒนามาจากสมองสัตว์เลื้อยคลานอีกที (limbic system) การค้นพบนี้ก็ทำ ความเชื่อในการมีอยู่ของพระเจ้า เสียหายไปจริงๆ\nAncestral need Harari เสนอว่า ที่มาของคัมภีร์ศาสนา เช่น คัมภีร์ Bible และความเชื่อต่างๆที่บอกว่ามนุษย์แตกต่างจากสัตว์ชนิดอื่นนั้น เป็น ผลพลอยได้ (By product) ของการปฏิวัติทางเกษตรกรรม (Agricultural Revolution) อีกที\nAgricultural revolution ทำให้เกิดการเลี้ยงสัตว์ ซึ่งในปัจจุบัน จำนวนสัตว์ใหญ่บนโลกกว่า 90% ก็คือพวกสัตว์ที่เราเลี้ยงไว้ทำประโยชน์นี้เอง (เช่น หมู ไก่ และวัว)\nแม้สัตว์เลี้ยงต่างๆเหล่านี้ จะสามารถรอดชีวิตได้ มีคนคอยดูแล แต่มนุษย์ทำให้มันทรมานเป็นอย่างมาก\nที่ว่าทรมาน มิใช่ว่าสุดท้ายมันต้องตาย เพราะอยู่ในป่ามันก็โดนสิงโตจับกินเมื่อไหร่ก็ได้อยู่แล้ว แต่เป็นเพราะมนุษย์เลิกมองว่าสัตว์เหล่านี้มีศักดิ์ศรีเท่าเทียมกัน\nมนุษย์มองว่าสัตว์เหล่านี้ด้อยกว่า มันจึงถูกจับ หรือเพาะเลี้ยงให้อยู่แต่ในกรงแคบๆ แม้จะมีคนคอยเอาอาหารมาให้ แต่มันไม่ได้ใช้ชีวิต ไม่ได้มีปฏิสัมพันกับสัตว์อื่นๆ สัตว์ตัวเมียที่มีลูก ก็ไม่ได้โอกาสสร้าง bond กับลูกๆของมันแต่อย่างใด\nพวกมันไม่ได้แม้แต่จะเดินเล่น ซึ่งทำให้มันยังคงทรมานอย่างมาก เนื่องจาก Gene ที่ต้องการทำสิ่งต่างๆเหล่านี้ ก็ยังอยู่กับมัน ไม่ได้หายไปไหน แม้จริงๆแล้วมันอยู่รอดได้โดยไม่ต้องทำอะไรเลย\nOrganism and algorhythm คิดไปเองหรือปล่าว ว่าสัตว์พวกนั้นมันจะมีความทุกข์หรือทรมานจริงๆ?\nเรารู้ได้ยังไงว่าพวกหมู หรือวัว ที่เราเลี้ยงไว้ในกรงแคบๆ เพื่อรอโดนกินนั้น มีความต้องการ มีอารม มีความรู้สึก (Emotion) เหมือนที่มนุษย์มี?\nHarari เสนอว่า Emotion ต่างๆนั้นไม่ได้เป็นสิ่งลี้ลับอะไร แท้จริงแล้ว Emotion ก็คือ Biological Algorithm ชนิดหนึ่ง\nAlgorithm คือสิ่งจำเป็นสำหรับการอยู่รอด และการสืบพันธุ์ของสิ่งมีชีวิต และอย่างน้อย มันก็มีอยู่ใน mammal ทุกชนิด\nAlgorithm คืออะไร ?\nAlgorithm คือ Set ของขั้นตอน กระบวนการต่างๆ ที่ใช้ในการคำนวณ ใช้ในการแก้ปัญหา และการตัดสินใจ\nHarari เสนอว่า Algorithm จะกลายเป็น concept ที่สำคัญอย่างมากในการเข้าใจโลกและอนาคต\nเราอาจจะเคยชินกับการใช้คำนี้เมื่อพูดถึงคอมพิวเตอร์\nคอมพิวเตอร์ ก็คือ Electrical Algorithm ชนิดหนึ่ง เราใช้มันมาเป็นเครื่องมือ ใช้ในการแก้ปัญหาต่างๆได้ เช่น การใช้ algorithm ในการหาค่าเฉลี่ยของตัวเลข2ตัว คุณก็ตั้งค่าโปรแกรม ให้มันเอาตัวเลข2ตัวนั้นบวกกัน แล้วหารสอง\nขั้นตอนที่มีการเอาเลขมาบวกกัน แล้วหารสอง นี้คือ Algorithm ในที่นี้ก็คือ Electrical Algorithm นั่นเอง ซึ่งทำตัวเป็นตัวกลาง คุณแค่ป้อน Input ลงไป แล้วมันจะหา Output ให้คุณเอง\nคนก็เป็น Algorithm เหมือนกัน แต่เป็น Biological Algorithm\nคนเป็น Algorithm ที่มีชุดคำสั่งคือ ทำอะไรก็ได้ ให้มันอยู่รอด และสามารถสืบพันธุ์ ซึ่งชุดคำสั่งนี้ก็มีอยู่ใน Gene ของเรานั่นเอง\nหาก Electrical Algorithm ที่คุมเครื่องทำกาแฟ ทำงานโดยผ่าน ฟันเฟือง และวงจรไฟฟ้า\nBiolgical Algorithm ที่ควบคุมมนุษย์ และสัตว์อื่นๆในการทำงาน ก็ทำงานในรูปแบบของความรู้สึก และความนึกคิด (Sensation , Emotion and Thought)\nสมมุติว่าลิงตัวหนึ่งเห็นกล้วย และเห็นสิงโตอยู่ใกล้ๆ สิ่งที่เกิดขึ้นคือ จะต้องมีข้อมูล Input ผ่านสมองลิงที่เป็น Algorithm แล้วแปลงเป็น output ซึ่งก็คือการกระทำต่างๆ\nInput ก็จะแบ่งอีกเป็น 2 พวก คือ\n External Input : เช่น กล้วยมีกี่ลูก กล้วยสุกหรือดิบ กล้วยอยู่ใกล้แค่ไหน สิงโตตัวนั้นหิวหรืออิ่มอยู่ อยู่ไกลแค่ไหน ถ้าสิงโตวิ่งมา มันจะหนีทันมั้ย Internal input : ซึ่งก็ขึ้นกับว่าตอนนั้นมันอยู่ในสภาพไหน ถ้ามันหิวจนใกล้ตาย มันก็คุ้มที่จะแลกด้วยชีวิต ถ้ามันพึ่งกินมา มันจะเสี่ยงตายไปทำไม  การที่สิ่งมีชีวิตใช้ input ทั้งหลายมาหาน้ำหนัก มาคำนวณความเป็นไปได้ ว่าจะทำหรือไม่ทำอะไร มาคำนวณข้อดีข้อเสียของ Action นั้นๆ ก็ต้องผ่าน algorithm ที่ซับซ้อนมากมายกว่าเครื่องทำกาแฟ\nลิงที่คำนวณความน่าจะเป็นต่างๆได้ดี รางวัลตอบแทนนั้นก็คือความอยู่รอด เมื่อยู่รอดมันก็สามารถถ่ายทอดพันธุกรรมของมันต่อไปได้\nแน่นอนว่าลิง ไม่สามารถคำนวณความน่าจะเป็นออกมาเป็นตัวเลข หรือสามารถ List Pro-Cons ออกมาเป็นรูปธรรมได้ แต่มันใช้ทั้งตัวของมันในการตัดสินใจ ใช้ตัวมันเป็นเครื่องคำนวณ โดยอาศัยข้อมูลจาก External input และ internal input\nจึงกล่าวได้ว่า ตัวมัน ก็คือ Biological Algorithm นั่นเอง\nดังที่ได้กล่าวว่า Algorithm ไม่ได้มีบทบาทแค่ในการเอาตัวรอด แต่ในการสืบพันด้วย เวลาคุณเห็นคนหน้าตาสวยๆ ในไม่กี่ชั่วพริบตาคุณอาจจะแปลผลได้เลย ว่าผู้หญิงคนนี้น่าตาดี มี Gene ที่ดี เหมาะกับเป็นแม่ของลูก ผ่าน Algorithm ที่พัฒนาและอยู่ในตัวคุณมาอย่างยาวนานหลายล้านปี\n99% ของการตัดสินใจในชีวิตเรานั้น ไม่เว้นแต่การตัดสินใจสำคัญๆในชีวิต ไม่ว่าจะเป็นที่เรียน คู่ชีวิต ที่อยู่อาศัย ต่างก็ผ่านการใช้ Algorithm ทั้งนั้น\nแล้ว Algorithm เกี่ยวข้องอะไรกับความรู้สึก?\nความรู้สึกคือ Input แบบหนึ่ง\nถ้าเราเชื่อว่า Algorithm นั้นควบคุมการอยู่รอดของสัตว์เลี้ยงลูกด้วยนม สัตว์ปีก และอาจจะรวมถึงสัตว์เลื้อยคลาน และสัตว์น้ำ –\u0026gt; เราจึงอาจ Assume ได้ว่า พวกสัตว์ต่างๆ ก็มีความรู้สึกด้วย\nแน่นอนว่าความรู้สึกของสัตว์นั้น ก็คงไม่เหมือนมนุษย์\nหมูคงไม่มีความรู้สึก’ทึ่ง’เวลามันเห็นดาวสวยๆ บนท้องฟ้า แต่เชื่อว่าความรู้สึกที่ทุก mammal มีเหมือนกัน คือความรู้สึกของสายสัมพันธ์แม่ลูก ( Mother-infant Bond )\nเรารู้ว่าในสัตว์เลี้ยงลูกด้วยนม ลูกที่เกิดใหม่นั้นไม่สามารถรอดได้ หากไม่ได้นมจากแม่ของมัน แต่อีกสิ่งที่ขาดไม่ได้เช่นกัน คือความรู้สึกอบอุ่น ที่ได้มาจากความใกล้ชิดกันของแม่และลูก -\u0026gt; สัตว์เลี้ยงลูกด้วยนมที่เป็นวัยทารก ต้องการ mammal bond ด้วย จึงจะอยู่รอดได้นาน ดังจะเห็นได้จากการศึกษาของ Harry Harlow ซึ่งศึกษาเปรียบเทียบชีวิตของลูกลิงที่เลี้ยงไว้กับหุ่นเหล็ก และหุ่นที่บุผ้านวม\nถ้าเราเชื่อว่า การที่ลูกสัตว์และแม่สัตว์ถูกพรากความรู้สึก Mammal bond แล้วจะเกิดความทุกข์ อุตสาหกรรมการผลิตเนื้อ และนม ก็ทำให้สัตว์หลายพันล้านตัวในแต่ละตัว ต้องทุกทรมาน\nThe Agricultural Deal ถามว่าคนเลี้ยงสัตว์รู้ถึงปัญหาความทรมานของสัตว์นี้หรือไม่? … ก็น่าจะรู้\nคำถามคือเหล่าคนที่เลี้ยงสัตว์นี้ Deal กับความรู้สึกผิดได้ยังไง?\nHarari เสนอว่า พวกเขา Justify การกระทำนี้ ผ่านสิ่งที่เกิดขึ้นมาในช่วง Agricultural Revolution นั่นก็คือ ศาสนา\nจากความเชื่อเดิมของ Animist ที่คน สัตว์ พืช เท่าเทียมกัน พึ่งพาอาศัยกัน การมาของศาสนาทำให้มีผู้เล่นใหม่หน้าใหม่เกิดขึ้น นั่นคือ พระเจ้า\nศาสนานั้นยกระดับของพระเจ้าให้เหนือมนุษย์ แต่สิ่งที่ซ่อนอยู่ด้วยนั้น ก็คือการยกระดับของมนุษย์ขึ้นไปด้วยกัน\nพระเจ้ามีบทบาทในแง่นี้ 2 อย่าง\n พระเจ้าช่วยอธิบายว่าทำไมSapiens จึงพิเศษกว่าสิ่งมีชีวิตอื่นๆ และทำไมเขาจึงควรปกครองสัตว์ต่างๆ :\nเช่น ในเรื่องน้ำท่วมโลกของศาสนาคริส พระเจ้าเห็นสมควรที่จะฆ่าล้างเผ่าพันธุ์สัตว์ทุกชนิดบนโลก เพื่อเป็นการลงโทษบาปของมนุษย์ เรือ Noah ถูกสร้างขึ้นมาเพื่อเป็นการอพยพมนุษย์และสัตว์โลกต่างๆให้รอดพ้นจากวันล้างโลก ซึ่งในภายหลัง พระเจ้าเองก็รู้สึกพลาด เนื่องจากจะไม่มีใครมา Offer สิ่งบูชายันให้อีกต่อไป พอเมื่อน้ำท่วมหาย พระเจ้าจึงได้สัตว์ต่างๆเป็นบูชายันอีกครั้ง และทำให้พระเจ้าไม่คิดจะทำให้เกิดเหตุกาณ์นี้ขึ้นอีก\n พระเจ้าเป็นสื่อกลางในการสื่อสารระหว่างมนุษ์ และธรรมชาติ\nเช่น ใน Animist ถ้าคุณอยากให้ฝนตก คุณก็ต้อง บูชาก้อนเมฆ หากอยากให้ผลไม้ออก คุณก็บูชาต้นไม้\nแต่การบูชาพระเจ้า ก็จะให้คุณได้ทั้งฝน ได้ดินอุดสมบูรณ์ ได้พืชพรรณที่เจริญงอกงามดี แค่คุณต้องมีอะไรไปแลกเปลี่ยน เช่น เหยื่อบูชายัน\n  แน่นอน ในหลายๆศาสนา เช่น พุทธ ฮินดู ก็มีการแสดงความเมตตาต่อสัตว์ แต่ก็จำเพาะเจาะจงเป็นรายกรณีไป และมักจะมีช่องทางใดช่องทางหนึ่งที่เปิดช่องให้พอใช้ประโยชน์จากสัตว์ต่างๆได้ เช่น หากกินเนื้อวัวไม่ได้ เราก็กินนมวัวได้\nจะเห็นได้ว่าการที่มนุษย์ตกลงปลงใจไปกับ Agricultural Deal นี้เอง ทำให้มนุษย์เชื่อว่า มี cosmic force ที่ให้พลังแก่มนุษย์ในการมีอำนาจเหนือสัตว์ต่างๆ โดยมีเงื่อนไขที่ต้องยอมรับต่างกันไปในแต่ละศาสนา\nในขณะที่ Hunter Gatherer ต้องสนใจความรู้สึกว่ากวางตัวนั้นคิดอะไรอยู่ สิ่งโตตัวนั้นกำลังคิดอะไรอยู่ เพราะมันเกี่ยวข้องกับความอยู่รอดโดยตรง\nAgriculture Revolution ได้แยกมนุษย์ ให้มีลำดับชั้นเหนือกว่าสัตว์อื่นๆ\nAgriculture revolution จึงเป็นทั้ง economic และ religious revolution\nมันทำให้ เกิดระบบเศรษฐกิจ เกิดลำดับขั้นของมนุษย์แบบใหม่ๆ และเกิดศาสนาแบบใหม่ ที่ยอมให้มนุษย์เอาเปรียบสัตว์ตัวอื่นๆได้\nที่น่าสนใจคือ กระบวนการลดคุณค่าความสำคัญ ( Degrade) สัตว์ชนิดอื่นๆ จากเป็นเพื่อนร่วมโลก จนกลายเป็นสมบัติของมนุษย์นั้น ก็ไม่ได้หยุดแค่สัตว์ร่วมโลก ท้ายสุดมันก็วกมาทำร้ายมนุษย์ด้วยกันเอง ดังที่เราเห็นตั้งแต่สมัยโบราณ ที่มีทั้งการค้าทาส การค้ามนุษย์ การแบ่งวรรณะ การเหยียดผิว เป็นต้น\nFive Hundred Year of Solitude Animism : เมื่อนายพรานโบราณออกล่าสัตว์ เขาขอความช่วยเหลือจากวัวป่า และวัวป่าก็ขอบางอย่างเป็นสิ่งตอบแทน\nAgricultural Revolution :เมิ่อชาวนาโบราณขอให้วัวของเขาผลิตนมเยอะๆ เขาขอพรพระเจ้า พระเจ้าก็ขอสิ่งตอบแทน\nScientific Revolution: เมื่อนักวิทยาศาสตร์ ของ Nestle’ ต้องการเพิ่มผลผลิตนมวัว พวกเขาศึกษาGene และ Gene ไม่ต้องอะไรตอบแทน!\nถ้า Agricultural Revolution นำมาซึ่งศาสนาแห่งเทพเจ้า (Theism)\nScientific Revolution ก็นำมาซึ่ง ศาสนาแห่งมนุษย์ (Humanist religion/ Humanism)\nมนุษย์ขึ้นมาแทนที่ตำแหน่งพระเจ้า และบูชาความรู้สึก ตัวตนของมนุษย์ด้วยกัน และนั่นหมายถึงว่า สัตว์ต่างๆ ก็ยิ่งมีสำคัญน้อยลงไปอีก\nแต่ผิดคาด…ในช่วงไม่กี่ปีที่ผ่านมา มนุษย์เริ่มแสดงความเห็นแกเห็นใจสิ่งมีชิวิตร่วมโลกมากขึ้น เหตุผล? หรือว่ามนุษย์กลัวจะกลายเป็น Lower life form ไปด้วย?\nปัญหาคือ แล้วอะไรหละ ที่ทำให้มนุษย์ มีคุณค่ากว่าสัตว์ ?\n…เพราะเราฉลาดกว่างั้นหรือ?\nถ้าหาก Computer program พัฒนาจนถึงขั้นมี Superhuman intelligence จนมันเลียนแบบสมองมนุษย์ได้ และมันฉลาดกว่าเรา\n…มันจะมีค่ากว่าเราหรือไม่?\nจะโอเคมั้ยถ้า AI ใช้ประโยชน์คนแบบทิ้งๆขว้างๆ หรือฆ่าคนได้เมื่อมันต้องการ เหมือนที่เราทำกับ หมู เห็ด เป็ด ไก่?\nถ้ามันไม่โอเค มันไม่ควรเกิดขึ้น AI ไม่มีสิทธิ์หรือความชอบธรรมมาทำร้ายเรา แม้มันจะเก่งกว่า ฉลาดกว่ามนุษย์สักแค่ไหน …\nก็จะพาเราสู่คำถามสำคัญ ที่ต้องย้อนกลับไปตั้งแต่ต้น นั่นคือ มนุษย์มีความชอบธรรมอะไรที่จะไปทรมานสัตว์อื่นๆ หรือ ฆ่าสัตว์ตัวอื่นๆได้หละ?\nหรือเพราะมนุษย์มี ประกายเวทมนตร์วิเศษ (Magical Spark) อะไรบางอย่าง ที่ทำให้เผ่าพันธุ์นี้เหนือกว่า และ แยกออกมาได้จาก หมู ไก่ ชิมแปนซี หรือแม้แต่ Super AI\nถ้าใช่ … Spark ที่ว่านั้นมาจากไหน แล้วทำไม AI จะไม่สามารถพัฒนามันได้เหมือนเราหละ\nอะไรกันแน่ที่ทำให้มนุษย์ฉลาด และมีอำนาจจนมาถึงจุดนี้ได้?\nคำถามนี้สำคัญ เพราะมันจะช่วยตอบว่า ถ้าในอนาคต มีสิ่งใดสิ่งหนึ่ง (Entity) ที่เหนือกว่า Sapiens และเอาชนะเราได้ อนาคตของ Sapiens จะกลายเป็นอย่างไร? และช่วยตอบว่า จะมี Entity ใด สามารถเอาชนะเราในอนาคตได้หรือไม่?\n Source : www.theobservingmind.co\n ","date":1588978800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588978800,"objectID":"84cb4155ef5c6d89fc2056a807a51bf4","permalink":"https://example.com/book/deus/review-1/","publishdate":"2020-05-09T00:00:00+01:00","relpermalink":"/book/deus/review-1/","section":"book","summary":"ผู้เขียน : Yuval Noah Harari สำนักพิมพ์ : Vintage จำนวนหน้า : 513 หน้า Genre : Social Science ISBN : 1784703931 พิมพ์ครั้งแรก : March 2015\n Key Messages Homo Deus: When Men Play God จะเกิดอะไรขึ้น หาก Homo Sapiens (“Knowing Man”) คิดจะอัพเกรดตน กลายเป็น Homo Deus (“God Man”)\nหนังสือ Homo Deus: A Brief History of Tomorrow (หรือชื่อเล่มฉบับแปลไทย โฮโมดีอุส: ประวัติย่อของวันพรุ่งนี้) คือภาคต่อของ Sapiens ซึ่งยังคงความยอดเยี่ยมในการนำข้อมูลจากประวัติศาสตร์ และปัจจุบัน มาผสานรวมกับมุมมองของผู้เขียน ออกมาเป็นหนังสือที่เล่าเรื่องราวของมนุษย์ และตั้งคำถามต่อสิ่งต่างๆ ได้อย่างแหลมคม ชวนคิด และน่าทึ่ง\nHomo Deus บอกเล่าเรื่องราวต่อจากหนังสือ Sapiens ที่ Harari ได้อธิบายว่า ทำไมสิ่งมีชีวิตที่ไม่ได้มีความสลักสำคัญใดๆกับโลก จึงสามารถขึ้นมาเป็น “The only Dominant Species”ของโลกใบนี้ได้ โดยใช้เวลาเพียงแค่ 75,000 ปี","tags":null,"title":"(Review-01) Homo Deus – A Brief History of Tomorrow","type":"docs"},{"authors":null,"categories":null,"content":"  “You could never convince a monkey to give you a banana by promising him limitless bananas after death in monkey heaven.”\n 13.5 พันล้านปีก่อน เหตุการณ์ระเบิดครั้งใหญ่ (Big Bang) ได้ก่อกำเนิดองค์ประกอบที่สำคัญของจักรวาลทั้ง สสาร พลังงาน เวลาและห้วงอวกาศ 3.8 พันล้านปีก่อน สิ่งมีชีวิตก็ได้เริ่มถือกำเนิดขึ้นในดาวดวงหนึ่งในระบบสุริยะที่มีชื่อว่า “โลก” 2.5 ล้านปีก่อน สิ่งมีชีวิตที่มีความคล้ายคลึงกับ “มนุษย์” สายพันธุ์ในปัจจุบันก็ได้ถือกำเนิดขึ้น 10,000 ปีก่อน Homo Sapiens คือ มนุษย์สายพันธุ์เดียวที่ยังคงเหลือรอดอยู่ในโลก    Sapiens : A Brief History of Humankind นำเสนอเรื่องราวประวัติศาสตร์ของมนุษยชาติผ่านการปฏิวัติที่สำคัญ 3 ครั้ง ได้แก่ การปฏิวัติทางความตระหนักรู้ที่ส่งเสริมให้มนุษย์กลายเป็นสัตว์สังคมที่มีสติปัญญามากกว่าสิ่งมีชีวิตทุกชนิดบนโลก การปฏิวัติทางการเกษตรกรรมที่ส่งผลให้เกิดการเปลี่ยนแปลงโครงสร้างทางสังคมมนุษย์จากป่าสู่เมืองและการปฏิวัติทางวิทยาศาสตร์ที่เป็นจุดเริ่มต้นของการพัฒนาการแบบก้าวกระโดดของมนุษยชาติในปัจจุบัน\nPart One – The Cognitive Revolution Chapter 1 : An Animal of No Significance Homo Sapiens คือชื่อทางวิทยาศาตร์ที่ประกอบด้วย 2 องค์ประกอบ ได้แก่ genus (สกุล) ชื่อ Homo ที่แปลว่า “มนุษย์” และ species (ชนิด) ชื่อ Sapiens ที่มีความหมายว่า “ฉลาด” และ Homo Sapiens นั้นถือเป็นสิ่งมีชีวิตใน Family (วงศ์) กลุ่ม the great ape ซึ่งเป็นตระกูลด้วยกับลิงชิมแปนซี กอริลล่าและลิงอุรังอุตัง\nมนุษย์ (Human) มีความหมายว่า “สิ่งมีชีวิตในสกุล Homo” นั้นไม่ได้มีเพียงแค่ Sapiens ชนิดเดียว เมื่อ 2.5 ล้านปีก่อน วานรสามารถวิวัฒนาการกลายมาเป็นมนุษย์ได้สำเร็จในทวีปแอฟริกาตะวันออก ซึ่งต่อมา “มนุษย์” เหล่านั้นก็ได้เริ่มเดินทางออกไปตั้งถิ่นฐานตามทวีปต่างๆซึ่งมีภูมิอากาศที่แตกต่างกันไปจนส่งผลให้เกิดการวิวัฒนาการสายพันธุ์ของมนุษย์ที่เหมาะสมกับภูมิอากาศนั้นๆ เช่น Homo Neanderthalensis หรือ “Neanderthals” ที่มีร่างกายที่ใหญ่โตแข็งแรงสำหรับการอยู่อาศัยในภูมิอากาศหนาวอย่างทวีปยุโรปและเอเชียตะวันตก ตลอดระยะเวลาหลายล้านปีจนกระทั่งถึงประมาณเมื่อ 10,000 ปีก่อน โลกไม่ได้มีมนุษย์เพียงแค่สายพันธุ์เดียวเหมือนในปัจจุบันนี้ที่มีเพียง Homo Sapiens เท่านั้นที่ยังคงเหลือรอดอยู่และเกือบตลอดระยะเวลาการดำรงอยู่ มนุษย์เป็นเพียง “สิ่งมีชีวิตธรรมดา” ที่ไม่ได้ส่งผลกระทบอะไรต่อสิ่งแวดล้อมอย่างมีนัยสำคัญ\nHomo (มนุษย์) หลากหลายสปีชี่ส์นั้นมีหลายองค์ประกอบที่เหมือนกัน อาทิ สมองขนาดใหญ่ (ที่ช่วยเสริมสร้างความคิดที่ซับซ้อนมากขึ้นแต่ขณะเดียวกันก็กินพลังงานมากกว่าสัตว์ชนิดอื่น) การยืนบนสองขาที่ช่วยปลดปล่อย “มือ” สำหรับใช้ทำกิจกรรมอื่นๆได้ (แต่ก็ทำให้โครงสร้างร่างกายมีจุดบกพร่องโดยเฉพาะเพศหญิงที่ต้องให้กำเนิดลูกเร็วขึ้นอันเป็นเหตุให้ลูกของมนุษย์ต้องได้รับการเลี้ยงดูอีกหลายปีกว่าจะเริ่มพึ่งพาตัวเองได้) และการอยู่ร่วมกันเป็นสัตว์สังคม แต่กระนั้น เกือบตลอดระยะเวลา 2 ล้านปี มนุษย์กลับกลายเป็นเพียงสิ่งมีชีวิตระดับกลางในห่วงโซ่อาหาร พวกเขาไม่มีกำลังมากพอที่จะต่อสู้กับนักล่าชั้นสูงได้และนักโบราณคดีเชื่อว่ามนุษย์ริเริ่มใช้หินครั้งแรกสำหรับการกระแทกกระดูกเพื่อกินไขสันหลังจากซากสัตว์\nหนึ่งในปัจจัยสำคัญที่ผลักดันพัฒนาการของมนุษย์ก็คือ “ไฟ” ที่มนุษย์หลากสปีชี่ส์เริ่มนำมาใช้งานตั้งแต่ประมาณ 800,000 ปีก่อน ไฟช่วยให้มนุษย์สร้าง “พลังงาน” ของตัวเองได้ ทั้งการให้แสงสว่าง ความอบอุ่น การเป็นอาวุธและการ “ปรุงอาหาร” ให้สุก ซึ่งการรับประทานอาหารที่สุกแล้วนั้นส่งผลให้ลำไส้ของมนุษย์วิวัฒนาการหดสั้นลง (อาหารใช้เวลาในการย่อยน้อยลง) ซึ่งเป็นเสมือนการเพิ่มช่องว่างให้สมองที่ใช้พลังงานสูงขยายใหญ่ขึ้น\nHomo Sapiens ที่มีรูปร่างหน้าตาเหมือนกับมนุษย์ในปัจจุบันถือกำเนิดขึ้นประมาณ 150,000 ปีก่อนในแถบทวีปแอฟริกาตะวันออก และตั้งแต่ประมาณ 70,000 ปีก่อน Homo Sapiens ได้เริ่มขยายอาณาเขตเข้าไปยังพื้นที่ส่วนต่างๆของโลก เริ่มต้นที่ตะวันออกกลาง ยุโรป เอเชีย ออสเตรเลียและอเมริกา และภายในเวลา 60,000 ปี มนุษย์สายพันธุ์อื่นก็สูญพันธุ์ไปจากโลกทั้งหมด\nทฤษฎีสำคัญที่อธิบายถึงการสิ้นสุดลงของมนุษย์สายพันธุ์อื่น แบ่งอออกเป็น 2 ทิศทาง ได้แก่ Interbreeding Theory ที่ว่าด้วยการผสมข้ามสายพันธุ์ของมนุษย์เจ้าถิ่นกับ Homo Sapiens ที่อาจสามารถอธิบายความแตกต่างของสีผิวของชาติพันธุ์ต่างๆของมนุษย์ในปัจจุบันได้ (หลักฐานทางวิทยาศาสตร์ตรวจพบ DNA ของมนุษย์สายพันธุ์อื่นในปริมาณเล็กน้อยที่แตกต่างกันไปตามแต่ละท้องถิ่น) และ Replacement Theory ที่ว่าด้วยการเข้ามา “แทนที่” ของ Homo Sapiens ที่มีสติปัญญาและทักษะการอยู่รวมกันเป็นกลุ่มใหญ่มากกว่ามนุษย์สายพันธุ์อื่น (ซึ่งมีความเป็นไปได้สูงมากหากเทียบกับความรุนแรงและความขัดแย้งของมนุษย์ต่างชาติพันธุ์ในปัจจุบัน)\nลองคิดดูว่าถ้าโลกในปัจจุบันนั้นมีมนุษย์หลากหลายสายพันธุ์อาศัยอยู่ ความปั่นป่วนวุ่นวายจะเกิดขึ้นมากน้อยแค่ไหน\nHuman หลากหลายสายพันธ์ุ (ขอบคุณภาพจาก Encyclopedia Britannica)\nChapter 2 : The Tree of Knowledge ปัจจัยที่ส่งผลให้ Homo Sapiens เริ่มเดินทางออกจากแอฟริกาและสามารถแย่งอาณาเขตของมนุษย์สปีชี่ส์อื่นเมื่อ 70,000 ปีก่อนนั้นก็คือ “การปฏิวัติทางการตระหนักรู้” (cognitive revolution) ที่ส่งผลให้ Sapiens มีความคิดที่ซับซ้อนเหมือนกับมนุษย์ปัจจุบันและยังก่อกำเนิด “ภาษา” ที่ซับซ้อนสำหรับการสื่อสารที่มีประสิทธิภาพมากยิ่งขึ้นด้วย (นักโบราณคดีเชื่อว่าแรกเริ่มนั้นภาษานั้นเกิดขึ้นเพื่อให้มนุษย์ gossip กันได้สะดวกมากขึ้น อาจฟังดูตลก แต่การนินทาชาวบ้านถือเป็นการสร้างความสัมพันธ์ที่แน่นแฟ้นระหว่างมนุษย์กลุ่มใหญ่ได้อย่างดีเลยทีเดียว)\nความพิเศษอย่างหนึ่งของ Sapiens ก็คือการใช้ภาษาในการบอกเล่าถึง “เรื่องแต่งที่พัฒนากลายมาเป็นความเชื่อ” หรือ imagined reality อาทิ ตำนาน เทพเจ้า ภูติผีปีศาจ หลักมนุษยธรรม กฎหมายหรือแม้กระทั่งการมีอยู่ขององค์กรขนาดใหญ่และประเทศชาติ อันส่งผลให้ Sapiens สามารถอยู่อาศัยและทำกิจกรรมร่วมกันเป็นกลุ่มใหญ่ที่มีความเชื่อเดียวกันได้ (นักวิจัยเชื่อว่าหากไม่มีความเชื่อ สิ่งมีชีวิตต่างๆจะไม่สามารถอยู่รวมกันเป็นกลุ่มที่มีขนาดเกิน 150 คนได้) อาทิ การต้อนฝูงสัตว์ไปยังบริเวณช่องแคบเพื่อการล่าที่มีประสิทธิภาพสูง\nImagined reality ทำให้ Sapiens สามารถ “วิวัฒนาการ” ทางความคิดได้โดยไม่ต้องอาศัยการวิวัฒนาการของยีนส์อีกต่อไปและนั่นคือจุดเริ่มต้นของการ “ก้าวกระโดด” ครั้งใหญ่ของมนุษยชาติ\nAnimism หรือ ลัทธิที่เชื่อว่าทุกสิ่งรอบกายมนุษย์ล้วนมีชีวิต (ขอบคุณภาพจาก Haiku Deck)\nChapter 3 : A Day in Life of Adam and Eve เกือบทั้งหมดของการดำรงอยู่ของเผ่าพันธุ์ วิถีชีวิตของ Sapiens คือการเป็นนักล่าและนักหาของป่า (นักวิทยาศาสตร์เชื่อว่าสัญชาตญาณของมนุษย์ในปัจจุบันได้รับอิทธิพลจากมนุษย์ในยุคนั้นแบบเต็มๆ) และสิ่งหนึ่งที่เป็นเอกลักษณ์ของมนุษย์ในยุคนี้คือ “ความแตกต่าง” ระหว่างเผ่าพันธุ์ ทั้ง ศาสนา ความเชื่อและระบบการปกครอง\nชีวิตความเป็นอยู่ของ Sapiens ในยุคล่าสัตว์นั้นอาจเรียกได้ว่า “สมบูรณ์” กว่ามนุษย์โดยเฉลี่ยในปัจจุบันก็ว่าได้ อาทิ เวลาทำงานออกหาของป่าเพียงไม่กี่ชั่วโมงต่อวัน สุขภาพร่างกายที่แข็งแรงกว่าจากการกินเนื้อสัตว์กับผลไม้ที่มีความหลากหลาย รวมไปถึงการมีองค์ความรู้และประสาทสัมผัสสำหรับการอยู่รอดที่เหนือกว่ามนุษย์ปัจจุบันมาก\nแต่เอาจริงๆแล้ว หลักฐานทางโบราณคดีในปัจจุบันก็ยังไม่สามารถบอกได้อย่างชัดเจนถึง “พฤติกรรม” ของ Sapiens ในยุคก่อนการปฏิวัติทางเกษตรกรรม พวกเรารู้เพียงแค่ว่า “การกระทำ” ของพวกเขานั้น “สำคัญ” และส่งผลถึงโลกของเราในปัจจุบัน\nChapter 4 : The Flood เหตุการณ์ที่แสดงถึงพลังอำนาจอันมหาศาลของ Sapiens ที่มีผลต่อสิ่งมีชีวิตชนิดอื่นก็คือ การเดินทางข้ามมหาสมุทรจากถิ่นที่อยู่ในแถบแอฟริกา-เอเชียไปยัง “ออสเตรเลีย” เมื่อ 45,000 ปีก่อนทางเรือ เหตุการณ์นี้คือ “การรบกวนครั้งแรก” ของระบบนิเวศน์ในเกาะแบบปิดอันเต็มไปด้วยสัตว์เลี้ยงลูกด้วยนมชนิด marsupials (สัตว์ที่มีถุงหน้าท้องสำหรับเลี้ยงลูกที่คลอดในระยะเวลาสั้น ex. จิงโจ้ โคอาล่า) ในรอบหลายล้านปี ซึ่งส่งผลให้เกิดการสูญพันธุ์ของสัตว์จำนวนมากอย่างรวดเร็วโดยเฉพาะสัตว์ขนาดใหญ่ (megafauna)\nต่อมาเมื่อ 16,000 ปีก่อน Sapiens จากทวีปเอเชียก็ได้ออกเดินทางด้วยเท้าท่ามกลางความเหน็บหนาวของไซบีเรียเข้าไปยังทวีปอเมริกาที่เชื่อมต่อกันด้วยน้ำแข็ง (เหตุผลของการเดินทางไปยังชั้วโลกนั้นน่าจะเพื่อล่า “แมมมอธ” และสัตว์ขนาดใหญ่ที่ให้ทั้งเนื้อที่สามารถแช่แข็งเก็บไว้ได้ หนังขนาดใหญ่และงาช้าง) และภายใน 6,000 ปี Sapiens ก็สามารถครอบครองพื้นที่ทั่วทั้งทวีปอเมริกาเหนือและใต้ได้สำเร็จ และแน่นอนว่าไม่กี่พันปีหลังจากการตั้งถิ่นฐาน สัตว์ขนาดใหญ่ อาทิ แมมมอธ สลอธยักษ์และเสือเขี้ยวดาบต่างก็ได้สูญพันธุ์ไปในเวลาไม่นาน\nและอีกไม่นาน การ “สูญพันธุ์” ครั้งใหม่ก็จะถือกำเนิดขึ้นอีกครั้งโดยฝีมือของมนุษย์ในปัจจุบัน หากพวกเรายังคงมุ่งหน้าทำลายล้างสิ่งแวดล้อมในอัตราที่เป็นอยู่\nเส้นทางการอพยพของ Homo Sapiens (ขอบคุณภาพจาก Wikimedia Commons)\nPart Two – The Agricultural Revolution Chapter 5 : History’s Biggest Fraud ประมาณ 12,000 ปีก่อน Sapiens ในแถบตะวันออกกลาง จีนและอเมริกากลางเป็นกลุ่มแรกที่ริเริ่ม “การปฏิวัติทางเกษตรกรรม” ด้วยการเริ่มปลูกพืชพันธุ์และนำสัตว์ป่ามาเป็นสัตว์เลี้ยง เหตุผลที่มนุษย์ในพื้นที่เหล่านี้สามารถคิดค้นการเกษตรกรรมได้ก่อนนั้นมีความเป็นไปได้ที่จะเกิดขึ้นจากลักษณะของพืชและสัตว์ในท้องถิ่นที่สามารถนำมาให้ “เชื่อง” ได้ (คงไม่มีใครทำฟาร์มช้างแมมมอธได้ในสมัยนั้น) กว่า 90% ของวัตถุดิบที่มนุษย์รับประทานเป็นอาหารในปัจจุบันนั้นได้รับการสืบทอดมาตั้งแต่ช่วงปี 9500 BC ถึง 3500 BC\nการปฏิวัติทางเกษตรกรรมนั้นเป็นปัจจัยหลักของความก้าวหน้าไปอีกขั้นของ Sapiens ผ่านการเพิ่มขึ้นของผลผลิตทางอาหารของมนุษย์ซึ่งส่งอิทธิพลให้จำนวนประชากรของมนุษย์เพิ่มสูงขึ้นอย่างรวดเร็ว (ซึ่งย้อนกลับมาทำให้ผลผลิตทางการเกษตรไม่เพียงพอต่อความต้องการซักที) แต่ถึงกระนั้น ในยุคสมัยแรกเริ่ม Sapiens ต่างหากที่เป็นฝ่าย “ถูกทำให้เชื่อง” เสียเอง ทั้งจากการที่ต้องทุ่มเทเวลาและแรงกายไปกับการเพาะปลูกข้าวสาลีหรือมันฝรั่งตั้งแต่เช้าจดเย็น ปัญหาความขาดแคลนอาหารจากภัยแร้งและโรคระบาด และการต่อสู้ระหว่างเผ่าพันธุ์ที่เข้มข้นมากขึ้น (เพราะย้ายหนีจากฟาร์มของตัวเองไม่ได้แล้ว)\nแล้วทำไม Sapiens ถึงเลือกที่จะก้าวเข้าสู่ยุคที่พวกเขา “ลำบาก” กว่าเดิม คำตอบก็คือ การเกษตรกรรมคือ “กับดัก” ที่ค่อยๆเปลี่ยนแปลงพฤติกรรมมนุษย์ในหลายช่วงอายุคน ตั้งแต่เริ่มเพาะปลูกแบบชั่วคราว จนกระทั่งมนุษย์หันมาตั้งถิ่นฐานถาวรแทน การเปลี่ยนแปลงนั้นใช้เวลายาวนานมากจนมนุษย์ไม่สามารถนึกย้อนกลับไปถึงตอนที่พวกเขาออกล่าสัตว์ได้อีกแล้ว และเมื่อประชากรมนุษย์มีจำนวนเพิ่มมากขึ้น มนุษย์กลุ่มที่ทำการเกษตรก็สามารถขับไล่กลุ่มที่ยังคงออกล่าสัตว์ได้อย่างง่ายดาย มนุษย์กลุ่มที่เหลือก็จะถูกบังคับให้เปลี่ยนพฤติกรรมมาทำการเกษตรไปโดยปริยาย\nและผลลัพธ์ที่ตามมาก็คือการเพิ่มจำนวนขึ้นของ “ผู้เคราะห์ร้าย” อย่าง ไก่ หมู วัวและแกะ ที่ถึงแม้จะมีจำนวนเพิ่มขึ้นอย่างรวดเร็วด้วยผลพวงของการเกษตร คุณภาพชีวิตของสิ่งมีชีวิตเหล่านี้กลับเข้าขั้นเลวร้ายที่สุด\nChapter 6 : Building Pyramids Sapiens ในยุคเกษตรกรรมเริ่มขยายจำนวนประชากรอย่างรวดเร็ว พร้อม ๆ กับการเริ่มเกิดขึ้นของชุมชนขนาดใหญ่ที่ขยายขอบเขตกว้างไกลขึ้นเรื่อย ๆ จนเป็นที่มาของมหาอำนาจอย่าง อาณาจักรอียิปต์แห่งลุ่มแม่น้ำไนล์ ราชวงศ์ฉินผู้รวมชาติจีนและอาณาจักรโรมันแห่งเมดิเตอร์เรเนียน\nผลที่ตามมาของการเพิ่มจำนวนประชากรในสังคมมนุษย์อย่างรวดเร็วก็คือ การเกิดขึ้นของ “ระเบียบการปกครอง” ซึ่งทำหน้าที่กำหนดโครงสร้าง กฎระเบียบและค่านิยมของสังคมมนุษย์ที่มีขนาดใหญ่มากขึ้นกว่าสมัยก่อนมาก ถึงแม้ระเบียบต่างๆนี้จะเป็นสิ่งที่มนุษย์สร้างขึ้นมาเองทั้งนั้น (imagined order) ไม่ว่าจะเป็น “พระเจ้ามีอยู่จริง” “ทำชั่วจะตกนรก” “ฆ่าคนตายต้องได้รับโทษประหาร” หรือ “มนุษย์ทุกคนเกิดมาเท่าเทียมกัน” แต่พวกเราต่างก็เชื่อมั่นในระบบเหล่านี้ และความเชื่อที่เกิดขึ้นจากคนส่วนใหญ่ในสังคมนี้เองที่ช่วยให้พวกเราอาศัยอยู่ร่วมกันได้อย่างมีประสิทธิภาพ\nVoltaire กล่าวไว้ว่า “There is no God, but don’t tell that to my servant, lest he murder me at night.” การจะสร้างสังคมที่แข็งแรงจากความเชื่อที่ถูกสร้างขึ้นมาโดยมนุษย์นั้นนอกจากอาศัยการใช้กฎหมายและกำลังแล้ว กลุ่มชนชั้นปกครองส่วนใหญ่ต้องมีความเชื่อที่แท้จริงต่อระบบด้วย (ระบบการเงินโลกจะพังภายในวันเดียวถ้าหากนักลงทุนหมดความเชื่อมั่นในระบบทุนนิยม)\nกฎข้อแรกของการสร้างความเชื่อก็คือ ต้องไม่ยอมรับว่าความเชื่อนั้นถูกสร้างขึ้นโดย “มนุษย์” เหมือนที่คำประกาศอิสรภาพของอเมริกากล่าวถึงการสร้างความเท่าเทียมกันของมนุษย์โดย “พระเจ้า” และเมื่อความเชื่อเหล่านั้นได้รับการ “สั่งสอน” และ “หลอมรวม” เข้ากับกิจวัตรประจำวันของมนุษย์อย่างสมบูรณ์ การถอดถอนความเชื่อเหล่านั้นออกจากสังคมนั้นๆก็แทบจะเป็นไปไม่ได้เลย\nChapter 7 : Memory Overload สัตว์สังคมที่อาศัยอยู่รวมกันเป็นกลุ่มใหญ่อย่าง “ผึ้ง” นั้นมีพฤติกรรมร่วมกันที่ถูกกำหนดไว้โดย DNA อย่างชัดเจน อาทิ ผึ้งนางพญาทำหน้าที่ออกไข่และผึ้งงานทำหน้าที่ออกหาน้ำหวาน แต่สำหรับเหล่า Sapiens นั้น พฤติกรรมส่วนใหญ่เกิดขึ้นจาก “ความเชื่อ” ที่ถูกสร้างขึ้นเองโดยฝีมือมนุษย์และถูกกักเก็บไว้ใน “สมอง” ของมนุษย์แต่ละคน\nและข้อจำกัดของความทรงจำภายในสมองนี้เองที่ทำให้มนุษย์ไม่สามารถอยู่ร่วมกันเป็นกลุ่มขนาดใหญ่ได้ จนกระทั่งมนุษย์ชาว Sumerians แห่งเมโสโปเตเมียได้คิดค้น “การเขียน” ขึ้น โดยภาษาเขียนในช่วงแรกเริ่มนั้นมีหน้าที่หลักๆในการบันทึกบัญชีแลกเปลี่ยนซื้อขายระหว่างชาวเมืองแต่ละคน ซึ่งต่อมาไม่นาน ภาษาเขียนก็ได้พัฒนาให้สามารถใช้งานได้เหมือนกับภาษาพูดในรูปของตัวอักษร “รูปลิ่ม” หรือ Cuneiform ในช่วงประมาณปี 3000 BC\nและหลังจากนั้นมนุษย์ก็ได้พัฒนาภาษาที่มีความหลากหลายแตกต่างกันไปตามท้องถิ่น พร้อมๆกับการเกิดขึ้นของภาษาเฉพาะทาง (partial script) อย่าง ภาษาทางคณิตศาสตร์และภาษาคอมพิวเตอร์\nอักษร Cuneiform (ขอบคุณภาพจาก British Museum)\nChapter 8 : There is No Justice in History\nการจินตนาการ “ความเชื่อ” และการคิดค้น “ภาษา” สำหรับการสื่อสารนั้นเป็นจุดกำเนิดของการก่อสร้าง “อาณาจักร” ที่สามารถรวบรวมประชากรมนุษย์นับล้านคนเข้าไว้ด้วยกันอย่างสงบสุขได้ แต่สิ่งที่มนุษยชาติต้องสูญเสียไปเพื่อแลกกับพัฒนาการครั้งสำคัญนี้ก็คือ “ความเท่าเทียม” ของมนุษย์แต่ละคน\nสังคมขนาดใหญ่ของมนุษย์ตั้งแต่สมัยอดีตจนถึงปัจจุบันนั้นล้วนเต็มไปด้วยการแบ่งแยก “ชนชั้น” ระหว่างกันอาทิ ชนชั้นสูงกับไพร่ เจ้านายกับทาส คนผิวขาวกับคนผิวสี คนรวยกับคนจน ระบบวรรณะในอินเดีย หรือแม้กระทั่งผู้ชายกับผู้หญิง (การมีพลังอำนาจที่เหนือกว่าของ “เพศชาย” นั้นเป็นปัญหาที่สามารถพบได้ทั่วโลกแม้กระทั่งในยุคปัจจุบัน โดยที่ยังไม่มีทฤษฎีทางชีววิทยาไหนเลยที่สามารถอธิบายความไม่เท่าเทียมกันทางเพศได้)\nปัญหาความขัดแย้งของมนุษย์นั้นยังคงฝังรากลึกอยู่ในโลกปัจจุบันเพราะ “วงจร” ของโครงสร้างทางสังคมที่คอยซ้ำเติมชนกลุ่มน้อยอย่างไม่มีวันจบสิ้นหากไม่ได้รับการเปลี่ยนแปลง อาทิ การกีดกันการเข้าถึงการศึกษาและการสร้างค่านิยมว่าคนผิวสีมีสติปัญญาและความทะเยอทะยานที่ต่ำกว่าคนผิวขาวในสหรัฐอเมริกาอันเป็นผลให้เกิดการแบ่งแยกสีผิวอย่างรุนแรงนานนับร้อยปีหลังการประกาศยกเลิกระบบทาสในยุคของประธานาธิบดี Lincoln\nซึ่งปัญหาทั้งหมดนี้เกิดขึ้นทั้งๆที่ในทางชีววิทยานั้นพิสูจน์ไว้อย่างชัดเจนแล้วว่ามนุษย์ทุกคนนั้นมีโครงสร้างทางพันธุกรรมที่มีความเท่าเทียมกัน “ธรรมชาติ” นั้นเปิดโอกาสให้มนุษย์ทำสิ่งที่ตัวเองต้องการได้สุดตามความสามารถ มีเพียงแค่ “วัฒนธรรม” ที่มนุษย์สร้างขึ้นมาเองนั้นแหละที่คอยทำหน้าที่ห้ามปรามพวกเราไม่ให้ทำสิ่งเหล่านั้น\nPart Three – The Unification of Humankind Chapter 9 : The Arrow of History Sapiens ได้สร้าง “สัญชาตญาณ” ชนิดใหม่ที่เกิดขึ้นจากความเชื่อที่หลอมรวมเข้ากับชีวิตประจำวันของมนุษย์ในสังคมขนาดใหญ่อันแสนซับซ้อนตั้งแต่เกิดจนตายอันมีชื่อว่า “วัฒนธรรม”\nตั้งแต่อดีตจนถึงปัจจุบัน “การเคลื่อนไหว” ของวัฒนธรรมที่มีการเปลี่ยนแปลงอยู่ตลอดเวลานั้นมีแนวโน้มที่ชัดเจนมากก็คือ “การรวมตัวกัน” ของมนุษยชาติ ทั้งด้านการค้าขายกับเศรษฐกิจ ด้านการเมืองกับการปกครองและด้านศาสนากับความเชื่อ\nChapter 10 : The Scent of Money\n“Money is the most successful story ever invented and told by human because it is the only story everybody believes.”\nระบบการแลกเปลี่ยน (barter system) ในยุคล่าสัตว์ของ Sapiens นั้นเกิดขึ้นอยู่อย่างสม่ำเสมอระหว่างชนเผ่ากลุ่มต่างๆ แต่แล้วการเริ่มต้นของชุมชนมนุษย์ขนาดใหญ่ที่ส่งผลให้เกิดการพัฒนางาน “เฉพาะทาง” ของมนุษย์แต่ละคนที่ไม่จำเป็นต้องออกเดินทางไปหาของป่าอีกต่อไปได้ทำให้ระบบ barter trade นั้นไร้ประสิทธิภาพอย่างสิ้นดี (ถ้ามีของทั้งหมด 1,000 ชิ้น มนุษย์จะต้องจำอัตราแลกเปลี่ยนทั้งหมดเกือบๆ 500,000 อัตราส่วน – ถ้าโลกไม่มีเงิน ใครจะไปรู้ว่าการแลกเรือดำน้ำหนึ่งลำด้วยกีวี่ต้องใช้กีวีกี่ผล)\nระบบ “เงิน” เกิดขึ้นจากการปฏิวัติทางความคิดครั้งใหญ่ของมนุษย์ (เงินจะมี “มูลค่า” ก็ต่อเมื่อกลุ่มของมนุษย์ “เชื่อมั่น” ในมูลค่าของเงินร่วมกัน) เพื่อทำหน้าที่เป็นตัวกลางในการแลกเปลี่ยนที่มีประสิทธิภาพสูง สามารถเคลื่อนย้ายได้สะดวก จัดเก็บได้ง่ายและสามารถรักษาความมั่งคั่งของเจ้าของได้เป็นอย่างดี\nเงินในยุคแรกเริ่มนั้นอยู่ในรูปของสินค้าการเกษตรหรือสิ่งของที่แข็งแรง อาทิ ข้าวบาเลย์และเปลือกหอย (cowry shell) ต่อมามนุษย์ก็ได้ริเริ่มการใช้โลหะแวววาวอย่างทองคำและเงินที่มีสัดส่วนคงที่มาหลอมเป็นเหรียญพร้อมตราประทับโดยกษัตริย์ของเมืองต่างๆเพื่อการันตีมูลค่าและสร้างความน่าเชื่อถือให้แก่เจ้าของเงิน ก่อนที่เงินจะได้รับการพัฒนามาเป็นเงินที่ไร้มูลค่าในตัวเอง อย่างธนบัตรและเงินดิจิตอลในปัจจุบัน (เงินกว่า 90% ของโลกถูกจัดเก็บอยู่ในรูปแบบดิจิตอล) นอกจากนั้น เงินในรูปแบบอื่นๆก็ยังสามารถพบเห็นได้ทั่วไป อาทิ บุหรี่ที่เป็นตัวกลางในการแลกเปลี่ยนชั้นดีระหว่างนักโทษในเรือนจำ\nการเกิดขึ้นของเงินนำพามาซึ่งการควบรวมระบบเศรษฐกิจของเมืองต่างๆเข้าหากัน เงินทำให้คนที่ไม่รู้จักกันเลยสามารถ “เชื่อใจ” และแลกเปลี่ยนสิ่งของระหว่างกันได้ และเงินนี่เองก็ได้สร้างภาวะเสพติดให้กับสังคมมนุษย์อันเป็นที่มาของการพยายามทำทุกอย่างเพื่อให้ได้มาซึ่งเงิน อาทิ ขายลูกตัวเองเป็นทาส การประกอบอาชีพมือสังหารรับจ้างหรือแม้กระทั่งการก่อสงคราม\nเหรียญเงินโรมันโบราณ (ขอบคุณภาพจาก Wikipedia)\nChapter 11 : Imperial Visions อาณาจักร (empire) คือปัจจัยสำคัญของการรวมกลุ่มก้อนของมนุษย์ ตั้งแต่สมัยแรกเริ่มของอาณาจักร Akkadian แห่งเมโสโปเตเมียเมื่อ 2250 BC\n“อาณาจักร” มีคุณสมบัติที่สำคัญ 2 ประการ คือ ความสามารถในการ “หลอมรวม” กลุ่มสังคมมนุษย์ที่มีความหลากหลายเข้าด้วยกันและความสามารถในการขยับขยายอาณาเขตได้อย่างไม่จำกัด และอาณาจักรนี้เองคือตัวการสำคัญในการกลืนกินชมเผ่ากลุ่มน้อยใหญ่ต่างๆได้อย่างสมบูรณ์ อาทิ อาณาจักรสเปนที่กลืนกินอาณาจักร Inca ในแถบทวีปอเมริกาใต้และอาณาจักร Aztec ที่ตั้งประเทศแม็กซิโกในปัจจุบันจนแทบไม่เหลือเค้าโครงเดิม (เอาง่ายๆเลยก็คือคนในแถบละตินอเมริกาพูดภาษาสเปนกันหมด)\nถึงแม้ “อาณาจักร” และการล่าอาณานิคมจะถูกตีตราว่าเป็นสิ่งชั่วร้ายในประวัติศาสตร์ของมนุษยชาติ แต่มนุษย์ก็ไม่อาจปฏิเสธ “มรดก” ที่ตัวร้ายเหล่านี้คงเหลือไว้ให้อย่างระบบเศรษฐกิจและการปกครองที่มีประสิทธิภาพ รวมถึงการพัฒนาคุณภาพชีวิตและความเจริญรุ่งเรืองของ “อดีตผู้เคราะห์ร้าย” ทั้งหลาย (หลังอินเดียได้อิสรภาพจากอังกฤษ พวกเขาได้เปลี่ยนชื่อเมือง Bombay เป็น Mumbai แต่กลับเลือกที่จะไม่ทำลายโครงสร้างพื้นฐานต่างๆที่ศัตรูของเขาเป็นคนสร้างให้และพวกเขาก็ยังคงเล่นคริกเก็ทกีฬายอดนิยมของเมืองผู้ดีต่อไป)\nChapter 12 : The Law of Religion ณ กรุง Mecca มหานครอันศักดิ์สิทธิ์ของชาวอิสลามตั้งแต่เมื่อ 700 ปีก่อน การพบเห็นมนุษย์หลากหลายเชื้อชาติ ทั้ง อาหรับ เอเชียและแอฟริกัน นั้นถือเป็นเรื่องปกติ เพราะสิ่งที่ชักจูงให้มารวมตัวกันอย่างไม่ได้นัดหมายนั้นไม่ใช่ฐานะทางเศรษฐกิจหรือชาติกำเนิด แต่กลับเป็นสิ่งที่มีพลังอำนาจมหาศาลที่มนุษย์สร้างขึ้นมาได้สำเร็จอย่าง “ศาสนา”\nศาสนาคืออีกหนึ่งปัจจัยสำคัญที่มีอิทธิพลต่อการหลอมรวมกันของมนุษยชาติพร้อมๆกับการสร้างเสถียรภาพทางการปกครองผ่านความเชื่อที่ว่า “กฎเกณฑ์ทางสังคมนั้นถือกำเนิดขึ้นโดนสิ่งที่อยู่เหนือมนุษย์”\nนักประวัติศาสตร์เชื่อว่าการปฏิวัติทางเกษตรกรรมนั้นเป็นตัวจุดประกายให้มนุษย์เปลี่ยนแปลงความเชื่อจากเดิมที่เชื่อถึงการมีชีวิตของสิ่งต่างๆ (animist) ไปเป็นการมีอยู่ของ “พระเจ้า” ผู้ที่สามารถกำหนดชะตาชีวิตของพวกเขาได้ (หากเกิดภัยแล้ง มนุษย์ไม่มีทางเลือกใดๆนอกจากการขอพรพระเจ้า)\nศาสนาในยุคแรกเริ่มนั้นส่วนใหญ่จะเกี่ยวพันกับเทพเจ้าหลากหลายองค์ (polytheism) อาทิ เทพโรมันและกรีก ซึ่งส่งผลให้การควบรวมอาณาจักรพร้อมๆกับความเชื่อนั้นเป็นสิ่งที่เป็นไปได้ไม่ยากนัก (ประชาชนก็แค่ยอมรับว่าพวกเขามีเทพเจ้าองค์ใหม่ๆมาให้บูชา) ส่วนในเวลาต่อมา ศาสนาที่เชื่อมั่นใน “พระเจ้า” เพียงพระองค์เดียว (monotheism) อย่าง คริสต์และอิสลาม ก็ได้ถือกำเนิดขึ้นพร้อมๆกับการเผยแพร่ความเชื่อที่มาพร้อมกับการ “ทำลาย” คนที่เห็นต่างอย่างรวดเร็ว (“พระเจ้าของเราเท่านั้นคือความจริง !”)\nศาสนาอีกแขนงหนึ่งที่เกิดขึ้นในเวลาใกล้เคียงกันว่าด้วยความเข้าใจ “กฎของธรรมชาติ” โดยไม่ได้ยึดเทพเจ้าเป็นศูนย์กลาง อาทิ ศาสนาพุทธที่มีมนุษย์อย่าง “เจ้าชายสิทธัตถะ” เป็นศาสดาผู้เผยแพร่คำสอน “ธรรมะ” ที่ว่าด้วยการกำจัดความทุกข์ผ่านการละทิ้งตัญหาและการทำความเข้าใจปัจจุบันและธรรมชาติของโลกมนุษย์\nและในช่วง 2-3 ศตวรรษที่ผ่านมา กลุ่มศาสนารูปแบบใหม่ที่ยึดมนุษย์เป็นศูนย์กลางก็ได้ถือกำเนิดขึ้นมากมาย ไม่ว่าจะเป็น ทุนนิยม (ผู้เชื่อมั่นในระบบเศรษฐกิจที่มีทุนเป็นแรงผลักดัน) เสรีนิยม (ผู้เชื่อมั่นในอิสรภาพของมนุษย์ทุกคน) สังคมนิยม (ผู้เชื่อมั่นในความเท่าเทียมกันของมนุษยชาติ) ลัทธินาซี (ผู้เชื่อมั่นในการรักษาชาติพันธุ์ของตัวเองที่พวกเขาเชื่อมั่นว่ามีการวิวัฒนาการที่สูงกว่ามนุษย์ชาติพันธุ์อื่น) และในอนาคต “ศาสนา” รูปแบบเดิมๆที่เชื่อมั่นในสิ่งที่เกิดขึ้นจากจินตนาการของมนุษย์ก็อาจจะต้องพบกับจุดพลิกผันอีกครั้งหากศาสตร์ “ชีววิทยา” สามารถอธิบายพฤติกรรมและที่มาของมนุษย์ได้อย่างสมบูรณ์\nZeus เทพเจ้าสูงสุดของกรีกโบราณ (ขอบคุณภาพจาก Plantscapers)\nChapter 13 : The Secret of Success คำตอบของคำถามที่ว่า “ทำไมเหตุการณ์ต่างๆในอดีตจนถึงปัจจุบันถึงได้ถือกำเนิดขึ้น” คือ “เราไม่มีทางรู้หรอก”\nโลกมนุษย์นั้นคือระบบที่มีความซับซ้อนสูงมากจนไม่สามารถทำนายอนาคตข้างหน้าได้อย่างแม่นยำ (ทางทฤษฎีเรียกว่าความซับซ้อน level 2 ที่ทุกการพยากรณ์ถึงผลลัพธ์ของระบบจะย้อนกลับมาส่งผลให้เกิดการเปลี่ยนแปลงภายในอย่างไม่มีวันจบสิ้น) ในแต่ละช่วงเวลาของประวัติศาสตร์นั้นเต็มไปด้วยทางเลือกต่างๆมากมาย การเปลี่ยนแปลงเพียงแค่นิดเดียวอาจส่งผลให้เกิดโลกที่มีความแตกต่างไปจากปัจจุบันได้อย่างสิ้นเชิง\nลองคิดง่ายๆว่าหากกษัตริย์ Constantine แห่งอาณาจักรโรมันไม่เลือกศาสนาคริสต์ที่ในช่วงเวลานั้นยังถือเป็นศาสนาของคนเฉพาะกลุ่มขึ้นมาเป็นศาสนาของอาณาจักร โลกของชาวตะวันตกในปัจจุบันจะเป็นอย่างไร\nสิ่งเดียวที่เรามั่นใจได้ก็คือ ทุกเหตุการณ์ที่เกิดขึ้นและกำลังจะเกิดขึ้นในโลกมนุษย์โดยฝีมือของมนุษย์นั้นล้วนไม่ใช่ “เรื่องที่เกิดขึ้นเองตามธรรมชาติ” ไม่ใช่สิ่งที่สิ่งมีชีวิตเหนือธรรมชาติเป็นผู้กำหนดและทุกเหตุการณ์นั้น “สามารถหลีกเลี่ยงได้”\nPart Four – The Scientific Revolution Chapter 14 : The Discovery of Ignorance โลกในปัจจุบันกับโลกเมื่อ 500 ปีก่อนนั้นได้แตกต่างกันอย่างสิ้นเชิง จำนวนประชากรของมนุษย์นั้นได้เพิ่มจำนวนขึ้น 14 เท่าจาก 500 ล้านคนเป็น 7,000 ล้านคน พร้อมๆกับขีดความสามารถทางการผลิตที่เพิมขึ้นกว่า 240 เท่า !! (เทียบง่ายๆก็ลองนึกเล่นๆดูว่ามนุษย์ในปัจจุบันสามารถใช้เรือรบลำเดียวสำหรับการถล่มกองทัพเรือของขาวสปาร์ต้ารับร้อยได้อย่างง่ายดาย)\nปรากฎการณ์ที่ผลักดันให้เกิดความเจริญรุ่งเรืองของมนุษยชาติในอัตราเร่งที่เริ่มต้นขึ้นเมื่อประมาณ 500 ปีก่อนนั้น คือ “การปฏิวัติทางวิทยาศาสตร์” ที่เริ่มต้นจากการเปลี่ยนแปลงทางความคิดของมนุษย์ในการ “ลงทุน” วิจัยและพัฒนาวิทยาศาสตร์โดยมีจุดประสงค์เพื่อสร้าง “ก้าวกระโดด” ให้กับมนุษยชาติ (ก่อนหน้านั้น มนุษย์ใช้ทรัพยากรเกือบทั้งหมดในการแย่งชิงขีดความสามารถในปัจจุบันแทนที่จะเอาเวลาไปพัฒนาขีดความสามารถใหม่ๆ)\nการปฏิวัติทางวิทยาศาสตร์ถือเป็นจุดเริ่มต้นของการปรับเปลี่ยนความคิดของมนุษย์จากการถือเป็นผู้รู้ในทุกสรรพสิ่ง (ตามคำสอนของศาสนาต่างๆที่เคยกล่าวว่า โรคภัย ความยากจน หรือ ความตาย นั้นเป็นสิ่งที่หลีกเลี่ยงไม่ได้) เป็นการ “ยอมรับ” ถึงความ “ไม่รู้” ของตัวเองพร้อมๆกับการพยายามตามหาคำตอบของความสงสัยหรือปัญหาเหล่านั้นที่เกิดขึ้นผ่านกระบวนการทดลองที่มีหลักการทางคณิตศาสตร์และวิทยาศาสตร์รองรับ อันเป็นที่มาของการตามหาความลับของธรรมชาติมากมาย อาทิ ระบการทำงานของร่างกาย การรักษาโรคภัยไข้เจ็บ การเพิ่มขีดความสามารถของการผลิตไปจนถึงการออกเดินทางไปยังอวกาศ\nการปฏิวัติทางวิทยาศาสตร์นั้นจะเกิดขึ้นไม่ได้เลยหากไม่มี “แรงสนับสนุน” ในรูปของเงินทุนโดยกลุ่มก้อนความคิดที่มีจุดประสงค์อยู่เบื้องหลังอันสำคัญ ได้แก่ ระบบอาณาจักรและระบบเศรษฐกิจแบบทุนนิยม ที่คอยช่วยเหลือให้โครงการวิจัยทางวิทยาศาสตร์ได้ถือกำเนิดขึ้น\nChapter 15 : The Marriage of Science and Empire ปัจจัยสำคัญที่ผลักดันให้อังกฤษกลายมาเป็นมหาอำนาจทางทะเลผู้ครอบครองดินแดนต่างๆทั่วโลกได้นั้นคือ “วิทยาศาสตร์” หลังจากที่ชาวอังกฤษทำการทดลองและสามารถคิดค้นวิธีการแก้ปัญหาโรค Scurvy ที่คร่าชีวิตกะลาสีเรือไปกว่า 2 ล้านคนจนค้นพบว่าผลไม้จำพวก “ไซตรัส” สามารถรักษาอาการป่วยรุนแรงนี้ได้อย่างมีประสิทธิภาพ (ต่อมาเราก็ได้รู้ว่าสิ่งที่กะลาสีเรือต้องประสบคือภาวะการขาดวิตามินซี)\nเมื่อประมาณ 250 ปีก่อน ชาวเอเชีย (จีน อินเดียและออตโตมาน) คือ ผู้ปกครองโลกที่มีขนาดเศรษฐกิจรวมกันกว่า 80% แต่แล้วในอีกไม่ถึง 100 ปีถัดมา ขั้วอำนาจใหม่ที่ทวีป “ยุโรปตะวันตก” อย่าง อังกฤษ ฝรั่งเศส เยอรมนี สเปนและเบลเยียมก็ได้ผงาดขึ้นมาเป็นผู้ปกครองโลกกลุ่มใหม่โดยมี “วิทยาศาสตร์” และ “โครงสร้างทางสังคม” ที่คอยเกื้อหนุนวิทยาศาสตร์อยู่เบื้องหลัง\nจุดเริ่มต้นของยุครุ่งเรืองของวิทยาศาสตร์เริ่มต้นขึ้นหลังจากที่นักเดินเรือชาวอิตาลีนามว่า Amerigo Vespucci ลงความเห็นว่าดินแดนที่ Christopher Columbus เป็นผู้ค้นพบเมื่อปี 1492 นั้นไม่ใช่เอเชียแต่กลับเป็น “ดินแดนผืนใหม่” ที่ชาวยุโรปไม่เคยรู้จักมาก่อนอันถือเป็นจุดเริ่มต้นของยุคแห่งการ “ค้นคว้า” ที่เปลี่ยนทัศนคติของชาวยุโรปให้ออกเดินทางไปยังดินแดนต่างๆรอบโลกภายในไม่กี่ทศวรรษถัดมา (ชื่อของ Amerigo ก็ถูกนำมาใช้เป็นชื่อขงทวีปแห่งใหม่ที่มีนามว่า America) และในเวลาไม่กี่ปีถัดมาอาณาจักร Aztec และ Inca ที่ปกครองตนเองมาอย่างยาวนานโดยปราศจากการ “รับรู้” ถึงโลกภายนอกก็ได้ถูกยึดครองโดย “สิ่งมีชีวิตที่พวกเขาคาดไม่ถึง” อย่างชาวสเปนภายในระยะเวลาอันสั้น\nสงครามการยึดครองอาณาจักร Aztec ของชาวสเปน (ขอบคุณภาพจาก Wikipedia)\nChapter 16 : The Capitalist Creed การก้าวกระโดครั้งสำคัญอีกก้าวหนึ่งของมนุษยชาติคือ “ทัศนคติ” ของมนุษย์ที่เริ่มมองว่า “อนาคตจะดีกว่าปัจจุบัน” อันนำพาให้เกิดความ “เชื่อมั่น” ที่ส่งผลให้ระบบธนาคารและการปล่อยกู้ยืมเงิน “เครดิต” นั้นเติบโตขึ้นอย่างรวดเร็วพร้อมๆกับการลงทุนที่เพิ่มขึ้นอย่างมหาศาล\nปฏิเสธไม่ได้เลยว่าความเจริญรุ่งเรืองของวิทยาศาสตร์นั้นได้รับอิทธิพลของ “ทุนนิยม” ซึ่งเป็นองค์ความคิด หรือ “ศาสนารูปแบบใหม่” ที่เชื่อมั่นในการนำเงินหรือกำไรที่ได้จากการประกอบกิจการไปใช้ในการ “ลงทุน” เพื่อการขยายกิจการหรือการวิจัยและพัฒนาเทคโนโลยีใหม่ๆเพื่อสร้างรายได้ส่วนเพิ่มและขยายขนาดเศรษฐกิจโดยรวมของผู้คนทั้งหมดในระบบเศรษฐกิจ ตามคำกล่าวของ Adam Smith ที่ว่า “Greed is good. By becoming richer, I benefit everybody, not just myself” (สมัยก่อนกลุ่มชนชั้นสูงเลือกลงทุนแต่เพียงเพื่อทำสงครามแย่งชิงอำนาจและสมบัติระหว่างกันหรือไม่ก็นำเงินไปสร้างสิ่งก่อสร้างขนาดใหญ่ที่ไร้ประโยชน์ อาทิ ปิระมิด)\nระบบทุนนิยมคือกำลังสำคัญในการผลักดันให้ชาวดัตช์กลายมาเป็นมหาอำนาจในช่วงปี 1600 ผ่านโครงสร้างทางสังคมที่มีความน่าเชื่อถือสูงและเอื้อต่อการลงทุน ก่อนที่อังกฤษจะผงาดขึ้นมาเป็นเจ้าแห่งโลกผ่านการยึดครองประเทศต่างๆมากมาย (ผ่านบริษัท East India Company) จนทำให้อังกฤษกลายมาเป็นอาณาจักรที่ใหญ่ที่สุดในโลก\nขณะเดียวกัน ระบบทุนนิยมก็ได้สร้างผลร้ายที่ตามมามากมายในประวัติศาสตร์ อาทิ การก่อสงครามระหว่างประเทศ (อังกฤษการันตีพันธบัตรของกรีซด้วยการส่งเรือไปรบกับอาณาจักรออตโตมานจนทำให้กรีซได้รับเอกราชในที่สุด) การค้าทาสอันแสนโหดร้ายและภาวะความไม่เท่าเทียมทางรายได้ของประชากรทั่วโลก\nทุนนิยม (ขอบคุณภาพจาก Foundation for Economic Education)\nChapter 17 : The Wheels of Industry การปฏิวัติอุตสาหกรรมถือกำเนิดขึ้นหลังจากที่ชาวอังกฤษคิดค้น “เครื่องจักรไอน้ำ” ที่สามารเปลี่ยนพลังงานความร้อนไปเป็นพลังงานจลน์ได้สำเร็จ อันเป็นจุดกำเนิดของยุคที่มนุษย์ริเริ่มคิดค้น “พลังงาน” ใหม่ๆ อาทิ ปิโตรเลียม ไฟฟ้าและนิวเคลียร์ (นี่ยังไม่รวมอนาคตที่โลกจะสามารถใช้งานพลังงานแสงอาทิตย์ ลมและแรงโน้มถ่วงจากดวงจันทร์ในรูปของกระแสคลื่นได้อย่างไม่จำกัด)\nการปฏิวัติอุตสาหกรรมได้สร้างเทคโนโลยีที่มีประสิทธิภาพสูงที่มีผลต่อการก้าวกระโดดของมนุษยชาติมากมาย อาทิ การใช้เครื่องจักรในงานเกษตรกรรมที่เพิ่มผลผลิตให้กับโลกอย่างมากมายจนทำให้ผู้คนจำนวนมากไม่จำเป็นต้องประกอบอาชีพเกษตรกรอีกต่อไป (เกษตรกร 2% ในสหรัฐสามารถสร้างผลผลิตได้มากกว่าความต้องการทั้งประเทศได้)\nสิ่งที่ตามมาของยุคที่อุปทานมีเหลืออย่างล้นหลาม คือ การสร้างหลักการของ “ระบบทุนนิยม” ที่ส่งเสริมให้ “คนจน” และ “คนชั้นกลาง” ทำงานอย่างหนักเพื่อนำเงินที่ได้มาบริโภคสินค้าที่ “เกินความจำเป็น” ขณะที่กลุ่ม “คนรวย” ทำการ “ลงทุน” เพื่อสร้างความร่ำรวยที่มากขึ้นเรื่อยๆให้กับตัวพวกเขาเอง\nปฏิเสธไม่ได้เลยว่า “ทุนนิยม” คือ “ศาสนา” ที่มีผู้คนเชื่อมั่นและทำตามหลักการมากที่สุดในโลก !!\nChapter 18 : A Permanent Revolution ผลของการเติบโตอย่างรวดเร็วของมนุษยชาติคือ “ความเสียหายถาวร” ของทรัพยากรและสิ่งมีชีวิตสายพันธุ์อื่น (ไม่นับแมลงสาบกับหนูที่กำลังเจริญรุ่งเรือง) ณ ปัจจุบัน น้ำหนักของมนุษย์ทุกคนรวมกันอยู่ที่ 300 ล้านตัน ปศุสัตว์เชิงอุตสาหกรรมมีน้ำหนักรวมกันที่ 700 ล้านตัน ส่วนของสัตว์ชนิดอื่นๆที่เหลือรวมกันนั้นเหลือเพียงแค่ไม่ถึง 100 ล้านตันเท่านั้น\nการเปลี่ยนแปลงถาวรที่สำคัญยังมีอีกมากมาย อาทิ การปรับเปลี่ยนช่วงเวลาในแต่ละวันของมนุษย์ที่แต่เดิมไม่ค่อยมีการวางแผนที่แน่นอนให้สอดคล้องกับช่วงเวลาทำงานมาตรฐาน (แรงงานต้องเข้ามาทำงานตรงตามเวลาเพื่อให้สายพานการผลิตเดินหน้าต่อได้และบาร์ต้องเปิดหลังเวลาเลิกงาน) การเปลี่ยนโครงสร้างทางสังคมจากการพึ่งพากันภายในครอบครัวและชุมชนกลายเป็นการส่งเสริมความเป็น “บุคคล” โดยมีรัฐเป็นศูนย์กลาง และที่สำคัญที่สุดคือการเข้าสู่ยุคแห่ง “ความสงบสุข” อย่างที่ไม่เคยเกิดขึ้นมาก่อน (เป็นสิบปีแล้วที่คนเสียชีวิตจากเหตุการณ์ความรุนแรงทั้งหมดเกิดขึ้นน้อยกว่าคนฆ่าตัวตาย) ทั้งนี้ สันติภาพที่เกิดขึ้นมานั้นเป็นผลพวงมาจากระบบเศรษฐกิจโลกที่สร้างความซับท้อนกันของประเทศชาติต่างๆอันส่งผลให้ผลประโยชน์จากการทำสงครามนั้นต่ำลงเรื่อยๆ (สงครามในช่วงไม่กี่สิบปีที่ผ่านมาล้วนแต่เป็นการแย่งชิงทรัพยากรเชิงกายภาพอย่างน้ำมันเท่านั้น)\nChapter 19 : And They Lived Happily Ever After เมื่อชีวิตความเป็นอยู่ของมนุษย์ได้รับการพัฒนาอย่างรวดเร็วและต่อเนื่อง คำถามที่สำคัญที่สุดที่ไม่ค่อยมีคนพูดถึงก็คือ “แล้วมนุษย์มีความสุขมากขึ้นหรือเปล่า”\nงานวิจัยจากสถาบันต่างๆค้นพบว่าการเปลี่ยนแปลง “ฐานะการเงิน” และ “สุขภาพ” นั้นส่งผลกระทบต่อ “ความสุข” เพียง “ระยะสั้น” เท่านั้น ปัจจัยหนึ่งที่เชื่อมโยงกับความสุขระยะยาวอย่างชัดเจนที่สุดก็คือ “ความสัมพันธ์ที่มีคุณภาพ” (ที่ปัจจุบันนี้มนุษย์เริ่มห่างเหินจากครอบครัวและสังคมที่อบอุ่นไปทุกที) และผลลัพธ์ที่สำคัญที่สุดของงานวิจัยเหล่านี้ก็คือการค้นพบว่าความสุขของมนุษย์นั้นขึ้นอยู่กับความสัมพันธ์ระหว่าง “ความคาดหวังของมนุษย์กับสิ่งที่พวกเขาต้องประสบพบเจอในปัจจุบัน” (ซึ่งตรงตามหลักคำสอนของหลายศาสนา อาทิ ศาสนาพุทธที่เชื่อมั่นว่ามนุษย์จะค้นพบความสุขทางจิตใจเมื่อพวกเขาสามารถละทิ้งอารมณ์ตัณหาต่างๆได้อย่างหมดสิ้น)\nในทางชีววิทยา “ความสุข” ของมนุษย์นั้นขึ้นอยู่กับ “ฮอร์โมน” อย่าง serotonin, dopamine และ oxytocin ที่ถึงแม้ปริมาณฮอร์โมนเหล่านี้จะสามารถแกว่งตัวขึ้นลงได้ (ถูกล็อตเตอรี่หรือซื้อรถคันใหม่) แต่ในระยะยาวระดับฮอร์โมนของมนุษย์แต่ละคนนั้นจะคงที่เสมอ ซึ่งอาจหมายความได้ว่าความสุขของมนุษย์นั้นเป็นผลจากพันธุกรรมที่ไม่สามารถเพิ่มขึ้นหรือลดลงได้ ผลลัพธ์นี้ยังอาจแสดงให้เห็นว่ามนุษย์ที่มีระดับฮอร์โมนแห่งความสุขมากคือปัจจัยหลักในการสร้างความสัมพันธ์ที่ดี (ไม่ใช่ความสัมพันธ์ที่ดีคือตัวสร้างความสุข)\nอย่างไรก็ตาม วิทยาศาสตร์แห่งการทำความเข้าใจ “ความสุขที่แท้จริง” ของมนุษย์นั้นเป็นศาสตร์ที่พึ่งได้รับความสนใจเท่านั้นเอง\nChapter 20 : The End of Homo Sapiens ตั้งแต่อดีตจนถึงปัจจุบัน วิวัฒนาการของมนุษย์และสิ่งมีชีวิตทุกชนิดในโลกนั้นล้วนเกิดขึ้นตามหลักการ “คัดเลือกโดยธรรมชาติ” (Natural Selection) ที่ว่าด้วยการอยู่รอดของสิ่งมีชีวิตที่สามารถปรับตัวเข้ากับสภาพแวดล้อมปัจจุบันได้ (ยีราฟสายพันธุ์คอยาวไม่ได้เลือกต่อคอให้ตัวเอง) แต่แล้วทุกอย่างกำลังจะเปลี่ยนไป เมื่อ Homo Sapiens เริ่มที่จะใช้วิทยาศาสตร์มาเปลี่ยนบทบาทตัวเองจาก “ผู้ถูกสร้าง” ไปเป็น “ผู้สร้าง” ผ่านเทคโนโลยีที่สำคัญ 3 รูปแบบที่สามารถเปลี่ยนแปลงสิ่งมีชีวิตธรรมดาๆให้กลายมาเป็น “พระเจ้า” ได้ในอนาคต อันประกอบไปด้วย\n Biological Engineering: ศาสตร์แห่งการดัดแปลงพันธุกรรมที่มนุษย์ได้เริ่มใช้งานในสัตว์และพืชมาได้ระยะหนึ่งแล้ว อาทิ การสร้างกระต่ายเรืองแสงจากยีนส์ของแมงกระพรุน หรือ โครงการฟื้นคืนชีพช้างแมมมอธและ Neanderthal ซึ่งในระยะถัดไปมนุษย์น่าจะมีความสามารถในการปรับเปลี่ยนพันธุกรรมของตัวเอง ทั้งด้านรูปร่าง หน้าตา สุขภาพและประสิทธิภาพของสมอง Cyborg Engineering: ศาสตร์แห่งการผสมผสานหุ่นยนต์เข้ากับสิ่งมีชีวิต อาทิ แมลงติดเครื่องดักสัญญาณที่สามารถควบคุมได้โดยกองทัพ หรือ แขนกลที่สามารถขยับได้โดยการสั่งงานของกระแสประสาทที่สมอง ซึ่งในอนาคต มนุษย์อาจมีความสามารถในการเชื่อมต่อ “สมอง” เข้ากับคอมพิวเตอร์ได้สำเร็จ ซึ่งนั่นอาจหมายความถึงการ “ก้าวกระโดด” ครั้งยิ่งใหญ่ที่สุดของมนุษยชาติที่อาจจะไม่ใช่มนุษย์อีกต่อไป In-organic Engineering: ศาสตร์แห่งการสร้าง “มนุษย์จำลอง” ในรูปของหุ่นยนต์หรือโปรแกรมคอมพิวเตอร์เพื่อใช้ประโยชน์จากกำลังการประมวลผลของคอมพิวเตอร์มาผนวกกับกระบวนการคิดของมนุษย์ซึ่งก็คือการสร้าง Artificial General Intelligence นั่นเอง  ทั้งนี้ เราไม่อาจจะรู้ได้อย่างแน่นอนว่าโลกในอนาคตนั้น “มนุษย์สายพันธุ์ใหม่” ผู้เป็นอมตะ มีสติปัญญาอันแสนฉลาด มีร่างกายและจิตใจที่สามารถเชื่อมต่อกับเครื่องจักรได้จะมีรูปร่างและความคิดแตกต่างจาก Homo Sapiens ในปัจจุบันมากน้อยแค่ไหน สิ่งที่มนุษย์ในปัจจุบันสามารถทำได้มีเพียงการถามตัวเองว่า “พวกเราต้องการให้มนุษย์ในอนาคตมีความต้องการอย่างไร”\n(ขอบคุณภาพจาก Terminator)\nThe Animal that Became a God\nตั้งแต่ 70,000 ปีก่อนจนถึงปัจจุบัน Homo Sapiens ได้วิวัฒนาการจากสิ่งมีชีวิตธรรมดาๆอันไร้ซึ่งความสำคัญใดๆกลายมาเป็น “พระเจ้า” ผู้สร้างสรรค์เทคโนโลยีต่างๆมากมายพร้อมๆกับการทำลายล้างทรัพยากรของโลกในอัตราเร่งอย่างที่ไม่เคยเกิดขึ้นมาก่อน มนุษย์ในปัจจุบันมีพลังอำนาจอย่างมหาศาลแต่กลับไม่รู้ว่าพวกเราควรจะใช้พลังอำนาจเหล่านั้นไปในทางไหน เราสร้างความเสียหายให้กับเพื่อนร่วมโลกเพื่อแลกเปลี่ยนกับความสะดวกสบายเพียงระยะสั้นโดยไม่รู้ว่าความสุขที่แท้จริงอยู่ตรงไหน\nจะมีอะไรอันตรายมากไปกว่า “พระเจ้า” ผู้มีพลังมหาศาลแต่กลับไร้ซึ่งความรับผิดชอบและไม่รู้ว่าตัวเองต้องการอะไร\nReference : https://www.panasm.com\n","date":1588978800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588978800,"objectID":"a2362e64791852422721dfa484a75173","permalink":"https://example.com/book/sapiens/review-1/","publishdate":"2020-05-09T00:00:00+01:00","relpermalink":"/book/sapiens/review-1/","section":"book","summary":"“You could never convince a monkey to give you a banana by promising him limitless bananas after death in monkey heaven.”\n 13.5 พันล้านปีก่อน เหตุการณ์ระเบิดครั้งใหญ่ (Big Bang) ได้ก่อกำเนิดองค์ประกอบที่สำคัญของจักรวาลทั้ง สสาร พลังงาน เวลาและห้วงอวกาศ 3.8 พันล้านปีก่อน สิ่งมีชีวิตก็ได้เริ่มถือกำเนิดขึ้นในดาวดวงหนึ่งในระบบสุริยะที่มีชื่อว่า “โลก” 2.5 ล้านปีก่อน สิ่งมีชีวิตที่มีความคล้ายคลึงกับ “มนุษย์” สายพันธุ์ในปัจจุบันก็ได้ถือกำเนิดขึ้น 10,000 ปีก่อน Homo Sapiens คือ มนุษย์สายพันธุ์เดียวที่ยังคงเหลือรอดอยู่ในโลก    Sapiens : A Brief History of Humankind นำเสนอเรื่องราวประวัติศาสตร์ของมนุษยชาติผ่านการปฏิวัติที่สำคัญ 3 ครั้ง ได้แก่ การปฏิวัติทางความตระหนักรู้ที่ส่งเสริมให้มนุษย์กลายเป็นสัตว์สังคมที่มีสติปัญญามากกว่าสิ่งมีชีวิตทุกชนิดบนโลก การปฏิวัติทางการเกษตรกรรมที่ส่งผลให้เกิดการเปลี่ยนแปลงโครงสร้างทางสังคมมนุษย์จากป่าสู่เมืองและการปฏิวัติทางวิทยาศาสตร์ที่เป็นจุดเริ่มต้นของการพัฒนาการแบบก้าวกระโดดของมนุษยชาติในปัจจุบัน\nPart One – The Cognitive Revolution Chapter 1 : An Animal of No Significance Homo Sapiens คือชื่อทางวิทยาศาตร์ที่ประกอบด้วย 2 องค์ประกอบ ได้แก่ genus (สกุล) ชื่อ Homo ที่แปลว่า “มนุษย์” และ species (ชนิด) ชื่อ Sapiens ที่มีความหมายว่า “ฉลาด” และ Homo Sapiens นั้นถือเป็นสิ่งมีชีวิตใน Family (วงศ์) กลุ่ม the great ape ซึ่งเป็นตระกูลด้วยกับลิงชิมแปนซี กอริลล่าและลิงอุรังอุตัง","tags":null,"title":"สรุปหนังสือ Sapiens - A Brief History of Humankind","type":"docs"},{"authors":null,"categories":null,"content":" โดย ดร. สุวินัย ภรณวลัย\n ในอดีต วาระสูงสุดของมนุษยชาติ คือ การเอาชนะความอดอยาก เอาชนะโรคระบาด และเอาชนะความรุนแรง (จากสงครามต่าง ๆ) ปัจจุบันถือได้ว่ามนุษยชาติได้เอาชนะ 3 อุปสรรค (ความอดอยาก โรคระบาด และความรุนแรงจากสงคราม) ได้แล้วโดยพื้นฐาน เพราะในปัจจุบัน คนตายจากโรคอ้วนมากกว่าตายจากความหิวโหย คนแก่ตายมากกว่าเป็นโรคติดเชื้อตาย อีกทั้งคนยังเสียชีวิตจากการฆ่าตัวตายและอุบัติเหตุรถยนต์มากกว่าถูกฆ่าตายในสงครามหรือถูกฆาตกรรม ด้วยเหตุนี้ วาระสูงสุดอันใหม่ของมนุษยชาติที่จะเข้ามาแทนที่วาระเก่าในอดีตจึง ได้แก่\n วาระการเอาชนะความแก่ชราและความตาย (โครงการอมตะ) ด้วยการปฏิวัติเทคโนโลยีชีวภาพ เพราะมองว่าความตายและความแก่ชราเป็นแค่ปัญหาทางเทคนิคที่แก้ไขได้ไม่ช้าก็เร็ว ต่อไปคนจะไม่สนใจปัญหาความไม่เท่าเทียมอีกแล้ว แต่จะหันมาหมกมุ่งเรื่องความเป็นอมตะ ไม่แก่ไม่ตายแทน หรือการมี \u0026ldquo;ชีวิตที่ไม่มีวันหมดอายุ\u0026rdquo; โดยพึ่งพา วิศวกรรมชีวภาพ (biological engineering), วิศวกรรมไซบอร์ก (cyborg engineering) และวิศวกรรมสิ่งมีชีวิตอนินทรีย์ (engineering of non-organic beings)\n วาระการเข้าถึงความสุขความเพลิดเพลินตลอดไปด้วยการควบคุมสภาวะทางชีวเคมีในร่างกายของคนเรา เพราะเชื่อว่าความสุขคือความพอใจ ซึ่งหลักคิดแบบวัตถุนิยมเชื่อว่าสามารถเข้าถึงความสุขหรือความพึงพอใจอย่างยั่งยืนได้โดยผ่านการปรับเปลี่ยนชีวเคมีของคนเราด้วย\u0026rdquo;ยาวิเศษ\u0026rdquo; กับทำวิศวกรรมร่างกายและจิตใจของคนเราขึ้นมาใหม่ เหมือนอย่างที่ในอดีต การสูบกัญชาทำให้รู้สึกสุขสงบชั่วคราว เสพโคเคนและยาบ้าทำให้คึกคักชั่วครู่ ยาอีทำให้เคลิบเคลิ้ม ยาแอลเอสดีทำให้หลอน เป็นต้น\n วาระการอัปเกรดโฮโมเซเปียนส์ให้เป็นโฮโมดีอุส (มนุษย์เทพ) หรืออภิมนุษย์ โดยผ่าน วิศวกรรมจิตใจมนุษย์กับเทคโนโลยีชีวภาพมนุษย์เซเปียนส์สัมพันธ์กับสัตว์อื่นๆอย่างไร ต่อไปมนุษย์ดีอุสก็จะปฏิบัติต่อเซเปียนส์อย่างนั้นเช่นกัน การผลักดันสามวาระใหม่ของมนุษยชาติได้เริ่มต้นขึ้นแล้วอย่างช้าๆ และไม่น่ามีใครสามารถยับยั้งทิศทางของสามวาระใหม่นี้ได้ เพราะ สามวาระใหม่นี้จะเป็นกลไกผลักดันเศรษฐกิจอนาคตให้ขับเคลื่อนต่อจากนี้ การหยุดยั้งสามวาระใหม่นี้ จะนำไปสู่การพังทลายของเศรษฐกิจและสังคมของชาวโลกไปพร้อม ๆ กัน\n  มันชัดเจนเหลือเกินว่า​ แรงผลักดันเศรษฐกิจและสังคมแบบทุนนิยมคือ​ตัณหาหรือความทะยานอยาก​(欲望) ในช่วงสามร้อยปีที่ผ่านมา​ พร้อมๆกับความสำเร็จในการทำให้สมัยใหม่​ ​(modernization)​ ที่รุดหน้าอย่างก้าวกระโดด​จนสามารถแก้ปัญหาความอดอยาก​ โรคระบาด​ และ​ความรุนแรงจากสงคราม​ที่เคยเป็นตัวการใหญ่ที่ทำให้ประชากรของสังคมในอดีตก่อนยุคสมัยใหม่​ตายไปคราวละ​ 25-50% ของจำนวนประชากรทั้งหมด​\u0026hellip; ลุล่วงไปอย่างได้ผล อุตสาหกรรมการเกษตร, อุตสาหกรรมยา/การแพทย์​ และอุตสาหกรรมอาวุธสงคราม\nคือสามอุตสาหกรรมที่ขับเคลื่อนเศรษฐกิจทุนนิยมให้เติบโตอย่างต่อเนื่อง​ ตามมาด้วยอุตสาหกรรมที่เกี่ยวข้องเป็นจำนวนมาก จึงไม่ใช่เรื่องแปลกที่โลกทัศน์แบบวัตถุนิยม​ บูชาเทคโนโลยี และวิทยาศาสตร์เชิงประจักษ์จะครองโลก และครอบงำความคิดของผู้มีอำนาจในระบบทุนนิยม​ รวมทั้งมวลชนซึ่งเสพบริโภคสินค้าและบริการที่ระบบทุนนิยมป้อนให้ ในยุคปัจจุบัน ซึ่งเป็นยุคเปลี่ยนผ่านอำนาจจากมนุษย์ไปสู่ปัญญาประดิษฐ์ ​เพื่อเข้าสู่ยุค​Dataism (ยุคเดต้านิยม)​เต็มรูปแบบที่จะมาแทนที่ยุคทุนนิยม​ มันไม่ใช่เรื่องแปลกที่โครงการ​ ​Homo​ Deus จะถือกำเนิดขี้นมา ​เพื่อผลักดันสามวาระใหม่ของมนุษย์ชาติหลังจากนี้​ นั่นคือ\n โครงการชะลอแก่ชะลอตาย​ด้วยการปฏิวัติเทคโนโลยีชีวภาพ เพื่อยืดอายุขัยมนุษย์ถึง​ 150-500 ปี​โดยไม่แก่\n โครงการให้ความสุขทางชีวเคมีแก่มนุษย์ทั่วโลก โดยเริ่มจากการให้ทานยาแก้โรคซึมเศร้า​และโรคทางจิตเวชและจิตเภทอื่นๆ​ ต่อไปคงมุ่งพัฒนายาที่กินแล้วมีความสุขหรือความพึงพอใจ\n โครงการอัปเกรดความสามารถมนุษย์จนมีความสามารถดุจเทพเจ้าในตำนาน เริ่มจากอัปเกรดความงาม ผ่านธุรกิจศัลยกรรมเพื่อความงาม​ ต่อไปจะพัฒนาธุรกิจตัดต่อพันธุกรรมตามหลักสุพันธุศาสตร์ (優生学 eugenics) รวมทั้งธุรกิจที่เชื่อมประสาทสมองมนุษย์เข้ากับปัญญาประดิษฐ์\n  นี่คือตัณหามนุษย์ปุถุชนที่อยากหนีทุกข์ที่เกิดจากการแก่​การเจ็บป่วย ​และการตาย​ด้วยวิธีการแบบวัตถุนิยมสุดโต่ง​ แล้วใช้ ​\u0026rdquo;อภิตัณหา\u0026rdquo; นี้​ผลักดันกลไกทางเศรษฐกิจให้ขยายตัวต่อเนื่องไม่มีวันสิ้นสุดนั่นเอง แต่ลึก ๆ แล้ว​คนที่ต้องการไม่แก่ไม่ตายจริง ๆ คือคนแบบ​จิ๋นซีฮ่องเต้ในอดีตที่มี​อำนาจอยู่ในมือนั่นเอง​ ถ้าเป็นสมัยนี้ คือคนกลุ่มน้อยที่มีอำนาจเงินหรืออำนาจชื่อเสียง หรืออำนาจทางการเมืองอยู่ในมือ การเอาชนะอภิตัณหา ด้วยแนวทางแบบวัตถุนิยมนี้​ไม่มีทางชนะได้อย่างแท้จริงหรอก​มีแต่จะนำนรกและหายนะมาสู่มนุษยชาติเท่านั้น ผ่านคำสาปเรื่อง ดีอุส\n","date":1588978800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588978800,"objectID":"3150986014209e6b69357cb7dd50acca","permalink":"https://example.com/book/deus/deus-1/","publishdate":"2020-05-09T00:00:00+01:00","relpermalink":"/book/deus/deus-1/","section":"book","summary":"โดย ดร. สุวินัย ภรณวลัย\n ในอดีต วาระสูงสุดของมนุษยชาติ คือ การเอาชนะความอดอยาก เอาชนะโรคระบาด และเอาชนะความรุนแรง (จากสงครามต่าง ๆ) ปัจจุบันถือได้ว่ามนุษยชาติได้เอาชนะ 3 อุปสรรค (ความอดอยาก โรคระบาด และความรุนแรงจากสงคราม) ได้แล้วโดยพื้นฐาน เพราะในปัจจุบัน คนตายจากโรคอ้วนมากกว่าตายจากความหิวโหย คนแก่ตายมากกว่าเป็นโรคติดเชื้อตาย อีกทั้งคนยังเสียชีวิตจากการฆ่าตัวตายและอุบัติเหตุรถยนต์มากกว่าถูกฆ่าตายในสงครามหรือถูกฆาตกรรม ด้วยเหตุนี้ วาระสูงสุดอันใหม่ของมนุษยชาติที่จะเข้ามาแทนที่วาระเก่าในอดีตจึง ได้แก่\n วาระการเอาชนะความแก่ชราและความตาย (โครงการอมตะ) ด้วยการปฏิวัติเทคโนโลยีชีวภาพ เพราะมองว่าความตายและความแก่ชราเป็นแค่ปัญหาทางเทคนิคที่แก้ไขได้ไม่ช้าก็เร็ว ต่อไปคนจะไม่สนใจปัญหาความไม่เท่าเทียมอีกแล้ว แต่จะหันมาหมกมุ่งเรื่องความเป็นอมตะ ไม่แก่ไม่ตายแทน หรือการมี \u0026ldquo;ชีวิตที่ไม่มีวันหมดอายุ\u0026rdquo; โดยพึ่งพา วิศวกรรมชีวภาพ (biological engineering), วิศวกรรมไซบอร์ก (cyborg engineering) และวิศวกรรมสิ่งมีชีวิตอนินทรีย์ (engineering of non-organic beings)\n วาระการเข้าถึงความสุขความเพลิดเพลินตลอดไปด้วยการควบคุมสภาวะทางชีวเคมีในร่างกายของคนเรา เพราะเชื่อว่าความสุขคือความพอใจ ซึ่งหลักคิดแบบวัตถุนิยมเชื่อว่าสามารถเข้าถึงความสุขหรือความพึงพอใจอย่างยั่งยืนได้โดยผ่านการปรับเปลี่ยนชีวเคมีของคนเราด้วย\u0026rdquo;ยาวิเศษ\u0026rdquo; กับทำวิศวกรรมร่างกายและจิตใจของคนเราขึ้นมาใหม่ เหมือนอย่างที่ในอดีต การสูบกัญชาทำให้รู้สึกสุขสงบชั่วคราว เสพโคเคนและยาบ้าทำให้คึกคักชั่วครู่ ยาอีทำให้เคลิบเคลิ้ม ยาแอลเอสดีทำให้หลอน เป็นต้น\n วาระการอัปเกรดโฮโมเซเปียนส์ให้เป็นโฮโมดีอุส (มนุษย์เทพ) หรืออภิมนุษย์ โดยผ่าน วิศวกรรมจิตใจมนุษย์กับเทคโนโลยีชีวภาพมนุษย์เซเปียนส์สัมพันธ์กับสัตว์อื่นๆอย่างไร ต่อไปมนุษย์ดีอุสก็จะปฏิบัติต่อเซเปียนส์อย่างนั้นเช่นกัน การผลักดันสามวาระใหม่ของมนุษยชาติได้เริ่มต้นขึ้นแล้วอย่างช้าๆ และไม่น่ามีใครสามารถยับยั้งทิศทางของสามวาระใหม่นี้ได้ เพราะ สามวาระใหม่นี้จะเป็นกลไกผลักดันเศรษฐกิจอนาคตให้ขับเคลื่อนต่อจากนี้ การหยุดยั้งสามวาระใหม่นี้ จะนำไปสู่การพังทลายของเศรษฐกิจและสังคมของชาวโลกไปพร้อม ๆ กัน","tags":null,"title":"ตอนที่ 1 - สามวาระใหม่แห่งอนาคต","type":"docs"},{"authors":null,"categories":null,"content":" In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academia:\nTip 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\nTip 2 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"74533bae41439377bd30f645c4677a27","permalink":"https://example.com/courses/example/example1/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/example/example1/","section":"courses","summary":"In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academia:\nTip 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim.","tags":null,"title":"Example Page 1","type":"docs"},{"authors":null,"categories":null,"content":" In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academia:\nTip 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\nTip 2 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"883c5cf2007b50b720ce5f4a17b72261","permalink":"https://example.com/courses/example.1/example3/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/example.1/example3/","section":"courses","summary":"In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academia:\nTip 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim.","tags":null,"title":"Example Page 1","type":"docs"},{"authors":null,"categories":null,"content":" In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academia:\nTip 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\nTip 2 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"32df3afea9008eacfc678398fd6443ad","permalink":"https://example.com/courses/example.2/example3/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/example.2/example3/","section":"courses","summary":"In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academia:\nTip 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim.","tags":null,"title":"Example Page 1","type":"docs"},{"authors":null,"categories":null,"content":" เรื่องราวมันก็เหมือนกับเด็กอัจฉริยะทางคอมพิวเตอร์ทั่วโลกที่เกมส์นั้นเป็นจุดดึงดูดพวกเขาให้เข้ามาสู่โลกของคอมพิวเตอร์ ซึ่งเด็กน้อยที่ชื่อ Bill Gates ก็เช่นเดียวกัน ในวัยเพียง 13 ขวบนั้น เขาก็ได้เริ่มเขียนโปรแกรมตัวแรกขึ้นมานั่นก็คือ Tic-Tac-Toe มันคือเกมส์ O-X ที่เราเล่นกันนั่นเอง และเมื่อย้อนกลับไปในช่วงวัยดังกล่าวของ Bill Gates นั้นก็ต้องบอกว่าคอมพิวเตอร์ในสมัยนั้นยังเป็นแค่จุดเริ่มต้นเท่านั้น ไม่ต้องพูดถึงคอมพิวเตอร์ส่วนบุคคล ที่ยังไม่มีใช้งานกันเลย ตอนนั้นเป็นคอมพิวเตอร์ขนาดใหญ่ และที่สำคัญมันยังประมวลผลได้ช้ามาก ๆ อีกด้วย เมื่อเทียบกับความเร็ว ของคอมพิวเตอร์ในปัจจุบัน ต้องบอกว่าห่างกันหลายล้านปีแสงเลยก็ว่าได้\nในช่วงปี 1960 โรงเรียนมัธยมของ Bill Gates อย่างโรงเรียนเลกไซด์ ในเมืองซีแอตเติล ได้ทำการตัดสินใจครั้งสำคัญ ในการติดตั้งอุปกรณ์คอมพิวเตอร์ Terminal เพื่อให้เหล่านักเรียนได้มีคอมพิวเตอร์ใช้ในเวลาว่างนั่นเอง และเนื่องด้วยมันเป็นคอมพิวเตอร์แบบ Terminal เพราะฉะนั้นมันเป็นการฝึกปรือฝีมือให้กับ Bill Gates ได้อย่างดีในการทดสอบโปรแกรมที่เขียนไป เพราะมันจะรู้ได้ทันทีผ่าน Terminal ว่าโปรแกรมนั้นสมบูรณ์หรือไม่ เรียกได้ว่า เป็นการฝึก Bill Gates ให้ทำงานแบบ Perfect มาตั้งแต่เยาว์วัยเลยก็ว่าได้\nแต่แน่นอนว่าการเข้ามาคลุกคลีกับคอมพิวเตอร์มากไปของ Gates นั้น ก็ทำให้เขาเริ่มมีปัญหากับการเข้าสังคม เพื่อไปร่วมกิจกรรมเหมือนเด็ก ๆ คนอื่น เพื่อนๆ เขาก็ได้ตีตราเขาให้กลายเป็นมนุษย์คอมพิวเตอร์ตั้งแต่เด็ก และการเล่นคอมพิวเตอร์ในสมัยนั้น มันต้องแลกมาด้วยค่าเช่าเวลาเพื่อใช้งานคอมพิวเตอร์ ซึ่งทำให้ Gates ต้องคิดหาทางสร้างรายได้เพื่อมาใช้เวลากับคอมพิวเตอร์แสนรักของเขาให้มากที่สุดเท่าที่จะเป็นไปได้ และนี่เองเป็นจุดเริ่มต้นให้ Gates เข้าสู่ธุรกิจ Software เป็นครั้งแรก เพื่อหาเงินมาจ่ายค่าเวลาคอมพิวเตอร์นั่นเอง ตอนนั้น Gates และ คู่หูต่างวัยอย่าง Pual Allen ได้เริ่มรับงานเขียนโปรแกรมในช่วงปิดเทอม ซึ่งต้องบอกว่าทำเงินได้ถึง 5,000 เหรียญ ซึ่งเป็นจำนวนเงินที่ไม่น้อยเลยสำหรับเด็กมัธยมปลายอย่าง Gates\nคู่หูต่างวัยหารายได้เสริมเพื่อมาจ่ายค่าเช่าเวลาคอมพิวเตอร์ ตัว Pual Allen นั้นมีอายุมากกว่า Gates 3 ปี ซึ่งจุดเปลี่ยนครั้งสำคัญของทั้งคู่คือการที่ Allen ได้นำวารสาร Popular Electronics มาให้ Gates ได้ดู ซึ่งกล่าวถึงการพัฒนา Microprocessor 8008 ของบริษัท Intel หากย้อนกลับไปต้องบอกว่าในยุคนั้น คอมพิวเตอร์ยังไม่มีแนวความคิดที่จะสร้างเครื่องคอมพิวเตอร์ขึ้นมาจริง ๆ จาก Microprocessor เลยด้วยซ้ำ ซึ่งตอนนั้นผู้คนต่างมองเป็นเรื่องเพ้อฝันหากคิดถึงเรื่องของคอมพิวเตอร์ส่วนบุคคล\nแม้ตัว 8008 นั้นจะทำอะไรได้ไม่มาก แต่ถือเป็นการทดลองได้อย่างดีของคู่หูทั้งสองที่จะนำเอา Microprocessor มาสร้างอะไรบางอย่าง ซึ่งทั้งคู่นั้นคิดว่าชิปขนาดเล็กอย่าง 8008 นั้นน่าจะมาสร้าง วงจรการวิเคราะห์ข้อมูลและนับจำนวนรถยนต์ที่วิ่งบนถนนได้ และมันเป็นจุดเริ่มต้นให้ทั้งคู่ได้สร้างบริษัทแรกขึ้นมาในชื่อ Traf-O-Data โดยผลิตเครื่องต้นแบบของการนับรถยนต์ และได้นำเสนอไปยังเทศบาลหลายแห่ง แต่ไม่มีใครสนใจแนวคิดของพวกเขาเลย เพราะพวกเขาทั้งสองยังดูเป็นเด็กน้อยอยู่ในขณะนั้น\nTraf-O-Data เครื่องนับรถยนต์อัตโนมัติ ที่ตอนนั้นแทบจะไม่มีใครสนใจซื้อมัน แต่มันก็ได้เกิดจุดเปลี่ยนครั้งสำคัญอีกครั้งเพราะในปี ค.ศ. 1974 Intel ได้ประกาศชิปตัวใหม่ของบริษัทคือ 8080 ซึ่งทำงานได้เร็วกว่า 8008 ถึง 10 เท่า และนี่เองที่ทำให้ ทั้ง Gates และ Allen ได้ค้นพบสิ่งสำคัญที่สุดครั้งนึงในประศาสตร์คอมพิวเตอร์ นั่นคือ หัวใจของเครื่องคอมพิวเตอร์ยุคใหม่นั่นเอง\nตอนนั้นต้องบอกว่าเหล่าบริษัทคอมพิวเตอร์ไม่ได้มอง Microprocessor เหล่านี้เป็นคู่แข่งเลยด้วยซ้ำ แม้กระทั่งผู้ผลิตอย่าง Intel เอง ก็แทบจะมองไม่เห็นศักยภาพของ 8080 เหมือนที่ Gates และ Allen กำลังมองเห็นทั้งคู่มองเห็นอนาคตของวงการคอมพิวเตอร์ส่วนบุคคล และเห็นว่าชิปตัวใหม่อย่าง 8080 นี้สามารถพัฒนาเป็นเครื่องคอมพิวเตอร์ที่สมบูรณ์แบบได้ และที่สำคัญยังมีราคาไม่แพง โดยตัวชิป มีราคาประมาณ 200 เหรียญเท่านั้น และสามารถนำมาแก้ไขปรับปรุงได้ง่ายผ่านความสามารถทางด้าน Software ของทั้งคู่\nในช่วงเวลาดังกล่าวเป็นช่วงที่ Bill Gates ได้เข้าเรียนที่ Harvard เป็นที่เรียบร้อยแล้ว แต่เขายังมีความฝันที่จะสร้างบริษัท Software ให้สำเร็จ เพราะเขามองเห็นโอกาส และอนาคตที่ยิ่งใหญ่ของคอมพิวเตอร์ส่วนบุคคลรออยู่ข้างหน้า โดย Gates นั้นได้ส่งจดหมายของเขาไปยังบริษัทยักษ์ใหญ่หลายแห่ง เสนอตัวที่จะเขียนโปรแกรมภาษา Basic สำหรับชิป Intel ตัวใหม่นี้ แต่ไม่มีผู้ใดตอบรับเขาเลย ทำให้ Gates\nและในช่วงเวลานั้นเองที่เกิดเหตุการณ์ที่ทำให้ Gates และ Allen ตกใจสุดขีดเนื่องจากวารสาร Popular Electronics ได้เปิดเผยเครื่อง Altair 8800 ซึ่งมันเป็นเครื่องคอมพิวเตอร์ขนาดเล็กเครื่องแรก และมันเป็นแนวคิดเดียวกับที่ทั้ง Gates และ Allen คิด แต่ตอนนี้มีคนทำตัดหน้าเขาไปเป็นที่เรียบร้อยแล้ว\nAltair 8800 กับแนวคิด Micro Computer ครั้งแรกของโลก แต่อย่างน้อย Altair 8800 มันไม่มี Software มันจึงไม่สามารถส่งคำสั่งใด ๆ ได้ ไม่มีคีย์บอร์ด ไม่มีจอภาพ และมันถึงเวลาสำคัญของทั้งคู่แล้ว โครงการแรกของทั้งคู่ในบริษัทที่จัดตั้งขึ้นใหม่คือ การเขียนโปรแกรมภาษา Basic สำหรับเครื่อง Altair 8800 ตัวนี้นั่นเอง ซึ่งทั้งคู่ต้องทำงานกับแบบไม่หลับไม่นอน ไม่รู้วันรู้คืน และใช้เวลาตลอด 5 สัปดาห์ในช่วงปิดเทอมฤดูร้อน สร้างโปรแกรมภาษา Basic สำหรับเครื่อง Altair 8800 ได้สำเร็จ และนี่เองได้กลายเป็นจุดเริ่มต้นของความยิ่งใหญ่ ของ บริษัท Software สำหรับ ไมโครคอมพิวเตอร์แห่งแรกของโลก ซึ่งทั้งคู่ตั้งชื่อมันว่า “Microsoft” นั่นเองครับ\n","date":1589065200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589065200,"objectID":"3722380055e9b531921249d15d0f2ecb","permalink":"https://example.com/book/gates/bill-gate-1/","publishdate":"2020-05-10T00:00:00+01:00","relpermalink":"/book/gates/bill-gate-1/","section":"book","summary":"เรื่องราวมันก็เหมือนกับเด็กอัจฉริยะทางคอมพิวเตอร์ทั่วโลกที่เกมส์นั้นเป็นจุดดึงดูดพวกเขาให้เข้ามาสู่โลกของคอมพิวเตอร์ ซึ่งเด็กน้อยที่ชื่อ Bill Gates ก็เช่นเดียวกัน ในวัยเพียง 13 ขวบนั้น เขาก็ได้เริ่มเขียนโปรแกรมตัวแรกขึ้นมานั่นก็คือ Tic-Tac-Toe มันคือเกมส์ O-X ที่เราเล่นกันนั่นเอง และเมื่อย้อนกลับไปในช่วงวัยดังกล่าวของ Bill Gates นั้นก็ต้องบอกว่าคอมพิวเตอร์ในสมัยนั้นยังเป็นแค่จุดเริ่มต้นเท่านั้น ไม่ต้องพูดถึงคอมพิวเตอร์ส่วนบุคคล ที่ยังไม่มีใช้งานกันเลย ตอนนั้นเป็นคอมพิวเตอร์ขนาดใหญ่ และที่สำคัญมันยังประมวลผลได้ช้ามาก ๆ อีกด้วย เมื่อเทียบกับความเร็ว ของคอมพิวเตอร์ในปัจจุบัน ต้องบอกว่าห่างกันหลายล้านปีแสงเลยก็ว่าได้\nในช่วงปี 1960 โรงเรียนมัธยมของ Bill Gates อย่างโรงเรียนเลกไซด์ ในเมืองซีแอตเติล ได้ทำการตัดสินใจครั้งสำคัญ ในการติดตั้งอุปกรณ์คอมพิวเตอร์ Terminal เพื่อให้เหล่านักเรียนได้มีคอมพิวเตอร์ใช้ในเวลาว่างนั่นเอง และเนื่องด้วยมันเป็นคอมพิวเตอร์แบบ Terminal เพราะฉะนั้นมันเป็นการฝึกปรือฝีมือให้กับ Bill Gates ได้อย่างดีในการทดสอบโปรแกรมที่เขียนไป เพราะมันจะรู้ได้ทันทีผ่าน Terminal ว่าโปรแกรมนั้นสมบูรณ์หรือไม่ เรียกได้ว่า เป็นการฝึก Bill Gates ให้ทำงานแบบ Perfect มาตั้งแต่เยาว์วัยเลยก็ว่าได้\nแต่แน่นอนว่าการเข้ามาคลุกคลีกับคอมพิวเตอร์มากไปของ Gates นั้น ก็ทำให้เขาเริ่มมีปัญหากับการเข้าสังคม เพื่อไปร่วมกิจกรรมเหมือนเด็ก ๆ คนอื่น เพื่อนๆ เขาก็ได้ตีตราเขาให้กลายเป็นมนุษย์คอมพิวเตอร์ตั้งแต่เด็ก และการเล่นคอมพิวเตอร์ในสมัยนั้น มันต้องแลกมาด้วยค่าเช่าเวลาเพื่อใช้งานคอมพิวเตอร์ ซึ่งทำให้ Gates ต้องคิดหาทางสร้างรายได้เพื่อมาใช้เวลากับคอมพิวเตอร์แสนรักของเขาให้มากที่สุดเท่าที่จะเป็นไปได้ และนี่เองเป็นจุดเริ่มต้นให้ Gates เข้าสู่ธุรกิจ Software เป็นครั้งแรก เพื่อหาเงินมาจ่ายค่าเวลาคอมพิวเตอร์นั่นเอง ตอนนั้น Gates และ คู่หูต่างวัยอย่าง Pual Allen ได้เริ่มรับงานเขียนโปรแกรมในช่วงปิดเทอม ซึ่งต้องบอกว่าทำเงินได้ถึง 5,000 เหรียญ ซึ่งเป็นจำนวนเงินที่ไม่น้อยเลยสำหรับเด็กมัธยมปลายอย่าง Gates","tags":null,"title":"ตอนที่ 1 - A Revolution Begins","type":"docs"},{"authors":null,"categories":null,"content":" IBM ถือเป็นยักษ์ใหญ่ที่ปรับตัวไม่ทันตามการเปลี่ยนแปลงทางเทคโนโลยี และกระแสของตลาดคอมพิวเตอร์ส่วนบุคคล ที่กำลังจะถือกำเนิดขึ้น ซึ่งแน่นอนว่าในขณะนั้นสถานการณ์ของ IBM ในตลาดคอมพิวเตอร์องค์กรขนาดใหญ่ ซึ่งก็ถือว่าเป็นฐานที่แข่งแกร่งมากสำหรับพวกเขา ปัญหาใหญ่ของคอมพิวเตอร์ขนาดใหญ่เหล่านี้คือ การออกแบบมาเพื่อทำงานเฉพาะด้าน ใช้ระบบปฏิบัติการ และซอฟต์แวร์การใช้งานของตัวเอง ซึ่งใช้ในธุรกิจขนาดใหญ่ ๆ เพียงเท่านั้นเพราะมีราคาแพงมหาศาลมาก ๆ\nซึ่งต้องใช้ระบบปฏิบัติการที่แตกต่างกันเพื่อเป็นส่วนเชื่อมต่อการทำงานของอุปกรณ์แต่ละชิ้นของคอมพิวเตอร์ให้สามารถทำงานร่วมกันได้ ตลอดจนทำภารกิจอื่น ๆ อีกมากมาย และยังเป็นพื้นฐานของโปรแกรมประยุกต์ต่าง ๆ ในยุคนั้น เช่น ระบบบัญชี , ระบบเงินเดือน , โปรแกรม Word Processing\nซึ่ง IBM นั้นได้สร้างคอมพิวเตอร์ที่มี Segment ยิบย่อยเต็มไปหมด มีราคาที่แตกต่างกัน มีการออกแบบที่แตกต่างกัน บางรุ่นนั้นสร้างขึ้นมาเพื่อคำนวณทางวิทยาศาสตร์ ในขณะที่ในบางรุ่น ทำงานด้านธุรกิจเพียงเท่านั้น\nBill Gates เป็นคนที่มองถึงปัญหานี้ได้อย่างทะลุปรุโปร่ง เพราะเขาใช้เวลาจำนวนมากในการแปลงซอฟต์แวร์ จากคอมพิวเตอร์รุ่นหนึ่งไปยังเครื่องคอมพิวเตอร์อีกรุ่น เป็นประจำผ่านโปรแกรมภาษา Basic ที่เขาถนัด แม้ IBM จะทำการปรับสถาปัตยกรรมครั้งใหญ่อย่างการเกิดขึ้นของเครื่องคอมพิวเตอร์ในตระกูล system/360 ที่เริ่มหันมาใช้ระบบปฏิบัติการเดียวกันไม่ว่าเครื่องจะรุ่นใหญ่รุ่นเล็ก และถือว่าประสบความสำเร็จอย่างล้นหลามกับ System/360\nSystem/360 กับการเปลี่ยนแปลงสถาปัตยกรรมครั้งใหญ่ของ IBM แต่มันได้เกิดการเปลี่ยนแปลงครั้งสำคัญของวงการ Software โลก เพราะ ในขณะที่ IBM สร้าง System/360 ที่สามารถเข้ากันได้กับเครื่องหลาย ๆ รุ่นนั้น มันก็ได้เกิด การสร้างโปรแกรมเลียนแบบให้สามารถทำงานร่วมกับเครื่อง System/360 ของ IBM ได้นั่นเอง และกลายเป็นว่าบริษัทหน้าใหม่อย่าง Control , Data , Hitachi , iTel ก็สามารถผลิตเครื่องเมนเฟรมที่ทำงานร่วมกันกับเครื่องของ IBM ได้ และสามารถทำราคาได้ถูกกว่าที่ IBM ทำ ซึ่งแม้ช่วงเวลาดังกล่าวนั้น Bill Gates ได้ก่อตั้ง Microsoft มาเป็นที่เรียบร้อยแล้ว แต่เขาก็ยังคงศึกษาอยู่ที่ Harvard ยังไม่ได้ลาออกแต่อย่างใด\nและเป็นช่วงนี้เองที่เขาได้มาพบกับคู่หูคนสำคัญที่บทบาทกับ Microsoft ในอนาคตอย่าง Steve Ballmer ซึ่งเป็นเพื่อนใหม่ของ Gates ในวิชาเอกคณิตศาสตร์ที่เพิ่งได้รู้จักกันในปีแรกของการเรียนมหาวิทยาลัย และสุดท้ายทั้งคู่ก็ได้มาพักในห้องเดียวกัน ที่หอพักในมหาวิทยาลัย Harvard ซึ่งมันเป็นความแตกต่างที่สุดขั้วระหว่าง Gates และ Ballmer เพราะ Ballmer นั้นเป็นชายหนุ่มที่พลังเหลือล้น และเป็นคนเข้าสังคมตัวยง ใช้เวลาในมหาวิทยาลัยอย่างคุ้มค่า เข้าร่วมกิจกรรมต่าง ๆ เต็มที่\nBallmer นั้นเป็นทั้งผู้จัดการทีมฟุตบอล เป็นผู้จัดการฝ่ายโฆษณาของหนังสือพิมพ์ Harvard Crimson ซึ่งเป็นหนังสือพิมพ์ประจำของมหาวิทยาลัย Harvard รวมถึงยังเป็น ประธานวารสารวรรณกรรมของมหาวิทยาลัยอีกด้วย ซึ่งมีสิ่งเดียวที่ทั้งคู่เหมือนกันก็คือ เป็นจอมโดดเรียนเหมือนกันทั้งคู่\nสำหรับบริษัท Microsoft ของ Gates นั้นตั้งสำนักงานแห่งแรกในเมืองแอลเบอเคอร์กี มลรัฐนิวเม็กซิโก ในปี 1975 สาเหตุที่สำคัญเนื่องมาจากพวกเขาต้องการเข้าใกล้แหล่งผลิตเครื่อง Altair 8800 ซึ่งผลิตโดยบริษัท MITS ซึ่งเป็นบริษัทเล็ก ๆ ที่ผลิตชุดคอมพิวเตอร์ประกอบเอง ซึ่งรายได้หลักช่วงแรก ๆ ของ Microsoft ก็มาจากการเขียน Software ให้ MITS นี่เอง โดย MITS นั้นจะให้ค่าลิขสิทธิ์ Software กับ Microsoft ที่ขายไปพร้อมกับเครื่อง Altair 8800 ตลอดจนให้พื้นที่บางส่วนในการเป็นสำนักงานกับบริษัทน้องใหม่อย่าง Microsoft\nรายได้หลักในช่วงแรกของ Microsoft กับการขาย software ให้ Altair 8800 ของบริษัท MITS ซึ่ง Model การขายตรงไปยังผู้ผลิต Hardware ถือเป็นส่วนสำคัญมากกับการเจริญเติบโตอย่างรวดเร็วของ Microsoft เพราะ การขายตรงไปยังผู้ใช้งานนั้นมันเป็นเรื่องยาก และที่สำคัญยังมีปัญหาในเรื่องลิขสิทธิ์ เพราะมักมีการลักลอบใช้งาน จากผู้ใช้งานทั่วไปอยู่ในขณะนั้น ซึ่งเป้าหลายหลักของ Microsoft ที่ Gates วางไว้นั้นอยู่ที่การเขียน Software ป้อนให้กับคอมพิวเตอร์ส่วนบุคคลเป็นส่วนใหญ่ โดยจะไม่ไปเข้าร่วมในส่วนของการสร้างหรือขาย Hardware Computer โดย Gates นั้นยึดนโยบายการขายลิขสิทธิ์ให้ใช้ Software ของเขาในราคาที่ต่ำที่สุด และมองถึงปริมาณยอดขายในจำนวนมาก ๆ ซึ่งกลยุทธ์ของ Gates นั้นได้ผลอย่างยอดเยี่ยม ซึ่งแทบจะกล่าวได้ว่า ผู้ผลิตคอมพิวเตอร์ส่วนบุคคลในตลาดเกือบทุกรายในขณะนั้น ซื้อลิขสิทธิ์ภาษา Basic ที่ใช้เขียนโปรแกรมจาก Microsoft แทบจะทั้งสิ้น\nซึ่งแม้ว่า Hardware ของแต่ละบริษัทจะแตกต่างกันเช่นไร แต่สามารถใช้โปรแกรมของ Microsoft ได้อย่างราบรื่น และการใช้งานร่วมกันได้นี้เองที่เป็นส่วนสำคัญในการตัดสินใจเลือกซื้อคอมพิวเตอร์ ที่เหล่าผู้ผลิต Hardware ส่วนใหญ่ต่างโฆษณากันว่า โปรแกรมของ Microsoft นั้นสามารถ ใช้งานกับคอมพิวเตอร์ของพวกเขาได้ และเมื่อถึงปี 1977 บริษัท Apple , Commodore รวมถึง Radio Shack ก็ได้เริ่มเข้าสู่วงการคอมพิวเตอร์ส่วนบุคคล โดย Microsoft ก็ได้กลายเป็นผู้สร้างโปรแกรมภาษา Basic ให้กับเครื่องส่วนใหญ่ในขณะนั้นแทบจะทั้งหมด\nSteve Jobs ที่ได้นำ Apple เข้าสู่ตลาดคอมพิวเตอร์ส่วนบุคคล รวมถึงตลาดอีกแห่งที่สำคัญในเอเชียอย่างญี่ปุ่น ก็ได้คู่ค้าที่สำคัญไปขยายตลาดในฝั่งเอเชีย ที่มีความต้องการสูงเป็นอย่างมากในช่วงเวลานั้นเพราะได้เกิดบริษัทขนาดใหญ่ขึ้นมามากมายพร้อม ๆ กับการเติบโตอย่างรวดเร็วของเศรษฐกิจญี่ปุ่นในขณะนั้น ทำให้ Microsoft ได้รับ อานิสงส์ไปเต็ม ๆ และที่สำคัญตอนนี้ ภาษา Basic ของ Microsoft ได้กลายเป็นมาตรฐานใหม่ของอุตสาหกรรม Software ในขณะนั้นไปเป็นที่เรียบร้อยแล้ว ซึ่งทำให้ Gates ต้องลาออกจาการเรียนที่มหาวิทยาลัย Harvard เพื่อมุ่งมาที่ Microsoft แบบเต็มตัว\nและเขาก็ได้ขยายทีมงานกว่าหลายสิบชีวิต เหล่าวิศวกรระดับเทพ โปรแกรมเมอร์มือฉมังมารวมตัวกันที่สำนักงานของ Microsoft พร้อมที่จะพา Microsoft พุ่งทะยานไปข้างหน้า และ Gates ก็ได้ชักชวนให้ Ballmer อดีต Roommate ของเขาที่ Harvard มาช่วยกับขับเคลื่อนธุรกิจ Microsoft แบบเต็มตัว เรียกได้ว่าตอนนี้ Microsoft มีกำลังพลที่พร้อมมาก ๆ ที่จะไปรบในศึกใหญ่\nแถมชื่อของ Microsoft ก็ดังกระฉ่อนไปทั่วอเมริกา รวมถึงในญี่ปุ่นเป็นที่เรียบร้อยแล้วอีกด้วย ดูเหมือนการเดินกลยุทธ์ครั้งนี้ของ Gates นั้นจะเห็นผลสำเร็จอย่างรวดเร็วมาก ๆ และตอนนี้ Microsoft นั้นพร้อมจะก้าวขึ้นไปอีกระดับแล้ว\n","date":1589065200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589065200,"objectID":"c0d35b5b22f0bfa781f17364ad2d2743","permalink":"https://example.com/book/gates/bill-gate-2/","publishdate":"2020-05-10T00:00:00+01:00","relpermalink":"/book/gates/bill-gate-2/","section":"book","summary":"IBM ถือเป็นยักษ์ใหญ่ที่ปรับตัวไม่ทันตามการเปลี่ยนแปลงทางเทคโนโลยี และกระแสของตลาดคอมพิวเตอร์ส่วนบุคคล ที่กำลังจะถือกำเนิดขึ้น ซึ่งแน่นอนว่าในขณะนั้นสถานการณ์ของ IBM ในตลาดคอมพิวเตอร์องค์กรขนาดใหญ่ ซึ่งก็ถือว่าเป็นฐานที่แข่งแกร่งมากสำหรับพวกเขา ปัญหาใหญ่ของคอมพิวเตอร์ขนาดใหญ่เหล่านี้คือ การออกแบบมาเพื่อทำงานเฉพาะด้าน ใช้ระบบปฏิบัติการ และซอฟต์แวร์การใช้งานของตัวเอง ซึ่งใช้ในธุรกิจขนาดใหญ่ ๆ เพียงเท่านั้นเพราะมีราคาแพงมหาศาลมาก ๆ\nซึ่งต้องใช้ระบบปฏิบัติการที่แตกต่างกันเพื่อเป็นส่วนเชื่อมต่อการทำงานของอุปกรณ์แต่ละชิ้นของคอมพิวเตอร์ให้สามารถทำงานร่วมกันได้ ตลอดจนทำภารกิจอื่น ๆ อีกมากมาย และยังเป็นพื้นฐานของโปรแกรมประยุกต์ต่าง ๆ ในยุคนั้น เช่น ระบบบัญชี , ระบบเงินเดือน , โปรแกรม Word Processing\nซึ่ง IBM นั้นได้สร้างคอมพิวเตอร์ที่มี Segment ยิบย่อยเต็มไปหมด มีราคาที่แตกต่างกัน มีการออกแบบที่แตกต่างกัน บางรุ่นนั้นสร้างขึ้นมาเพื่อคำนวณทางวิทยาศาสตร์ ในขณะที่ในบางรุ่น ทำงานด้านธุรกิจเพียงเท่านั้น\nBill Gates เป็นคนที่มองถึงปัญหานี้ได้อย่างทะลุปรุโปร่ง เพราะเขาใช้เวลาจำนวนมากในการแปลงซอฟต์แวร์ จากคอมพิวเตอร์รุ่นหนึ่งไปยังเครื่องคอมพิวเตอร์อีกรุ่น เป็นประจำผ่านโปรแกรมภาษา Basic ที่เขาถนัด แม้ IBM จะทำการปรับสถาปัตยกรรมครั้งใหญ่อย่างการเกิดขึ้นของเครื่องคอมพิวเตอร์ในตระกูล system/360 ที่เริ่มหันมาใช้ระบบปฏิบัติการเดียวกันไม่ว่าเครื่องจะรุ่นใหญ่รุ่นเล็ก และถือว่าประสบความสำเร็จอย่างล้นหลามกับ System/360\nSystem/360 กับการเปลี่ยนแปลงสถาปัตยกรรมครั้งใหญ่ของ IBM แต่มันได้เกิดการเปลี่ยนแปลงครั้งสำคัญของวงการ Software โลก เพราะ ในขณะที่ IBM สร้าง System/360 ที่สามารถเข้ากันได้กับเครื่องหลาย ๆ รุ่นนั้น มันก็ได้เกิด การสร้างโปรแกรมเลียนแบบให้สามารถทำงานร่วมกับเครื่อง System/360 ของ IBM ได้นั่นเอง และกลายเป็นว่าบริษัทหน้าใหม่อย่าง Control , Data , Hitachi , iTel ก็สามารถผลิตเครื่องเมนเฟรมที่ทำงานร่วมกันกับเครื่องของ IBM ได้ และสามารถทำราคาได้ถูกกว่าที่ IBM ทำ ซึ่งแม้ช่วงเวลาดังกล่าวนั้น Bill Gates ได้ก่อตั้ง Microsoft มาเป็นที่เรียบร้อยแล้ว แต่เขาก็ยังคงศึกษาอยู่ที่ Harvard ยังไม่ได้ลาออกแต่อย่างใด","tags":null,"title":"ตอนที่ 2 - The Standard","type":"docs"},{"authors":null,"categories":null,"content":"  “This is the best reason to learn history: not in order to predict the future, but to free yourself of the past and imagine alternative destinies. Of course this is not total freedom – we cannot avoid being shaped by the past. But some freedom is better than none.”\nเมื่อเราเข้าใจ “เรื่องราวที่แท้จริง” ของมนุษย์ เมื่อนั้นเราก็จะเข้าใจ “เป้าหมาย” ของการเดินทางของมนุษยชาติ\n  Homo Deus คือ หนังสือภาคต่อจาก Sapiens ของ Yuval Noah Harari ศาสตราจารย์ทางประวัติศาสตร์ผู้นำเสนอเรื่องราวของ “อนาคต” ของมนุษยชาติผ่านการศึกษาความเป็นมาทางประวัติศาสตร์ ของเผ่าพันธุ์ Homo Sapiens ที่พัฒนาตนเองขึ้นจากการเป็น “สัตว์” อันไร้ซึ่งความสำคัญใดๆมาเป็น “เทพเจ้า” ผู้กำหนดชะตาชีวิตของทุกสรรพสิ่ง แต่เมื่อสิ่งที่ถูกมนุษย์สร้างขึ้นอย่าง algorithm เริ่มมีสติปัญญาที่ชาญฉลาดกว่ามันสมองของมนุษย์ โลกของเราทุกคนจะเปลี่ยนแปลงไปอย่างไร\nChapter 1: The New Human Agenda โศกนาฏกรรม 3 อันดับสำคัญที่มนุษยชาติต้องพบเจอตลอดระยะเวลาหลายพันปีที่ผ่านมานั้นประกอบไปด้วย “ความอดอยาก” “โรคระบาด” และ “สงคราม”\nFamine ในยุคเกษตรกรรม หากภัยธรรมชาติส่งผลกระทบต่อผลิตผลทางการเกษตรของหมู่บ้านแห่งหนึ่ง ความทุกข์ทรมานจากความอดอยากนั้นเป็นสิ่งที่แทบจะหลีกเลี่ยงไม่ได้เลย แต่ทุกวันนี้ ผลิตภาพทางการเกษตรและความเป็นอยู่ที่ดีขึ้นของมนุษย์ได้ทำให้ภาวะอดอยากหายสาบสูญไปจากโลกจนเกือบจะหมดสิ้นและมนุษย์กลับมีโอกาสเสียชีวิตจากภาวะการรับประทานอาหารที่ “มากเกินไป” แทน\nPlague เริ่มต้นในช่วงทศวรรษที่ 1330 ภัยร้ายนามว่า the Black Death ได้คร่าชีวิตมนุษย์กว่า 1 ใน 4 ของประชากรทั้งหมดในแถบทวีปยุโรปและเอเชีย ในยุคเริ่มต้นของการล่าอาณานิคมของชาวสเปนในแถบทวีปอเมริกา ได้นำพาเชื้อโรคที่ชาวท้องถิ่นไม่เคยได้สัมผัสข้ามทวีปมาแพร่ระบาดไปทั่วอาณาจักร Aztec และ Maya อย่างรวดเร็วจนทำให้กว่า 90% ของประชากรท้องถิ่นต้องจบชีวิตลงภายในระยะเวลาอันสั้น แต่ในปัจจุบัน ภาวะโรคระบาดนั้นสร้างความเสียหายในอัตราที่น้อยลงเป็นอย่างมากทั้ง ๆ ที่สภาวะการอาศัยอยู่รวมกันในเมืองที่แออัด และระบบการคมนาคมอันรวดเร็วนั้น ถือเป็นแหล่งแพร่กระจายโรคระบาดได้เป็นอย่างดี (Ebola ที่เกิดขึ้นในปี 2014 คร่าประชากรไปเพียงแค่หลักหมื่นคนเท่านั้น) ความเสี่ยงของโรคระบาดร้ายแรงในอนาคต น่าจะเกิดขึ้นจากฝีมืของมนุษย์มากกว่าจากธรรมชาติ\nWar ปัจจุบันสงครามและการก่ออาชญากรรมนั้นเป็นเพียงแค่ 1% ของสาเหตุการตายของมนุษย์ (ซึ่งน้อยกว่าการฆ่าตัวตายและโรคเบาหวาน) ทั้งนี้ก็เพราะว่าสงครามในยุคปัจจุบันนั้นแทบจะ “ไม่มีประโยชน์” ในความคุ้มค่าทางเศรษฐกิจอีกต่อไป การเกิดขึ้นของอาวุธ “นิวเคลียร์” ส่งผลให้การสู้รบกันระหว่างชาติมหาอำนาจเป็นเหมือนการ “ฆ่าตัวตายหมู่” ที่ไร้เหตุผลสิ้นดี ชัยชนะจากสงครามนั้น ก็แทบจะไม่มีมูลค่าอีกต่อไป เพราะทรัพย์สมบัติที่มีค่าที่สุดของมนุษย์ในยุคนี้อยู่ใน “คอมพิวเตอร์” และ “มันสมอง” ของมนุษย์ (สงครามที่เกิดขึ้นในช่วงที่ผ่านมานั้นมักเกิดขึ้นกับประเทศที่มีทรัพยากรมหาศาล อาทิ บ่อน้ำมันหรือเหมืองแร่) ในทางกลับกัน “ความสงบสุขอันยั่งยืน” ก็ได้เกิดขึ้นมาแทนที่ “ความสงบสุบชั่วคราว” ผ่านการทำการค้า และการลงทุนระหว่างประเทศ ที่ทำให้ความคิดถึงการทำสงครามระหว่างกันนั้น “เป็นไปไม่ได้” อีกต่อไป และนี่คือสาเหตที่ประเทศจีน เลือกทำสัญญาทางธุรกิจกับ Apple และ Microsoft แทนการยกทัพมายึด Silicon Valley\nเมื่อ “ความท้าทาย” ในอดีตได้รับการแก้ไขจนเกือบสมบูรณ์แล้ว มนุษย์ผู้มีความทะเยอทะยานสูงก็ได้เริ่มออกตามหา “ความท้าทาย” ครั้งใหม่อันประกอบไปด้วย ความเป็นอมตะ ความสุขและการก้าวข้ามขีดจำกัดของมนุษย์ธรรมดาไปเป็น “พระเจ้า”\nImmortality “ความตาย” ถือเป็นส่วนสำคัญอย่างมากของ “ศาสนา” ที่คอยพร่ำสอนให้มนุษย์ทำความดีเพื่อสร้าง “ชีวิตหลังความตาย” ที่ยอดเยี่ยม (ถ้าไม่มีความตาย แนวคิดของสวรรค์และนรกคงไม่เคยเกิดขึ้น) แต่ปัจจุบัน “ความตาย” ที่เกิดขึ้นกับมนุษย์ผ่าน “โรคร้าย” ต่าง ๆ นั้นถูกตีความใหม่ให้กลายมาเป็นเพียงแค่ “ปัญหาทางเทคนิค” ของร่างกายมนุษย์ ที่รอให้เทคโนโลยีทางการแพทย์แก้ไขปัญหาให้หายขาด ปัจจุบัน นักวิทยาศาสตร์และบริษัทเทคโนโลยีชั้นนำเริ่มให้ความสำคัญกับ Life Science หรือศาสตร์แห่งชีวิต ที่ศึกษาเรื่องการรักษาความผิดปกติของร่างกาย และการยืดอายุไขของเซลส์และอวัยวะต่าง ๆ ของมนุษย์ ในเร็ว ๆ นี้ เราอาจจะเริ่มเห็นมนุษย์ที่มีอายุไขเพิ่มขึ้นจากเดิม (ซึ่งนั่นก็ทำให้โครงสร้างทางสังคม เปลี่ยนแปลงไปจากปัจจุบันโดยสิ้นเชิง ลองคิดดูว่ามนุษย์อาจจะเกษียณในอายุ 120 ปี ปูตินอาจจะเป็นนายกของรัสเซียต่อไปอีก 60 ปีก็ได้) ส่วนในระยะยาว มนุษย์อาจเริ่มกลายเป็น “a-mortal” หรือ ผู้ที่มีร่างกายเป็นอมตะ (ยกเว้น ได้รับความเสียหายอย่างรุนแรง จนเสียชีวิต ซึ่งก็อาจจะทำให้บุคคลอมตะเหล่านี้ เกรงกลัวต่อกิจกรรมที่มีความเสี่ยงอย่างสุดโต่ง) ซึ่งแน่นอนว่า “มนุษย์” ทุกคนจะต้องพยายามทุกวิถีทาง ให้ตัวเองกลายเป็นมีชีวิตอยู่ชั่วนิรันดร์ และเงินทุนมหาศาลจะเป็นตัวกระตุ้นให้การตามล่าความเป็นอมตะ ดำเนินต่อไปจนสัมฤทธิ์ผล\nHappiness ตั้งแต่การเริ่มต้นของการสร้างอาณาจักรและประเทศชาติ การพัฒนาโครงสร้างพื้นฐาน การศึกษา สุขอนามัยและการยกระดับความเป็นอยู่อาศัยของประชาชนนั้นมีวัตถุประสงค์หลักคือการสร้าง “ความแข็งแกร่ง” ให้กับประเทศชาติโดยปราศจากการคำนึงถึง “ความสุข” ที่แท้จริงของประชาชน (ประเทศพัฒนาแล้วมากมายมีอัตราการฆ่าตัวตายสูงขึ้นตามการเพิ่มขึ้นของ GDP per capita) การสร้างความสุขที่แท้จริงของมนุษย์นั้นต้องเริ่มต้นจากการแก้ไข “อุปสรรค” สำคัญ 2 ข้อ ได้แก่\n อุปสรรคทาง “จิตวิทยา” ที่ว่าด้วยความสุขของมนุษย์นั้น เกิดขึ้นจากการที่ความจริงที่พวกเขาต้องเผชิญนั้น ตรงกับความคาดหวังของพวกเขามากน้อยแค่ไหน (ซึ่งปัจจุบัน ความก้าวหน้าทางเทคโนโลยี ได้นำพาให้ความคาดหวังของมนุษย์สูงขึ้นๆไปเรื่อยๆ)\n อุปสรรคทาง “ชีววิทยา” ที่พิสูจน์ไว้แล้วว่าความสุขของมนุษย์ขึ้นอยู่กับ “ฮอร์โมน” ภายในร่างกายเท่านั้น อันเป็นไปตามการวิวัฒนาการของธรรมชาติที่สร้างให้มนุษย์มีความรู้สึกดีหลังจากได้กระทำสิ่งที่เป็นประโยชน์ต่อการดำรงชีวิตได้สำเร็จก่อนที่ความรู้สึกนั้นจะจางหายไปในเวลาต่อมา เทคโนโลยีในอนาคต ที่จะเข้ามาเติมเต็มช่องว่างก้อนใหญ่ของมนุษย์ก็คือ การสร้าง “ความสุขชั่วนิรันดร์” ผ่านการ “จัดระเบียบ” ระบบการทำงาน ของสารเคมีในร่างกายมนุษย์ ให้สามารถหลั่งฮอร์โมนให้มนุษย์มีความสุขในเชิงบวกได้ตลอดเวลา (ปัจจุบันมีมนุษย์หลายล้านคนกินยาระงับประสาท ยาแก้โรคซึมเศร้าและยาเสพย์ติด ที่ล้วนมีผลต่อการปรับเปลี่ยนสารเคมี ที่มีผลต่ออารมณ์ความรู้สึกของมนุษย์ทั้งนั้น)\n  Divinity หลังจากที่มนุษย์สามารถออกแบบร่างกายและจิตใจของตัวเองได้แล้ว เป้าหมายที่เหลือของพวกเขาก็คงเป็นการอัพเกรด “พลัง” ให้กับตัวเองให้เทียบชั้นกับ “เทพเจ้า” ตั้งแต่ การเสริมสร้างความสามารถของร่างกายผ่านการปรับเปลี่ยนพันธุกรรม การผสมผสานหุ่นยนต์เข้ากับร่างกายและสมองของมนุษย์ ไปจนถึงการอัพโหลดจิตใจของมนุษย์เข้าไปยังเครื่องจักรที่ไม่มีวันตาย ทั้งหมดนี้อาจจะดูเพ้อฝัน แต่สิ่งหนึ่งที่สามารถมั่นใจได้เลยก็คือ มนุษย์ในปัจจุบันคงไม่สามารถจินตนาการถึง “มนุษย์อนาคต” ที่ก้าวผ่านจากสายพันธุ์ Homo Sapiens (มนุษย์ฉลาด) มาเป็น Homo Deus (มนุษย์เทพเจ้า) ได้อย่างแน่นอน\nประวัติศาสตร์เป็นข้อพิสูจน์ชั้นดีว่าการ “อัพเกรดมนุษย์” นั้นเป็นสิ่งที่ไม่อาจหลีกเลี่ยงได้ในอนาคต เทคโนโลยีในช่วงเริ่มต้นนั้นอาจเกิดขึ้นในรูปแบบของกระบวนการแก้ไขความผิดปกติต่างๆของมนุษย์ (อาทิ การเลือกเอ็มบรีโอของเด็กทารกที่มีสุขภาพสมบูรณ์ หรือ การแก้ไขดีเอ็นเอที่มีปัญหาของเอ็มบรีโอ) แต่หากกระบวนการเหล่านั้นสามารถทำให้มนุษย์ปกติมีคุณสมบัติที่เพิ่มขึ้น สุดท้ายโลกจะไม่อาจควบคุมการแพร่กระจายของเทคโนโลยีนี้ได้ (หากอเมริกาสั่งแบนการตัดต่อพันธุกรรม แต่เกาหลีเหนือสนับสนุนโครงการนี้เต็มที่เพื่อสร้างมนุษย์อัจฉริยะ อเมริกาคงไม่มีทางยอมปล่อยโอกาสนี้ไปแน่ๆ)\nแต่ก็อย่าลืมเด็ดขาดว่า “อนาคต” ที่พวกเราพอจะมองเห็นอยู่ลิบ ๆ นั้นเกิดขึ้นจากการร้อยเรียงเรื่องราวและความเชื่อของมนุษย์ที่ถูกสร้างขึ้นโดยมนุษย์ตั้งแต่ในอดีตจนถึงปัจจุบัน นั่นหมายความว่าโลกและมนุษยชาติอาจจะไม่ใช่สิ่งที่พวกเราจินตนาการถึงได้เลยเมื่อ “อนาคตที่แท้จริง” เดินทางมาถึง\n Part I – Homo Sapiens Conquers the World   Chapter 2: The Anthropocene (ยุคแห่งมนุษย์) การพยากรณ์ความสัมพันธุ์ระหว่าง Homo Sapiens ยุคปัจจุบันกับ Homo Deus ในยุคอนาคตนั้นคงเป็นสิ่งที่ไม่ง่ายนัก แต่เราก็อาจพอจะใช้ประวัติศาสตร์ของความสัมพันธุ์ระหว่าง “มนุษย์” กับ “สัตว์” ชนิดอื่นมาใช้เป็นกรอบความคิดคร่าว ๆ ได้\nAntropocene คือ “ยุคแห่งมนุษย์” ที่เริ่มต้นขึ้นเมื่อ 70,000 ปีก่อน หลังจากการปฏิวัติทางความตระหนักรู้ของมนุษย์สายพันธุ์ Homo Sapiens ที่ทำให้ “มนุษย์” กลายเป็นสิ่งมีชีวิตสายพันธุ์เดียวในโลก ที่กุมชะตากรรมของสิ่งมีชีวิตทั้งหมด (ปัจจุบัน สัดส่วนน้ำหนักรวมของสิ่งมีชีวิตเกิน 90% ตกเป็นของมนุษย์ สัตว์เลี้ยงและสัตว์อุตสาหกรรม)\nความสัมพันธุ์ของ Homo Sapiens และสิ่งมีชีวิตชนิดอื่น ๆ ในยุคของนักล่าสัตว์ และนักหาของป่านั้นอยู่ในรูปของความเชื่อที่ว่า สิ่งมีชีวิตและไม่มีชีวิตทั้งหมดล้วนมีจิตวิญญาณ (Animism) ที่มนุษย์จะต้องทำความเคารพ และเกื้อกูลระหว่างกัน (การล่าสัตว์ในยุคโบราณนั้นต้องประกอบด้วยพิธีขอขมาสัตว์ที่ถูกล่านั้น ๆ) ก่อนที่การปฏิวัติทางเกษตรกรรมจะเปลี่ยนพฤติกรรม และความเชื่อของมนุษย์ให้กลายเป็นการเคารพต่อ “เทพเจ้า” ผู้มีพลังอำนาจมหาศาล ที่มาพร้อมกับการเปลี่ยนความคิดของการนับถือสัตว์ กลายเป็นการมองว่าสิ่งมีชีวิตชนิดอื่น ๆ นั้นมีศักดิ์ที่ต้อยต่ำกว่ามนุษย์อันเป็นเหตุให้ปศุสัตว์ผู้ถูกเลือกอย่าง หมู วัว ไก่ และแกะ ต้องกลายมาเป็นสัตว์ที่ต้องทนทุกข์ทรมานมากที่สุดในโลก (พร้อมกับการแพร่กระจายจำนวนอย่างรวดเร็ว) ซึ่งการปฏิวัติทางวิทยาศาสตร์ ก็ยิ่งเข้ามาซ้ำเติมความโหดร้ายของมนุษย์ ที่มีต่อสัตว์เหล่านั้นเข้าไปอีก (ยกเว้นในช่วงไม่กี่ทศวรรษที่ผ่านมาที่มนุษย์เริ่มหวนกลับมาให้ความสำคัญกับสิ่งมีชีวิตชนิดอื่น)\n ในอนาคตนั้น เราไม่อาจรับรู้ได้เลยว่า “มนุษย์เวอร์ชั่นอัพเกรด” หรือ A.I. ผู้มีสติปัญญาที่หลักแหลมกว่า Homo Sapiens ในปัจจุบันมากจะจัดการกับพวกเรา เหมือนในอดีตที่ผ่านมาหรือไม่   ภาพจาก Motherboard – Vice\nChapter 3: The Human Spark  “อะไร” คือสิ่งที่ทำให้มนุษย์มีความพิเศษมากกว่าสิ่งมีชีวิตชนิดอื่น\n หากคำถามนี้ถูกถามในยุคที่วิทยาศาสตร์ยังไม่ได้รรับการยอมรับอย่างกว้างขวาง คำตอบคงเป็น “วิญญาณ” ที่มีเพียงมนุษย์เท่านั้นที่ได้ครอบครอง อันเป็นเหตุให้มนุษย์มองเห็นสิ่งมีชีวิตอื่น ๆ เป็นเพียงร่างที่ไร้วิญญาณ และสามารถย่ำยีได้ตามชอบ (ปัจจุบันชาวอเมริกันเพียงแค่ 15% เท่านั้น ที่เชื่อว่ามนุษ เกิดขึ้นจากการวิวัฒนาการตามธรรมชาติเท่านั้นโดยไม่ต้องพึ่งพระเจ้า)\nส่วนคำตอบที่น่าจะได้รับการยอมรับในยุคปัจจุบันมากกว่าก็คือ “จิตใจ” (mind) และ “การตระหนักรู้” (consciousness) ซึ่งปัจจุบัน เทคโนโลยีทางวิทยาศาสตร์ สามารถตรวจจับกระบวนการทำงานของระบบประสาทภายในสมองของสิ่งมีชีวิต ได้อย่างมีประสิทธิภาพในระดับหนึ่ง แต่ก็ยังไม่สามารถตรวจจับกระบวนการทำงานของ “จิตใจ” ที่ทำให้มนุษย์รู้สึกรัก โลภ โกรธหรือกลัวได้เลย (มีเพียงตัวของเราเองเท่านั้นที่เชื่อมั่นในการมีอยู่ของจิตใจและความรู้สึกของเรา ไม่แน่เราอาจจะเป็นเพียงผู้เล่นในโลกจำลองของสิ่งมีชีวิตชั้นสูงหรือมนุษย์ในอนาคตอยู่ก็เป็นได้)\nนักวิทยาศาสตร์หลายคนพยายามจับเอาคอนเส็ปต์ ของระบบคอมพิวเตอร์อย่าง algorithm ที่เป็นเหมือนชุดคำสั่งขนาดใหญ่ มาใช้อธิบายถึงพฤติกรรมของสิ่งมีชีวิตต่าง ๆ แทนการใช้จิตใจ อาทิ เมื่อลิงเห็นเสือ ประสาทตาของลิง ก็จะทำการส่งกระแสไฟฟ้าเข้าไปยังสมอง เพื่อประมวลผลผ่าน algorithm ของลิงตัวนั้น และส่งผลลัพธ์ออกมาในรูปของกระแสประสาท เพื่อให้ลิงวิ่งหนีเสือ โดยที่ลิงไม่ได้มีความรู้สึกกลัวหรือตกใจแต่อย่างใดเลย\nแต่เอาจริง ๆ แล้ว การทดลองหลายครั้งในอดีตก็ได้พิสูจน์ว่าสิ่งมีชีวิตชนิดอื่น ๆ ก็มีความตระหนักรู้ได้ไม่แพ้มนุษย์ อาทิ Clever Hans ม้าผู้แสนฉลาดแห่งเยอรมนีในยุคปี 1900s ที่มีความสามารถ ในการตอบปัญหาบวกลบคูณหารเลขผ่านการเคาะเท้าเป็นจำนวนครั้ง ตามคำตอบที่ถูกต้องได้อย่างแม่นยำ ซึ่งนักจิตวิทยาได้ค้นพบว่า Clever Hans ไม่ได้มีความสามารถในการคิดเลขเหมือนกับมนุษย์ แต่เจ้าม้าตัวนี้ใ ช้วิธีการเคาะเท้าพร้อม ๆ กับการสังเกตสีหน้าของมนุษย์ผู้เป็นคนถามคำถาม ที่มักจะแสดงอาการอย่างชัดเจนเมื่อ Clever Hans กระแทกเท้าจนใกล้ถึงคำตอบที่ถูกต้องและมันก็จะหยุดกระแทกเท้าไปในที่สุด\nแต่จากการศึกษาประวัติศาสตร์ของมนุษยชาติ “ปัจจัย” ที่น่าจะส่งผลให้ Homo Sapiens กลายมาเป็นสิ่งมีชีวิตที่ยิ่งใหญ่ที่สุดในโลก ได้ภายในเวลาเพียงแค่เสี้ยวหนึ่งของอายุของดาวดวงนี้ ไม่ใช่ “วิญญาณ” หรือ “จิตใจอันสูงส่ง” แต่กลับกลายเป็น “ความสามารถในการทำงานร่วมกันอย่างซับซ้อนและมีประสิทธิภาพ” อย่างที่สิ่งมีชีวิตชนิดอื่นสามารถทำได้ ซึ่งสาเหตุที่มนุษย์สามารถทำงานร่วมกัน เป็นกลุ่มขนาดหลักพันหลักล้านคนได้นั้น เกิดจากการที่มนุษย์สามารถคิดค้น “ความเชื่อที่ถูกสร้างขึ้นโดยฝีมือมนุษย์” (imagined order) อาทิ ศาสนา พระเจ้า หลักมนุษยธรรม ประชาธิปไตยและระบบเงิน\nมนุษย์คือสิ่งมีชีวิตเดียวในโลกที่สามารถจินตนาการ “ความหมาย” ของการมีชีวิตอยู่ และการทำงานร่วมกันระหว่างมนุษย์ด้วยกันแองได้โดยไม่จำเป็นต้องพึ่ง “ความจริง” ที่เกิดขึ้นตามหลักการ ทางวิทยาศาสตร์และธรรมชาติ อาทิ นักรบชาวคริสเตียนเชื่อมั่นว่าตัวเองจะได้ขึ้นสวรรค์ หากเข้าร่วมสงครามครูเสดเพื่อคร่าชีวิตนักรบชาวอิสลามที่มีความเชื่อคล้าย ๆ กัน และเมื่อการเวลาเปลี่ยนไป ความเชื่อและความหมายของชีวิตก็เปลี่ยนแปลงไป ปัจจุบันความเชื่อเกี่ยวกับเทพเจ้า และศาสนากำลังเสื่อมความนิยม ขณะที่ความเชื่อเรื่องประชาธิปไตย ความเท่าเทียมกันและสิทธิมนุษยชนกำลังได้ความนิยมที่เพิ่มขึ้นเรื่อย ๆ ส่วนในอนาคต ความเชื่อรูปแบบใหม่ที่มนุษย์ในยุคปัจจุบันอาจจะยังคาดไม่ถึงก็อาจจะเกิดขึ้นได้ในไม่ช้า\nม้าแสนรู้ Clever Hans ที่ไม่ได้ฉลาดเหมือนที่มนุษย์คิด (ขอบคุณภาพจาก Wikipedia)\n Part II – Homo Sapiens Gives Meaning to the World   Chapter 4: The Storytellers มนุษย์คือสิ่งมีชีวิตชนิดเดียวที่อาศัยอยู่ในโลกที่มีความจริงซ้อนกันอยู่ 3 ชั้น (three-layered reality) อันประกอบไปด้วย ความจริงเชิงวัตถุ (objective reality) อาทิ อากาศและสิ่งแวดล้อม ความจริงเชิงปัจเจกบุคคล (subjective reality) อันได้แก่ อารมณ์และความรู้สึกภายใน และความจริงที่ถูกสร้างขึ้นโดยมนุษย์ด้วยกันเอง (imagined reality) ประวัติศาสตร์ของมนุษย์นั้น ถูกสร้างขึ้นจากการร้อยเรียงกันของเรื่องเล่าและความเชื่อของมนุษย์ ตั้งแต่ 70,000 ปี ก่อนที่มนุษย์เริ่มสามารถจินตนาการถึง “สิ่งที่ไม่มีอยู่จริง” อันเป็นจุดเริ่มต้นของการสร้าง “ความจริง” โดยฝีมือของจินตนาการของมนุษย์ เพื่อสร้างความสามารถในการทำงานร่วมกันของมนุษย์หมู่มากได้สำเร็จ\nโดยจุดเปลี่ยนครั้งสำคัญของมนุษยชาติ คือ การปฏิวัติทางเกษตรกรรมเมื่อ 12,000 ปีก่อน ที่ทำให้มนุษย์เริ่มเปลี่ยนพฤติกรรม จากการออกล่าสัตว์ และหาของป่าไปเป็นการอยู่รวมกันเป็นหลักแหล่งเป็นหมู่บ้านขนาดย่อม ก่อนที่ “อาณาจักร” ขนาดใหญ่จะเริ่มกำเนิดขึ้น หลังจากที่ชาวสุเมเรียนได้คิดค้น “ภาษาเขียน” อันเป็นพื้นฐานของระบบบัญชี และการปกครองของมวลมนุษย์ขนาดใหญ่ได้สำเร็จ ในช่วง 5,000 ปีก่อน และภาษาเขียนนี่เองที่เป็นตัวจุดประกายให้เกิดการสร้าง “เรื่องแต่ง” ให้กลายมาเป็น “เรื่องจริง” ที่ทำให้ประชาชนในแต่ละอาณาจักรเชื่อมั่นได้อย่างสนิทใจได้ ซึ่งในช่วงแรกเริ่มของอาณาจักรนั้น เรื่องจริงที่ถูกสร้างขึ้นโดยฝีมือมนุษย์นั้นมีลักษณะคล้าย ๆ กันก็คือ การนำเอา “เทพเจ้า” หรือ “พระเจ้า” มาเป็นจุดศูนย์กลางของความเชื่อ และกฎระเบียบการปกครองของอาณาจักร โดยแต่ละอาณาจักรจะมีผู้นำที่เปรียบเสมือน “ตัวแทนของเทพเจ้า” หรือไม่ก็เป็น “เทพเจ้า” ซะเองเลย อย่างฟาโรห์ของอาณาจักรอียิปต์\nถึงแม้ในยุคปัจจุบัน ความเชื่อเรื่องเทพเจ้าและภูติผีปีศาจ จะได้เสื่อมถอยลงไป แต่โลกของเรากลับเต็มไปด้วย “เรื่องแต่ง” โดยฝีมือมนุษย์ในยุคใหม่มากมาย ไม่ว่าจะเป็น ประเทศชาติ หลักการปกครอง เงินและบริษัท ที่ล้วนแล้วแต่จะมีอิทธิพลต่อมนุษย์มากขึ้นเรื่อย ๆ ซึ่งเอาจริง ๆ เรื่องแต่งเหล่านี้ ล้วนมีความสำคัญอย่างมากในการอยู่ร่วมกันของมนุษย์ในยุคปัจจุบัน แต่พวกเราก็ไม่ควรลืมว่าอะไรคือเรื่องแต่งและอะไรคือ “เรื่องจริง”\nThe Creation of Adam (ขอบคุณภาพจาก Wikipedia)\nChapter 5: The Odd Couple สองหลักการที่ขัดแย้งกันมาตลอดในยุคสมัยใหม่ก็คือ “ศาสนา” กับ “วิทยาศาสตร์” ที่ต่างก็พยายามอธิบายถึง “ความจริง” หนึ่งเดียวของโลกมนุษย์ ศาสนาต่าง ๆ (รวมถึงลัทธิคอมมิวนิสต์ ทุนนิยมและความเชื่อเรื่องความเท่าเทียมกันของมนุษย์) นั้นล้วนมีพื้นฐานมาจาก “กฎเกณฑ์” ที่มนุษย์สร้างขึ้น โดยอาศัยการเรื่องเล่าที่ว่าอันแท้จริงแล้ว กฎเกณฑ์เหล่านี้ถูกกำหนดโดยเทพเจ้าหรือเกิดขึ้นตามกฏของธรรมชาติ ซึ่งมนุษย์นั้นไม่มีความสามารถ ที่จะเปลี่ยนแปลงระเบียบเหล่านี้ได้ (ฮิตเลอร์คิดว่าตัวเองต้องจำใจเป็นผู้สังหารชาวยิวให้พ้นโลก จากความเชื่อที่ว่าชาวยิวเป็นกลุ่มมนุษย์ที่มียีนส์ชั้นต่ำ และจำเป็นต้องถูกกำจัดเพื่อรักษามนุษยชาติ ตามกฎแห่งธรรมชาติที่ชาวนาซีเชื่อถือในช่วงเวลานั้น) โดยเป้าหมายสูงสุดของศาสนานั้นคือการสร้าง “ระเบียบ” ให้กับสังคมมนุษย์ ซึ่งผู้ที่นับถือศาสนา หรือเชื่อมั่นในระบบกฎเกณฑ์นั้น จะมีความเชื่อว่า หลักการที่พวกเขาเชื่อมั่นนั้นคือ “สิ่งเดียวที่ถูกต้อง” อันหมายความว่า ความเชื่อของผู้ที่นับถือศาสนาอื่นนั้น เป็นเพียงเรื่องเพ้อฝันที่ไร้เหตุผลสิ้นดี\nปัญหาของความขัดแย้งระหว่างศาสนาและวิทยาศาสตร์นั้น จึงเกิดขึ้นจาก “ความขัดแย้งกันของความจริง” ซึ่งวิทยาศาสตร์กำลังมีบทบาทในการปฏิเสธความจริงของศาสนาและความเชื่อต่าง ๆ ด้วยหลักฐานที่ชัดเจน แต่อย่างไรก็ตาม สังคมมนุษย์นั้น ไม่สามารถพึงพาแต่หลักการทางวิทยาศาสตร์ ในการปกครองมนุษย์จำนวนมหาศาลให้อยู่ร่วมกันอย่างสงบสุขได้ สังคมยังต้องการ “หลักการทางจริยธรรม” จากศาสนาที่คอยกำหนดว่าอะไรคือสิ่งที่ถูกต้องและอะไรคือสิ่งที่ผิด (ซึ่งแน่นอนว่าปัญหาที่ตามมาก็คือความขัดแย้งทางความเชื่อระหว่างศาสนาที่ไม่ตรงกัน อาทิ ความเชื่อเรื่องการทำแท้ง ที่ศาสนาคริสต์มองว่าเป็นเรื่องที่ผิด แต่ชาวเสรีนิยมกลับมองว่าเป็นสิ่งที่มนุษย์สามารถกระทำได้ ทั้งนี้หลักการทางวิทยาศาสตร์นั้น สามารถตอบได้เพียงว่าทารกเริ่มได้รับความรู้สึกเจ็บปวดเมื่ออายุเท่าไหร่ แต่ไม่สามารถบอกได้ว่าการคร่าชีวิตทารกในครรภ์นั้นคือสิ่งที่ถูกต้องหรือไม่)\n ศาสนาและวิทยาศาสตร์ในอดีตจึงมีความสัมพันธุ์ที่ต้องพึ่งพาอาศัยกันมาโดยตลอด\n Chapter 6: The Modern Covenant “ความทันสมัย (modernist)” นั้นเกิดขึ้นจากการที่มนุษย์ยอมละทิ้ง “ความหมายของชีวิต” จากความเชื่อทางศาสนา ที่คอยสร้างกรอบให้มนุษย์ทำตามคำสั่งของพระเจ้า หรือกฎของธรรมชาติไปเป็นการออกตามหา “พลังอำนาจ” อันไร้ซึ่งขอบเขตซึ่งได้รับการสนับสนุนโดยความก้าวหน้าทาง “วิทยาศาสตร์” และอัตราการ “เติบโต” ของระบบเศรษฐกิจสมัยใหม่อย่างก้าวกระโดด\nการปฏิวัติทางวิทยาศาสตร์นั้นมีจุดกำเนิดจากการเปลี่ยนแปลงความคิดของมนุษย์ ที่แต่เดิมเชื่อมั่นว่าตัวเองค้นพบทรัพยากรทั้งหมดของโลกแล้ว ซึ่งหมายความว่าการที่มนุษย์จะมีฐานะที่ดีขึ้นได้นั้น จะต้องแลกเปลี่ยนด้วยการถดถอยลงของมนุษย์อีกคน (zero-sum game) กลายมาเป็นความเชื่อที่ว่า “ความรู้” ในการพัฒนาวิทยาศาสตร์และเทคโนโลยี ที่สามารถเพิ่มประสิทธิภาพขมนุษย์ สามารถสร้างอัตราการเติบโตของทรัพยากร และพลังงานที่มีอยู่อย่างจำกัดบนโลก ได้ด้วยการใช้องมนุษยชาติได้อย่างที่ไม่เคยเกิดขึ้นมาก่อน\nมนุษย์ในปัจจุบันจึงกลายเป็นสิ่งมีชีวิตที่เสพติด “อัตราการเติบโต” ของเศรษฐกิจ ที่คอยช่วยให้ความเป็นอยู่ของพวกเราดีขึ้นไปเรื่อย ๆ ซึ่งแน่นอนว่าปัญหาที่ตามมาอย่าง “มลพิษ” และ “ภาวะโลกร้อน” นั้นก็จะส่งผลที่รุนแรงมากขึ้นเรื่อย ๆ (หลักฐานที่แสดงให้เห็นว่ามนุษย์สนใจการเติบโตมากกว่าสิ่งแวดล้อมที่ชัดเจนที่สุด คืออัตราการปล่อยก๊าซคาร์บอนไดออกไซด์ ที่มีแต่จะเพิ่มขึ้นเรื่อย ๆ ถึงแม้ว่าจะมีการทำสัญญาระหว่างประเทศกันหลายรอบแล้วก็ตาม)\nChapter 7: The Humanist Revolution เหตุใดสังคมของมนุษย์สมัยใหม่ในยุคที่ปราศจากความเชื่อทางศาสนาถึงยังคงอยู่ร่วมกันได้อย่างสงบสุข คำตอบก็คือ มนุษย์ได้คิดค้นศาสนาชนิดใหม่ที่มีชื่อว่า “มนุษยนิยม (humanism)” ขึ้นมาในช่วงไม่กี่ทศวรรษที่ผ่านมา\nมนุษยนิยมเชื่อมั่นในพลังของ “มนุษย์” และยอมรับให้มนุษย์ทำหน้าที่แทนพระเจ้าหรือกฏแห่งธรรมชาติในการสร้าง “ความหมาย” ให้กับโลกและจักรวาล อันเป็นเหตุให้การตัดสินใจทั้งหมดของมนุษย์นั้นเกิดขึ้นจากการถาม “ความรู้สึก” ของตัวเองว่าสิ่งนั้นเป็นสิ่งที่ควรกระทำหรือไม่ โดยไม่ต้องยึดถือคัมภีร์ไบเบิ้ลหรือกฎข้อบังคับของศาสนาอื่น ๆ อีกต่อไป (มนุษย์เพียงแค่ถามตัวเองลึกๆว่าการกระทำนั้นทำให้เราและผู้อื่นรู้สึกดีหรือไม่ ธุรกิจก็แค่สร้างสินค้า หรือบริการที่เป็นที่ต้องการของลูกค้าเท่านั้นเพราะหลักการทางเศรษฐกิจของมนุษยนิยมก็คือ “ลูกค้าหรือมนุษย์นั้นถูกต้องเสมอ” อันเป็นเหตุให้ธุรกิจสีเทา หรือธุรกิจที่ส่งผลกระทบต่อสิ่งแวดล้อม ยังคงดำเนินกิจการได้ในปัจจุบัน เพราะมนุษย์ผู้เป็นลูกค้าไม่ได้มองว่าธุรกิจเหล่านั้นเป็นสิ่งที่ผิด !!)\nสมการที่อธิบายกลไกของมนุษยนิยมนั้นได้แก่ Knowledge = Experience x Sensitivity ซึ่งมีความหมายว่า “กระบวนการทางความคิด” ของมนุษย์นั้นได้รับอิทธิพลจากการทำงานร่วมกันของ “ประสบการณ์” ที่ประกอบไปด้วย สัมผัส อารมณ์และความคิด ที่ถูกสั่งสมมาในมนุษย์แต่ละคนและ “ความสามารถในการประมวลผล” ของประสบการณ์เหล่านั้น ซึ่งหมายความว่ามนุษย์มีการ “พัฒนาการทางความคิด” อยู่ตลอดเวลา ยกตัวอย่างเช่น ผู้เชี่ยวชาญการดื่มชา ที่ผ่านประสบการณ์การชิมชามาแล้วทั่วโลก จะมีความสามารถในการรับรู้คุณค่าของชาชั้นดีได้มากกว่าผู้ที่ไร้ประสบการณ์ (สมการการสร้างความรู้ตามหลักการทางวิทยาศาสตร์ Knowledge = Empirical Data x Mathematics นั้นไม่สามารถตอบปัญหาทางจริยธรรมได้ ส่วนสมการของศาสนา Knowledge = Scriptures x Logic ก็ถูกจำกัดด้วยหลักคำสอนของศาสนา)\nมนุษยนิยมนั้นแบ่งออกได้เป็น 3 สายหลัก ๆ ได้แก่\n1. เสรีนิยม (Liberalism) ผู้เชื่อมั่นในความสามารถของมนุษย์ “แต่ละคน” ในการดำเนินชีวิตของตัวเอง ดังนั้น เสรีภาพในการตัดสินใจของมนุษย์จึงเป็นสิ่งสำคัญ (ข้อเสียของระบบเสรีนิยมนั้นก็คือ “ความไร้ประสิทธิภาพ” ที่เกิดขึ้นจากการใช้เสียงส่วนใหญ่ตามระบอบประชาธิปไตยเป็นตัวตัดสินใจแทนสมาชิกของสังคมซึ่งบางส่วนอาจไม่พอใจกับการตัดสินใจนั้นๆ)\n2. สังคมนิยม (Socialism) ผู้เชื่อมั่นในความสามารถของ “สังคมมนุษย์” ในภาพรวมโดยมีกลุ่มแกนนำเป็นผู้ดูแลการตัดสินใจแทนสมาชิกทุกคน โดยอ้างถึงความชอบธรรมในการแก้ปัญหาความไม่เท่าเทียมกันของระบบเสรีนิยม (ซึ่งต่อมาประเทศเสรีนิยมก็ได้นำเอาหลักการบางส่วนของสังคมนิยมมาปรับใช้ อาทิ การสนับสนุนทางการศึกษาและสาธารณสุขของประชาชน)\n3. มนุษยนิยมเชิงวิวัฒนาการ (Evolutionary humanism) ผู้เชื่อมั่นในความสามารถของชาติพันธุ์ของตัวเองว่ามีคุณสมบัติที่สูงส่งกว่าชาติพันธุ์อื่นๆ อันเป็นเหตุให้เกิดการ “กำจัด” มนุษย์สายพันธุ์ที่ด้อยกว่า อาทิ Nazism ที่เชื่อมั่นในความสามารถของชาติพันธ์ุอารยันที่สูงส่งกว่าชาวยิว\nหลังจากการสิ้นสุดลงของสงครามเย็น มนุษยนิยมสายเสรีนิยมคือ “ศาสนา” ที่ประสบความสำเร็จสูงสุดในสังคมของมนุษย์ในปัจจุบัน อันเป็นผลมาจากความสามารถในการปรับตัวของหลักการให้เข้ากับการเปลี่ยนแปลงทางเทคโนโลยีในยุคปัจจุบัน (กลุ่มอิสลามหัวรุนแรงกำลังจะไม่มีจุดยืนในเร็วๆนี้เนื่องจากการไม่ยอมปรับตัวเข้ากับเทคโนโลยีสมัยใหม่) ซึ่งหมายความว่าเมื่อเทคโนโลยีของมนุษย์มีการพัฒนาการไปเรื่อยๆ ศาสนาแห่งใหม่ ที่สามารถตอบสนองความคิด และอารมณ์ของมนุษย์ในยุคแห่งอนาคต ก็อาจจะเข้ามาแทนที่มนุษยนิยมก็เป็นได้\n Part III – Homo Sapiens Loses Control “Organisms are algorithms and life is data processing”   Chapter 8: The Time Bomb in the Laboratory ในยุคปัจจุบันที่วิทยาศาสตร์เข้ามามีบทบาทในสังคมมากขึ้นเรื่อยๆ “ข้อเท็จจริง” ตามหลักการของเสรีนิยมกำลังที่ว่าด้วยการให้ความสำคัญของ “อิสรภาพทางความคิดของมนุษย์” กำลังได้รับการทดสอบครั้งใหญ่\nวิทยาศาสตร์พิสูจน์ให้เห็นแล้วว่ากระบวนการตัดสินใจของมนุษย์นั้นเกิดขึ้นจาก “ปฏิกิริยาเคมี” ภายในร่างกาย ซึ่งถึงแม้ว่ามนุษย์จะอ้างว่าพวกเรามีอิสรภาพในการตัดสินใจด้วยตัวเอง แต่พวกเราก็ได้ถูกกระบวนการทางเคมีตั้ง “กรอบ” ให้กับคำถามและความคิดของพวกเราไม่ต่างกับกระรอกที่สามารถตัดสินใจด้วยตัวเองได้ว่ามันจะเลือกกินวอลนัทที่หล่นอยู่ใต้ต้นไม้หรือไม่โดยไม่เคยต้องถามตัวเองเลยว่าทำไมต้องคิดถึง “วอลนัท” (มนุษย์สามารถตัดสินใจคำตอบของคำถามในหัวของตัวเองได้ แต่อะไรหละคือตัวกำหนดให้พวกเรา “ถาม” คำถามเหล่านั้น) เราไม่ได้เลือกความต้องการของตัวเอง สิ่งที่เกิดขึ้นจริงในระบบประสาทก็คือ เรา “รับรู้” ถึงความต้องการเหล่านั้นที่ไหลผ่านมาในสมองเรา ณ จังหวะเวลานั้นพอดีต่างหาก (เราสามารถทดสอบทฤษฎีนี้ง่ายๆด้วยการตั้งคำถามตัวเองหลังจากที่ “ความคิด” บางอย่างผุดขึ้นมาในใจว่าความคิดเหล่านั้นมันเกิดขึ้นมาได้ยังไงและเราสามารถสั่งสมองให้ “หยุดคิด” ได้หรือไม่)\nสิ่งที่ตามมาก็คือ กระบวนการ “ปรับแต่งความรู้สึก” ของมนุษย์ผ่านเทคโนโลยีสมัยใหม่ ที่ปัจจุบันนักวิทยาศาสตร์สามารถสั่งการ “หนูทดลอง” ให้ปฏิบัติภารกิจ ตามคำสั่งผ่านการฝังเครื่องมือที่คอยกระตุ้นสมองส่วนที่สร้างความสุขให้กับหนู ควบคู่กับการฝึกระยะสั้น โดยหนูทดลองที่ร่วมโครงการนั้น จะมีความรู้สึกดีทุกครั้ง หลังจากได้กระทำสิ่งที่พวกมันถูกสั่งให้ทำผ่านการกระตุ้นสมอง ซึ่งเทคโนโลยีสำหรับมนุษย์ก็เริ่มได้รับการพัฒนาให้มีประสิทธิภาพมากขึ้นแล้ว อาทิ ไมโครชิปส์ สำหรับแก้โรคซึมเศร้า และหมวกสัญญาณแม่เหล็กไฟฟ้า สำหรับกระตุ้นสมองของทหารสหรัฐเพื่อเพิ่มสมรรถภาพในสนามรบ\nหลักการของเสรีนิยมที่พูดถึง “ตัวตน” ที่มีเพียงหนึ่งเดียวของมนุษย์แต่ละคน (individual) นั้นก็ได้รับการโต้แย้งอย่างรุนแรง จากทฤษฎีของศาสตร์เศรษฐศาสตร์เชิงพฤติกรรม (behavioral economics) ที่พิสูจน์ว่ามนุษย์หนึ่งคนนั้นมีระบบการตัดสินใจอยู่ 2 ระบบ อันได้แก่ ตัวตนเชิงประสบการณ์ (experience self) ผู้รับรู้ถึงสิ่งที่มนุษย์ได้ประสบพบเจอและตัวตนเชิงบอกเล่า (narrative self) ผู้ทำหน้าที่บอกเล่าเรื่องราวเหล่านั้น โดยการทดลองได้ค้นพบว่าตัวตนเชิงบอกเล่านั้น มักสร้างเรื่องราวที่ไม่ได้สอดรับกับตัวตนเชิงประสบการณ์ และตัวตนเชิงบอกเล่านี้เองคือตัวตนหลักที่ทำหน้าที่ชี้นำการตัดสินใจของมนุษย์ (ตัวอย่างการทดลอง: การทดลองจุ่มมือในน้ำเย็นจัดที่ผู้ทดลองจะต้องทำการจุ่มมือใน 2 รูปแบบ\n รูปแบบแรก ผู้ทดลองจะต้องจุ่มมือในน้ำเย็นจัดเป็นระยะเวลาหนึ่ง\n รูปแบบที่สองนั้นเหมือนกับรูปแบบแรกแต่ผู้ทดลองจะต้องจุ่มมือนานขึ้นอีกในขณะที่น้ำจะอุ่นขึ้นเล็กน้อย\n  ผลของการทดลองพบว่าผู้ทดลองที่ได้รับอิทธิพลจากตัวตนเชิงบอกเล่าชอบการจุ่มมือรูปแบบที่สองมากกว่าทั้งๆที่ตัวตนเชิงประสบการณ์ของพวกเขาต้องทนทุกข์เป็นระยะเวลานานกว่า ผลลัพธ์ของการทดลองนี้นำไปสู่กฎ peak-end rule ที่กล่าวว่ามนุษย์มักจะทำการเฉลี่ยความทรมาน หรือความสุขของประสบการณ์ ที่พวกเขาพบเจอมากกว่าการรวมผลลัพธ์จากเหตุการณ์เหล่านั้น)\nChapter 9: The Great Decoupling ในศตวรรษที่ 21 มนุษยชาติกำลังจะต้องประสบกับการคุกคามของ “เทคโนโลยี” ที่กำลังจะทำให้มนุษย์จำนวนมากต้องสูญเสีย “คุณค่า” ทางเศรษฐกิจ และการทหารไปอย่างหมดสิ้นอันเป็นเสมือน “ชนวนระเบิด” ที่พร้อมจะทำลายความเชื่อ ของหลักการทางเสรีนิยม ที่ให้คุณค่าแก่มนุษย์ทุก ๆ คนอย่างเท่าเทียมกัน ตัวอย่างเช่น IBM’s Watson ในอนาคตที่สามารถทำหน้าที่แทนคุณหมอทั่วโลก ในการวินิจฉัยโรคร้ายของผู้ป่วยพร้อม ๆ กันทั้งโลกได้อย่างแม่นยำตลอด 24 ชั่วโมง การจู่โจมทางโลกไซเบอร์โดยกลุ่มแฮกเกอร์เพียงหยิบมือ สามารถส่งผลร้ายแรงต่อเป้าหมายได้อย่างรวดเร็ว และมีประสิทธิภาพกว่าการใช้ทหารนับล้านนายในการสู้รบ\nในอดีตมนุษย์มีความเชื่อว่าสิ่งมีชีวิตที่มีความสามารถในการตระหนักรู้ถึงอารมณ์และความรู้สึกของตัวเองเท่านั้นที่จะสามารถสร้างภูมิปัญญาที่สูงส่งได้ แต่แล้ว เทคโนโลยีทางคอมพิวเตอร์และหุ่นยนต์ในปัจจุบันนั้นได้แสดงให้เห็นถึง “การแยกออกจากกัน” ของ “ปัญญา (Intelligence)” และ “การตระหนักรู้ (consciousness)” ที่ในอนาคต algorithm ที่มีระดับสติปัญญาขั้นสูงจะเข้ามาทำหน้าที่แทนมนุษย์ผู้มีความตระหนักรู้แต่มีระบบประมวลผลที่ด้อยประสิทธิภาพกว่าโดยที่ algorithm เหล่านั้นไม่จำเป็นต้องมีความรู้สึกนึกคิดแต่อย่างใด ไม่แตกต่างจากเหตุการณ์ในอดีตที่ “ม้า” ซึ่งมีความรู้สึก และความผูกพันธุ์กับเจ้าของถูกแทนที่ด้วย “รถยนต์” อันไร้ความรู้สึก ที่มีประสิทธิภาพในการพามนุษย์ เดินทางจากจุดหนึ่งไปยังอีกจุดหนึ่ง ที่ดีกว่าได้ภายในระยะเวลาอันรวดเร็ว\nคำถามสำคัญที่ตามมาก็คือ “แล้วที่ยืนของมนุษย์นั้นอยู่ตรงไหน” คำตอบของนักวิชาการส่วนใหญ่ในยุคปัจจุบันก็คือ งานที่ต้องใช้ความสามารถในการตระหนักรู้ถึงอารมณ์และความคิดสร้างสรรค์ของมนุษย์ แต่เอาเข้าจริงๆแล้ว สิ่งมีชีวิตทุกชนิดรวมถึงมนุษย์นั้นล้วนมี algorithm สำหรับการตัดสินใจทั้งนั้น งานที่ต้องใช้ความคิดสร้างสรรค์ อย่างการแต่งเพลงนั้นตามหลักการของ Life science นั้น ถือเป็นกระบวนการในการประมวลผลรูปแบบของเสียงตามหลักการทางคณิตศาสตร์ของมนุษย์เท่านั้น ซึ่งนักประดิษฐ์คนหนึ่งสามารถพัฒนา A.I. นามว่า EMI ที่สามารถประมวลผลเพลงของศิลปินชื่อดังอย่าง Bach มาใช้ในการแต่งเพลงใหม่ของตัวเองกว่า 5,000 เพลงภายใน 1 วันโดยที่ผู้ฟังนั้นเชื่อว่าเพลงเหล่านี้ถูกแต่งขึ้นมาโดยศิลปินเอกได้อย่างสนิทใจ โลกในอนาคต กำลังจะสร้างประชากรกลุ่มใหม่ ที่ไร้ซึ่งคุณค่าใด ๆ ต่อสังคม (useless class) ส่วนกลุ่มงานที่อาจได้รับผลกระทบน้อยที่สุดนั้นคือ กลุ่มงานที่ต้องใช้ความสามารถเฉพาะตัวขั้นสูง แต่มีผลตอบแทนที่ต่ำ จนไม่มีใครอยากลงทุนพัฒนาโปรแกรมมาทำหน้าที่ทดแทน อาทิ นักโบราณคดี\nแนวโน้มถัดมาของศตวรรษที่ 21 ก็คือ การเกิดขึ้นของระบบการตัดสินใจที่หลอมรวมมนุษย์เข้าด้วยกันเป็นกลุ่ม ศาสตร์ Life science ได้พิสูจน์ว่าทุกกระบวนการตัดสินใจของมนุษย์นั้นเกิดขึ้นจาก algorithm ภายในของมนุษย์แต่ละคน ที่เต็มไปด้วยข้อบกพร่องนานับประการ และเมื่อถึงจุดหนึ่งที่เทคโนโลยีสามารถทำความเข้าใจหลักการของ algorithm เหล่านั้นมากพอที่จะสร้าง external algorithm ที่มีประสิทธิภาพมากกว่าได้สำเร็จ ความสำคัญของปัจเจกบุคคลก็จะสูญสลายไป มนุษย์จะถูกหลอมรวมเป็นกลุ่มก้อน และถูกถ่ายเทพลังอำนาจไปยัง algorithm ที่สามารถตัดสินใจสิ่งต่าง ๆ ได้ดีกว่า ตัวอย่างที่เห็นชัด ๆ ในปัจจุบันก็คือ เทคโนโลยีทางการแพทย์อย่าง wearable sensor ที่สามารถตรวจจับกระบวนการทำงานของร่างกาย และให้คำแนะนำแก่ผู้ใช้งานอยู่ตลอดเวลา หรือ เหตุการณ์ที่ Angelina Jolie ตัดสินใจผ่าตัดเต้านมหลังรับทราบข้อมูลทางสถิติจากการตรวจสอบทางพันธุกรรมว่าตัวของเธอมีโอกาส 87% ที่จะเป็นมะเร็งเต้านม\nในอนาคต “มนุษย์” อาจจะต้องพึ่งพิง “โปรแกรม” อย่างแยกจากกันไม่ได้ตลอด 24 ชั่วโมง ลองจินตนาการ โลกในอนาคตที่มนุษย์ทุกคนยอมให้ข้อมูลทั้งหมดแก่ Google ไม่ว่าจะเป็นข้อมูลทางชีววิทยา (อาทิ ข้อมูลการทำงานของร่างกายแบบ real time ผ่านการฝังไมโครเซนเซอร์ DNA และประวัติทางพันธุกรรม) ข้อมูลการใช้จ่าย อีเมล์และอีกมากมาย เมื่อข้อมูลมีมากพอถึงจุดหนึ่ง Google จะกลายมาเป็น algorithm ที่รู้จักมนุษย์ มากกว่าตัวของพวกเขาเอง และสามารถให้คำแนะนำในการตัดสินใจได้ดีกว่ามนุษย์ที่เต็มไปด้วยความลำเอียง (bias) และความไร้ประสิทธิภาพในการประมวลผลข้อมูลของตัวเอง\nและเมื่อมนุษย์สามารถอัพเกรดร่างกายและสติปัญญาของตัวเองได้สำเร็จ โลกก็จะเริ่มเข้าสู่ยุค ที่ความไม่เท่าเทียมกันระหว่างชนชั้นสูง กับชนชั้นล่างนั้นรุนแรงอย่างที่ไม่เคยเกิดขึ้นมาก่อน ความแตกต่างนั้น ไม่ได้เกิดขึ้นเฉพาะฐานะทางเศรษฐกิจเท่านั้น แต่กลุ่มชนชั้นสูงนั้น จะกลายมาเป็นสิ่งมีชีวิตที่มีสมรรถภาพทางชีววิทยา ที่เหนือกว่าและเมื่อเทคโนโลยีได้ทำให้ “ประโยชน์” ของกลุ่มชนชั้นล่างหมดไป ประชากรเกือบทั้งหมดของโลกมนุษย์ อาจจะกลายมาเป็นเพียงขยะทางชีววิทยา ที่ไร้คุณค่าใด ๆ ในสายตาของกลุ่มมนุษย์ที่สามารถแปลงกายเป็นเทพเจ้าได้สำเร็จ\nLee Sedol vs. AlphaGo (ขอบคุณภาพจาก BGR India)\nChapter 10: The Ocean of Consciousness ศาสนาใหม่ของมนุษยชาติกำลังถือกำเนิดขึ้นในห้องทดลองทางวิทยาศาสตร์ที่มี Silicon Valley เป็นจุดศูนย์กลาง สิ่งที่สร้างความแตกต่างให้กับศาสนาแห่งใหม่นี้ก็คือความสามารถในการสร้างความสุข ความสงบหรือแม้กระทั่งชีวิตอันเป็นนิรันดร์ให้กับมนุษย์บนโลกใบนี้ (ไม่ใช่โลกหลังความตายเหมือนศาสนาอื่นๆ)\nTechno-humanist คือ ศาสนาที่ต่อยอดจากมนุษยนิยมที่ยังคงมีความเชื่อมั่นในความสามารถของมนุษย์อยู่ แต่มนุษย์ตามความหมายของศาสนาใหม่นี้คือมนุษย์สายพันธุ์ Homo Deus ที่ได้รับการอัพเกรดจากเทคโนโลยีทางชีววิทยา นาโนและการเชื่อมต่อคอมพิวเตอร์เข้ากับระบบประสาท อันเป็นเหตุให้ Homo Deus มีความสามารถที่ยังคงสร้างคุณค่าในโลกที่เต็มไปด้วย algorithm ได้ (นักวิทยาศาสตร์เชื่อว่ามนุษย์สามารถขยายประสิทธิภาพของการใช้งานของสมองและจิตใจได้อีกมหาศาลโดยยกตัวอย่างศักยภาพที่มนุษย์ในปัจจุบันไม่สามารถทำได้ อาทิ ประสิทธิภาพในการดมกลิ่นของมนุษย์ในยุคล่าสัตว์ การอ่านคลื่นสะท้อนของค้างคาวและการตรวจจับเสียงที่อยู่ห่างออกไปหลายร้อยกิโลเมตรของปลาวาฬ)\nแต่หลักการของ Techno-humanist ก็มีข้อจำกัด เมื่อมนุษย์สามารถอัพเกรดระบบการตัดสินใจของตัวเองจนสามารถกำจัดตัวตนที่ไร้เหตุผลหรือตัวตนที่ก่อให้เกิดความลำบากใจภายในจิตใจของพวกเขาได้ มนุษย์เวอร์ชั่นอัพเกรดเหล่านั้นก็จะมีระบบการตัดสินใจที่ไม่แตกต่างจาก algorithm อันเป็นจุดกำเนิดของศาสนาชนิดใหม่ที่มี “ข้อมูล” เป็นศูนย์กลาง\nChapter 11: The Data Religion Dataism (ข้อมูลนิยม) คือ ศาสนาที่เชื่อมั่นในประสิทธิภาพของ “ข้อมูล” อันเกิดขึ้นจากการผสมผสานความก้าวหน้าของศาสตร์ทางชีววิทยาและคอมพิวเตอร์ที่เชื่อมั่นว่า algorithm ของสิ่งมีชีวิตและคอมพิวเตอร์นั้นสามารถผสมผสานรวมกันได้\nประวัติศาสตร์ของศตวรรษที่ 20 แสดงให้เห็นอย่างชัดเจนว่าระบบการปกครองที่สามารถ “ประมวลผลข้อมูล (data processing)” ได้อย่างครอบคลุมมากกว่านั้นคือระบบการปกครองที่มีประสิทธิภาพและพลังอำนาจที่สูงที่สุด (ระบอบคอมมิวนิสต์ที่มีรัฐบาลกลางทำหน้าที่ประมวลผลข้อมูลแต่เพียงผู้เดียวไม่สามารถสู้กับกำลังของหน่วยประมวลผลข้อมูลจำนวนมหาศาลของระบบกระจายอำนาจตามหลักเสรีนิยมได้) แต่ในยุคปัจจุบันที่การเปลี่ยนแปลงทางเทคโนโลยีนั้นเกิดขึ้นอย่างรวดเร็วพร้อมๆกับการเพิ่มขึ้นของข้อมูลจำนวนมหาศาล ระบบการปกครองทุกรูปแบบในปัจจุบันไม่สามารถติดตามการเปลี่ยนแปลงได้อีกต่อไปอันเป็นเหตุให้โลกต้องการระบบและผู้ปกครองรูปแบบใหม่ที่มีประสิทธิภาพที่ดีกว่า\nประวัติศาสตร์ยังแสดงให้เห็นถึงวิวัฒนาการของกระบวนการประมวลผลข้อมูลของมนุษยชาติ ที่เริ่มตั้งแต่ การขยายจำนวนประชากร (หน่วยประมวลผล) อันก่อให้เกิดความหลากหลายของหน่วยประมวลผลเหล่านั้นที่กระจัดกระจายอยู่ทั่วโลก จนกระทั่งโลกในยุคเกษตรกรรมและอุตสาหกรรมที่หน่วยประมวลผลที่มีความหลากหลายได้กลับมารวมตัวกันเป็นกลุ่มที่ใหญ่ขึ้นและเชื่อมต่อกันได้อย่างมีประสิทธิภาพมากขึ้นเรื่อยๆ ซึ่งแสดงให้เห็นถึงแนวโน้มของการเกิดขึ้นของการเชื่อมต่อทางข้อมูลอย่างสมบูรณ์ของมนุษยชาติและทุกสรรพสิ่ง (Internet-of-all-thing)\nอิสรภาพของข้อมูล (freedom of information) คือ “หัวใจ” สำคัญของ Dataism ที่เชื่อมั่นว่า “เมื่อมนุษย์ยินยอมเปิดเผยข้อมูลทั้งหมดให้กับระบบ algorithm หนึ่งเดียวของโลก ทุกกระบวนการตัดสินใจของมนุษย์จะถูกประมวลผลและตัดสินใจผ่านระบบประมวลผลแห่งนั้นอันนำมาซึ่งผลลัพธ์ที่ดีที่สุดให้กับมนุษย์และทุกสรรพสิ่ง” ตัวอย่างของการใช้ระบบข้อมูลมหาศาลในการเพิ่มประสิทธิภาพให้กับโลกมนุษย์นั้นได้แก่ ระบบแบ่งปันรถยนต์ไร้คนขับ (driverless carpooling) ที่เข้ามาขจัดปัญหาของความสิ้นเปลืองของการใช้ทรัพยากร “รถยนต์” ที่ใช้เวลามากกว่า 90% ในการจอดอยู่กับที่เฉยๆอย่างไร้ประโยชน์ หากมนุษย์ทุกคนยอมเปิดเผยข้อมูลตำแหน่งที่อยู่อาศัย ที่ทำงาน จุดหมายปลายทางและเวลาให้กับระบบ algorithm อย่างสมบูรณ์ ระบบประมวลผลนี้ก็จะสามารถจัดสรรการใช้ทรัพยากรรถยนต์แบบแบ่งปันให้กับผู้ที่ต้องการเดินทางด้วยรถยนต์ได้อย่างมีประสิทธิภาพและยังสามารถลดปริมาณรถยนต์ส่วนบุคคลในท้องถนนได้ถึง 20 เท่าพร้อมกับการลดลงของพื้นที่จอดรถอีกจำนวนมหาศาล\nDataism (ขอบคุณภาพจาก Financial Times)\nแต่ถึงกระนั้น ทฤษฎีที่กล่าวมาทั้งหมดในหนังสือเล่มนี้ เป็นเพียงแค่การพยากรณ์ ที่อาศัยการศึกษาทางประวัติศาสตร์ของมนุษยชาติ และการทำความเข้าใจเทคโนโลยีในยุคปัจจุบันเท่านั้น มนุษย์ในทุกวันนี้คงไม่มีทางมองเห็นและเข้าใจมนุษย์ในอีก 50 ปีข้างหน้าได้อย่างสมบูรณ์ แต่ 3 แนวโน้ม ที่กำลังเกิดขึ้นจริงที่ทุกคนควรจะต้องคำนึงถึงอยู่เสมอในการวางแผนอนาคตนั้นก็คือ\n สิ่งมีชีวิตทั้งหมดนั้นคือระบบประมวลผลที่ถูกผลักดันโดย algorithm “สติปัญญา” กับ “การตระหนักรู้” นั้นกำลังถูกแยกออกจากกัน มนุษย์ผู้มีอารมณ์ความรู้สึกกำลังจะถูกแทนที่ด้วย algorithm ที่มีสติปัญญาที่สูงกว่า algorithm กำลังจะมีความสามารถในการเข้าใจมนุษย์มากกว่าตัวของพวกเราเอง   Source : www.panasm.com.\n ","date":1588978800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588978800,"objectID":"a593e4466547f91577ecf3b85056613d","permalink":"https://example.com/book/deus/review-2/","publishdate":"2020-05-09T00:00:00+01:00","relpermalink":"/book/deus/review-2/","section":"book","summary":"“This is the best reason to learn history: not in order to predict the future, but to free yourself of the past and imagine alternative destinies. Of course this is not total freedom – we cannot avoid being shaped by the past. But some freedom is better than none.”\nเมื่อเราเข้าใจ “เรื่องราวที่แท้จริง” ของมนุษย์ เมื่อนั้นเราก็จะเข้าใจ “เป้าหมาย” ของการเดินทางของมนุษยชาติ\n  Homo Deus คือ หนังสือภาคต่อจาก Sapiens ของ Yuval Noah Harari ศาสตราจารย์ทางประวัติศาสตร์ผู้นำเสนอเรื่องราวของ “อนาคต” ของมนุษยชาติผ่านการศึกษาความเป็นมาทางประวัติศาสตร์ ของเผ่าพันธุ์ Homo Sapiens ที่พัฒนาตนเองขึ้นจากการเป็น “สัตว์” อันไร้ซึ่งความสำคัญใดๆมาเป็น “เทพเจ้า” ผู้กำหนดชะตาชีวิตของทุกสรรพสิ่ง แต่เมื่อสิ่งที่ถูกมนุษย์สร้างขึ้นอย่าง algorithm เริ่มมีสติปัญญาที่ชาญฉลาดกว่ามันสมองของมนุษย์ โลกของเราทุกคนจะเปลี่ยนแปลงไปอย่างไร","tags":null,"title":"(Review-02) Homo Deus – A Brief History of Tomorrow","type":"docs"},{"authors":null,"categories":null,"content":"สรุปนี้เกิดจากมุมมองของโฮโมเซเปียนส์ที่เติบโตในปลายคริสต์ศตวรรษที่ 20 ถึงต้นคริสต์ศตวรรษที่ 21 ในระเบียบแบบแผนตามจินตนาการของรัฐชาติที่ไม่เคยถูกครอบครองโดยจักรวรรดิใดๆ เชื่อในความจริงตามจินตนาการของระบบตลาดเสรีและทุนนิยม อาจมีมุมมองเอนเอียงไปบ้างเนื่องจากจะเก็บสรุปไว้อ่านส่วนตัว\n 13,500 ล้านปีที่แล้ว สสาร พลังงาน พื้นที่ และเวลา ได้รวมตัวกันเกิดเป็นปรากฏการณ์ที่รู้จักกันในชื่อ Big Bang เกิดเป็นเอกภพของเรา เรื่องราวเกี่ยวกับเอกภพเราเรียกว่า “ฟิสิกส์” 300,000 ปีถัดมา สสารและพลังงานเริ่มรวมตัวกันเป็นสิ่งที่เรียกว่า “อะตอม” ซึ่งรวมตัวเป็นโมเลกุลอีกที เรื่องราวเกี่ยวกับอะตอมและโมเลกุลเราเรียกว่า “เคมี” 3,800 ล้านปีที่แล้ว บนดาวเคราะห์ที่เรียกว่าโลก โมเลกุลได้รวมตัวเป็นโครงสร้างซับซ้อน เรียกว่า “สิ่งมีชีวิต” เรื่องราวเกี่ยวกับสิ่งมีชีวิตเรียกว่า “ชีววิทยา” 70,000 ปีมาแล้ว สิ่งมีชีวิตในสปีชีส์ โฮโมเซเปียนส์ ก่อรูปโครงสร้างสังคมที่เรียกว่า “วัฒนธรรม” พัฒนาการทางวัฒนธรรมของสปีชีส์นี้เรียกว่า “ประวัติศาสตร์” Species หมายถึง กลุ่มของสิ่งมีชีวิตที่สามารถผสม DNA กันได้, มี DNA Pool เดียวกัน สกุล(Genus) คือ สปีชีส์ของสิ่งมีชีวิตที่มีวิวัฒนาการจากบรรพบุรุษร่วมกัน เช่น Homo Sapien เป็นสิ่งมีชีวิตสกุล Homo ในสปีชีส์ Sapien, สิงโต เสือ เสือดาว เป็นสัตว์ต่างสปีชีส์กัน แต่อยู่ในสกุล Panthera วงศ์(Family) กลุ่มของสกุล เช่น วงศ์ของแมว ได้แก่ เสือชีตาห์ สิงโต แมว วงศ์ของช้าง ได้แก่ ช้าง แมมอธ มาสโตดอน เป็นต้น โฮโมเซเปียนส์เป็นสมาชิกของวงศ์หนึ่งในอาณาจักรสัตว์ ซิมแปนซี กอริลลา อุรังอุตัง และโฮโมเซเปียนต่างก็เป็นสมาชิกของวงศ์ลิงยักษ์ หรือ Great Apes กล่าวคือ หกล้านปีก่อนวานรหนึ่งนางมีลูกสาว 2 นาง นางหนึ่งเป็นบรรพบุรุษของซิมแปนซีและลิงอื่นๆ อีกนางเป็นบรรพบุรุษของโฮโมเซเปียนส์ โฮโมเซเปียน ไม่ได้เป็นมนุษย์เพียงสกุลเดียวที่เคยมีอยู่บนโลก โลกเคยมีมนุษย์(หรือ Species Sapiens)หลากหลายสกุลอยู่อาศัย จนกระทั่งเหลือเพียงโฮโมเซเปียน สิ่งที่คาดการณ์กันว่าทำให้พื้นโลกเหลือเซเปียนอยู่เพียงสกุลเดียวเริ่มต้นมาจากการใช้งานสิ่งที่เรียกว่า “ภาษา” ภาษาทำให้โฮโมเซเปียนสามารถสื่อสารได้ซับซ้อนกว่าสิ่งมีชีวิตอื่นๆและเซเปียนสกุลอื่น นั่นคือโฮโมเซเปียนสามารถใช้ภาษาสื่อสารถึงสิ่งที่ไม่มีอยู่จริงได้ ลิงก็สามารถสื่อสารโดยใช้ภาษาได้ รวมทั้งสัตว์สปีชีส์อื่นก็ทำได้เช่นกัน รวมทั้งมนุษย์สกุลอื่น แต่ทั้งหมดไม่สามารถสื่อสารถึงสิ่งที่ไม่มีอยู่จริงได้ การใช้ไฟและอาวุธ เซเปียนส์สกุลอื่นก็สามารถทำได้เช่นกัน การที่โฮโมเซเปียนส์สามารถสื่อสารถึงสิ่งที่ไม่มีอยู่จริงในโลกกายภาพได้ ทำให้เกิดสิ่งที่เรียกว่า “ความจริงในจินตนาการ” การสร้างความจริงในจินตนาการขึ้นเป็นประโยชน์ต่อโฮโมเซเปียนส์ มันสร้างสิ่งที่เรียกว่า พระเจ้า เทพ วิญญาน ตำนานและเรื่องเล่าต่างๆ ทำให้เกิดการรวมกลุ่มของโฮโมเซเปียนส์ที่เชื่อในความจริงในจินตนาการร่วมกัน ความจริงในจินตนาการที่ก่อรูปสร้างสังคมของโฮโมเซเปียนส์ ที่เห็นชัดเจนที่สุด ตัวอย่างหนึ่งในยุคสมัยใหม่คือความจริงในจินตนาการเกี่ยวกับ บริษัทจำกัด มูลค่าของเงินตรา ชาติ สิทธิ เสรีภาพ ฯลฯ สิ่งเหล่านี้ไม่มีจริงในโลกทางกายภาพ มีจริงเฉพาะในจินตนาการร่วมกันของโฮโมเซเปียนส์ บริษัทจำกัดเป็นเรื่องเล่าที่ถูกต้องตามกฏหมายถูกสร้างขึ้นเพื่อแยกบุคคลออกจากนิติบุคล เพื่อให้โฮโมเซเปียนส์ สามารถค้าขายได้โดยที่ไม่ต้องเอาสิ่งของส่วนตัวไปเสี่ยง หากความจริงในจินตนาการที่เรียกว่าบริษัทล้มละลายหรือเสียหาย ตัวบุคคลไม่ได้ล้มละลายไปกับบริษัท การตวัดปากกาเพื่อจัดตั้งบริษัทจึงเป็นการท่องมนต์ นักธุรกิจและทนายก็คือพ่อมดสมัยใหม่ การปฏิวัติเกษตรกรรมทำให้โฮโมเซเปียนส์ควบคุมปัจจัยการผลิตอาหารได้มากขึ้น แต่ก็ทำให้โฮโมเซเปียนส์โดยรวมได้รับสารอาหารที่หลากหลายน้อยลงกว่าการใช้ชีวิตแบบพรานป่าล่าสัตว์ ความจริงในจินตนาการทำให้โฮโมเซเปียนส์สร้างสิ่งที่มีผลสะเทือนต่อประวัติศาสตร์สิ่งหนึ่งขึ้นมา สิ่งนั้นเรียกว่า “จักรวรรดิ” การปฏิวัติเกษตรกรรมเปลี่ยนสังคมของโฮโมเซเปียนส์จากพรานป่าล่าสัตว์มาเป็นสังคมเกษตร การใช้ชีวิตในสังคมเกษตรสร้างสิ่งหนึ่งขึ้นในจิตใจของโฮโมเซเปียนส์คือ “ความกังวลเกี่ยวกับอนาคต” เนื่องจากผลผลิตขึ้นอยู่กับปัจจัยที่ควบคุมไม่ได้คือฤดูกาล สภาพอากาศ ความกังวลเกี่ยวกับอนาคตทำให้โฮโมเซเปียนส์สร้างความจริงในจินตนาการของสิ่งที่ทรงสรรพฤทธานุภาพขึ้นมา เช่น วิญญาน พระเจ้า เทพ อาตมัน เรียกแตกต่างกันไปในแต่ละวัฒนธรรม เพื่อคลายความกังวลเกี่ยวกับอนาคต ด้วยความเชื่อว่าสิ่งที่ทรงสรรพฤทธานุภาพสามารถช่วยให้ได้ในสิ่งที่ต้องการ ความจริงในจินตนาการทำให้โฮโมเซเปียนส์สร้าง “ระเบียบแบบแผนตามจินตนาการ”(Imagined Order) ขึ้นมา ซึ่งสามารถส่งระเบียบแบบแผนนี้ต่อไปยังโฮโมเซเปียนส์รุ่นถัดไปได้ ตัวอย่างที่เห็นชัด เช่น ศาสนา ความเป็นรัฐชาติ เป็นต้น(ส่วนตัวชอบคำนี้และเนื้อหาเกี่ยวกับเรื่องนี้เป็นพิเศษ) ระเบียบแบบแผนตามจินตนาการสอดแทรกอยู่ในเทพนิยาย ละคร ภาพวาด เพลง โฆษณา ฯลฯ มีปัจจัยสามอย่างที่ป้องกันไม่ให้ผู้คนตระหนักว่ามีระเบียบแบบแผนตามจินตนาการ และป้องกันไม่ให้ ผู้คนรู้ว่าระเบียบแบบแผนตามจินตนาการคอยบังคับควบคุมชีวิต   มีระเบียบแบบแผนตามจินตนาการอยู่ในโลกทางวัตถุรอบตัวเรา เช่น ภาพ อาคาร สื่อ เป็นต้น ระเบียบแบบแผนตามจินตนาการเป็นตัวกำหนดความต้องการของเรา เราล้วนเกิดขึ้นมาภายใต้ระเบียบแบบแผน ตามจินตนาการที่มีอยู่ก่อนแล้ว และความต้องการหลักๆของเรา ถูกกำหนดไว้ก่อนแล้วด้วยตำนานที่มีอยู่ก่อน เช่น แนวคิดแบบตะวันตกที่เกิดจากตำนานแบบโรแมนติกในคริสต์ศตวรรษที่ 19 กับตำนานบริโภคนิยมในคริสต์ศตวรรษที่ 20 ที่ว่าการจะเข้าถึงศักยภาพของมนุษย์ได้ต้องมีประสบการณ์ให้มากที่สุด และต้องบริโภคสิ่งต่างๆให้หลากหลาย ระเบียบแบบแผนตามจินตนาการเป็นอัตวิสัยร่วม(inter-subjective)   ปรากฏการณ์แบบวัตถุวิสัย(objective) คือปรากฏการณ์ที่ดำรงอยู่ได้โดยไม่ขึ้นกับความเชื่อหรือการรับรู้ของมนุษย์ อัตวิสัย(subjective)คือภาวะที่สิ่งนั้นจะดำรงอยู่ได้ต้องอาศัยความเชื่อขอปัจเจกชนหรือใครสักคน อัตวิสัยร่วมคือการรับรู้แบบอัตวิสัยของปัจเจกชนจำนวนมากผ่านเครือข่ายการสื่อสาร หากปัจเจกหายไปสักคนหนึ่ง อัตวิสัยร่วมก็ยังคงอยู่ เช่น การที่คนไทยตายไปหนึ่งคนไม่ได้ทำให้อัตวิสัยร่วมของความเป็นชาติไทยหายไป ศาสนา(ขอละไว้ไม่สรุป กลัวดราม่า) การเกิดขึ้นของจักรวรรดิ เป็นเรื่องที่เกิดขึ้นทั่วโลก แต่การที่คนยุคเราเติบโตขึ้นมากับระเบียบแบบแผนตามจินตนาการของโลกตะวันตกเนื่องจากจักรวรรดิตะวันตกสามารถแพร่ขยายไปได้ทั่วโลก การที่จักรวรรดิตะวันตกสามารถแพร่ขยายไปได้เกิดจากความต้องการเผยแพร่ระเบียบแบบแผนตามจินตนาการของตน และมีปัจจัยสนับสนุนคือ วิทยาศาสตร์ และ ทุนนิยม วิทยาศาสตร์พัฒนาขึ้นเพราะโฮโมเซเปียนส์เริ่มเชื่อว่า ยังมีสิ่งที่ไม่รู้ หมุดหมายสำคัญของวิทยาศาสตร์คือการนำภาษาคณิตศาสตร์มาใช้ หนังสือที่ถือว่าสำคัญที่สุดและเป็นจุดเริ่มต้นของวิทศาสตร์ที่จดจารด้วยภาษาคณิตศาสตร์คือ The Mathematical Principles of Natural Philosophy ของ ไอแซก นิวตัน วิทยาศาสตร์ไม่ได้พัฒนาขึ้นอย่างเอกเทศเดี่ยวๆเฉพาะวงการ แต่มีความเกี่ยวข้องกับการเมือง ศาสนา เศรษฐกิจ ด้วย การค้นพบทางวิทยาศาสตร์ที่สำคัญที่ส่งผลให้จักรวรรดิตะวันตกแพร่กระจายไปได้คือการค้นพบวิธีป้องกันโรคลักปิดลักเปิด ทำให้กองเรือสามารถเดินทางข้ามมหาสมุทรเป็นเวลานานๆได้ พัฒนาการทางวิทยาศาสตร์และทุนนิยมนั้นสนับสนุนกันและกัน แม้จะทรงปัญญาขนาดไหนถ้าหากขาดทุนสนับสนุนแล้ว วิทยาศาสตร์จะพัฒนามาถึงจุดที่เราอยู่ได้ยาก วิทยาศาสตร์ไม่ได้เก่งในการพัฒนาความรู้ใหม่เท่านั้น แต่เป็นการพัฒนาเพื่อให้ได้อำนาจใหม่ๆ โดยเฉพาะอำนาจ ในการพัฒนาเทคโนโลยีใหม่ๆ และใช้อำนาจนั้นในการช่วงชิงทรัพยากร เป็นลูป การวิจัย \u0026gt; อำนาจ \u0026gt; ทรัพยากร \u0026gt; การวิจัย \u0026gt; อำนาจ \u0026gt; ทรัพยากร \u0026gt; เงินตราถูกสร้างขึ้นมาเพื่อให้ง่ายในการแลกเปลี่ยน มันไม่ได้มีคุณค่าด้วยตัวมันเอง มันมีคุณค่าอยู่เฉพาะในอัตวิสัยร่วมของโฮโมเซเปียนส์ สตาร์ทอัพที่ก่อตั้งขึ้นมาในโลก, ระดมทุนยากที่สุดแล้วส่งผลต่อประวัติศสสตร์ของโฮโมเซเปียนมากที่สุดคือสตาร์ทอัพของโคลัมบัส เงินตราไม่ได้เปลี่ยนแปลงการเติบโตของเศรษฐกิจของโฮโมเซเปียนส์มากนักจนกระทั่งเกิดสิ่งที่เรียกว่า “เครดิต” เครดิต คือการนำเงินตราที่ไม่มีอยู่จริงมาใช้ หรือก็คือเงินตราที่โฮโมเซเปียนส์จะต้องหามาในอนาคตมาใช้ก่อนนั่นเอง เครดิต ถูกสร้างคือบนฐานความเชื่อที่ว่าเงินตรามีอยู่อย่างไม่จำกัดและอนาคตจะต้องดีกว่าวันนี้(อนาคตจะหาเงินตราได้มากขึ้น) เครดิตมีพลังมากขึ้นเมื่อถูกนำไปใช้ปล่อยกู้ในมือของระเบียบแบบแผนในจินตนาการที่เรียกว่า “ธนาคาร” ทุนนิยมกับบริโภคนิยมนั้นเป็นคนละแนวคิดกัน ทุนนิยมว่าด้วยการทำกำไรและลงทุนซ้ำ ดังแนวคิด “ผลกำไรจากการผลิตจะต้องนำมาลงทุนซ้ำเพื่อเพิ่มการผลิต” เวลา ถูกทำให้เป็นสากลและตรวจวัดตั้งแต่ยุคปฏิวัติอุตสาหกรรมเป็นต้นมา การดำเนินชีวิต ทำงาน เรียนหนังสือ ตามตารางเวลาเริ่มต้นในยุคนั้น กล่าวคือ เวลาสากลคือระเบียบแบบแผนตามจินตนาการ ความสุขทางจิตวิทยา คือความพึงพอใจ ความสุขทางเคมี คือปฏิกริยาที่ถูกกำหนดโดยฮอร์โมนโดพามีน ออกซิโทซิน เซโรโทนิน การพัฒนาตลอดช่วงเวลาประวัติศาสตร์ของโฮโมเซเปียนส์ ไม่ได้บ่งชี้ว่าปัจเจกชนโดยรวมมีความสุขมากขึ้น ยิ่งไม่ต้องนับรวมถึงความสุขของสปีชีส์โดยรวม ความสุขขึ้นอยู่กับความคาดหวังลบด้วยความจริง การไขว่คว้าหาความสุขคือการไขว่คว้าสภาวะทางอารมณ์บางอย่าง การตามหาความสุข คือการตามหาการหลั่งของโดพามีน ออกซิโทซิน เซโรโทนิน ซึ่งวิวัฒนาการกำหนดให้หลั่งเพียงชั่วครู่หลังจากได้รับการกระตุ้นจากสภาวะภายนอกหรือภายใน แล้วคงอยู่ชั่วคราวแล้วหายไป การใช้ชีวิตให้มีความหมาย สามารถเป็นตัวกระตุ้นความสุขได้ แต่การให้ความหมายกับชีวิตก็คือความจริงในจินตนาการของโฮโมเซเปียนส์อย่างหนึ่ง ผู้เขียนแนะนำการจัดการความสุข/ทุกข์ในทางพุทธศาสนา คือความสุขไม่ได้ขึ้นกับสภาวะภายนอกเท่านั้น แต่ขึ้นกับสภาวะภายใน แต่เราไม่ควรไขว่คว้าสภาวะทางเคมีที่แสนสั้น(สุข) หรือหลีกหนีสภาวะทางเคมีที่แสนสั้น(ทุกข์) แต่เป็นการทำความเข้าใจสภาวะทางเคมีเหล่านี้ ว่ามันวิวัฒนาการมาให้ทำงานแบบนี้ จุดจบของโฮโมเซเปียนส์อาจจะไม่ได้เป็นแบบเซเปียนส์สกุลอื่นในยุคโบราณ คือหายไป แต่อาจจะต่างออกไป เนื่องจากพัฒนาการทางวิทยาศาสตร์/วิศวกรรมสมัยใหม่   ที่มาบทความ : medium.com/@potaeeddylunna\n ","date":1588978800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588978800,"objectID":"1a74069e0d2052c90d56a97ced7fb0de","permalink":"https://example.com/book/sapiens/review-2/","publishdate":"2020-05-09T00:00:00+01:00","relpermalink":"/book/sapiens/review-2/","section":"book","summary":"สรุปนี้เกิดจากมุมมองของโฮโมเซเปียนส์ที่เติบโตในปลายคริสต์ศตวรรษที่ 20 ถึงต้นคริสต์ศตวรรษที่ 21 ในระเบียบแบบแผนตามจินตนาการของรัฐชาติที่ไม่เคยถูกครอบครองโดยจักรวรรดิใดๆ เชื่อในความจริงตามจินตนาการของระบบตลาดเสรีและทุนนิยม อาจมีมุมมองเอนเอียงไปบ้างเนื่องจากจะเก็บสรุปไว้อ่านส่วนตัว\n 13,500 ล้านปีที่แล้ว สสาร พลังงาน พื้นที่ และเวลา ได้รวมตัวกันเกิดเป็นปรากฏการณ์ที่รู้จักกันในชื่อ Big Bang เกิดเป็นเอกภพของเรา เรื่องราวเกี่ยวกับเอกภพเราเรียกว่า “ฟิสิกส์” 300,000 ปีถัดมา สสารและพลังงานเริ่มรวมตัวกันเป็นสิ่งที่เรียกว่า “อะตอม” ซึ่งรวมตัวเป็นโมเลกุลอีกที เรื่องราวเกี่ยวกับอะตอมและโมเลกุลเราเรียกว่า “เคมี” 3,800 ล้านปีที่แล้ว บนดาวเคราะห์ที่เรียกว่าโลก โมเลกุลได้รวมตัวเป็นโครงสร้างซับซ้อน เรียกว่า “สิ่งมีชีวิต” เรื่องราวเกี่ยวกับสิ่งมีชีวิตเรียกว่า “ชีววิทยา” 70,000 ปีมาแล้ว สิ่งมีชีวิตในสปีชีส์ โฮโมเซเปียนส์ ก่อรูปโครงสร้างสังคมที่เรียกว่า “วัฒนธรรม” พัฒนาการทางวัฒนธรรมของสปีชีส์นี้เรียกว่า “ประวัติศาสตร์” Species หมายถึง กลุ่มของสิ่งมีชีวิตที่สามารถผสม DNA กันได้, มี DNA Pool เดียวกัน สกุล(Genus) คือ สปีชีส์ของสิ่งมีชีวิตที่มีวิวัฒนาการจากบรรพบุรุษร่วมกัน เช่น Homo Sapien เป็นสิ่งมีชีวิตสกุล Homo ในสปีชีส์ Sapien, สิงโต เสือ เสือดาว เป็นสัตว์ต่างสปีชีส์กัน แต่อยู่ในสกุล Panthera วงศ์(Family) กลุ่มของสกุล เช่น วงศ์ของแมว ได้แก่ เสือชีตาห์ สิงโต แมว วงศ์ของช้าง ได้แก่ ช้าง แมมอธ มาสโตดอน เป็นต้น โฮโมเซเปียนส์เป็นสมาชิกของวงศ์หนึ่งในอาณาจักรสัตว์ ซิมแปนซี กอริลลา อุรังอุตัง และโฮโมเซเปียนต่างก็เป็นสมาชิกของวงศ์ลิงยักษ์ หรือ Great Apes กล่าวคือ หกล้านปีก่อนวานรหนึ่งนางมีลูกสาว 2 นาง นางหนึ่งเป็นบรรพบุรุษของซิมแปนซีและลิงอื่นๆ อีกนางเป็นบรรพบุรุษของโฮโมเซเปียนส์ โฮโมเซเปียน ไม่ได้เป็นมนุษย์เพียงสกุลเดียวที่เคยมีอยู่บนโลก โลกเคยมีมนุษย์(หรือ Species Sapiens)หลากหลายสกุลอยู่อาศัย จนกระทั่งเหลือเพียงโฮโมเซเปียน สิ่งที่คาดการณ์กันว่าทำให้พื้นโลกเหลือเซเปียนอยู่เพียงสกุลเดียวเริ่มต้นมาจากการใช้งานสิ่งที่เรียกว่า “ภาษา” ภาษาทำให้โฮโมเซเปียนสามารถสื่อสารได้ซับซ้อนกว่าสิ่งมีชีวิตอื่นๆและเซเปียนสกุลอื่น นั่นคือโฮโมเซเปียนสามารถใช้ภาษาสื่อสารถึงสิ่งที่ไม่มีอยู่จริงได้ ลิงก็สามารถสื่อสารโดยใช้ภาษาได้ รวมทั้งสัตว์สปีชีส์อื่นก็ทำได้เช่นกัน รวมทั้งมนุษย์สกุลอื่น แต่ทั้งหมดไม่สามารถสื่อสารถึงสิ่งที่ไม่มีอยู่จริงได้ การใช้ไฟและอาวุธ เซเปียนส์สกุลอื่นก็สามารถทำได้เช่นกัน การที่โฮโมเซเปียนส์สามารถสื่อสารถึงสิ่งที่ไม่มีอยู่จริงในโลกกายภาพได้ ทำให้เกิดสิ่งที่เรียกว่า “ความจริงในจินตนาการ” การสร้างความจริงในจินตนาการขึ้นเป็นประโยชน์ต่อโฮโมเซเปียนส์ มันสร้างสิ่งที่เรียกว่า พระเจ้า เทพ วิญญาน ตำนานและเรื่องเล่าต่างๆ ทำให้เกิดการรวมกลุ่มของโฮโมเซเปียนส์ที่เชื่อในความจริงในจินตนาการร่วมกัน ความจริงในจินตนาการที่ก่อรูปสร้างสังคมของโฮโมเซเปียนส์ ที่เห็นชัดเจนที่สุด ตัวอย่างหนึ่งในยุคสมัยใหม่คือความจริงในจินตนาการเกี่ยวกับ บริษัทจำกัด มูลค่าของเงินตรา ชาติ สิทธิ เสรีภาพ ฯลฯ สิ่งเหล่านี้ไม่มีจริงในโลกทางกายภาพ มีจริงเฉพาะในจินตนาการร่วมกันของโฮโมเซเปียนส์ บริษัทจำกัดเป็นเรื่องเล่าที่ถูกต้องตามกฏหมายถูกสร้างขึ้นเพื่อแยกบุคคลออกจากนิติบุคล เพื่อให้โฮโมเซเปียนส์ สามารถค้าขายได้โดยที่ไม่ต้องเอาสิ่งของส่วนตัวไปเสี่ยง หากความจริงในจินตนาการที่เรียกว่าบริษัทล้มละลายหรือเสียหาย ตัวบุคคลไม่ได้ล้มละลายไปกับบริษัท การตวัดปากกาเพื่อจัดตั้งบริษัทจึงเป็นการท่องมนต์ นักธุรกิจและทนายก็คือพ่อมดสมัยใหม่ การปฏิวัติเกษตรกรรมทำให้โฮโมเซเปียนส์ควบคุมปัจจัยการผลิตอาหารได้มากขึ้น แต่ก็ทำให้โฮโมเซเปียนส์โดยรวมได้รับสารอาหารที่หลากหลายน้อยลงกว่าการใช้ชีวิตแบบพรานป่าล่าสัตว์ ความจริงในจินตนาการทำให้โฮโมเซเปียนส์สร้างสิ่งที่มีผลสะเทือนต่อประวัติศาสตร์สิ่งหนึ่งขึ้นมา สิ่งนั้นเรียกว่า “จักรวรรดิ” การปฏิวัติเกษตรกรรมเปลี่ยนสังคมของโฮโมเซเปียนส์จากพรานป่าล่าสัตว์มาเป็นสังคมเกษตร การใช้ชีวิตในสังคมเกษตรสร้างสิ่งหนึ่งขึ้นในจิตใจของโฮโมเซเปียนส์คือ “ความกังวลเกี่ยวกับอนาคต” เนื่องจากผลผลิตขึ้นอยู่กับปัจจัยที่ควบคุมไม่ได้คือฤดูกาล สภาพอากาศ ความกังวลเกี่ยวกับอนาคตทำให้โฮโมเซเปียนส์สร้างความจริงในจินตนาการของสิ่งที่ทรงสรรพฤทธานุภาพขึ้นมา เช่น วิญญาน พระเจ้า เทพ อาตมัน เรียกแตกต่างกันไปในแต่ละวัฒนธรรม เพื่อคลายความกังวลเกี่ยวกับอนาคต ด้วยความเชื่อว่าสิ่งที่ทรงสรรพฤทธานุภาพสามารถช่วยให้ได้ในสิ่งที่ต้องการ ความจริงในจินตนาการทำให้โฮโมเซเปียนส์สร้าง “ระเบียบแบบแผนตามจินตนาการ”(Imagined Order) ขึ้นมา ซึ่งสามารถส่งระเบียบแบบแผนนี้ต่อไปยังโฮโมเซเปียนส์รุ่นถัดไปได้ ตัวอย่างที่เห็นชัด เช่น ศาสนา ความเป็นรัฐชาติ เป็นต้น(ส่วนตัวชอบคำนี้และเนื้อหาเกี่ยวกับเรื่องนี้เป็นพิเศษ) ระเบียบแบบแผนตามจินตนาการสอดแทรกอยู่ในเทพนิยาย ละคร ภาพวาด เพลง โฆษณา ฯลฯ มีปัจจัยสามอย่างที่ป้องกันไม่ให้ผู้คนตระหนักว่ามีระเบียบแบบแผนตามจินตนาการ และป้องกันไม่ให้ ผู้คนรู้ว่าระเบียบแบบแผนตามจินตนาการคอยบังคับควบคุมชีวิต   มีระเบียบแบบแผนตามจินตนาการอยู่ในโลกทางวัตถุรอบตัวเรา เช่น ภาพ อาคาร สื่อ เป็นต้น ระเบียบแบบแผนตามจินตนาการเป็นตัวกำหนดความต้องการของเรา เราล้วนเกิดขึ้นมาภายใต้ระเบียบแบบแผน ตามจินตนาการที่มีอยู่ก่อนแล้ว และความต้องการหลักๆของเรา ถูกกำหนดไว้ก่อนแล้วด้วยตำนานที่มีอยู่ก่อน เช่น แนวคิดแบบตะวันตกที่เกิดจากตำนานแบบโรแมนติกในคริสต์ศตวรรษที่ 19 กับตำนานบริโภคนิยมในคริสต์ศตวรรษที่ 20 ที่ว่าการจะเข้าถึงศักยภาพของมนุษย์ได้ต้องมีประสบการณ์ให้มากที่สุด และต้องบริโภคสิ่งต่างๆให้หลากหลาย ระเบียบแบบแผนตามจินตนาการเป็นอัตวิสัยร่วม(inter-subjective)   ปรากฏการณ์แบบวัตถุวิสัย(objective) คือปรากฏการณ์ที่ดำรงอยู่ได้โดยไม่ขึ้นกับความเชื่อหรือการรับรู้ของมนุษย์ อัตวิสัย(subjective)คือภาวะที่สิ่งนั้นจะดำรงอยู่ได้ต้องอาศัยความเชื่อขอปัจเจกชนหรือใครสักคน อัตวิสัยร่วมคือการรับรู้แบบอัตวิสัยของปัจเจกชนจำนวนมากผ่านเครือข่ายการสื่อสาร หากปัจเจกหายไปสักคนหนึ่ง อัตวิสัยร่วมก็ยังคงอยู่ เช่น การที่คนไทยตายไปหนึ่งคนไม่ได้ทำให้อัตวิสัยร่วมของความเป็นชาติไทยหายไป ศาสนา(ขอละไว้ไม่สรุป กลัวดราม่า) การเกิดขึ้นของจักรวรรดิ เป็นเรื่องที่เกิดขึ้นทั่วโลก แต่การที่คนยุคเราเติบโตขึ้นมากับระเบียบแบบแผนตามจินตนาการของโลกตะวันตกเนื่องจากจักรวรรดิตะวันตกสามารถแพร่ขยายไปได้ทั่วโลก การที่จักรวรรดิตะวันตกสามารถแพร่ขยายไปได้เกิดจากความต้องการเผยแพร่ระเบียบแบบแผนตามจินตนาการของตน และมีปัจจัยสนับสนุนคือ วิทยาศาสตร์ และ ทุนนิยม วิทยาศาสตร์พัฒนาขึ้นเพราะโฮโมเซเปียนส์เริ่มเชื่อว่า ยังมีสิ่งที่ไม่รู้ หมุดหมายสำคัญของวิทยาศาสตร์คือการนำภาษาคณิตศาสตร์มาใช้ หนังสือที่ถือว่าสำคัญที่สุดและเป็นจุดเริ่มต้นของวิทศาสตร์ที่จดจารด้วยภาษาคณิตศาสตร์คือ The Mathematical Principles of Natural Philosophy ของ ไอแซก นิวตัน วิทยาศาสตร์ไม่ได้พัฒนาขึ้นอย่างเอกเทศเดี่ยวๆเฉพาะวงการ แต่มีความเกี่ยวข้องกับการเมือง ศาสนา เศรษฐกิจ ด้วย การค้นพบทางวิทยาศาสตร์ที่สำคัญที่ส่งผลให้จักรวรรดิตะวันตกแพร่กระจายไปได้คือการค้นพบวิธีป้องกันโรคลักปิดลักเปิด ทำให้กองเรือสามารถเดินทางข้ามมหาสมุทรเป็นเวลานานๆได้ พัฒนาการทางวิทยาศาสตร์และทุนนิยมนั้นสนับสนุนกันและกัน แม้จะทรงปัญญาขนาดไหนถ้าหากขาดทุนสนับสนุนแล้ว วิทยาศาสตร์จะพัฒนามาถึงจุดที่เราอยู่ได้ยาก วิทยาศาสตร์ไม่ได้เก่งในการพัฒนาความรู้ใหม่เท่านั้น แต่เป็นการพัฒนาเพื่อให้ได้อำนาจใหม่ๆ โดยเฉพาะอำนาจ ในการพัฒนาเทคโนโลยีใหม่ๆ และใช้อำนาจนั้นในการช่วงชิงทรัพยากร เป็นลูป การวิจัย \u0026gt; อำนาจ \u0026gt; ทรัพยากร \u0026gt; การวิจัย \u0026gt; อำนาจ \u0026gt; ทรัพยากร \u0026gt; เงินตราถูกสร้างขึ้นมาเพื่อให้ง่ายในการแลกเปลี่ยน มันไม่ได้มีคุณค่าด้วยตัวมันเอง มันมีคุณค่าอยู่เฉพาะในอัตวิสัยร่วมของโฮโมเซเปียนส์ สตาร์ทอัพที่ก่อตั้งขึ้นมาในโลก, ระดมทุนยากที่สุดแล้วส่งผลต่อประวัติศสสตร์ของโฮโมเซเปียนมากที่สุดคือสตาร์ทอัพของโคลัมบัส เงินตราไม่ได้เปลี่ยนแปลงการเติบโตของเศรษฐกิจของโฮโมเซเปียนส์มากนักจนกระทั่งเกิดสิ่งที่เรียกว่า “เครดิต” เครดิต คือการนำเงินตราที่ไม่มีอยู่จริงมาใช้ หรือก็คือเงินตราที่โฮโมเซเปียนส์จะต้องหามาในอนาคตมาใช้ก่อนนั่นเอง เครดิต ถูกสร้างคือบนฐานความเชื่อที่ว่าเงินตรามีอยู่อย่างไม่จำกัดและอนาคตจะต้องดีกว่าวันนี้(อนาคตจะหาเงินตราได้มากขึ้น) เครดิตมีพลังมากขึ้นเมื่อถูกนำไปใช้ปล่อยกู้ในมือของระเบียบแบบแผนในจินตนาการที่เรียกว่า “ธนาคาร” ทุนนิยมกับบริโภคนิยมนั้นเป็นคนละแนวคิดกัน ทุนนิยมว่าด้วยการทำกำไรและลงทุนซ้ำ ดังแนวคิด “ผลกำไรจากการผลิตจะต้องนำมาลงทุนซ้ำเพื่อเพิ่มการผลิต” เวลา ถูกทำให้เป็นสากลและตรวจวัดตั้งแต่ยุคปฏิวัติอุตสาหกรรมเป็นต้นมา การดำเนินชีวิต ทำงาน เรียนหนังสือ ตามตารางเวลาเริ่มต้นในยุคนั้น กล่าวคือ เวลาสากลคือระเบียบแบบแผนตามจินตนาการ ความสุขทางจิตวิทยา คือความพึงพอใจ ความสุขทางเคมี คือปฏิกริยาที่ถูกกำหนดโดยฮอร์โมนโดพามีน ออกซิโทซิน เซโรโทนิน การพัฒนาตลอดช่วงเวลาประวัติศาสตร์ของโฮโมเซเปียนส์ ไม่ได้บ่งชี้ว่าปัจเจกชนโดยรวมมีความสุขมากขึ้น ยิ่งไม่ต้องนับรวมถึงความสุขของสปีชีส์โดยรวม ความสุขขึ้นอยู่กับความคาดหวังลบด้วยความจริง การไขว่คว้าหาความสุขคือการไขว่คว้าสภาวะทางอารมณ์บางอย่าง การตามหาความสุข คือการตามหาการหลั่งของโดพามีน ออกซิโทซิน เซโรโทนิน ซึ่งวิวัฒนาการกำหนดให้หลั่งเพียงชั่วครู่หลังจากได้รับการกระตุ้นจากสภาวะภายนอกหรือภายใน แล้วคงอยู่ชั่วคราวแล้วหายไป การใช้ชีวิตให้มีความหมาย สามารถเป็นตัวกระตุ้นความสุขได้ แต่การให้ความหมายกับชีวิตก็คือความจริงในจินตนาการของโฮโมเซเปียนส์อย่างหนึ่ง ผู้เขียนแนะนำการจัดการความสุข/ทุกข์ในทางพุทธศาสนา คือความสุขไม่ได้ขึ้นกับสภาวะภายนอกเท่านั้น แต่ขึ้นกับสภาวะภายใน แต่เราไม่ควรไขว่คว้าสภาวะทางเคมีที่แสนสั้น(สุข) หรือหลีกหนีสภาวะทางเคมีที่แสนสั้น(ทุกข์) แต่เป็นการทำความเข้าใจสภาวะทางเคมีเหล่านี้ ว่ามันวิวัฒนาการมาให้ทำงานแบบนี้ จุดจบของโฮโมเซเปียนส์อาจจะไม่ได้เป็นแบบเซเปียนส์สกุลอื่นในยุคโบราณ คือหายไป แต่อาจจะต่างออกไป เนื่องจากพัฒนาการทางวิทยาศาสตร์/วิศวกรรมสมัยใหม่   ที่มาบทความ : medium.","tags":null,"title":"สรุป Sapiens - A brief history of humankind","type":"docs"},{"authors":null,"categories":null,"content":" โดย ดร. สุวินัย ภรณวลัย\n  \u0026ldquo;อ่านอนาคตของดีอุส จากอดีตของเซเปียนส์\u0026rdquo;   ประโยชน์สูงสุดที่เราได้จากการเรียนรู้ประวัติศาสตร์ มิใช่เอาไว้ใช้ทำนายอนาคต แต่เอาไว้เพื่อปลดปล่อยตนเอง ให้เป็นอิสระก็จริง แต่เราสามารถทำนายอนาคตของดีอุสได้ จากการศึกษาอดีตของเซเปียนส์ ถ้าบรรพบุรุษของดีอุส แยกตัวออกจากบรรพบุรุษของเซเปียนส์ผ่านสุพันธุศาสตร์ (eugenics) ที่อัปเกรดมนุษย์ จนมีความสามารถดุจเทพเจ้าในตำนานเทพกรีก หรือตำนานเทพฮินดู ในอนาคตอีกไม่กี่ร้อยปีข้างหน้า ดีอุสจะรู้สึก ต่อเซเปียนส์และปฎิบัติต่อเซเปียนส์เช่นไร?\nเราสามารถฟันธงได้ล่วงหน้าเลยว่า ดีอุสคงมองเซเปียนส์ รู้สึกต่อเซเปียนส์และปฏิบัติต่อเซเปียนส์ เหมือนอย่างที่เซเปียนส์มองลิงชิมแปนซี รู้สึกต่อชิมแปนซี และปฏิบัติต่อชิมแปนซีนั่นเอง เพราะต้องไม่ลืมว่า แค่เมื่อ 6 ล้านปีก่อน บรรพบุรุษของเซเปียนส์เพิ่งแยกขาดจากบรรพบุรุษของชิมแปนซีและวานรอื่นๆมาหมาดๆเท่านั้นเอง\nในอนาคตอันไกลสักหน่อย ในยุคที่ดีอุสครองโลก เหมือนอย่างยุคที่เซเปียนส์ครองโลกหรือยุคแอนโทรโปซีน (Anthropocene) อย่างยุคปัจจุบัน ถ้าดีอุสไม่ขจัดเซเปียนส์จนแทบหมดไปจากโลกนี้ เหมือนอย่างที่เซเปียนส์เคยกำจัด โฮโม อีเล็กตัส หรือโฮโม นีแอนเดอร์ธัลล์ไปแล้วเพื่อครองโลก ดีอุสก็อาจเอาเซเปียนส์มาเป็นสัตว์เลี้ยงของตนเพื่อใช้งานบางอย่างก็เป็นได้ เพราะที่ผ่านมาเซเปียนส์ก็เคยทำแบบนี้กับสัตว์ใหญ่อื่นๆมาแล้วเช่นกัน\nในยุคเซเปียนส์ครองโลกอย่างยุคปัจจุบัน เรามีสุนัขบ้านมากกว่า 400 ล้านตัว แต่มีหมาป่าแค่ 200,000 ตัวกระจายอยู่ทั่วโลกเท่านั้น เรามีสิงโตแค่ 40,000 ตัว เมื่อเทียบกับแมวตามบ้าน 600 ล้านตัว เรามีเพนกวิน 50 ล้านตัว แต่มีไก่ 20,000 ล้านตัว เรามีควายแอฟริกัน 900,000 ตัว แต่มีวัวเลี้ยง 1,500 ล้านตัว ความเห็นอกเห็นใจอย่างลึกซึ้งกับความโหดร้ายอย่างสุดขั้วคือ อารมณ์ความรู้สึกของเซเปียนส์ที่เด่นชัดมาก อารมณ์ความรู้สึกของดีอุสจึงไม่น่าต่างไปจากเซเปียนส์เท่าไรนัก โดยเฉพาะด้านที่โหดร้ายอย่างเลือดเย็นของเซเปียนส์ และด้านที่ฉลาดเฉลียวเพื่อบำเรอกิเลสของตนเองของเซเปียนส์\nคนเราไม่ได้มีชีวิตอยู่ในยุคสมัยของตนเท่านั้น​ แต่คนเรายังพ่วงเอาประวัติศาสตร์ติดตัวไปกับตนเองด้วยเกอเธ่​ กวีชาวเยอรมันเคยกล่าวว่า \u0026ldquo;ผู้ที่ไม่สามารถเชื่อมโยงตัวเองเข้ากับประวัติศาสตร์ในรอบสามพันปีได้​ ผู้นั้นจะต้องหาเช้ากินค่ำตลอดไป\u0026rdquo;\nจะเป็นเรื่องน่าเศร้าเพียงไหน​หากคนเราเป็นได้แค่ \u0026ldquo;คนหาเช้ากินค่ำตลอดไป\u0026rdquo; แม้ว่าจะได้เงินเดือนที่สูงมากแค่ไหนก็ตาม​ เพียงเพราะผู้นั้นไม่รู้จักรากเหง้าทางประวัติศาสตร์ของตัวเอง และเพียงเพราะผู้นั้นไม่สามารถเชื่อมโยงตัวเอง เข้ากับประวัติศาสตร์ในรอบสามพันปีหรือนานกว่านั้นได้ ในทัศนะของผม การบูรณาการตัวเอง เข้ากับประวัติศาสตร์ในรอบหลายแสนปีของเซเปียนส์​ จึงเป็นหนทางเดียวที่จะทำให้คนเรากลายเป็นมนุษย์ที่แท้ได้จริง และสามารถเป็นอิสระจาก \u0026ldquo;คำสาปเรื่องดีอุส\u0026rdquo;ในอนาคตได้ นี่เป็นหนทางเดียวที่จะทำให้คนเราเป็นอะไรที่มากกว่า​\u0026rdquo;ลิงเปลือย\u0026rdquo; ที่อุตริ​ริใส่เสื้อผ้า ​เล่นโทรศัพท์มือถือ​ เพราะไร้ความคิด​ คิดไม่เป็น​ ไม่รู้จักตนเอง ​ยังไม่ตื่นรู้เพราะหาคุณค่าความหมายที่แท้จริงของชีวิตตนเองไม่เจอ\nคนเราอาจมีชีวิตอยู่บนโลกนี้ได้แค่ไม่กี่สิบปีก็จริง​ แต่ถ้าคนผู้นั้นสามารถเชื่อมโยง ประวัติศาสตร์ของเซเปียนส์นับแสนปี​เข้ากับประวัติศาสตร์แห่งจิตใจของผู้นั้นจนเป็นหนึ่งเดียวได้ นั่นก็หมายความว่า คนผู้นั้นได้มีอายุเป็นแสน ๆ ปีมาแล้ว ยิ่งถ้าคนผู้นั้นสามารถฝึกฝนตน​ บำเพ็ญเพียร ทางจิต​ตลอดจนสามารถเชื่อมโยงตัวเอง เข้ากับประวัติศาสตร์ของจักรวาลนับล้าน ๆ ปี​จนกระทั่งสามารถเป็นหนึ่งเดียวกับประวัติศาสตร์ ของธรรมจิต​ (Spirit)​ ที่เป็นมหาสุญญตาได้นั่น ก็หมายความว่า คนผู้นั้นได้มีอายุยั่งยืนเทียมเท่าจักรวาลหรือฟ้าดิน\nเขาคือมนุษย์ที่กลายเป็นฟ้าหรือพระเจ้า​ เขาจะเป็นทั้งมนุษย์ที่สมบูรณ์และพระเจ้าในร่างคนโดยสมบูรณ์ นี่แหละคือโลกของพระโพธิสัตว์​และเป็นวิถีของพระโพธิสัตว์ มิใช่โลกในคำสาปอย่างโลกของดีอุส\nยูวัล โนอาห์​ แฮรารี​ ผู้เขียนหนังสือ​ Sapiens : A Brief History of​ ​Humankind (2014) อันโด่งดังกล่าวว่า​ เซเปียนส์เป็นเรื่องราวของสัตว์ที่กลายเป็น​ \u0026ldquo;พระเจ้า\u0026rdquo; ผมจะลองเล่าเรื่องราวของเซเปียนส์​ จากมุมมองของจิตวิวัฒน์ ​เพื่อเสริมต่อสิ่งที่ขาดหายไปในหนังสือเล่มนี้ของยูวัล​ ที่นำเสนอโดยใช้มุมมองของวัตถุนิยมประวัติศาสตร์เชิงบูรณาการเป็นหลัก​ (แต่ไม่ใช่แบบลัทธิมาร์กซ์ที่หมกมุ่นแต่เรื่องการต่อสู้ทางชนชั้น) เอกภพของเราเกิดขึ้นเมื่อ​ 13,500 ล้านปีที่แล้ว จากปรากฏการณ์บิ๊กแบ​ง​ (เรื่องราวของฟิสิกส์) สามแสนปี​หลังเหตุการณ์บิ๊กแบ​ง​ สสารและพลังงานเริ่มรวมตัวกัน เป็นโครงสร้างเชิงซ้อนที่เรียกว่า​อะตอม​ ซึ่งรวมตัวกันเป็นโมเลกุล​ (เรื่องราวของเคมี) 3,800 ล้านปีที่แล้ว​บนโลกใบนี้​ โมเลกุลได้รวมตัวกันก่อรูปเป็นโครงสร้างที่พิเศษและซับซ้อนเรียกว่า​ สิ่งมีชีวิต​ (เรื่องราวของชีววิทยา) ประมาณ​ 70,000 ปีมาแล้ว​สิ่งมีชีวิตในสปีชีส์​ โฮโมเซเปียนส์​ เริ่มก่อรูปโครงสร้างสังคมที่ประณีตมากขึ้นไปอีก​เรียกว่า​ \u0026ldquo;วัฒนธรรม\u0026rdquo; ต่อมาพัฒนาการทางวัฒนธรรมของเหล่ามนุษย์ทั้งหลายมีชื่อเรียกว่า​ \u0026ldquo;ประวัติศาสตร์\u0026rdquo;\nมนุษย์เราดำรงอยู่บนโลกนี้เป็นเวลานานก่อนที่จะเกิดประวัติศาสตร์ขึ้น​ คือ​สามารถย้อนกลับไปได้ถึง​ 2.5 ล้านปีเลยทีเดียว​ เพียงแต่ตอนนั้นมนุษย์ไม่ได้มีลักษณะอะไรที่โดดเด่นจนแตกต่างไปจากสิ่งมีชีวิตอื่นๆที่มีอยู่มากมายในสภาพแวดล้อมเดียวกันมนุษย์สมัยก่อนประวัติศาสตร์​ เป็นเพียงสัตว์ที่ไม่ได้สลักสำคัญ​และไม่ได้ส่งผลกระทบต่อสิ่งแวดล้อมมากไปกว่าลิงกอริลลาเลย\nนักชีววิทยาแบ่งสิ่งมีชีวิตออกเป็นสปีชีส์​โดยที่สปีชีส์ต่างๆจะรวมกันอยู่ภายใต้​\u0026rdquo;สกุล\u0026rdquo; และกลุ่มต่าง ๆ ของสกุลจะจัดอยู่ใน​\u0026rdquo;วงศ์\u0026rdquo; ถ้ากล่าวตามนี้​ เซเปียนส์ก็เป็นแค่สมาชิกของวงศ์หนึ่งในอาณาจักรสัตว์เช่นกัน​ หาใช่ ​\u0026rdquo;สัตว์ประเสริฐ\u0026rdquo; ตั้งแต่แรกกำเนิดไม่ ตัวตนที่แท้จริงทางชีววิทยาของ​เซเปียนส์ หรือของคนเรา คือสัตว์ที่เป็นสมาชิกของวงศ์ที่เรียกว่า​วานรยักษ์​ (great apes)​ ญาติใกล้ชิดที่สุดของเราที่ยังมีชีวิตอยู่​ได้แก่​ ชิมแปนซี​ กอริลลา​ และอุรังอุตัง​ โดยที่ชิมแปนซีมีความใกล้ชิดกับเรามากที่สุด แค่ราว ๆ​ 6​ ล้านปีก่อนเท่านั้นเอง ที่บรรพบุรุษของพวกเรา​แยกขาดจากบรรพบุรุษของชิมแปนซีและวานรอื่น ๆ เท่านั้นเอง\n","date":1588978800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588978800,"objectID":"ba5556c206976230a1327496634f75fb","permalink":"https://example.com/book/deus/deus-2/","publishdate":"2020-05-09T00:00:00+01:00","relpermalink":"/book/deus/deus-2/","section":"book","summary":"โดย ดร. สุวินัย ภรณวลัย\n  \u0026ldquo;อ่านอนาคตของดีอุส จากอดีตของเซเปียนส์\u0026rdquo;   ประโยชน์สูงสุดที่เราได้จากการเรียนรู้ประวัติศาสตร์ มิใช่เอาไว้ใช้ทำนายอนาคต แต่เอาไว้เพื่อปลดปล่อยตนเอง ให้เป็นอิสระก็จริง แต่เราสามารถทำนายอนาคตของดีอุสได้ จากการศึกษาอดีตของเซเปียนส์ ถ้าบรรพบุรุษของดีอุส แยกตัวออกจากบรรพบุรุษของเซเปียนส์ผ่านสุพันธุศาสตร์ (eugenics) ที่อัปเกรดมนุษย์ จนมีความสามารถดุจเทพเจ้าในตำนานเทพกรีก หรือตำนานเทพฮินดู ในอนาคตอีกไม่กี่ร้อยปีข้างหน้า ดีอุสจะรู้สึก ต่อเซเปียนส์และปฎิบัติต่อเซเปียนส์เช่นไร?\nเราสามารถฟันธงได้ล่วงหน้าเลยว่า ดีอุสคงมองเซเปียนส์ รู้สึกต่อเซเปียนส์และปฏิบัติต่อเซเปียนส์ เหมือนอย่างที่เซเปียนส์มองลิงชิมแปนซี รู้สึกต่อชิมแปนซี และปฏิบัติต่อชิมแปนซีนั่นเอง เพราะต้องไม่ลืมว่า แค่เมื่อ 6 ล้านปีก่อน บรรพบุรุษของเซเปียนส์เพิ่งแยกขาดจากบรรพบุรุษของชิมแปนซีและวานรอื่นๆมาหมาดๆเท่านั้นเอง\nในอนาคตอันไกลสักหน่อย ในยุคที่ดีอุสครองโลก เหมือนอย่างยุคที่เซเปียนส์ครองโลกหรือยุคแอนโทรโปซีน (Anthropocene) อย่างยุคปัจจุบัน ถ้าดีอุสไม่ขจัดเซเปียนส์จนแทบหมดไปจากโลกนี้ เหมือนอย่างที่เซเปียนส์เคยกำจัด โฮโม อีเล็กตัส หรือโฮโม นีแอนเดอร์ธัลล์ไปแล้วเพื่อครองโลก ดีอุสก็อาจเอาเซเปียนส์มาเป็นสัตว์เลี้ยงของตนเพื่อใช้งานบางอย่างก็เป็นได้ เพราะที่ผ่านมาเซเปียนส์ก็เคยทำแบบนี้กับสัตว์ใหญ่อื่นๆมาแล้วเช่นกัน\nในยุคเซเปียนส์ครองโลกอย่างยุคปัจจุบัน เรามีสุนัขบ้านมากกว่า 400 ล้านตัว แต่มีหมาป่าแค่ 200,000 ตัวกระจายอยู่ทั่วโลกเท่านั้น เรามีสิงโตแค่ 40,000 ตัว เมื่อเทียบกับแมวตามบ้าน 600 ล้านตัว เรามีเพนกวิน 50 ล้านตัว แต่มีไก่ 20,000 ล้านตัว เรามีควายแอฟริกัน 900,000 ตัว แต่มีวัวเลี้ยง 1,500 ล้านตัว ความเห็นอกเห็นใจอย่างลึกซึ้งกับความโหดร้ายอย่างสุดขั้วคือ อารมณ์ความรู้สึกของเซเปียนส์ที่เด่นชัดมาก อารมณ์ความรู้สึกของดีอุสจึงไม่น่าต่างไปจากเซเปียนส์เท่าไรนัก โดยเฉพาะด้านที่โหดร้ายอย่างเลือดเย็นของเซเปียนส์ และด้านที่ฉลาดเฉลียวเพื่อบำเรอกิเลสของตนเองของเซเปียนส์","tags":null,"title":"ตอนที่ 2 - คำสาปเรื่องดีอุส","type":"docs"},{"authors":null,"categories":null,"content":"  100,000 ปีที่แล้ว มีมนุษย์อาศัยอยู่บนโลกใบนี้ถึง 6 เผ่าพันธุ์ ในวันนี้มีมนุษย์เพียงเผ่าพันธุ์เดียวที่หลงเหลืออยู่ นั่นคือพวกเราเหล่า Homo Sapiens (Homo = Man, Sapien = Wise, Homo Sapien = Wise Man = ผู้มีปัญญา) อะไรที่ทำให้เผ่าพันธุ์ที่เคยได้แต่เก็บผลหมากรากไม้และล่าสัตว์เพื่อยังชีพ กลายมาเป็นผู้ครองโลกทั้งใบได้?\n   การถือกำเนิดของศาสตร์ต่าง ๆ Physics เกิดขึ้นเมื่อ 13,000 ล้านปีที่แล้ว ตอนที่บิ๊กแบงได้ให้กำเนิดจักรวาล Chemistry เกิดขึ้นหลังจากบิ๊กแบงประมาณสามแสนปี เมื่อสสารเริ่มจับตัวเป็นอะตอมและโมเลกุล Biology เกิดขึ้นเมื่อ 3,800 ล้านปีที่แล้ว เมื่อโลกเริ่มมีสิ่งมีชีวิต (organisms) History เกิดขึ้นเมื่อ 70,000 ปีที่แล้ว เมื่อ Homo Sapiens เริ่มออกเดินทางไปทั่วโลกและสร้างอารยธรรมต่างๆ ขึ้นมา\nว่าด้วยเรื่องตระกูล (Genus) และเผ่าพันธุ์ (Species) สิงโต เสือ เสือดาว และเสือจากัวร์ อยู่ในตระกูลเดียวกันคือ ตระกูล Panthera นักวิทยาศาสตร์จะตั้งชื่อสัตว์ต่างๆ เป็นภาษาละติน โดยขึ้นต้นด้วย Genus และลงท้ายด้วย Species เช่นสิงโต จะมีชื่อทางการว่า Panthera Leo ซึ่งหมายถึงสัตว์ตระกูล Panthera เผ่าพันธุ์ Leo ส่วนมนุษย์เรา ก็อยู่ในตระกูล Homo เผ่าพันธุ์ Sapiens\nกำเนิดตระกูล Homo ต้นตระกูล Homo นั้นเกิดขึ้นเมื่อประมาณ 2.5 ล้านปีที่แล้วที่ แอฟริกาตะวันออก พวกเขาเหล่านั้นมีชื่อว่า Australopitecus ที่แปลว่า Southern Ape เมื่อประมาณ 2 ล้านปีที่แล้วเหล่า Southern Ape ได้ออกเดินทางจากชายฝั่งแอฟริกาตะวันออก ไปยังแอฟริกาเหนือ ยุโรป และเอเชีย เนื่องจากภูมิประเทศและภูมิอากาศที่ต่างกัน วิวัฒนาการของเหล่า Southern Ape จึงแตกต่างกันไป Southern Ape ที่ไปอยู่ในยุโรปและเอเชียตะวันตกได้วิวัฒนาการมาเป็น Homo neanderthalensis (Man from the Neander Valley) หรือที่เราเรียกสั้นๆ ว่า นีแอนเดอธาล (Neanderthals) Southern Ape ที่ไปอยู่เอเชียตะวันออก วิวัฒนาการมาเป็น Homo erectus (Upright Man) พวกที่ไปอยู่ในเกาะจาวาของอินโดนีเซียถูกเรียกว่า Homo soloensis (Man from the Solo Valley) ส่วนพวกที่ไปอยู่เกาะชื่อ Flores ถูกเรียกว่า Homo floresiensis และเนื่องจากเกาะนี้ขาดแคลนอาหาร พวกเขาจึงเป็นมนุษย์แคระสูงเพียง 1 เมตรและหนักเพียง 25 กิโลกรัม จึงมีชื่อเรียกเล่นๆ ว่า “ฮอบบิท” ด้วย ที่แอฟริกาตะวันออกเองก็ยังผลิตมนุษย์พันธุ์ใหม่ออกมาเรื่อยๆ ไม่ว่าจะเป็น Homo rudolfensis (Man from Lake Rudolf) Homo ergaster (Working Man) และสุดท้ายก็คือ Homo Sapiens ที่เราตั้งชื่อแบบไม่เกรงใจใครว่าเป็น Wise Man\nต่างกันที่สมอง สัตว์เลี้ยงลูกด้วยนมตระกูลอื่นๆ ที่มีน้ำหนัก 60 กิโลกรัมนั้น จะมีขนาดสมอง 200 cc ต้นตระกูล Homo จะมีสมองขนาด 600 cc ส่วนพวกเราชาว Homo Sapiens มีขนาดสมองถึง 1200-1400 cc (แถมสมองของ Neanderthals ยังใหญ่กว่าพวกเราซะอีก) สมองขนาดใหญ่นำพาข้อเสียมาหลายข้อ\nข้อแรก คือสมองเป็นอวัยวะที่ใช้พลังงานเยอะมาก แม้ว่ามันจะหนักเพียง 2% ของน้ำหนักร่างกาย แต่มันใช้พลังงานถึง 25% ของร่างกายเวลาที่เราอยู่เฉยๆ (ขณะที่สมองของลิงใช้พลังงานเพียง 8%) เมื่อต้องใช้พลังงานมาก ก็ต้องเสียเวลากับการหาอาหารมากกว่าเดิม และทำให้กล้ามเนื้อของเราอ่อนแอกว่าเดิม (เพราะพลังงานถูกส่งไปเลี้ยงสมองมากกว่ากล้ามเนื้อ)\nเมื่อเราเริ่มต้นเดินสองขา (ซึ่งเป็นเอกลักษณ์ของตระกูล Homo) เราก็เริ่มใช้มือทำสิ่งที่สัตว์อื่นๆ ทำไม่ได้ เช่นส่งสัญญาณมือ เขวี้ยงก้อนหิน หรือสร้างอุปกรณ์ต่าง ๆ แต่การเดินสองขาก็มีข้อเสีย เพราะมันบังคับให้เอวและสะโพกต้องมีขนาดพอๆ กับลำตัว ซึ่งสำหรับผู้หญิงแล้วนั่นคือขีดจำกัดสำคัญของการให้กำเนิด เพราะเด็กทารกของ Homo Sapiens นั้นมีขนาดสมองและหัวใหญ่กว่าสัตว์อื่นๆ อยู่แล้ว การให้กำเนิดทารก Sapien จึงเป็นเรื่องเสี่ยงตายมากๆ ผู้หญิงที่ให้กำเนิดทารกที่ยังไม่โตเต็มวัยจึงมีโอกาสสูงกว่าที่จะรอดชีวิตและขยายเผ่าพันธุ์ต่อไป\nพูดง่าย ๆ ก็คือขนาดสมองที่ใหญ่และพื้นที่เชิงกรานที่เล็กบังคับให้เผ่าพันธุ์มนุษย์ต้องวิวัฒนาการตัวเองให้ “คลอดก่อนกำหนด” ลูกม้าเกิดมาไม่กี่วันก็เริ่มวิ่งได้แล้ว ลูกแมวเกิดมาไม่กี่สัปดาห์ก็ออกไปหาอาหารเองได้แล้ว แต่ลูกมนุษย์นี่ต้องมีคนดูแลอยู่หลายปีกว่าจะเติบโตพอที่จะใช้ชีวิตได้เองโดยลำพัง การ “คลอดก่อนกำหนด” ของเผ่าพันธุ์ Homo มีนัยยะอย่างมหาศาลต่อประวัติศาสตร์มนุษยชาติ หนึ่งก็คือมันทำให้เรากลายเป็นสัตว์สังคม เพราะแม่เพียงคนเดียวไม่สามารถที่จะเลี้ยงลูกไปและออกหาอาหารพร้อมกันได้ ต้องพึ่งพาคนอื่นๆ ในเผ่าที่จะช่วยดูแลลูกหรือช่วยหาอาหาร (It takes a village to raise a child)\nอีกข้อดีอย่างหนึ่งก็คือ ทารกที่คลอดออกมายังเป็น “ผ้าขาว” อยู่มากเมื่อเทียบกับทารกของสัตว์อื่นๆ เราจึงสามารถสอนเขาให้เติบโตมาเป็นคนแบบไหนก็ได้ จะเป็นพุทธหรือคริสต์ก็ได้ จะรักสันติหรือรักสงครามก็ได้ จะทำเพื่อเงินหรือทำเพื่อสังคมก็ได้ แม้ว่าตระกูล Homo จะมีสมองใหญ่กว่าสัตว์อื่น แต่จริงๆ แล้วช่วงแรกๆ มันก็ไม่ได้ทำให้ชีวิตเราดีขึ้นเท่าไหร่ ตระกูล Homo ถือกำเนิดเมื่อ 2.5 ล้านปีที่แล้ว แต่เป็นเวลากว่า 2 ล้านปีที่สัตว์ตระกูล Homo อยู่ตรงกลางของห่วงโซ่อาหาร คือแค่ล่าสัตว์เล็กๆ และถูกสัตว์ใหญ่ล่า เพิ่งจะเมื่อ 400,000 ปีที่แล้วนี่เองที่ Homo เริ่มใช้เครื่องมือเพื่อร่วมกันออกล่าสัตว์ใหญ่ และ 100,000 ปีที่แล้ว ที่มนุษย์ “กระโดด” มาอยู่จุดสูงสุดของห่วงโซ่อาหาร\nต่างกันที่ไฟ สิ่งหนึ่งที่ทำให้ Homo ได้ไต่เต้าขึ้นมาในห่วงโซ่อาหาร ก็คือทักษะในการจุดไฟได้เอง เมื่อสามแสนปีที่แล้ว Homo erectus หรือ Neanderthals ก็ใช้ไฟเป็นประจำเพื่อให้ความอุ่น ให้แสงสว่าง และเอาไว้ขู่สัตว์ที่จะมาทำร้าย แต่สิ่งสำคัญที่สุดที่ไฟมอบให้มนุษย์ก็คือการทำอาหารครับ\nไฟทำให้มนุษย์สามารถกินพืชที่กินดิบๆ ไม่ได้เช่นข้าวหรือมันฝรั่ง รวมถึงทำให้เรากินอาหารต่างๆ ได้เร็วขึ้นด้วย (ลิงชิมแปนซีใช้เวลาถึงวันละ 5 ชั่วโมงในการเคี้ยวอาหารดิบ) การที่เรากินอาหารที่สุกแล้ว ทำให้เรามีฟันที่เล็กลง และลำไส้ที่สั้นลง นักวิทยาศาสตร์เชื่อว่า เมื่อลำไส้สั้นลง จึงมีพลังงานไปเลี้ยงสมองมากขึ้นและเป็นเหตุผลที่ทำให้สมองของ Sapiens และ Neanderthals ใหญ่กว่าสัตว์อื่น ๆ ความสามารถในการควบคุมไฟทำให้มนุษย์มีพลังมากขึ้นอย่างเหลือเชื่อ ผู้หญิงตัวเล็กๆ หนึ่งคนที่ถือคบเพลิงสามารถจุดไฟเผาป่าทั้งป่าได้ในเวลาไม่กี่ชั่วโมง\nSapiens เริ่มเคลื่อนไหว แม้ว่าจะมีสมองขนาดใหญ่และใช้ไฟเป็น แต่เมื่อ 150,000 ปีที่แล้ว ตระกูล Homo ก็ยังเป็นเพียงสัตว์ชนิดหนึ่งบนปฐพีอันกว้างใหญ่ ไม่ได้มีบทบาทสำคัญใดๆ โดยทั่วทั้งโลกน่าจะมีสิ่งมีชีวิตตระกูล Homo ไม่เกิน 1 ล้านคน นักวิทยาศาสตร์เชื่อว่า เมื่อ 150,000 ปีที่แล้วคือช่วงเวลาที่ Homo Sapiens ในแอฟริกาตะวันออกได้วิวัฒนาการมาจนถึงจุดที่เขามีรูปร่างหน้าตาคล้ายคลึงกับเราในปัจจุบัน ถ้าเราจับ Sapien หนึ่งคนในตอนนั้นนั่งไทม์แมชชีนมาสมัยนี้ แล้วให้เขาใส่เสื้อผ้าเหมือนที่เราใส่ ก็จะไม่มีใครระแคะระคายว่าคนๆ นี้มาจากอดีตอันไกลโพ้น และนักวิทยาศาสตร์ก็เชื่ออีกว่า เมื่อ 70,000 ปีที่แล้ว Homo Sapiens ได้เริ่มล่องเรือออกจากชายฝั่งแอฟริกาตะวันออกไปยังคาบสมุทรอาหรับ และจากตรงนั้นก็ออกเดินทางด้วยเท้าไปทั่วทั้งทวีปยุโรปและเอเชียซึ่งมี Neanderthals และ Homo erectus อาศัยอยู่แล้ว (ถ้าเปิดดูแผนที่โลกจะเห็นภาพชัดขึ้น)\nคำถามก็คือ เกิดอะไรขึ้นเมื่อ Sapiens ไปเจอ Neanderthals ในยุโรป และ Homo erectus ในเอเชีย นักวิทยาศาสตร์มีสองทฤษฎี คือ Interbreeding Theory กับ Replacement Theory\n ทฤษฎีแรกก็คือมีการจู๋จี๋ข้ามเผ่าพันธุ์ ซึ่งนั่นหมายความว่าชาวยุโรปในสมัยนี้ไม่มีใครเป็น Pure Homo Sapiens แต่เป็น Homo Sapien+Neanderthal ซึ่งผลการตรวจ DNA ก็แสดงให้เห็นว่าคนยุโรปมี DNA ของ Neanderthal อยู่ประมาณ 1%-2%\n ทฤษฎีที่สองหรือ Replacement Theory ก็คือ Sapiens ไม่สนใจที่จะจู๋จี๋กับ Homo สายพันธุ์อื่น แต่ความสามารถที่เหนือกว่าของ Sapiens ทำให้เผ่าพันธุ์ที่มีอยู่ก่อนเก่าค่อยๆ ล้มหายตายจากไป เช่น Sapiens อาจจะทำเครื่องมือได้ดีกว่า ทำให้ชิงหาอาหารได้เร็วกว่า หรือเวลาต้องปะทะกันก็มีพละกำลังมากกว่า ฝ่ายที่ช้าหรืออ่อนแอกว่าก็เลยอดตายหรือแพ้ในการรบ – เป็น survival of the fittest อย่างแท้จริง\n  จะด้วยเหตุผลกลใดก็ตาม การไปถึงของ Sapiens ในพื้นที่ต่างๆ ทำให้เผ่าพันธุ์ Homo ที่มีอยู่ก่อนเก่าล่มสลาย Homo Soloensis สูญพันธุ์ไปเมื่อ 50,000 ปีที่แล้ว Neanderthals \u0026amp; Homo erectus สูญพันธุ์ไปเมื่อประมาณ 30,000 ปีที่แล้ว หรือเผ่าพันธุ์มนุษย์ฮอบบิทในเกาะ Flores ก็สูญพันธุ์ไปเมื่อ 12,000 ปีที่แล้ว เหลือไว้เพียงแต่พวกเราเผ่าพันธุ์ Homo Sapiens ลองคิดภาพเล่นๆ ว่าถ้า Neanderthals หรือ Homo erectus ไม่ได้สูญพันธ์ เหล่า Homo Sapiens อย่างเราจะยังกล้าคิดว่าตัวเองเป็นเผ่าพันธุ์สุดพิเศษกว่าเผ่าพันธ์ุไหนๆ อยู่รึเปล่า เรื่องราวในไบเบิล หรือในคัมภีร์ศาสนาอื่นๆ จะมีพื้นที่ในสวรรค์ให้แก่ Homo พันธุ์อื่นหรือไม่?\n เหล่า Neanderthal จะได้เข้าเป็นทหารให้จักรวรรดิโรมัน และ Homo erectus จะได้ร่วมสู้รบกับแคว้นต่างๆ ในประเทศจีนรึเปล่า?\n คำประกาศอิสรภาพของอเมริกาจะเปลี่ยนจาก We hold these truths to be self-evident, that all men are created equal เป็น that all members of the genus Homo are created equal รึเปล่า?\n อะไรคือ “เคล็ดลับ” ที่ทำให้ Sapiens สามารถเข้าครอบครองพื้นที่ทั่วโลก ทั้งๆ ที่สภาวะอากาศและภูมิประเทศในทวีปต่างๆ ก็แตกต่างกันอย่างสิ้นเชิง\n อะไรที่ทำให้ Neanderthal ซึ่งแข็งแรงกว่า มีสมองใหญ่กว่า และคุ้นเคยกับภูมิอากาศที่หนาวกว่าไม่สามารถต้านทาน Sapiens ได้?\n  ผู้เขียนหนังสือเล่มนี้บอกว่า สิ่งที่ทำให้เผ่าพันธุ์ Homo Sapiens ครองโลก เป็นสิ่งที่อยู่ใกล้ตัวเราจนเราอาจนึกไม่ถึง\nสิ่งนั้นคือ “ภาษา” นั่นเอง\n ที่มา: https://anontawong.com.\n ","date":1588892400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588892400,"objectID":"a26d759db794f39c28278473340b233e","permalink":"https://example.com/book/sapiens/sapiens-1/","publishdate":"2020-05-08T00:00:00+01:00","relpermalink":"/book/sapiens/sapiens-1/","section":"book","summary":"100,000 ปีที่แล้ว มีมนุษย์อาศัยอยู่บนโลกใบนี้ถึง 6 เผ่าพันธุ์ ในวันนี้มีมนุษย์เพียงเผ่าพันธุ์เดียวที่หลงเหลืออยู่ นั่นคือพวกเราเหล่า Homo Sapiens (Homo = Man, Sapien = Wise, Homo Sapien = Wise Man = ผู้มีปัญญา) อะไรที่ทำให้เผ่าพันธุ์ที่เคยได้แต่เก็บผลหมากรากไม้และล่าสัตว์เพื่อยังชีพ กลายมาเป็นผู้ครองโลกทั้งใบได้?\n   การถือกำเนิดของศาสตร์ต่าง ๆ Physics เกิดขึ้นเมื่อ 13,000 ล้านปีที่แล้ว ตอนที่บิ๊กแบงได้ให้กำเนิดจักรวาล Chemistry เกิดขึ้นหลังจากบิ๊กแบงประมาณสามแสนปี เมื่อสสารเริ่มจับตัวเป็นอะตอมและโมเลกุล Biology เกิดขึ้นเมื่อ 3,800 ล้านปีที่แล้ว เมื่อโลกเริ่มมีสิ่งมีชีวิต (organisms) History เกิดขึ้นเมื่อ 70,000 ปีที่แล้ว เมื่อ Homo Sapiens เริ่มออกเดินทางไปทั่วโลกและสร้างอารยธรรมต่างๆ ขึ้นมา\nว่าด้วยเรื่องตระกูล (Genus) และเผ่าพันธุ์ (Species) สิงโต เสือ เสือดาว และเสือจากัวร์ อยู่ในตระกูลเดียวกันคือ ตระกูล Panthera นักวิทยาศาสตร์จะตั้งชื่อสัตว์ต่างๆ เป็นภาษาละติน โดยขึ้นต้นด้วย Genus และลงท้ายด้วย Species เช่นสิงโต จะมีชื่อทางการว่า Panthera Leo ซึ่งหมายถึงสัตว์ตระกูล Panthera เผ่าพันธุ์ Leo ส่วนมนุษย์เรา ก็อยู่ในตระกูล Homo เผ่าพันธุ์ Sapiens","tags":null,"title":"ตอนที่ 1 - กำเนิด Sapiens","type":"docs"},{"authors":null,"categories":null,"content":" Here are some more tips for getting started with academia:\nTip 3 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\nTip 4 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"ae73c2dafb9eed90c8870cdf783e948c","permalink":"https://example.com/courses/example.2/example4/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/example.2/example4/","section":"courses","summary":"Here are some more tips for getting started with academia:\nTip 3 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus.","tags":null,"title":"Example Page 2","type":"docs"},{"authors":null,"categories":null,"content":" Here are some more tips for getting started with academia:\nTip 3 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\nTip 4 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"1c2b5a11257c768c90d5050637d77d6a","permalink":"https://example.com/courses/example/example2/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/example/example2/","section":"courses","summary":"Here are some more tips for getting started with academia:\nTip 3 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus.","tags":null,"title":"Example Page 2","type":"docs"},{"authors":null,"categories":null,"content":" Here are some more tips for getting started with academia:\nTip 3 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\nTip 4 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"507e4cd2746d8b7ea0b6ed4a42cb4462","permalink":"https://example.com/courses/example.1/example4/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/example.1/example4/","section":"courses","summary":"Here are some more tips for getting started with academia:\nTip 3 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus.","tags":null,"title":"Example Page 2","type":"docs"},{"authors":null,"categories":null,"content":" ในช่วงฤดูร้อนปี 1980 ตัวแทนจาก IBM สองคนได้เดินทางมาที่สำนักงานใหญ่ของ Microsoft เพื่อหารือเรื่องคอมพิวเตอร์ส่วนบุคคลที่ IBM กำลังตัดสินใจครั้งสำคัญว่าจะสร้างมันดีหรือไม่?\nแม้ในยุคนั้น IBM จะเป็นเจ้าตลาด Hardware ครอบครองส่วนแบ่งการตลาดคอมพิวเตอร์แบบเมนเฟรมถึงกว่า 80% เรียกได้ว่าเป็นยักษ์ใหญ่ในตลาดครองตลาดได้แบบเบ็ดเสร็จสำหรับ IBM แต่ดูเหมือนคอมพิวเตอร์ขนาดเล็กนั้นจะเป็นปัญหาสำหรับ IBM เพราะพวกเขาคุ้นเคยกับการขายคอมพิวเตอร์ขนาดมหึมาในราคาแพง และลูกค้าส่วนใหญ่ เป็นลูกค้าธุรกิจที่เป็นบริษัทยักษ์ใหญ่ทั่วโลกในขณะนั้น\nซึ่งการเข้ามาคุยกับ Microsoft เนื่องจาก ฝ่ายผู้บริหารระดับสูงเล็งเห็นว่า จำเป็นต้องดึงคนนอก เข้ามาช่วยเหลือในตลาดใหม่อย่าง คอมพิวเตอร์ส่วนบุคคล ซึ่งเป็นการขายให้กับผู้บริโภครายย่อย ซึ่งเป็นสิ่งที่ IBM นั้นไม่ถนัดเป็นอย่างยิ่ง\nและ IBM ต้องการเข็นคอมพิวเตอร์ส่วนบุคคลออกตลาดให้ได้ภายในปีนั้น โดย IBM ได้ตัดสินใจ สร้างเครื่องคอมพิวเตอร์ส่วนบุคคลที่ประกอบด้วยอุปกรณ์ที่หาซื้อได้ทั่วไปในท้องตลาด และทำสิ่งที่เซอร์ไพรซ์เป็นอย่างยิ่งคือ การสร้างระบบแบบเปิดและง่ายต่อการเลียนแบบ แม้ว่าในเครื่องเมนเฟรมขนาดใหญ่นั้น IBM จะออกแบบ Microprocessor เองทั้งหมด แต่ในตลาดใหม่อย่างคอมพิวเตอร์ส่วนบุคคล IBM ได้ตัดสินใจใช้ Microprocessor ของ intel และที่สำคัญที่สุด คือ IBM ได้ตัดสินใจที่จะให้คนอื่นเขียนระบบปฏิบัติการขึ้นมา ซึ่งแน่นอนว่านี่คือโอกาสทองครั้งสำคัญของ Microsoft\nและแน่นอนว่า Gates ไม่มีทางที่จะพลาดโอกาสทองครั้งยิ่งใหญ่แบบนี้ ที่น้อยคนนักที่จะมีโอกาสแบบที่ Gates ได้รับจาก IBM ซึ่งแน่นอนว่ามันเป็นเรื่องท้าทายครั้งสำคัญของ Gates และ Microsoft แต่อย่างไรก็ตาม พวกเขาก็ต้องการมีส่วนร่วมกับธุรกิจยักษ์ใหญ่นี้ โดย Gates ได้ไปซื้อโปรแกรมที่เคยพัฒนามาแล้วจากบริษัทเล็ก ๆ แห่งหนึ่งในเมืองซีแอตเติล และได้จ้าง Tim Paterson หัวหน้าวิศวกรจากบริษัทดังกล่าวมาร่วมงานกับ Microsoft และนำโปรแกรมดังกล่าวมาปรับแต่งให้กับ Hardware ของ IBM\ngates เลือกทางลัดในการสร้าง MS-DOS ด้วยการซื้อ Software พร้อมหัวหน้าทีมพัฒนาอย่าง Tim Paterson มาร่วมงาน ซึ่งผลที่ได้มันก็คือ MS-DOS (Microsoft Disk Operating System) และ IBM นี่เองที่เป็นลูกค้ารายแรกของ Microsoft ที่ซื้อลิขสิทธิ์ MS-DOS ไป และเปลี่ยนชื่อมันให้กลายเป็น PC-DOS และทำการออกวางขายเครื่องคอมพิวเตอร์ส่วนบุคคลของ IBM ในปี 1981 และมันประสบความสำเร็จอย่างท่วมท้น ทำยอดขายได้ดีมาก ๆ เป็นการเริ่มต้นตลาดคอมพิวเตอร์ส่วนบุคคลแบบจริง ๆ จัง ๆ ครั้งแรกของ IBM ทำให้ชื่อ PC (Personal Computer) นั้นกลายเป็นที่รู้จักไปทั่ว\nกลยุทธ์ของ Gates สำหรับการ Deal กับ IBM ครั้งนี้นั้น ถือว่าเป็นหนึ่งในกลยุทธ์ที่เป็น Case Study ที่น่าสนใจของวงการธุรกิจโลก เพราะ Microsoft ยื่นข้อเสนอที่ดีมาก ๆ ให้กับ IBM โดยเปิดให้เต็มที่กับ IBM นำลิขสิทธิ์ MS-DOS ไปใช้กี่เครื่องก็ได้ที่ IBM ต้องการขาย Gates นั้นมองเป้าหมายที่ยิ่งใหญ่กว่า คือ การสร้าง MS-DOS ให้กลายเป็นระบบปฏิบัติการที่ดีที่สุด เมื่อเทียบกับคู่แข่งอย่าง UCSD Pascal P-System และ CP/M-86 ซึ่งเป็นระบบปฏิบัติการที่เสนอขายให้ IBM เช่นเดียวกันในยุคนั้น Gates ต้องการให้ MS-DOS กลายเป็นระบบปฏิบัติการหลักของ PC และกระตุ้นให้บริษัทเขียน Software รายอื่น ๆ เขียนโปรแกรมโดยใช้พื้นฐานของ MS-DOS ของ Microsoft นั่นเอง\nซึ่งแน่นอนว่าข้อเสนอของ Gates นั้นดีกว่าคู่แข่งอย่างเห็นได้ชัดทำให้ราคา PC ที่มีระบบปฏิบัติการ MS-DOS ราคาถูกกว่าใคร และทำให้ IBM ผลักดัน MS-DOS แบบเต็มที่ เป้าหมายของ Gates และ Microsoft นั้นไม่ได้อยู่ที่รายรับที่ได้จาก IBM แต่จะเป็นกำไรในการขายลิขสิทธิ์ MS-DOS ให้กับบริษัทคอมพิวเตอร์อื่น ๆ ที่ต้องการใช้ MS-DOS เพราะตอนนั้นมันได้กลายเป็นระบบเปิดไปเป็นที่เรียบร้อยแล้ว ผู้ผลิตคอมพิวเตอร์ทุกรายสามารถใช้ MS-DOS ได้ทั้งหมด และเมื่อ MS-DOS กลายเป็นมาตรฐาน กำไร ก็หลั่งไหลมาที่ Microsoft แทนนั่นเอง และแน่นอนว่าหลังจากออกวางจำหน่ายได้ไม่นานดูเหมือน IBM PC มีแนวโน้มที่จะกลายเป็นมาตรฐานของตลาดในอุตสาหกรรมใหม่นี้ ดูเหมือน IBM จะประสบความสำเร็จแล้วแถมยังเป็นระยะเวลาอันสั้นมาก ๆ ด้วย\nIBM ประสบความสำเร็จในการสร้างมารตรฐานคอมพิวเตอร์ส่วนบุคคล แต่หารู้ไม่ว่า คนที่ชนะจริง ๆ ในการสร้างมาตรฐานให้อุตสาหกรรมนี้คือ Microsoft ต่างหากที่ทุกคนต้องใช้ MS-DOS เป็นระบบปฏิบัติการหลัก เหล่าบริษัท Software รายเล็กใหญ่ต่างพัฒนาโปรแกรมขึ้นมาบนพื้นฐานของ MS-DOS ไม่ใช่บนพื้นฐานของ IBM-PC ไม่นานหลังจากนั้น Software คุณภาพเยี่ยมตัวใหม่ ๆ อย่าง Lotus 1-2-3 โปรแกรมที่ปฏิวัติรูปแบบของการสร้างสเปรดชีทก็ได้รับการพัฒนาขึ้นมาให้รันบนระบบปฏิบัติการของ MS-DOS และตลาด Software การใช้งานนับพัน ๆ โปรแกรม ก็ได้เกิดขึ้นมาใน Ecosystem ของ MS-DOS โดยใช้มาตรฐานทาง Hardware ของ IBM-PC นั่นเอง\nซึ่งแม้ IBM จะสร้างมาตรฐาน PC ขึ้นมาก็จริง แต่เป็นมาตรฐานให้ทุกคนเลียนแบบได้ง่าย และบริษัทอื่นก็สามารถสร้างคอมพิวเตอร์ส่วนบุคคลแบบที่ IBM ทำได้เช่นกัน และแน่นอนว่าเมื่อสถานการณ์เปลี่ยน บริษัทอื่นก็อาจจะมาครองตลาดแทน IBM และนี่เองเป็นสิ่งที่ IBM พลาดครั้งสำคัญในการดำเนินธุรกิจ พวกเขาพลาดที่ไปร่วมมือกับ Microsoft และ intel ในการสร้าง PC ขึ้นมาให้กลายเป็นมาตรฐานทางด้าน Hardware เพียงเท่านั้น มันคือจุดผิดพลาดครั้งสำคัญที่สุดครั้งหนึ่งของยักษ์ใหญ่วงการเทคโนโลยีโลกอย่าง IBM แล้วสถานะอันสั่นคลอนของ IBM ในตลาดคอมพิวเตอร์ส่วนบุคคลนี้จะยืนหยัดอยู่ได้นานเพียงใด แผนต่อไปของ Gates และ Microsoft คืออะไร?\n","date":1589065200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589065200,"objectID":"3ec108c9d621dfb141af7469cc9ce93a","permalink":"https://example.com/book/gates/bill-gate-3/","publishdate":"2020-05-10T00:00:00+01:00","relpermalink":"/book/gates/bill-gate-3/","section":"book","summary":"ในช่วงฤดูร้อนปี 1980 ตัวแทนจาก IBM สองคนได้เดินทางมาที่สำนักงานใหญ่ของ Microsoft เพื่อหารือเรื่องคอมพิวเตอร์ส่วนบุคคลที่ IBM กำลังตัดสินใจครั้งสำคัญว่าจะสร้างมันดีหรือไม่?\nแม้ในยุคนั้น IBM จะเป็นเจ้าตลาด Hardware ครอบครองส่วนแบ่งการตลาดคอมพิวเตอร์แบบเมนเฟรมถึงกว่า 80% เรียกได้ว่าเป็นยักษ์ใหญ่ในตลาดครองตลาดได้แบบเบ็ดเสร็จสำหรับ IBM แต่ดูเหมือนคอมพิวเตอร์ขนาดเล็กนั้นจะเป็นปัญหาสำหรับ IBM เพราะพวกเขาคุ้นเคยกับการขายคอมพิวเตอร์ขนาดมหึมาในราคาแพง และลูกค้าส่วนใหญ่ เป็นลูกค้าธุรกิจที่เป็นบริษัทยักษ์ใหญ่ทั่วโลกในขณะนั้น\nซึ่งการเข้ามาคุยกับ Microsoft เนื่องจาก ฝ่ายผู้บริหารระดับสูงเล็งเห็นว่า จำเป็นต้องดึงคนนอก เข้ามาช่วยเหลือในตลาดใหม่อย่าง คอมพิวเตอร์ส่วนบุคคล ซึ่งเป็นการขายให้กับผู้บริโภครายย่อย ซึ่งเป็นสิ่งที่ IBM นั้นไม่ถนัดเป็นอย่างยิ่ง\nและ IBM ต้องการเข็นคอมพิวเตอร์ส่วนบุคคลออกตลาดให้ได้ภายในปีนั้น โดย IBM ได้ตัดสินใจ สร้างเครื่องคอมพิวเตอร์ส่วนบุคคลที่ประกอบด้วยอุปกรณ์ที่หาซื้อได้ทั่วไปในท้องตลาด และทำสิ่งที่เซอร์ไพรซ์เป็นอย่างยิ่งคือ การสร้างระบบแบบเปิดและง่ายต่อการเลียนแบบ แม้ว่าในเครื่องเมนเฟรมขนาดใหญ่นั้น IBM จะออกแบบ Microprocessor เองทั้งหมด แต่ในตลาดใหม่อย่างคอมพิวเตอร์ส่วนบุคคล IBM ได้ตัดสินใจใช้ Microprocessor ของ intel และที่สำคัญที่สุด คือ IBM ได้ตัดสินใจที่จะให้คนอื่นเขียนระบบปฏิบัติการขึ้นมา ซึ่งแน่นอนว่านี่คือโอกาสทองครั้งสำคัญของ Microsoft\nและแน่นอนว่า Gates ไม่มีทางที่จะพลาดโอกาสทองครั้งยิ่งใหญ่แบบนี้ ที่น้อยคนนักที่จะมีโอกาสแบบที่ Gates ได้รับจาก IBM ซึ่งแน่นอนว่ามันเป็นเรื่องท้าทายครั้งสำคัญของ Gates และ Microsoft แต่อย่างไรก็ตาม พวกเขาก็ต้องการมีส่วนร่วมกับธุรกิจยักษ์ใหญ่นี้ โดย Gates ได้ไปซื้อโปรแกรมที่เคยพัฒนามาแล้วจากบริษัทเล็ก ๆ แห่งหนึ่งในเมืองซีแอตเติล และได้จ้าง Tim Paterson หัวหน้าวิศวกรจากบริษัทดังกล่าวมาร่วมงานกับ Microsoft และนำโปรแกรมดังกล่าวมาปรับแต่งให้กับ Hardware ของ IBM","tags":null,"title":"ตอนที่ 3 - Deal with the Devil","type":"docs"},{"authors":null,"categories":null,"content":"เพราะสิ่งมีชีวิตที่จะเถียงออกมาเป็นภาษาคนได้ น่าจะมีแต่มนุษย์เท่านั้น\nในความเป็นจริง มนุษย์ แมว (โดยเฉพาะแมวบ้าน) และแมลงสาบ น่าจะถือได้ว่าเป็นสัตว์มหัศจรรย์ทั้งนั้น เพราะเป็นสิ่งมีชีวิตสามอย่างที่แพร่หลายกระจายตัวอยู่ได้ทั่วทั้งโลก ไม่ใช่แค่ในเมือง แต่อยู่ได้ในชนบทด้วย พบพานได้ตั้งแต่ภูมิภาคที่เย็นจัดอย่างขั้วโลก ไล่ไปจนถึงภูเขา ที่ราบ ป่าทุกประเภท และแม้กระทั่งทะเลทราย\nแต่เราจะไม่พูดถึงแมวบ้านและแมลงสาบในที่นี้ เพราะเราอยากชวนคุณมาดูว่า โฮโม เซเปียนส์ หรือ มนุษย์ยุคปัจจุบัน ผู้เป็นได้ชื่อว่าเป็นสัตว์อัศจรรย์นั้น มี \u0026ldquo;อู่ \u0026ldquo; หรือจุดเริ่มต้นที่ไหน เดินทางอย่างไร ถึงได้กระจายตัวไปทั่วโลก และสุดท้ายปลายทางแล้ว – มนุษย์ กำลังจะไปไหน\nนักวิทยาศาสตร์พบว่า โฮโม เซเปียนส์วิวัฒนาการมาจากมนุษย์ไฮเดลแบร์ก หรือ Homo heidelbergensis ซึ่งวิวัฒนาการมาจากโฮโม อีเร็กตัสอีกต่อหนึ่ง โดยเราเป็นพี่น้องใกล้ชิดกับมนุษย์นีแอนเดอร์ธัลกับมนุษย์เดนิโซวานอย่างมาก เชื่อกันว่า การรู้จักใช้ไฟของมนุษย์ต้นแบบนี่เอง ทำให้เกิดการ \u0026ldquo;ก้าวกระโดด\u0026rdquo; ของขนาดสมอง เพราะเราสามารถปรุงเนื้อให้สุกได้ และเนื้อที่สุกก็มีคุณค่าทางอาหารมากขึ้น รวมทั้งเก็บได้นานขึ้นด้วย สมองจึงค่อยๆ ขยายขนาด และในที่สุด โฮโม เซเปียนส์ก็อุบัติขึ้นมาบนพื้นโลก เมื่อราวๆ สองถึงสามแสนปีก่อน แต่กว่าจะมีพฤติกรรมและลักษณะแบบ \u0026ldquo;สมัยใหม่\u0026rdquo;(Behavioral Modernity) เต็มที่ ก็เมื่อราวห้าหมื่นปีที่แล้วนี่เอง\nโฮโม เซเปียนส์ (หรือมนุษย์ต้นแบบของโฮโม เซเปียนส์) ได้อพยพออกมาจากแอฟริกาเพื่อตามหา \u0026ldquo;ถิ่นที่อยู่\u0026rdquo; ของตัวเองเป็นระลอกๆ มานานหลายแสนปีแล้ว มีการศึกษาพบกระดูกของโฮโม เซเปียนส์ อายุราว 270,000 ปี อยู่ในเอเชียตะวันตก และกระดูกอายุ 260,000 ปีในจีน ซึ่งแสดงว่าโฮโม เซเปียนส์ได้อพยพออกมาจากแอฟริกาตั้งแต่เริ่มอุบัติขึ้นมาไม่กี่หมื่นปีเลย อย่างไรก็ตาม คาดกันว่า การอพยพในระลอกแรกๆ ไม่ประสบความสำเร็จยั่งยืนนัก ระลอกที่ประสบความสำเร็จที่สุด หรือที่เรียกว่า Out of Africa II เกิดขึ้นเมื่อราว 75,000 ปีที่แล้ว โดยมีการเดินทางออกมาผ่านคาบสมุทรอาหรับ แล้วกลุ่มแรกก็ \u0026ldquo;เลี้ยวขวา\u0026rdquo; เดินทางเลียบมหาสมุทรไปสู่เอเชียใต้ กระจายไปสู่เอเชียตะวันออกเฉียงใต้ และลงไปถึงออสเตรเลีย ส่วนที่ขึ้นเหนือ ก็ไปถึงเอเชียกลาง จีน และข้ามไปถึงอเมริกาเมื่อราว 50,000 ปีที่แล้ว ซึ่งก็คือช่วงเวลาเดียวกันกับที่อีกกลุ่มหนึ่ง \u0026ldquo;เลี้ยวซ้าย\u0026rdquo; เข้าไปถึงยุโรป\nว่ากันว่า ความฉลาดของโฮโม เซเปียนส์ ทำให้เราไปเบียดขับมนุษย์ต้นแบบที่เคยไปถึงที่ต่างๆ ก่อนหน้า ไม่ว่าจะเป็นเดนิโซวานในเอเชีย หรือนีแอนเดอร์ธัลในยุโรปด้วยวิธีต่างๆ (อาจเป็นไปได้ว่ารบกัน หรือไม่ก็ กลายกลืนด้วยการผสมเผ่าพันธุ์กัน) จนในที่สุดมนุษย์ต้นแบบเหล่านี้ก็หายไปหมด เหลืออยู่แต่โฮโม เซเปียนส์เท่านั้น โฮโมเซเปียนส์เป็นสัตว์มหัศจรรย์ อย่างหนึ่งก็เพราะเราไม่ได้มีเขี้ยวเล็บอะไรมากมายนัก ร่างกายก็ไม่ได้มีขนปกคลุม แต่มนุษย์กลับอยู่ได้ทุกหนทุกแห่งในโลก แถมยังครองโลกกว้างไกลกว่าที่สัตว์ใดๆ เคยครองด้วย\nจุดหัวเลี้ยวหัวต่ออยู่ที่เมื่อราว 10,000 ปีก่อน ที่ไหนสักแห่งในแถบตะวันออกกลาง มนุษย์ได้ปฏิวัติตัวเอง เพื่อต่อกรกับสิ่งที่เรียกว่า Carrying Capacity โดยใช้เทคโนโลยี เทคโนโลยีที่ว่า – ก็คือการเกษตร มันคือการปฏิวัติที่นักวิทยาศาสตร์เรียกว่า \u0026ldquo;การปฏิวัตินีโอลิธิก\u0026rdquo; (Neolithic Revolution) ซึ่งทำให้นักล่าหาอาหารและชนเผ่าเร่ร่อน มารวมตัวกันเป็น \u0026ldquo;ชุมชน\u0026rdquo; ถาวรได้ และค่อยๆ พัฒนาขึ้นจนเกิดเป็นสังคมที่ซับซ้อนในภายหลัง\nชุมชนที่นักวิทยาศาสตร์กลุ่มหนึ่งเชื่อว่าอาจเป็นเหมือน \u0026ldquo;ชุมชนต้นแบบ\u0026rdquo; คือสังคมของชาวนาทูเฟียน (Natufians) ซึ่งเฟื่องฟูในช่วง 14,500 ปีก่อน ถึงราว 11,500 ปีก่อน เป็นชุมชนที่อยู่ในตะวันออกกลาง ซึ่งปัจจุบันอยู่ในแถบไซปรัส ซีเรีย อิสราเอล จอร์แดน เลบานอน และปาเลสไตน์ ชาวนาทูเฟียนนี้ ถือว่าเป็นคนกลุ่มแรก ๆ ที่เปลี่ยนตัวเอง จากนักล่าหาอาหารมาเลี้ยงสัตว์ ทั้งสุนัขและหมู และอาจเป็นคนกลุ่มแรกๆ ด้วย ที่เริ่มเพาะปลูก โดยเปลี่ยนจาก การตระเวนเก็บลูกไม้และล่าตัวกาเซลตามฤดูกาล มาปลูกข้าววีตและบาร์เลย์แบบโบราณ งานวิจัยหนึ่ง ของนักโบราณคดีจากมหาวิทยาลัยในอังกฤษ ได้ลองขุดค้นฟันกรามของหนูในพื้นที่แถบนี้ แล้วนำมาตรวจดูอายุและปริมาณ พบเรื่องน่าสนใจมากอยู่เรื่องหนึ่ง\nหนูในแถบนี้มีอยู่สองสปีชีส์ใหญ่ๆ คือหนูบ้าน (Mus domesticus) กับหนูป่ามาซีโดเนีย (Mus macedonicus) พบว่าในช่วงราว 200,000 ปีก่อน ฟันกรามที่เกือบทั้งหมดเป็นของหนูป่า แปลว่าในยุคโน้นมีหนูป่าอยู่มาก แต่พอถึงราว 15,000 ปีที่แล้ว ปรากฏว่าหนูบ้านเอาชนะหนูป่าได้ แต่แล้วหนูบ้านก็หดหายไปอีกในราว 13,000 ปีก่อน แล้วจากนั้นก็กลับมาชนะแบบถาวรได้เมื่อราว 10,000 ปีที่แล้ว ซึ่งสอดคล้องต้องกันพอดีกับยุคที่มนุษย์เริ่มตั้งรกรากเพื่อทำเกษตร และหนูบ้านก็เป็นหนูที่ \u0026ldquo;เข้ากันได้\u0026rdquo; กับการอยู่ติดที่ด้วย การที่หนูบ้านมีจำนวนขึ้นๆ ลงๆ ก่อนจะมีมากอย่างถาวร – แสดงให้เห็นว่า กว่ามนุษย์จะ \u0026ldquo;อยู่ติดที่\u0026rdquo; ได้ ต้องใช้เวลาหลายหมื่นปีเพื่อเปลี่ยนแปลงวิถีชีวิต แต่สุดท้ายแล้ว การตั้งรกรากก็ได้เกิดขึ้น\nนักประวัติศาสตร์ภูมิทัศน์ (Landscape Historians) บอกว่าการตั้งถิ่นฐานของมนุษย์นั้นแบ่งออกได้เป็นรูปแบบใหญ่ๆ หลายรูปแบบ แบบหนึ่งก็คือการตั้งถิ่นฐานแบกระจัดกระจาย หรือ Dispersed Settlement คือในพื้นที่หนึ่งๆ จะมีบ้าน หรือที่ตั้งรกรากเกลื่อนกระจายทั่วไป เป็นรูปแบบที่พบได้มากในยุโรป โดยเฉพาะในชนบทอังกฤษ ในอังกฤษ การตั้งชุมชนแบบกระจายตัวนี้ไม่เปลี่ยนแปลงรูปแบบเลยเป็นเวลานานหลายร้อยปี ในอิตาลี และในยุโรปแถบที่พูดภาษาเยอรมันก็เช่นเดียวกัน แม้ในปัจจุบันจะเกิด \u0026ldquo;เมือง\u0026rdquo; ขึ้นแล้ว แต่ในยุโรป ก็ยังมีการกระจายตัวแบบนี้อยู่มาก\nอีกรูปแบบการตั้งรกรากหนึ่งเรียกว่า การตั้งรกรากแบบกระจุกตัว หรือ Nucleated Settlement (หรือบางทีก็เรียกว่า Clustered Settlement) รูปแบบนี้เกิดขึ้นหลังรูปแบบกระจายตัว เนื่องจากเริ่มมีสิ่งยึดเหนี่ยวทางวัฒนธรรมมากขึ้น อิทธิพลหลักอย่างหนึ่งก็คือศาสนา เราจะเห็นรูปแบบการตั้งรกรากนี้ได้ชัดตามหมู่บ้านที่มีศูนย์กลางบางอย่าง เช่น มีโบสถ์หรือวัดเป็นจุดศูนย์กลาง หรือไม่ก็ในแถบที่มีการรบพุ่งกันบ่อยๆ คนจึงจำเป็นต้องอยู่รวมกันเป็นกลุ่ม และสร้างป้อมปราการขึ้นป้องกันตัวเอง ลักษณะแบบนี้พบได้ทั่วไปทั้งในโลกตะวันตกและตะวันออก และอาจกล่าวได้ว่า เป็นรูปแบบการกระจุกตัวแบบนี้เอง ที่ทำให้เกิด \u0026ldquo;ลำดับ\u0026rdquo; ของการตั้งรกรากที่ค่อยๆ หนาแน่นขึ้นเรื่อย ๆ คำว่า \u0026ldquo;ลำดับการตั้งรกราก\u0026rdquo; หรือ Settlement Hierarchy จริงๆ แล้วมีหลายรูปแบบมาก ลำดับที่ว่านี้เป็นส่วนหนึ่งของสาขาวิชา Landscape History อันเป็นการศึกษาว่า มนุษย์ปรับเปลี่ยนภูมิทัศน์ ให้เหมาะสมกับการตั้งรกรากเพื่อสร้างถิ่นที่อยู่ของตัวเองอย่างไร\nโดยทั่วไป เราสามารถเรียงลำดับ \u0026ldquo;ถิ่นที่อยู่\u0026rdquo; ของมนุษย์ตามความหนาแน่นได้ ดังนี้\n Miniscule Density : หรือมีความหนาแน่นต่ำมาก แบบนี้แต่ละชุมชนจะมีจำนวนน้อยกว่า 1,000 คน อาจมีลักษณะเป็นบ้านที่กระจัดกระจายกันอยู่ห่างๆ หรือเป็น \u0026ldquo;กลุ่มบ้าน\u0026rdquo; (Hamlet) ที่มีคนอยู่น้อยกว่า 100 คน หรือเป็นหมู่บ้านที่ใหญ่ขึ้นมา และเริ่มมีร้านค้าหรือโบสถ์ก็ได้\n Low Density : หรือมีความหนาแน่นปานกลาง คือมีประชากรน้อยกว่าแสนคน เป็นไปได้ตั้งแต่เมืองเล็ก (Town) ที่มีประชากร 1,000-10,000 คน จนถึงเมืองใหญ่ และในยุคใหม่ ก็คือย่านชานเมืองของเมืองขนาดใหญ่อีกทีหนึ่ง\n Mid Density : เริ่มเป็นเมืองที่เรียกว่า City แล้ว มีตั้งแต่เมืองขนาดเล็ก กลาง และใหญ่ ที่มีประชากรลดหลั่นกันไป โดยนิยามแล้ว เมืองขนาดใหญ่ หรือ Large City จะมีประชากรมากกว่า 3 แสนคน แต่ไม่เกิน 1 ล้านคน\n High Density : คือถิ่นที่อยู่ที่มีประชากรเกิน 1 ล้านคน เราจะเริ่มเห็นเมืองแบบนี้มากขึ้นเรื่อยๆ โดยเริ่มจาก Metropolis ซึ่งเป็นเมืองขนาดใหญ่ ประกอบไปด้วยเมืองย่อยหรือเขตต่างๆ หลายๆ เขต มักมีประชากรตั้งแต่ 1 ถึง 3 ล้านคน อีกแบบหนึ่งที่ใหญ่ขึ้นมาคือการรวมกันของเมโทรโพลิส เรียกว่า Conurbation มีประชากรราวๆ 3 ถึง 10 ล้านคน กรุงเทพฯ ก็อยู่ในกลุ่มนี้ โดยเฉพาะถ้านับรวมปริมณฑลด้วย ถัดไปอีกขั้นจะเป็น Megalopolis หรือมหานครขนาดใหญ่ ซึ่งก็คือการรวมกันของ Conurbations หลายๆ แห่ง มีประชากรมากกว่า 10 ล้านคน ตัวอย่างเช่น มหานครเซี่ยงไฮ้\n Extreme Density : เมืองรูปแบบนี้ยังไม่เกิด แต่เป็นทฤษฎีว่า ในอนาคตอาจเกิด \u0026ldquo;ถิ่นที่อยู่\u0026rdquo; ของมนุษย์ที่เรียกว่า Ecumenopolis ขึ้นมาได้ Ecumenopolis ก็หมายถึง Megalopolis หรือมหานครขนาดใหญ่ที่เชื่อมต่อกันจนอาจเป็นเมืองที่มีความยาวหลายพันกิโลเมตรได้ ที่น่าสนใจก็คือ แนวโน้มของเมืองขนาดใหญ่แบบนี้ สอดคล้องกับข้อเสนอของนักชีววิทยาคนสำคัญของโลก คือ E.O. Wilson ที่บอกว่าโลกจะไม่มีทางรอดจากหายนะทางสิ่งแวดล้อม ถ้าหากมนุษย์ไม่อุทิศพื้นที่บนบกครึ่งหนึ่งให้กับธรรมชาติ ไนจีเรีย จะเป็นเมืองที่มีประชากรราว 88.3 ล้านคน มากที่สุดเท่าที่โลกเคยมีมา ตามมาด้วย คินชาซา เมืองหลวงของสาธารณรัฐประโดยเฉพาะในป่าเขตร้อน คือกั้นไว้ไม่เข้าไปทำกิจกรรมยุ่งเกี่ยวใดๆ เพื่อปล่อยให้ธรรมชาติฟื้นตัวขึ้นมาเอง ข้อเสนอนี้ทำให้มนุษย์มีที่อยู่น้อยลงครึ่งหนึ่ง และต้องใช้เทคโนโลยีใหม่ๆ ผลิตอาหารและพลังงานขึ้น ซึ่งถ้าหากมนุษย์ไม่อพยพไปอยู่ดวงจันทร์หรือดาวอังคารเสียก่อนก็เป็นไปได้อย่างยิ่งที่จะเกิดเมืองแบบ Ecumenopolis ขึ้นมา\n  ที่น่าสนใจก็คือ สหประชาชาติทำนายไว้ว่า ในอีกไม่กี่ทศวรรษข้างหน้า ทวีปที่จะมีเมืองขนาดใหญ่ที่สุดในโลกก็คือแอฟริกา ในปี 2100 เมืองลากอสแห่งชาธิปไตยคองโก ที่จะมีประชากรราว 83.5 ล้านคน และถัดไปก็คือเมืองดาร์เอสซาลาม ในแทนซาเนีย ที่จะมีประชากร 73.7 ล้านคน ทิ้งห่างจากมุมไบ (67.2 ล้านคน) เดลี (57.3 ล้านคน) ในอินเดีย ก่อนจะย้อนกลับมาที่แอฟริกาอีกครั้งด้วยเมืองคาร์ทูมในซูดาน (56.6 ล้านคน) และเมืองเนียมีย์ ในไนเจอร์ (56.1 ล้านคน) ที่สำคัญ แอฟริกาจะเป็นทวีปเดียวที่ยังเป็นหนุ่มเป็นสาว เพราะทวีปอื่นๆ ล้วนกลายเป็นสังคมผู้สูงวัยไปหมดแล้ว ไม่ว่าจะในยุโรป เอเชีย ออสเตรเลีย หรืออเมริกา เนื่องจากอัตราการเกิดต่ำกว่าอัตราการตาย จนทำให้ประชากรไม่เพิ่มอีกต่อไป\nนั่นแปลว่า – ในอนาคต ถิ่นที่อยู่ที่จะพบมนุษย์มากที่สุด สดชื่น และมีพละกำลังมากที่สุด ก็คือทวีปอันเคยเป็น \u0026ldquo;อู่\u0026rdquo; ให้กำเนิดมนุษย์อย่างแอฟริกา, นั่นเอง\nที่มาบทความ : GMlive\n","date":1588978800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588978800,"objectID":"88dadc14e201efcc338529a53a92ad99","permalink":"https://example.com/book/sapiens/review-3/","publishdate":"2020-05-09T00:00:00+01:00","relpermalink":"/book/sapiens/review-3/","section":"book","summary":"เพราะสิ่งมีชีวิตที่จะเถียงออกมาเป็นภาษาคนได้ น่าจะมีแต่มนุษย์เท่านั้น\nในความเป็นจริง มนุษย์ แมว (โดยเฉพาะแมวบ้าน) และแมลงสาบ น่าจะถือได้ว่าเป็นสัตว์มหัศจรรย์ทั้งนั้น เพราะเป็นสิ่งมีชีวิตสามอย่างที่แพร่หลายกระจายตัวอยู่ได้ทั่วทั้งโลก ไม่ใช่แค่ในเมือง แต่อยู่ได้ในชนบทด้วย พบพานได้ตั้งแต่ภูมิภาคที่เย็นจัดอย่างขั้วโลก ไล่ไปจนถึงภูเขา ที่ราบ ป่าทุกประเภท และแม้กระทั่งทะเลทราย\nแต่เราจะไม่พูดถึงแมวบ้านและแมลงสาบในที่นี้ เพราะเราอยากชวนคุณมาดูว่า โฮโม เซเปียนส์ หรือ มนุษย์ยุคปัจจุบัน ผู้เป็นได้ชื่อว่าเป็นสัตว์อัศจรรย์นั้น มี \u0026ldquo;อู่ \u0026ldquo; หรือจุดเริ่มต้นที่ไหน เดินทางอย่างไร ถึงได้กระจายตัวไปทั่วโลก และสุดท้ายปลายทางแล้ว – มนุษย์ กำลังจะไปไหน\nนักวิทยาศาสตร์พบว่า โฮโม เซเปียนส์วิวัฒนาการมาจากมนุษย์ไฮเดลแบร์ก หรือ Homo heidelbergensis ซึ่งวิวัฒนาการมาจากโฮโม อีเร็กตัสอีกต่อหนึ่ง โดยเราเป็นพี่น้องใกล้ชิดกับมนุษย์นีแอนเดอร์ธัลกับมนุษย์เดนิโซวานอย่างมาก เชื่อกันว่า การรู้จักใช้ไฟของมนุษย์ต้นแบบนี่เอง ทำให้เกิดการ \u0026ldquo;ก้าวกระโดด\u0026rdquo; ของขนาดสมอง เพราะเราสามารถปรุงเนื้อให้สุกได้ และเนื้อที่สุกก็มีคุณค่าทางอาหารมากขึ้น รวมทั้งเก็บได้นานขึ้นด้วย สมองจึงค่อยๆ ขยายขนาด และในที่สุด โฮโม เซเปียนส์ก็อุบัติขึ้นมาบนพื้นโลก เมื่อราวๆ สองถึงสามแสนปีก่อน แต่กว่าจะมีพฤติกรรมและลักษณะแบบ \u0026ldquo;สมัยใหม่\u0026rdquo;(Behavioral Modernity) เต็มที่ ก็เมื่อราวห้าหมื่นปีที่แล้วนี่เอง\nโฮโม เซเปียนส์ (หรือมนุษย์ต้นแบบของโฮโม เซเปียนส์) ได้อพยพออกมาจากแอฟริกาเพื่อตามหา \u0026ldquo;ถิ่นที่อยู่\u0026rdquo; ของตัวเองเป็นระลอกๆ มานานหลายแสนปีแล้ว มีการศึกษาพบกระดูกของโฮโม เซเปียนส์ อายุราว 270,000 ปี อยู่ในเอเชียตะวันตก และกระดูกอายุ 260,000 ปีในจีน ซึ่งแสดงว่าโฮโม เซเปียนส์ได้อพยพออกมาจากแอฟริกาตั้งแต่เริ่มอุบัติขึ้นมาไม่กี่หมื่นปีเลย อย่างไรก็ตาม คาดกันว่า การอพยพในระลอกแรกๆ ไม่ประสบความสำเร็จยั่งยืนนัก ระลอกที่ประสบความสำเร็จที่สุด หรือที่เรียกว่า Out of Africa II เกิดขึ้นเมื่อราว 75,000 ปีที่แล้ว โดยมีการเดินทางออกมาผ่านคาบสมุทรอาหรับ แล้วกลุ่มแรกก็ \u0026ldquo;เลี้ยวขวา\u0026rdquo; เดินทางเลียบมหาสมุทรไปสู่เอเชียใต้ กระจายไปสู่เอเชียตะวันออกเฉียงใต้ และลงไปถึงออสเตรเลีย ส่วนที่ขึ้นเหนือ ก็ไปถึงเอเชียกลาง จีน และข้ามไปถึงอเมริกาเมื่อราว 50,000 ปีที่แล้ว ซึ่งก็คือช่วงเวลาเดียวกันกับที่อีกกลุ่มหนึ่ง \u0026ldquo;เลี้ยวซ้าย\u0026rdquo; เข้าไปถึงยุโรป","tags":null,"title":"โฮโม เซเปียนส์ สัตว์มหัศจรรย์และถิ่นที่อยู่","type":"docs"},{"authors":null,"categories":null,"content":" โดย ดร. สุวินัย ภรณวลัย\n หากพิจารณาจากในแง่เชาว์ปัญญา​ เมื่อล้านปีก่อน​ เซเปียนส์ก็เป็นสัตว์ที่ฉลาดที่สุด ในบรรดาสัตว์ต่าง ๆ อยู่แล้ว​แถมยังเป็นแชมป์โลกในด้านการสร้าง​เครื่องมือ​อีกด้วย แต่ถึงกระนั้น​เซเปียนส์ในตอนนั้น ก็ยังเป็นเพียงสิ่งมีชีวิตที่ไม่สลักสำคัญใดๆเลย​และสร้างผลกระทบเพียงเล็กน้อยต่อระบบนิเวศที่ล้อมรอบตัวเองอยู่ ในตอนนั้น​ เซเปียนส์ยังขาดลักษณะ ประการที่สาม​ที่นอกเหนือไปจากเชาว์ปัญญา และการสร้างเครื่องมือ​เพื่อทำให้ครอบครองดาวเคราะห์ดวงนี้ได้ เมื่อตรวจสอบบันทึกประวัติศาสตร์​ เรากลับไม่พบความเชื่อมโยงโดยตรงระหว่างเชาว์ปัญญา และความสามารถในการสร้างเครื่องมือของมนุษย์ แต่ละคน​กับอำนาจของสปีขีส์ของเราโดยรวม\nเมื่อ​ 20,000 ปีก่อน​โดยเฉลี่ยแล้ว​ เซเปียนส์ในสมัยนั้นมีเชาว์ปัญญา และทักษะการสร้างเครื่องมือดีกว่าเซเปียนส์เฉลี่ยในปัจจุบันเสียอีก​\u0026hellip; ในเรื่องของการเอาชีวิตรอด แต่แม้กระนั้น​ เซเปียนส์เมื่อ​ 20,000​ ปีก่อนก็ยังอ่อนแอกว่าเซเปียนส์ในปัจจุบันมากนัก ปัจจัยประการที่สามที่ทำให้เซเปียนส์ครองโลกใบนี้ได้ คือ \u0026ldquo;ความสามารถที่จะเชื่อมต่อคนมากมายเข้าด้วยกัน\u0026rdquo; แม้สมองของคนปัจจุบัน ดูเหมือนจะเล็กกว่าสมองของเซเปียนส์เมื่อสองหมื่นปีที่แล้วก็ตาม มนุษย์ในทุกวันนี้เป็นใหญ่บนดาวเคราะห์ดวงนี้อย่างสมบูรณ์​ หาใช่เพราะคนแต่ละคนฉลาดเหนือกว่าสัตว์ต่าง ๆ มาก​ หรือเพราะมีนิ้วที่แคล่วคล่องว่องไวกว่าชิมแปนซีหรือหมาป่า แต่เพราะเซเปียนส์ เป็นสปีชีส์เพียงหนึ่งเดียวบนโลกนี้ที่มีความยืดหยุ่นมากพอ ที่จะร่วมมือกันแบบกลุ่มคนจำนวนมากได้ต่างหาก​\nมดและผึ้งเรียนรู้ที่จะร่วมมือเป็นกลุ่มก้อนนานนับล้าน ๆ ปีก่อนเซเปียนส์ก็จริง​ แต่ความร่วมมือของมดและผึ้ง ขาดความยืดหยุ่น​ จึงไม่สามารถออกแบบระบบสังคมขึ้นใหม่ชั่วข้ามคืน และไม่สามารถรับมือกับภัยคุกคามใหม่ ๆ หรือโอกาสใหม่ ๆ ได้​ ไม่เหมือนเซเปียนส์ สัตว์เลี้ยงลูกด้วยนมที่อยู่กันเป็นสังคมอย่างช้างและชิมแปนซี​ ร่วมมือกันได้อย่างยืดหยุ่นมาก​ แต่พวกมันทำเช่นนั้น​ได้แค่เพียงกลุ่มเล็ก ๆ บนความคุ้นเคยส่วนตัวเท่านั้น มีแค่เซเปียนส์เท่านั้น ที่สามารถร่วมมือกันอย่างยืดหยุ่นมาก ๆ ในหมู่คนแปลกหน้าโดยไม่จำกัดจำนวน ความสามารถอย่างเป็นรูปธรรม แบบนี้เองที่ใช้อธิบายเรื่องความเป็นเจ้าผู้ครองดาวเคราะห์โลกของเซเปียนส์ได้ มิใช่คำอธิบายด้วย \u0026ldquo;วิญญาณอันเป็นนิรันดร์\u0026rdquo; ตามคำตอบแบบเอกเทวนิยมดั้งเดิม\nหนังสือ​ Homo​ Deus แหลมคมยิ่งเมื่อเสนอว่า การปฏิวัติเกษตรกรรม​ทำให้เกิดศาสนาแบบเทวนิยม แต่การปฏิวัติวิทยาศาสตร์ก็ให้กำเนิดศาสนาแบบมนุษย์นิยม​ ซึ่งมนุษย์ได้เข้ามาแทนที่ เทพเจ้าทั้งหลายในฐานะที่เป็นศูนย์กลางของตัวตน ในหนังสือ Homo​ Sapiens กล่าวว่า การพัฒนาประวัติศาสตร์ของเซเปียนส์มาจากการปฏิวัติ​ 3 ​ครั้ง​คือ\n \u0026rdquo; การปฏิวัติการรับรู้\u0026rdquo; ที่ทำให้เกิดภาษา \u0026ldquo;การปฏิวัติเกษตรกรรม\u0026rdquo; ที่ทำให้เกิดศาสนาแบบเทวนิยม \u0026ldquo;การปฏิวัติวิทยาศาสตร์\u0026rdquo; ที่ทำให้เกิดศาสนาแบบมนุษย์นิยม​ในรูปของอุดมการ์เสรีนิยม, คอมมิวนิสต์(สังคมนิยม)​และลัทธินาซี  จะเห็นได้ว่า​ผู้เขียน Homo​ Sapiens​ และ​ Homo​ Deus ได้ใช้มรรควิธีของ​ \u0026ldquo;ทฤษฎีวัตถุนิยมประวัติศาสตร์\u0026rdquo; แบบเดียวกับมาร์กซ์​แต่ในรูปแบบที่อัปเกรดกว่า​และตัดเรื่องการต่อสู้ทางชนชั้นออกไปในฐานะที่เป็นแรงขับเคลื่อนทางประวัติศาสตร์เท่านั้นเอง ในการปฏิวัติเกษตรกรรม​ มนุษย์ได้ ​\u0026rdquo;ปิดปาก\u0026rdquo; สัตว์และพืชในป่า ​ซึ่งต่างจากยุคก่อนที่มนุษย์ยังสื่อสารกับสัตว์ป่าและพืชในป่าได้ ​เพราะมนุษย์ปฏิวัติความสัมพันธ์ระหว่างคนกับสัตว์และพืชใหม่ ​โดยเอาสัตว์เลี้ยงและพืชเพาะปลูก​ เข้ามาทดแทนสัตว์ป่าและพืชในป่าแทบจะสิ้นเชิง\nในการปฏิวัติวิทยาศาสตร์\u0026hellip;. มนุษย์ได้ \u0026ldquo;ปิดปาก\u0026rdquo; เทพเจ้าด้วยเช่นกัน​เหลือแค่การแสดงเดี่ยวบนเวทีของมนุษย์เท่านั้น ในอนาคตอันใกล้​ การปฏิวัติปัญญาประดิษฐ์ที่กำลังเริ่มต้น​ ​\u0026hellip; อัลกอริทึมจะเป็นฝ่าย ​\u0026rdquo;ปิดปาก\u0026rdquo; มนุษย์อย่างแน่นอน ลัทธิอัลกอริทึม คือแนวคิดแบบทฤษฎีวัตถุนิยมประวัติศาสตร์ที่สุดโต่งล่าสุด​ ในการใช้อธิบายชีวิตและวิวัฒนาการของสรรพสิ่ง อารมณ์ความรู้สึกถูกลดทอนให้เป็นอัลกอริทึมทางชีวเคมี สิ่งมีชีวิตก็คืออัลกอริทึม​ การปฏิเสธการดำรงอยู่ ของวิญญาณที่เป็นนิรันดร์แบบเอกเทวนิยม ของนักวิทยาศาสตร์สายชีวภาพและสายวิวัฒนาการยังพอเข้าใจได้และยอมรับได้​ แต่การสุดโต่งจนถึงขั้นปฏิเสธการดำรงอยู่จริงของจิต​(consciousness)​ หรือจิตสำนึก​ผมว่ามากไป\nเพราะคนพวกนี้มองว่า​ จิตเกิดจากปฏิกิริยาไฟฟ้าเคมีภายในสมองเท่านั้น​ ทฤษฎีชีววิทยาในปัจจุบันไม่มองว่าความทรงจำ​ จินตนาการ​และความคิดของคนเราอยู่เหนือเกินขอบเขตของวัตถุ​ ทำให้สรุปแบบรวบรัดว่า​ ชีวิตเป็นแค่เรื่องของการประมวลข้อมูลเท่านั้น การจะได้ประโยชน์จากการอ่าน​ Homo​ Sapiens, Homo​ Deus โดยสมบูรณ์​ ​เราจะต้องรู้ทันข้อจำกัดเชิงญาณวิทยาของหนังสือเล่มนี้ที่ยึดติดอยู่กับกรอบทฤษฎีวัตถุนิยมประวัติศาสตร์​และลัทธิลดทอนนิยมเชิงชีววิทยา​ให้ได้ก่อน\n","date":1588978800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588978800,"objectID":"98d0962147106ac0777ae7034ef4e21b","permalink":"https://example.com/book/deus/deus-3/","publishdate":"2020-05-09T00:00:00+01:00","relpermalink":"/book/deus/deus-3/","section":"book","summary":"โดย ดร. สุวินัย ภรณวลัย\n หากพิจารณาจากในแง่เชาว์ปัญญา​ เมื่อล้านปีก่อน​ เซเปียนส์ก็เป็นสัตว์ที่ฉลาดที่สุด ในบรรดาสัตว์ต่าง ๆ อยู่แล้ว​แถมยังเป็นแชมป์โลกในด้านการสร้าง​เครื่องมือ​อีกด้วย แต่ถึงกระนั้น​เซเปียนส์ในตอนนั้น ก็ยังเป็นเพียงสิ่งมีชีวิตที่ไม่สลักสำคัญใดๆเลย​และสร้างผลกระทบเพียงเล็กน้อยต่อระบบนิเวศที่ล้อมรอบตัวเองอยู่ ในตอนนั้น​ เซเปียนส์ยังขาดลักษณะ ประการที่สาม​ที่นอกเหนือไปจากเชาว์ปัญญา และการสร้างเครื่องมือ​เพื่อทำให้ครอบครองดาวเคราะห์ดวงนี้ได้ เมื่อตรวจสอบบันทึกประวัติศาสตร์​ เรากลับไม่พบความเชื่อมโยงโดยตรงระหว่างเชาว์ปัญญา และความสามารถในการสร้างเครื่องมือของมนุษย์ แต่ละคน​กับอำนาจของสปีขีส์ของเราโดยรวม\nเมื่อ​ 20,000 ปีก่อน​โดยเฉลี่ยแล้ว​ เซเปียนส์ในสมัยนั้นมีเชาว์ปัญญา และทักษะการสร้างเครื่องมือดีกว่าเซเปียนส์เฉลี่ยในปัจจุบันเสียอีก​\u0026hellip; ในเรื่องของการเอาชีวิตรอด แต่แม้กระนั้น​ เซเปียนส์เมื่อ​ 20,000​ ปีก่อนก็ยังอ่อนแอกว่าเซเปียนส์ในปัจจุบันมากนัก ปัจจัยประการที่สามที่ทำให้เซเปียนส์ครองโลกใบนี้ได้ คือ \u0026ldquo;ความสามารถที่จะเชื่อมต่อคนมากมายเข้าด้วยกัน\u0026rdquo; แม้สมองของคนปัจจุบัน ดูเหมือนจะเล็กกว่าสมองของเซเปียนส์เมื่อสองหมื่นปีที่แล้วก็ตาม มนุษย์ในทุกวันนี้เป็นใหญ่บนดาวเคราะห์ดวงนี้อย่างสมบูรณ์​ หาใช่เพราะคนแต่ละคนฉลาดเหนือกว่าสัตว์ต่าง ๆ มาก​ หรือเพราะมีนิ้วที่แคล่วคล่องว่องไวกว่าชิมแปนซีหรือหมาป่า แต่เพราะเซเปียนส์ เป็นสปีชีส์เพียงหนึ่งเดียวบนโลกนี้ที่มีความยืดหยุ่นมากพอ ที่จะร่วมมือกันแบบกลุ่มคนจำนวนมากได้ต่างหาก​\nมดและผึ้งเรียนรู้ที่จะร่วมมือเป็นกลุ่มก้อนนานนับล้าน ๆ ปีก่อนเซเปียนส์ก็จริง​ แต่ความร่วมมือของมดและผึ้ง ขาดความยืดหยุ่น​ จึงไม่สามารถออกแบบระบบสังคมขึ้นใหม่ชั่วข้ามคืน และไม่สามารถรับมือกับภัยคุกคามใหม่ ๆ หรือโอกาสใหม่ ๆ ได้​ ไม่เหมือนเซเปียนส์ สัตว์เลี้ยงลูกด้วยนมที่อยู่กันเป็นสังคมอย่างช้างและชิมแปนซี​ ร่วมมือกันได้อย่างยืดหยุ่นมาก​ แต่พวกมันทำเช่นนั้น​ได้แค่เพียงกลุ่มเล็ก ๆ บนความคุ้นเคยส่วนตัวเท่านั้น มีแค่เซเปียนส์เท่านั้น ที่สามารถร่วมมือกันอย่างยืดหยุ่นมาก ๆ ในหมู่คนแปลกหน้าโดยไม่จำกัดจำนวน ความสามารถอย่างเป็นรูปธรรม แบบนี้เองที่ใช้อธิบายเรื่องความเป็นเจ้าผู้ครองดาวเคราะห์โลกของเซเปียนส์ได้ มิใช่คำอธิบายด้วย \u0026ldquo;วิญญาณอันเป็นนิรันดร์\u0026rdquo; ตามคำตอบแบบเอกเทวนิยมดั้งเดิม","tags":null,"title":"ตอนที่ 3 - เซเปียนส์ครองโลกได้อย่างไร","type":"docs"},{"authors":null,"categories":null,"content":"   การปฏิวัติสำคัญของมนุษยชาติ (Homo Sapiens)\n 70,000 ปีก่อน – Cognitive Revolution การปฏิวัติด้านกระบวนการคิด 12,000 ปีก่อน – Agricultural Revolution การปฏิวัติเกษตรกรรม 500 ปีก่อน – Scientific Revolution การปฏิวัติทางวิทยาศาสตร์ 200 ปีก่อน – Industrial Revolution การปฏิวัติอุตสาหกรรม  ความพิเศษของภาษามนุษย์ เมื่อ 70,000 ปีที่แล้ว เผ่าพันธุ์ Homo Sapiens เริ่มออกเดินทางจากแอฟริกาตะวันออก ไปยังทวีปยุโรป และเอเชีย ซึ่งมีนีแอนเดอธาล และโฮโมอิเร็คตัสอาศัยอยู่ก่อนแล้ว และช่วงเวลาเดียวกันนี้เอง ที่นักวิทยาศาสตร์เชื่อว่าเกิด Cognitive Revolution ในมันสมองของมนุษย์เซเปี้ยน ไม่มีใครตอบได้ว่า Cognitive Revolution เกิดเพราะอะไร รู้แต่เพียงว่าช่วง 70,000 ถึง 30,000 ปีที่แล้ว คือช่วงที่มนุษย์คิดค้นเรือ ตะเกียงน้ำมัน ธนู ลูกศร และเข็มเย็บผ้า รวมถึงก้าวขึ้นไป สู่จุดสูงสุดของห่วงโซ่อาหาร\nสิ่งหนึ่งที่ Cognitive Revolution มอบให้ ก็คือความสามารถในการใช้ภาษาของมนุษย์ จริง ๆ แล้วภาษาไม่ใช่เรื่องแปลกใหม่ เพราะสัตว์อื่นๆ ก็สามารถสื่อสารกันด้วยภาษาง่ายๆ ได้ เช่นผึ้งหรือมดก็มีการสื่อสารที่จะบอกว่าแหล่งอาหารอยู่ตรงไหน และมนุษย์ก็ไม่ใช่เผ่าพันธุ์แรกที่มีภาษาแบบที่ใช้เสียง (vocal language) เพราะลิงก็มีภาษาของมัน เสียงร้องแบบหนึ่งจะ หมายความว่า “ระวังเหยี่ยว!” ส่วนเสียงร้องอีกแบบหนึ่งจะแปลว่า “ระวังสิงโต!” นักวิทยาศาสตร์เคยอัดเสียงร้องทั้งสองแบบ แล้วเอาไปเปิดให้ลิงฝูงหนึ่งฟัง พอลิงได้ฟังเสียงแรก มันจะมองขึ้นท้องฟ้าด้วยความกลัว พอเปิดเสียงที่สอง มันจะกรูไปปีนขึ้นต้นไม้ แล้วภาษามนุษย์ยอดเยี่ยมกว่าภาษาของสัตว์อื่นยังไง?\n ภาษาของเรานั้นยืดหยุ่นมาก เราสามารถใช้เสียงไม่กี่เสียงมาผสมกันเพื่อสร้างคำ ประโยค และความหมายได้อย่างไม่จำกัด ในขณะที่ลิงเตือนพูดได้แค่ “ระวังสิงโต!” แต่มนุษย์เราสามารถเล่าได้ว่า “เมื่อเช้านี้ ตรงแถวๆ ริมแม่น้ำ มีสิงโตตัวหนึ่งกำลังไล่ตามฝูงวัวกระทิงอยู่”\n นอกจากะพูดถึงสิ่งอื่นได้แล้ว มนุษย์ยังใช้ภาษาเพื่อเอาไว้ซุบซิบนินทากันเองด้วย (gossip) ฟังดูเป็นเรื่องไร้สาระ แต่จริงๆ แล้วนี่เป็นเรื่องสำคัญมาก เพราะมนุษย์นั้นต้องอยู่รวมกันเป็นกลุ่มเพื่อล่าอาหารและสืบพันธุ์ ดังนั้นสิงโตอยู่ที่ไหนจึงไม่สำคัญเท่ากับว่า ในเผ่าของเรา ใครเกลียดขี้หน้าใคร ใครกำลังกุ๊กกิ๊กกับใคร ใครเชื่อถือได้ และใครขี้โกหก\n และเป็นข้อที่สำคัญที่สุด คือภาษาของมนุษย์นั้นสามารถพูดถึงสิ่งที่ไม่มีอยู่จริงได้ด้วย มนุษย์ Homo Sapiens เป็นเพียงเผ่าพันธุ์เดียว ที่สามารถนึกคิด ถ่ายทอด และเชื่อในสิ่งที่เป็นนามธรรม สัตว์หรือ Homo เผ่าพันธุ์อื่น พูดอาจพูดคำว่า “ระวังสิงโต!” ได้ แต่มีเพียง Homo Sapiens เท่านั้นที่จะพูดว่า “สิงโตคือจิตวิญญาณผู้ปกป้องเผ่าของเรา”\n  ความสามารถในการสื่อสารเรื่องที่แต่งขึ้นเอง (fiction) หรือความจริงสมมติ (imagined reality) คือคุณลักษณะพิเศษที่สุดของ Homo Sapiens สัตว์อื่นๆ ไม่มีความสามารถในการคิดถึงหรือเชื่อเรื่องที่จับต้องไม่ได้ เราไม่มีทางจะโน้มน้าว ให้ลิงตัวไหนเชื่อได้เลยว่า ขอเพียงเจ้าเอากล้วยหอมให้เราหนึ่งลูกตอนนี้ พอเจ้าตายไป เจ้าจะได้ขึ้นสวรรค์ ที่เต็มไปด้วยลิงสวยๆ และมีกล้วยนับล้านหวีให้กินตลอดไป แต่เราพูดสิ่งนี้กับมนุษย์ได้ และมนุษย์นับล้านคน ก็พร้อมที่จะเชื่อเสียด้วย แล้วการที่มนุษย์สามารถสื่อสารและเชื่อ “เรื่องที่แต่งขึ้น” มันทำให้เราครองโลกได้อย่างไร\nนิทานปรัมปรา สังเกตได้ว่า สัตว์ที่อยู่กันเป็นฝูงอย่างลิงนั้น ขนาดของฝูงมักจะไม่ใหญ่นัก เพราะการที่สัตว์กลุ่มหนึ่ง จะอยู่ด้วยกันและร่วมมือกันออกหาอาหารได้นั้น สัตว์ทุกตัวในฝูงต้องรู้จักและคุ้นเคยกันพอสมควร ถ้าขนาดของฝูงใหญ่เกินไป ความวุ่นวายจะตามมา และสัตว์กลุ่มหนึ่งจะออกจากฝูงไปเพื่อไปตั้งกลุ่มใหม่ เหล่า Homo Sapiens รุ่นก่อนเก่าอาจจะตั้งกลุ่มได้ใหญ่กว่าลิงนิดหน่อย เพราะเรามีภาษาที่เอาไว้ซุบซิบเพื่อรับรู้ข้อมูลของคนอื่นๆ ในฝูงได้ แต่ขนาดของกลุ่มก็ยังมีขีดจำกัดอยู่ดี โดยตัวเลขที่นักวิทยาศาสตร์เห็นตรงกันก็คือ 150 คน ถ้ากลุ่มขยายขนาดใหญ่กว่านี้จะเริ่มอยู่ด้วยกันลำบากแล้ว (อ่านข้อมูลเพิ่มเติมได้ที่ Dunbar’s Number)\nแล้วเหตุใด Homo Sapiens ถึงสามารถก้าวข้ามขีดจำกัดของขนาด 150 คน และสร้างเมือง ประเทศ หรืออาณาจักรที่มีคนนับแสนนับล้านได้?\nคำตอบก็คือ Sapiens เราเชื่อใน common myths ครับ\n common = โดยทั่วไป myths = ตำนาน หรือนิทานปรัมปรา common myths = นิทานที่ทุกคนยึดถือโดยทั่วกัน ตำนาน เทพเจ้า ศาสนา เงินตรา ล้วนแล้วแต่เป็น common myths common myths ก่อให้เกิดการร่วมมือกันของคนแปลกหน้าอย่างที่ไม่เคยมีเผ่าพันธุ์ใดทำได้มาก่อน    ชาวแคธอลิกที่ไม่เคยรู้จักกันเลยอาจพร้อมใจบริจาคเงินสร้างโรงพยาบาล เพราะพวกเขาต่างก็เชื่อ เรื่องบุตรของพระเจ้าที่ลงมาเกิดเป็นมนุษย์และยอมสละชีพเพื่อไถ่บาปให้แก่เราทุกคน ชาวเซอร์เบียสองคนที่ไม่เคยเจอกันมาก่อนพร้อมจะออกรบและพลีชีพเพื่อธำรงค์ไว้ซึ่ง “แผ่นดินเซอร์เบีย” และ “ชนชาติเซอร์เบีย” ทนายความสองคนที่ไม่เคยพบหน้ากันมาก่อนอาจจะร่วมมือกันเพื่อว่าความให้กับจำเลยที่เขาไม่รู้จัก เพราะพวกเขาต่างเชื่อเรื่อง “ความยุติธรรม” และ “สิทธิมนุษยชน”   แต่ common myths ต่างๆ เหล่านี้เป็นเพียง “ความจริงสมมติ” ที่มีอยู่แค่ในจินตนาการร่วมของพวกเราเหล่า Homo Sapiens เท่านั้น ไม่ได้มีตัวตนอยู่จริงทางกายภาพเลย ความสามารถที่จะเชื่อเรื่องราวที่แต่งขึ้นนี่เอง ที่ทำให้ Homo Sapiens เหนือกว่า Homo ตระกูลอื่น ๆ ถ้าต้องสู้กันแบบตัวต่อตัว Homo Sapien คงไม่อาจสู้กับ Neanderthal ได้ เพราะนีแอนเดอธาลนั้นตัวใหญ่กว่าและแข็งแรงกว่า แต่ถ้าต้องปะทะกันเป็นกลุ่ม เผ่าเซเปี้ยน จะเหนือกว่าเผ่านีแอนเดอธาลอยู่หลายขุม เพราะแม้นีแอนเดอธาลอาจจะสื่อสารได้ว่าสิงโตอยู่ที่ไหน แต่นีแอนเดอธาลไม่สามารถเล่าเรื่องราวของจิตวิญญาณของสิงโตที่ปกป้องและคุ้มครองเผ่าของตนได้ ความเชื่อมั่นใน common myths นี่เองทำให้เซเปี้ยนสามารถรวมกลุ่มกันได้ใหญ่กว่า และมีความร่วมแรงร่วมใจมากกว่าจนอยู่เหนือ Homo สายพันธุ์อื่น\nนิทานเปอร์โยต์ บริษัทเปอร์โยต์ เป็นองค์กรสัญชาติฝรั่งเศสที่มีพนักงาน 200,000 คน ผลิตรถปีละกว่า 1 ล้าน 5 แสนคัน แต่อะไรคือบริษัทเปอร์โยต์?\nรถเปอร์โยต์ไม่ใช่บริษัท เพราะต่อให้เอารถยี่ห้อทุกคันมาทุบทิ้ง บริษัทเปอร์โยต์ก็ยังอยู่และผลิตรถใหม่ได้ โรงงานก็ไม่ใช่บริษัทเปอร์โยต์ เพราะต่อให้โรงงานทุกที่ถูกทำลาย บริษัทก็ยังกู้เงินมาสร้างโรงงานใหม่ได้ พนักงานก็ไม่ใช่บริษัทเปอร์โยต์ เพราะต่อให้ CEO หรือพนักงานทุกคนตายไป ตัวบริษัทเองก็ยังอยู่และรับพนักงานใหม่ได้จริงๆ แล้ว วิธีเดียวที่จะทำลายบริษัทเปอร์โยต์ได้ คือต้องให้ศาลฝรั่งเศสประกาศความสิ้นสุดของบริษัทเปอร์โยต์ และเมื่อผู้มีอำนาจจรดปากกาเพื่อเซ็นต์ลายเซ็นต์ตัวเองบนกระดาษหนึ่งแผ่น ความเป็น “บริษัทเปอร์โยต์” ก็สิ้นสุดลง บริษัทเปอร์โยต์จึงเป็นเพียง “นิทาน” ชนิดหนึ่งที่มีชื่อเรียกว่า “บริษัทจำกัด” (Limited Liability Company) ซึ่งเป็นนวัตกรรมทางความคิดที่ชาญฉลาดที่สุดอย่างหนึ่งของมนุษย์เซเปี้ยน\nถ้าผมเกิดในปี ค.ศ.1250 (ก่อนจะมีคอนเซ็ปต์บริษัทจำกัด) และทำธุรกิจผลิตรถเกวียน หากลูกค้าซื้อรถเกวียนไปใช้ได้ครั้งเดียวแล้วพัง ลูกค้าจะต้องมาฟ้องร้องเรียกค่าเสียหายจากผม และถ้าผมมีเงินไม่พอ ผมต้องขายบ้านขายทรัพย์สินเพื่อหาเงินมาชดใช้ เมื่อเจ้าของคือบริษัท และบริษัทคือเจ้าของ คนส่วนใหญ่จึงไม่กล้าทำธุรกิจ เพราะถ้าพลาดขึ้นมานั่นหมายความว่าครอบครัวของตัวเองจะซวยไปด้วย มนุษย์เราจึงร่วมกันจินตนาการสิ่งที่เรียกว่า “บริษัทจำกัด” ขึ้นมา\nบริษัทเป็น “นิติบุคคล” (ตัวตนทางกฎหมาย) ที่แยกออกมาจากเจ้าของหรือนักลงทุนโดยสิ้นเเชิง นายอาร์มอง เปอร์โยต์ (Armand Peugeot) คือผู้ก่อตั้งบริษัทเปอร์โยต์ ถ้ารถยนต์เปอร์โยต์พัง ลูกค้าสามารถฟ้องร้องบริษัทเปอร์โยต์ได้ แต่ฟ้องร้องนายเปอร์โยต์ไม่ได้ ถ้าบริษัทเปอร์โยต์กู้เงินจากแบงค์มาแล้วบริษัทเจ๊ง แบงค์ก็ไม่สามารถบังคับให้นายเปอร์โยต์ขายทรัพย์สินของตัวเองได้ เพราะคนที่ติดหนี้แบงค์คือบริษัทเปอร์โยต์ ไม่ใช่นายเปอร์โยต์ และแม้นายเปอร์โยต์จะตายไปนานแล้ว แต่บริษัทเปอร์โยต์ก็ยังสุขสบายดี ในช่วงสองร้อยปีที่ผ่านมา “บริษัทจำกัด” คือตัวขับเคลื่อนเศรษฐกิจโลก และเราก็คุ้นเคยกับมันเสียจนเราลืมไปเลยว่าบริษัทเหล่านี้เป็นเพียง “ความจริงสมมติ” ที่มีอยู่แค่ใน “จินตนาการร่วม” ของมนุษย์เท่านั้น\nประกาศอิสรภาพจากพันธุกรรม นอกจาก Homo Sapiens แล้ว สัตว์ทุกชนิดจะมีพฤติกรรมเหมือนเดิมจนกว่าจะถูกบังคับให้ปรับตัวเพราะความเปลี่ยนแปลงทางธรรมชาติ ที่เราเรียกว่าการกลายพันธุ์ทางพันธุกรรม (genetic mutation) เมื่อ 2 ล้านปีที่แล้ว เกิดการเปลี่ยนแปลงทางพันธุกรรมของจนเกิดเผ่าพันธุ์ Homo erectus ขึ้นมา โดยเผ่าพันธุ์นี้เป็นเผ่าพันธุ์ที่คิดค้นเครื่องมือที่ทำจากหิน (เราถึงเรียก Homo erectus ว่าคนยุคหิน) แต่เพราะว่าหลังจากนั้นไม่มีการเปลี่ยนแปลงทางพันธุกรรมใน Homo erectus อีกเลย พวกเขาจึงใช้เครื่องมือหินแบบเดิมอยู่ถึง 2 ล้านปี!\nในขณะที่ Homo Sapiens นั้นสามารถจินตนาการและเชื่อเรื่องที่แต่งขึ้นเองได้ เป็นเวลาสองล้านปีที่ Homo erectus ใช้ชีวิตเหมือนเดิมทุกวัน แต่ในเวลาแค่สามหมื่นปี Homo Sapiens เปลี่ยนแปลงเครื่องมือมาไม่รู้กี่ครั้ง เปลี่ยนการปกครองมาไม่รู้กี่หน เมื่อสามหมื่นปีก่อน อาวุธที่ดีที่สุดที่เซเปี้ยนคนหนึ่งจะสร้างได้คือธนูและลูกศร มาสมัยนี้ เราสามารถสร้างอาวุธอย่างระเบิดนิวเคลียร์ ไม่ใช่เพราะว่ามือของเราทำงานได้ดีกว่านายช่างเซเปี้ยนเมื่อสามหมื่นปีก่อน แต่เป็นเพราะว่าเราสามารถร่วมมือกับคนหลายพันคนที่เราไม่เคยเห็นหน้า ไม่ว่าจะเป็นคนขุดแร่ยูเรเนียม นักฟิสิกส์ที่คิดสูตรระเบิด หรือนักการเมืองที่ยกมือในสภาเพื่ออนุมัติการสร้างอาวุธนิวเคลียร์ Common Myths ที่เชื่อมโยงจินตนาการของมนุษยชาติไว้ด้วยกันจึงเป็นเหมือน “ทางด่วนของวิวัฒนาการ” ที่ทำให้เผ่าพันธุ์ Homo Sapiens พัฒนาอย่างก้าวกระโดดและอยู่เหนือทุกเผ่าพันธุ์บนโลกใบนี้\n ที่มา: https://anontawong.com.\n ","date":1588892400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588892400,"objectID":"5a721de642fee37c59a33c97c0b2b697","permalink":"https://example.com/book/sapiens/sapiens-2/","publishdate":"2020-05-08T00:00:00+01:00","relpermalink":"/book/sapiens/sapiens-2/","section":"book","summary":"การปฏิวัติสำคัญของมนุษยชาติ (Homo Sapiens)\n 70,000 ปีก่อน – Cognitive Revolution การปฏิวัติด้านกระบวนการคิด 12,000 ปีก่อน – Agricultural Revolution การปฏิวัติเกษตรกรรม 500 ปีก่อน – Scientific Revolution การปฏิวัติทางวิทยาศาสตร์ 200 ปีก่อน – Industrial Revolution การปฏิวัติอุตสาหกรรม  ความพิเศษของภาษามนุษย์ เมื่อ 70,000 ปีที่แล้ว เผ่าพันธุ์ Homo Sapiens เริ่มออกเดินทางจากแอฟริกาตะวันออก ไปยังทวีปยุโรป และเอเชีย ซึ่งมีนีแอนเดอธาล และโฮโมอิเร็คตัสอาศัยอยู่ก่อนแล้ว และช่วงเวลาเดียวกันนี้เอง ที่นักวิทยาศาสตร์เชื่อว่าเกิด Cognitive Revolution ในมันสมองของมนุษย์เซเปี้ยน ไม่มีใครตอบได้ว่า Cognitive Revolution เกิดเพราะอะไร รู้แต่เพียงว่าช่วง 70,000 ถึง 30,000 ปีที่แล้ว คือช่วงที่มนุษย์คิดค้นเรือ ตะเกียงน้ำมัน ธนู ลูกศร และเข็มเย็บผ้า รวมถึงก้าวขึ้นไป สู่จุดสูงสุดของห่วงโซ่อาหาร\nสิ่งหนึ่งที่ Cognitive Revolution มอบให้ ก็คือความสามารถในการใช้ภาษาของมนุษย์ จริง ๆ แล้วภาษาไม่ใช่เรื่องแปลกใหม่ เพราะสัตว์อื่นๆ ก็สามารถสื่อสารกันด้วยภาษาง่ายๆ ได้ เช่นผึ้งหรือมดก็มีการสื่อสารที่จะบอกว่าแหล่งอาหารอยู่ตรงไหน และมนุษย์ก็ไม่ใช่เผ่าพันธุ์แรกที่มีภาษาแบบที่ใช้เสียง (vocal language) เพราะลิงก็มีภาษาของมัน เสียงร้องแบบหนึ่งจะ หมายความว่า “ระวังเหยี่ยว!","tags":null,"title":"ตอนที่ 2 - สิ่งที่ทำให้เราครองโลก","type":"docs"},{"authors":null,"categories":null,"content":" ในช่วงปี 1983 Gates เริ่มมองเห็นอนาคตบางอย่างของระบบปฏิบัติการคอมพิวเตอร์ แม้จะประสบความสำเร็จอย่างสูงกับ MS-DOS แต่เขาก็ได้คิดถึงแผนการในอนาคตของ Microsoft ว่าจะต้องสร้างระบบปฏิบัติการเชิงรูปภาพขึ้นมาแบบมี User Interface แทนที่จะใช้การ input แบบ terminal เหมือนใน MS-DOS\nซึ่งแน่นอนว่า หาก Microsoft ยังยึดติดอยู่กับ MS-DOS ซึ่งเป็นโปรแกรมแบบ Terminal ที่ต้อง input แบบตัวอักษร ผู้ใช้ต้องพิมพ์คำสั่งลงไปก่อนการประมวลผล และจะไปปรากฏบนหน้าจอ MS-DOS โดยไม่มีโปรแกรมรูปภาพ หรือกราฟฟิกที่ช่วยให้ผู้ใช้ติดต่อกับโปรแกรมใช้งานอื่นๆ ได้อย่างง่ายดาย\nโดยในขณะนั้น นักวิจัย จาก Xerox ที่ศูนย์วิจัย พาโลอัลโต ในรัฐแคลิฟอร์เนีย ได้ทำการทดลอง สร้างวิธีการสื่อสารวิธีใหม่ระหว่างคอมพิวเตอร์กับมนุษย์ ซึ่งมีสิ่งประดิษฐ์ใหม่ล่าสุดที่เรียกว่า ‘เมาส์’ ซึ่งสามารถเลื่อนไปมาบนโต๊ะเพื่อเลื่อนลูกศรไปมาบนจอภาพได้\nแม้ในขณะนั้นในตลาดคอมพิวเตอร์ส่วนบุคคล ก็ได้เริ่มนำเอาเทคโนโลยีดังกล่าวมาใช้บ้างแล้ว ซึ่งหนึ่งในนั้นก็คือ Apple Lisa ที่ถูกสรรค์สร้างขึ้นมาโดย Steve Jobs นั่นเอง แต่เนื่องด้วยข้อจำกัดของราคาที่ค่อนข้างสูง\nและ Jobs ก็สร้างโครงสร้างของคอมพิวเตอร์ส่วนบุคคลของ Apple ให้กลายเป็นระบบปิด มันจึงไม่สามารถดึงดูดความสนใจ ของบริษัทผู้ผลิต Software รายใหญ่ ๆ ให้หันมาเขียนโปรแกรมมาสนับสนุนระบบปฏิบัติการแบบใหม่นี้ได้\nซึ่งแม้ระบบปฏิบัติการแบบกราฟฟิกที่ได้รับความนิยมระบบแรก ๆ นั้นจะเป็น เครื่อง Macintosh ของ Apple ในปี 1984 ซึ่งการทำงานทุกอย่างนั้นแตกต่างจาก MS-DOS อย่างสิ้นเชิง เพราะมันทำงานผ่านกราฟฟิก และขับเคลื่อนด้วยการ input ข้อมูลแบบใหม่ผ่านเมาส์นั่นเอง\nMacintosh ของ Apple ที่ดูดีหมดทุกอย่าง แต่เสียดายที่เป็นระบบปิด จนไม่สามารถแจ้งเกิดได้ ซึ่งแน่นอนว่า เครื่อง Mac นั้นประสบความสำเร็จอย่างท่วมท้น แต่ปัญหาคือเรื่องของ Software ที่มีอยู่อย่างมากมายในตลาดในขณะนั้น ยังไม่มาเข้าร่วมกับเครื่อง Macintosh ของ Apple ซึ่งเป็นระบบปิดนั่นเอง\nซึ่งเบื้องหลังนั้น Microsoft ก็ได้ร่วมงานกับ Apple เพื่อช่วยกันผลักดันระบบปฏิบัติการที่เป็นกราฟฟิก ให้แจ้งเกิดขึ้นมาให้ได้ ซึ่ง Microsoft ก็ได้สร้างโปรแกรม Microsoft Word และ Excel ที่เป็นระบบกราฟฟิกครั้งแรกให้กับ Macintosh นี่เอง\nแต่ความคิดของ Apple นั้นไม่เคยเปลี่ยนแปลง Jobs ไม่ยอมให้ผู้อื่นผลิต Hardware มาใช้ร่วมกับ Apple โดยเด็ดขาด ซึ่งเป็นแนวคิดที่ล้าสมัยมากในขณะนั้น และหากผู้ใช้ต้องการใช้ระบบปฏิบัติการ Mac ก็ต้องซื้อคอมพิวเตอร์จาก Apple เท่านั้น\nซึ่งการที่ Apple เป็บระบบปิด ไม่สามารถเชื่อมต่อกับใครได้ software ก็รันของตัวเอง ก็ทำให้ ครองส่วนแบ่งการตลาดได้น้อยมาก ๆ แม้จะวางจำหน่าย แมคอินทอช พร้อมระบบ Inteface ใหม่ พร้อม เม้าส์ ที่เป็นการปฏิวัติวงการในขณะนั้น แต่ก็ต้องยอมรับว่าสุดท้ายแล้ว Apple เป็นเพียงบริษัทเล็ก ๆ ไปเลยเมื่อเทียบกับตลาด PC ที่ IBM ครองตลาดอยู่ในตอนนั้น\nส่วนฟากฝั่งของ IBM นั้น เมื่อยอดขายของ PC ได้เติบโตขึ้นเรื่อย ๆ ก็ไม่มีใครคาดคิดว่ามันจะย้อนกลับมาทำร้ายธุรกิจหลักของตัวเอง เพราะผู้ซื้อ PC ส่วนมากนั้นก็เป็นลูกค้าเก่าแก่ของ IBM แทบจะทั้งสิ้น ซึ่งเดิมทีนั้น IBM คิดว่า PC จะขายได้แต่ในตลาดผู้ใช้งานระดับล่างเพียงเท่านั้น\nแต่เนื่องจากตัว Microprocessor ที่มีสมรรถนะที่สูงขึ้นเรื่อย ๆ IBM จึงต้องเริ่มชะลอโครงการพัฒนา PC เพื่อป้องกันไม่ให้ไปทำลายตลาดเมนเฟรมซึ่งเป็นธุรกิจหลักของ IBM ในขณะนั้น\nแม้ในธุรกิจเมนเฟรมนั้น IBM จะคอนโทรลทุกอย่างได้ ทั้ง Hardware และ Software ที่ IBM นั้นผลิตขึ้นมาเองแทบจะทั้งหมด แต่ในตลาด PC ที่มีการเปลี่ยนแปลงอย่างรวดเร็ว IBM ไม่สามารถโก่งราคา PC ได้ เพราะคู่แข่งสามารถสร้าง PC ที่มีคุณสมบัติเหมือนที่ IBM สร้างได้ในราคาที่ถูกกว่า\nและนี่เองเป็นเหตุให้เกิดแบรนด์ใหม่อย่าง Compaq ซึ่งมาเปลี่ยนเกมส์ธุรกิจ PC ไปอย่างสิ้นเชิง โดย Compaq ได้เริ่มทำการผลิตตัว Compaq Portable ตัวแรกออกมา โดยใช้วิธีการ Reverse Engineer หรือ วิศวกรรมย้อนกลับจาก IBM PC เนื่องจาก IBM ขณะนั้นประสบความสำเร็จ และขายได้ติดตลาดไปแล้ว แค่ทุกอย่างให้สามารถ Run Software ของ IBM ได้ทั้งหมด ก็จะเข้าถึงตลาดขนาดมหาศาลที่ IBM ได้เริ่มเปิดตลาดไว้แล้ว\nน้องใหม่อย่าง Compaq Portable ที่เตรียมมาสู้กับพี่ใหญ่อย่าง IBM PC ซึ่งแม้ IBM นั้นมักจะได้สิทธิ์ Exclusive กับ Chip ของบริษัท intel อยู่เสมอ แต่ แต่สำหรับ Chipset 386 นั้นถือเป็นครั้งแรกที่ IBM ถูกปฏิเสธโดย intel ซึ่ง Chipset 386 นั้นเป็นการเปลี่ยนแปลงสถาปัตยกรรมครั้งใหญ่ รวมถึงเรื่องของประสิทธิภาพการทำงานของ Chip ที่ ทำให้การทำงานของ PC ก้าวกระโดดไปอีกขั้น\nเมื่อ intel ไม่ได้ Exclusive ตัว Chip 386 กับ IBM แล้ว Compaq ก็เร่งในการสร้างผลิตภัณฑ์ตัวใหม่ที่ใช้ Chipset 386 เพื่อออกสู่ตลาดให้เร็วที่สุด ก่อนหน้าที่ IBM จะออกตลาด เพราะตอนนั้น IBM ก็ดูจะยังตัดสินใจได้ไม่ชัดเจนว่าจะเอายังไงกันแน่กับตลาด PC\nซึ่งไม่เพียงแค่ Chipset intel 386 เท่านั้น เมื่อ Compaq ออกผลิตภัณฑ์อย่าง Desktop386 นั้น ได้ร่วมมือกับ Microsoft ของ Bill Gate ที่ยอมให้ระบบปฏิบัติการของเค้าสามารถรันได้บน Compaq แบบที่ว่าไม่ต้องไปทำการ Copy Chip Code ใด ๆ จาก IBM อีกต่อไป เป็นการเปลี่ยนหน้าประวัติศาสตร์ คอมพิวเตอร์ส่วนบุคคลอย่างสิ้นเชิง และ ปลดแอ็ก จาก IBM ได้ในที่สุด\nการแก้เกมส์ของ IBM คือ การต้องการออกแบบระบบใหม่ทั้งหมด เพื่อไม่ให้ Compaq สามารถลอกเลียนแบบได้ โดยออกระบบปฏิบัติการใหม่คือ OS2 ที่ยากที่คู่แข่งจะเลียนแบบ ซึ่งต้องบอกว่า IBM ต้องการฆ่าทุกคนในธุรกิจนี้เลยก็ว่าได้แม้กระทั่ง Microsoft เองก็ตาม\nPS2 กับการสร้างหายนะด้วยน้ำมือตัวเองของ IBM แต่หารู้ไม่ การสร้างระบบปฏิบัติการใหม่ ที่ไม่สามารถเข้ากับผลิตภัณฑ์ตัวเดิมของ IBM ได้เลยนั้น ถือเป็นการฆ่าตัวตายของ IBM เอง เพราะองค์กรใหญ่หลาย ๆ องค์กรในสหรัฐนั้น ได้สั่งซื้อเครื่อง computer ของ IBM ไปเป็นจำนวนมากแล้ว ซึ่ง หากต้องการเปลี่ยน ต้องมีการเปลี่ยนแบบยกองค์กร ซึ่งต้องใช้เงินจำนวนมหาศาล ทำให้องค์กรหลาย ๆ องค์กรไม่ต้องการซื้อ PS2 ของ IBM เพราะต้องมาเริ่มเรียนรู้กันใหม่หมด ซึ่งมีค่าใช้จ่ายที่มหาศาลมาก ๆ\nเหมือนยื่นดาบให้ศัตรูมาฆ่าตัวเองเลยก็ว่าได้สำหรับ IBM ชัดเจนว่า ต่อจากนี้ ตลาด PC นั้นได้เปลี่ยนไปแล้ว IBM ไม่ได้เป็นผู้กำหนดตลาดอีกต่อไป ซึ่งหลังจากนั้นได้มีการรวมตัวของผู้ผลิต PC ขนาดใหญ่จำนวน 9 ราย และได้มีการเจรจากับ Bill Gate จาก Microsoft และพัฒนามาตรฐานของพวกเค้าเองในชื่อ EISA (Extended Industry Standard Architecture) โดยที่ไม่เกี่ยวข้องใด ๆ กับ IBM อีกต่อไป เป็นการถีบ IBM ออกจากตลาด PC อย่างเป็นทางการนับจากนั้นเป็นต้นมานั่นเองครับ\n","date":1589065200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589065200,"objectID":"9ec0313a8e9855d3c852403695dbc7b0","permalink":"https://example.com/book/gates/bill-gate-4/","publishdate":"2020-05-10T00:00:00+01:00","relpermalink":"/book/gates/bill-gate-4/","section":"book","summary":"ในช่วงปี 1983 Gates เริ่มมองเห็นอนาคตบางอย่างของระบบปฏิบัติการคอมพิวเตอร์ แม้จะประสบความสำเร็จอย่างสูงกับ MS-DOS แต่เขาก็ได้คิดถึงแผนการในอนาคตของ Microsoft ว่าจะต้องสร้างระบบปฏิบัติการเชิงรูปภาพขึ้นมาแบบมี User Interface แทนที่จะใช้การ input แบบ terminal เหมือนใน MS-DOS\nซึ่งแน่นอนว่า หาก Microsoft ยังยึดติดอยู่กับ MS-DOS ซึ่งเป็นโปรแกรมแบบ Terminal ที่ต้อง input แบบตัวอักษร ผู้ใช้ต้องพิมพ์คำสั่งลงไปก่อนการประมวลผล และจะไปปรากฏบนหน้าจอ MS-DOS โดยไม่มีโปรแกรมรูปภาพ หรือกราฟฟิกที่ช่วยให้ผู้ใช้ติดต่อกับโปรแกรมใช้งานอื่นๆ ได้อย่างง่ายดาย\nโดยในขณะนั้น นักวิจัย จาก Xerox ที่ศูนย์วิจัย พาโลอัลโต ในรัฐแคลิฟอร์เนีย ได้ทำการทดลอง สร้างวิธีการสื่อสารวิธีใหม่ระหว่างคอมพิวเตอร์กับมนุษย์ ซึ่งมีสิ่งประดิษฐ์ใหม่ล่าสุดที่เรียกว่า ‘เมาส์’ ซึ่งสามารถเลื่อนไปมาบนโต๊ะเพื่อเลื่อนลูกศรไปมาบนจอภาพได้\nแม้ในขณะนั้นในตลาดคอมพิวเตอร์ส่วนบุคคล ก็ได้เริ่มนำเอาเทคโนโลยีดังกล่าวมาใช้บ้างแล้ว ซึ่งหนึ่งในนั้นก็คือ Apple Lisa ที่ถูกสรรค์สร้างขึ้นมาโดย Steve Jobs นั่นเอง แต่เนื่องด้วยข้อจำกัดของราคาที่ค่อนข้างสูง\nและ Jobs ก็สร้างโครงสร้างของคอมพิวเตอร์ส่วนบุคคลของ Apple ให้กลายเป็นระบบปิด มันจึงไม่สามารถดึงดูดความสนใจ ของบริษัทผู้ผลิต Software รายใหญ่ ๆ ให้หันมาเขียนโปรแกรมมาสนับสนุนระบบปฏิบัติการแบบใหม่นี้ได้\nซึ่งแม้ระบบปฏิบัติการแบบกราฟฟิกที่ได้รับความนิยมระบบแรก ๆ นั้นจะเป็น เครื่อง Macintosh ของ Apple ในปี 1984 ซึ่งการทำงานทุกอย่างนั้นแตกต่างจาก MS-DOS อย่างสิ้นเชิง เพราะมันทำงานผ่านกราฟฟิก และขับเคลื่อนด้วยการ input ข้อมูลแบบใหม่ผ่านเมาส์นั่นเอง","tags":null,"title":"ตอนที่ 4 - The Downfall of IBM","type":"docs"},{"authors":null,"categories":null,"content":"    ทำไมเราถึงชอบกินของหวานและอาหารที่มีไขมัน ?\nทำไมการรักเดียวใจเดียวจึงเป็นเรื่องยากสำหรับบางคน ?\nทำไมสัตว์ตัวใหญ่ๆ อย่างแมมมอธ เสือเขี้ยวดาบหรือจิงโจ้ยักษ์สูง 2 เมตรถึงสูญพันธุ์ไปหมด ?\nเรามาหาคำตอบกันในตอนนี้ครับ\n Homo Sapiens อย่างพวกเราอยู่กันมาสามยุคสามสมัยเราใช้ชีวิตแบบพนักงานโรงงานหรือพนักงานออฟฟิศมา 200 ปี หลังจากการปฏิวัติอุตสาหกรรม ก่อนหน้านั้น เราใช้ชีวิตแบบชาวไร่ชาวนาอยู่ถึง 12,000 ปี และก่อนหน้านั้น เราใช้ชีวิตแบบ “นักล่า-เก็บพืชผล” อยู่ถึง 60,000 ปี ช่วงเวลาหลายหมื่นปีที่เราใช้ชีวิตแบบ Hunter-Gatherers หรือที่เรียกสั้นๆ ว่า foragers (ผู้ออกหาอาหาร) นั้น มีผลอย่างมากต่อการหล่อหลอมสัญชาติญาณของเราในปัจจุบัน เราจึงควรกลับไปทำความเข้าใจวิถีชีวิตความเป็นอยู่ของคนกลุ่มนี้และ “รอยเท้า” ที่เขาได้ทิ้งเอาไว้ ความท้าท้ายอย่างหนึ่งของการศึกษาวิถีของชาว foragers ก็คือนอกจากเครื่องไม้เครื่องมือ และเศษกระดูกแล้ว พวกเขาไม่ได้ทิ้งอะไรไว้ให้เราศึกษาเลย (เพราะสมัยนั้นยังไม่มีภาษาเขียน) นักมานุษยวิทยาจึงถกเถียงกันโดยตั้งอยู่บนสมมติฐานและการอนุมานเอาเสียส่วนใหญ่ ดังนั้นจึงควรฟังหูไว้หูนะครับ\nเหตุผลที่เราโปรดปรานของหวาน เมื่อครั้งที่บรรรพบุรุษของเราเป็น forager นั้น ผู้ชายจะร้บหน้าที่ “ออกล่า” ส่วนผู้หญิงจะรับหน้าที่ “เก็บของป่า” สมัยนั้นยังไม่มีตู้เย็น อะไรก็ตามที่ล่าหรือเก็บมาได้จึงต้องใช้หรือกินให้หมดภายในวันสองวัน ไม่มีการเก็บอาหารเป็นเสบียงเอาไว้ เมื่ออาหารละแวกนั้นหมดก็ต้องย้ายถิ่นฐานเพื่อไปเริ่มต้นใหม่ ในทุ่งสะวันนา ที่เราเคยอาศัยอยู่ อาหารหวานที่มีพลังงานสูงนั้นหายากมาก และอาหารหวานชนิดเดียวที่คนสมัยนั้นจะหากินได้ก็คือผลไม้สุก ดังนั้นหากผู้หญิงคนหนึ่งเดินไปเจอต้นไม้ที่มีผลไม้สุกงอมออกอยู่เต็มต้น สิ่งที่ดีที่สุด ที่เธอจะทำได้ก็คือเด็ดมันมากินให้มากที่สุด ก่อนที่ฝูงลิงบาบูนจะมาเจอและขนผลไม้กลับรังไปจนหมด สัญชาติญาณของการกินของหวานและอาหารที่มีไขมันอย่างมูมมามนี้เอง ที่ส่งผลให้มนุษย์ในปัจจุบัน หลงใหลและมักอดใจไม่ไหวเมื่อเจออาหารประเภทนี้\nรวมกันเราอยู่ นักมานุษวิทยาเชื่อว่า เหล่า foragers นั้นอยู่กันเป็นชุมชนเล็กๆ ไม่มีความเป็นส่วนตัว ไม่มีทรัพย์สินส่วนบุคคล และแม้กระทั่งลูกก็ไม่ใช่ลูกของใครคนใดคนหนึ่ง! ผู้หญิงคนหนึ่งจะหลับนอนกับผู้ชายหลายคนในเผ่า ด้วยความเชื่อที่ว่าลูกจะได้ส่วนดีจากพ่อแต่ละคนมา พ่อคนหนึ่งอาจจะเป็นนักล่าที่เก่งที่สุด อีกคนหนึ่งอาจจะเป็นนักเล่าเรื่องที่สนุกที่สุด ส่วนอีกคนอาจจะเป็นนักรบที่องอาจที่สุด เด็กที่ออกมาจึงเป็น “ลูกของทุกคน” ในเผ่า (ชนเผ่าบารีในเวเนซูเอล่าก็ยังใช้ระบบ “พ่อหลายคน” นี้อยู่)\nนี่อาจจะเป็นเหตุผลที่โลกสมัยนี้อัตราการหย่าร้างสูงขึ้นทุกที เพราะเราอยู่กันเป็น “ครอบครัวใหญ่” มาหลายหมื่นปี เพิ่งจะมาใช้ระบบครอบครัวเล็กและความสัมพันธ์แบบผัวเดียวเมียเดียวมาเมื่อไม่กี่ร้อยหรือไม่กี่พันปีมานี้เอง (อ่านถึงตรงนี้ผมหวังว่าหลายๆ คนจะไม่ใช้ข้อมูลนี้เป็นข้ออ้างในการนอกใจนะครับ เพราะอย่างที่เตือนไว้ข้างต้นว่านี่เป็นเพียงสมมติฐาน แถมนักมานุษวิทยาอีกกลุ่มหนึ่งก็ออกมาค้านแนวคิดนี้ โดยชี้ประเด็นว่า การที่สังคมในปัจจุบันซึ่งอยู่ต่างสถานที่ ต่างวัฒนธรรมล้วนมีความสัมพันธ์แบบผัวเดียวเมียเดียว ก็เป็นหลักฐานที่บ่งบอกอยู่แล้วว่ามนุษย์เรานั้นเหมาะกับสังคมแบบนี้)\nชีวิตที่น่าอิจฉา จะว่าไป ชาว foragers นั้นมีวิถีชีวิตที่น่าอิจฉากว่าคนสมัยนี้ในบางแง่มุมด้วยซ้ำ ยกตัวอย่างหญิงชาวจีนที่มีฐานะยากจนในสมัยนี้ ชีวิตของเธอจะมีอะไรมากไปกว่าการตื่นนอนตั้งแต่เช้าตรู่ เพื่อไปนั่งทำงานอยู่ในโรงงานนรกเป็นเวลา 10-12 ชั่วโมง ก่อนจะกลับมาบ้านเพื่อทำอาหาร ล้างจาน ซักผ้าและล้มตัวนอนด้วยความเหน็ดเหนื่อย ก่อนจะต้องตื่นมาเจอวันเดิมๆ ซ้ำแล้วซ้ำเล่า\nเมื่อ 30,000 ปีที่แล้ว หญิงชาวจีนจะได้ออกจากแคมป์ไปพร้อมเพื่อนสาวหลายคน เพื่อเสาะหาผลหมากรากไม้ เก็บเห็ด ขุดมัน จับกบ หรือบางครั้งก็วิ่งหนีเสือ ตอนบ่ายๆ ก็กลับมาถึงแคมป์เพื่อทำอาหารกินกัน จากนั้นเธอก็จะมีเวลาเหลือเฟือ ที่จะมานั่งเมาธ์มอยและเล่นกับลูก นอกจากวิถีชีวิตที่จะชิลล์กว่าแล้ว Foragers ยังมีเรื่องน่าสนใจอีกหลายอย่าง\n สมองใหญ่กว่า ใหญ่กว่าคนเราสมัยนี้ด้วยซ้ำ เพราะพวก foragers นั้นต้องทำอะไรเอง ไม่ว่าจะเป็นการสร้างอาวุธ จุดไฟ ทำอาหาร ล่าสัตว์ คัดผลไม้ที่ไม่มีพิษ ฯลฯ ทำให้เหล่า foragers ได้ใช้สมองแทบจะทุกส่วน ในขณะที่คนสมัยใหม่อย่างเราๆ ทำอะไรเองแทบไม่เป็นเลย เน้นแต่ใช้เงินซื้ออย่างเดียว\n สุขภาพแข็งแรงกว่า ด้วยความที่ต้องออกล่าทุกวัน แต่ละวันก็ได้เหยื่อต่างกันไป คนกลุ่มนี้ จึงได้กินอาหารที่หลากหลายได้รับโปรตีนและวิตามินมากกว่า ขณะที่คนรุ่นหลังๆ ที่เป็นชาวไร่ชาวนา มักจะได้กินแต่ข้าวหรือแป้งชนิดใดชนิดหนึ่งทุกวัน\n มีโรคระบาด โรคระบาดนั้นมักจะเริ่มมาจากสัตว์เลี้ยงก่อน แต่คนยุคนั้นยังไม่ได้เริ่มเลี้ยงสัตว์ (ยกเว้นหมา) แถมการที่ไม่มีการสต๊อกอาหารและการย้ายถิ่นฐานไปเรื่อยๆ ก็ทำให้ไม่มีหนูหรือสัตว์พาหะอื่นๆ มาก่อกวนหรือแพร่เชื้อได้\n ไม่มีการเอารัดเอาเปรียบ เพราะไม่มีใครมีทรัพย์สินส่วนตัว จึงไม่มีการแก่งแย่งกัน ไม่มีการรบกับเผ่าอื่น เพื่อปล้นสะดมภ์ (เพราะไม่มีอะไรให้ปล้น) “ทรัพย์สิน” ที่สำคัญที่สุดที่คนๆ หนึ่งจะมีได้คือความสัมพันธ์ที่ดีกับคนในเผ่า จึงไม่ใช่เรื่องแปลกที่นักมานุษวิทยาได้ตั้งชื่อสังคม foragers นี้ว่าเป็น “The Original Affluent Society” – สังคมมั่งมีแบบดั้งเดิม\n  ยึดครองออสเตรเลียและอเมริกา แม้รุ่นพี่อย่าง Neanderthals และ Homo erectus จะอาศัยอยู่ในทวีปยุโรปและเอเชียมาตั้งแต่ 2 ล้านปีก่อนหน้า แต่รุ่นพี่ทั้งสองยังไม่เคยไปถึงทวีปออสเตรเลียหรือทวีปอเมริกาเลย มนุษย์เซเปี้ยน เดินทางไปถึงออสเตรเลีย ได้ด้วยการเดินเรือเมื่อ 45,000 ปีที่แล้ว โดยอาจจะเริ่มจาก การต่อเรือและออกหาปลาอยู่ตาม หมู่เกาะนับร้อยนับพันของอินโดนีเซียและก่อนจะจับพลัดจับผลูไปลงเอยที่ชายฝั่งตะวันตกของทวีปออสเตรเลีย ส่วนทวีปอเมริกานั้น เหล่าเซเปี้ยนส์ไปถึงด้วยวิธีเดินเท้า เพราะสมัยนั้นระดับน้ำทะเลนั้นอยู่ในระดับต่ำ เสียจนเกิดแผ่นดินที่เชื่อมระหว่างไซบีเรีย (รัสเซีย) และอลาสก้า (อเมริกา) เหตุผลที่ Homo สายพันธุ์อื่นๆ ไม่เคยไปถึงอเมริกา ก็เพราะว่าไซบีเรียนั้นหนาวเกินไป แต่เซเปี้ยนส์นั้นฉลาดพอที่จะถักทอเครื่องนุ่งห่มและรองเท้าหนาๆ ที่จะรองรับสภาพอากาศอันทารุณได้ จึงออกล่าสัตว์ใหญ่ที่มีสารอาหารเยอะอย่างแมมมอธและกวางเรนเดียร์ไปเรื่อยๆ รู้ตัวอีกทีก็เดินทางมาถึงอลาสก้าเมื่อประมาณ 14,000 ปีที่แล้ว\nการเดินไปทางไปถึงทวีปออสเตรเลียโดยเหล่า Homo Sapiens ถือเป็นการเดินทางที่มีนัยยะทางประวัติศาสตร์พอๆ กับการค้นพบทวีปอเมริกาของโคลัมบัส และการพิชิตดวงจันทร์ของยานอพอลโล 11 เหตุผลที่เหตุการณ์นี้สำคัญมาก ก็เพราะว่านี่เป็นครั้งแรกที่เผ่าพันธุ์มนุษย์ได้ขึ้นไปอยู่บนจุดสูงสุดของห่วงโซ่อาหาร ในทวีปแอฟริกา ยุโรป หรือเอเชียนั้น เหล่า Homo ล้วนวิวัฒนาการมาพร้อมๆ กับสัตว์ชนิดอื่นๆ ร่วม 2 ล้านปี จึงรู้ทางหนีทีไล่กันดี แต่สัตว์ที่อยู่ในออสเตรเลียหรืออเมริกานั้นไม่เคยเจอเผ่าพันธุ์มนุษย์เลย มันจึงไม่มีสัญชาตญาณหรือทักษะใดๆ ที่จะต่อกร (หรือหลีกเลี่ยง) สิ่งมีชีวิตตัวเล็กๆ หน้าตาคล้ายลิงที่เดินสองขานี้\nออสเตรเลียเคยเป็นที่อยู่ของสัตว์ยักษ์จำนวนมาก ไม่ว่าจะเป็นจิงโจ้สูง 2 เมตร, สิงโตที่มีกระเป๋าหน้าท้อง (marsupial lion), หมีโคอาล่าไซส์จัมโบ้ นกบินไม่ได้ที่ตัวใหญ่กว่านกกระจอกเทศสองเท่า และตัววอมแบทหนัก 2 ตัน ภายในเวลาแค่สองสามพันปีนับจากที่เหล่าเซเปี้ยนส์จอดเรือที่ชายฝั่งของทวีปออสเตรเลีย สัตว์ใหญ่ทั้งหลายเหล่านี้ก็สูญพันธุ์ สรรพสัตว์ในทวีปอเมริกาก็เจอชะตากรรมไม่ต่างกัน ไม่ว่าจะเป็นแมมมอธ เสือเขี้ยวดาบ หนูตัวเท่าหมี สิงโตยักษ์ หรืออูฐอเมริกา (อเมริกาก็มีอูฐด้วย!) ต่างก็สูญพันธุ์ไปภายในเวลาไม่กี่พันปีหลังจากที่มนุษย์เข้ามายึดครองทวีปนี้\nสัตว์ใหญ่ (ที่มีน้ำหนักเกิน 50 กิโลกรัม) มักจะโดนกระทบมากที่สุด เพราะมันไม่มีสัญชาติญาณในการระวังตัวจากมนุษย์ อีกสาเหตุหนึ่งก็คือสัตว์กลุ่มนี้มักมีลูกคราวละไม่กี่ตัวและใช้เวลาตั้งครรภ์นาน ทำให้อัตราการเกิดไม่เพียงพอจะชดเชยกับอัตราที่มันถูกฆ่าจากนักล่าสายพันธุ์ใหม่ เมื่อ 70,000 ปีที่แล้ว มีสัตว์ใหญ่อยู่ทั่วโลกประมาณ 200 สายพันธุ์ แต่เมื่อหนึ่งหมื่นปีที่แล้ว โลกใบนี้ก็เหลือสัตว์ใหญ่เพียง 100 สายพันธุ์เท่านั้น\nพวกเราเหล่า Homo Sapiens จึงเป็นภัยคุกคามทางธรรมชาติที่ใหญ่หลวงที่สุดมาตั้งแต่ไหนแต่ไร ในตอนหน้า เราจะเข้าสู่ยุคแห่งการทำเกษตรกรรม (Agricultural Revolution) ซึ่งเริ่มขึ้นเมื่อ 12,000 ปีที่แล้ว และได้ชื่อว่าเป็น “การหลอกลวงครั้งยิ่งใหญ่ที่สุดในประวัติศาสตร์” – History’s Biggest Fraud กันครับ\n ที่มา: https://anontawong.com.\n ","date":1588978800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588978800,"objectID":"fbb286d32eda5d7e11c98004ce905701","permalink":"https://example.com/book/sapiens/sapiens-3/","publishdate":"2020-05-09T00:00:00+01:00","relpermalink":"/book/sapiens/sapiens-3/","section":"book","summary":"ทำไมเราถึงชอบกินของหวานและอาหารที่มีไขมัน ?\nทำไมการรักเดียวใจเดียวจึงเป็นเรื่องยากสำหรับบางคน ?\nทำไมสัตว์ตัวใหญ่ๆ อย่างแมมมอธ เสือเขี้ยวดาบหรือจิงโจ้ยักษ์สูง 2 เมตรถึงสูญพันธุ์ไปหมด ?\nเรามาหาคำตอบกันในตอนนี้ครับ\n Homo Sapiens อย่างพวกเราอยู่กันมาสามยุคสามสมัยเราใช้ชีวิตแบบพนักงานโรงงานหรือพนักงานออฟฟิศมา 200 ปี หลังจากการปฏิวัติอุตสาหกรรม ก่อนหน้านั้น เราใช้ชีวิตแบบชาวไร่ชาวนาอยู่ถึง 12,000 ปี และก่อนหน้านั้น เราใช้ชีวิตแบบ “นักล่า-เก็บพืชผล” อยู่ถึง 60,000 ปี ช่วงเวลาหลายหมื่นปีที่เราใช้ชีวิตแบบ Hunter-Gatherers หรือที่เรียกสั้นๆ ว่า foragers (ผู้ออกหาอาหาร) นั้น มีผลอย่างมากต่อการหล่อหลอมสัญชาติญาณของเราในปัจจุบัน เราจึงควรกลับไปทำความเข้าใจวิถีชีวิตความเป็นอยู่ของคนกลุ่มนี้และ “รอยเท้า” ที่เขาได้ทิ้งเอาไว้ ความท้าท้ายอย่างหนึ่งของการศึกษาวิถีของชาว foragers ก็คือนอกจากเครื่องไม้เครื่องมือ และเศษกระดูกแล้ว พวกเขาไม่ได้ทิ้งอะไรไว้ให้เราศึกษาเลย (เพราะสมัยนั้นยังไม่มีภาษาเขียน) นักมานุษยวิทยาจึงถกเถียงกันโดยตั้งอยู่บนสมมติฐานและการอนุมานเอาเสียส่วนใหญ่ ดังนั้นจึงควรฟังหูไว้หูนะครับ\nเหตุผลที่เราโปรดปรานของหวาน เมื่อครั้งที่บรรรพบุรุษของเราเป็น forager นั้น ผู้ชายจะร้บหน้าที่ “ออกล่า” ส่วนผู้หญิงจะรับหน้าที่ “เก็บของป่า” สมัยนั้นยังไม่มีตู้เย็น อะไรก็ตามที่ล่าหรือเก็บมาได้จึงต้องใช้หรือกินให้หมดภายในวันสองวัน ไม่มีการเก็บอาหารเป็นเสบียงเอาไว้ เมื่ออาหารละแวกนั้นหมดก็ต้องย้ายถิ่นฐานเพื่อไปเริ่มต้นใหม่ ในทุ่งสะวันนา ที่เราเคยอาศัยอยู่ อาหารหวานที่มีพลังงานสูงนั้นหายากมาก และอาหารหวานชนิดเดียวที่คนสมัยนั้นจะหากินได้ก็คือผลไม้สุก ดังนั้นหากผู้หญิงคนหนึ่งเดินไปเจอต้นไม้ที่มีผลไม้สุกงอมออกอยู่เต็มต้น สิ่งที่ดีที่สุด ที่เธอจะทำได้ก็คือเด็ดมันมากินให้มากที่สุด ก่อนที่ฝูงลิงบาบูนจะมาเจอและขนผลไม้กลับรังไปจนหมด สัญชาติญาณของการกินของหวานและอาหารที่มีไขมันอย่างมูมมามนี้เอง ที่ส่งผลให้มนุษย์ในปัจจุบัน หลงใหลและมักอดใจไม่ไหวเมื่อเจออาหารประเภทนี้","tags":null,"title":"ตอนที่ 3 - ยุคแห่งการล่าสัตว์เก็บพืชผล","type":"docs"},{"authors":null,"categories":null,"content":" โดย ดร. สุวินัย ภรณวลัย\n เซเปียนส์ให้ความหมายแก่โลกผ่านเรื่องเล่าที่เป็นเรื่องแต่ง แต่เซเปียนส์ ยินยอมแลกความหมาย กับอำนาจเพื่อเสพสุขในยุคทำให้ทันสมัย (modernization) เนื่องจากมีแต่เซเปียนส์เท่านั้น ที่สามารถใช้ภาษาเพื่อพิจารณาใคร่ครวญประสบการณ์ของพวกเขาในอดีตและการกระทำที่จะเกิดขึ้นในอนาคต\nการที่เซเปียนส์ครองโลกได้เพราะมีแต่พวกเราเท่านั้นที่สามารถร่วมมือกันอย่างยืดหยุ่นได้ในหมู่คนจำนวนมาก โดยตั้งอยู่บนความเชื่อของเราในเรื่องระเบียบแบบแผนตามจินตนาการ ทำให้สามารถสร้างระบบราชการ ที่เป็นการสร้างลำดับชั้นของมนุษย์ในการบริหาร การจัดการและการสั่งการ จนเกิดเครือข่ายความร่วมมือ ในหมู่คนหมู่มากที่มั่นคงขึ้นมาได้ \u0026hellip; ทั้งนี้เพราะพวกเขาเชื่อในเรื่องเล่าเดียวกัน จึงทำตามกฏเดียวกันได้ ทั้ง ๆ ที่ชุดของกฏเหล่านี้ดำรงอยู่แค่ในจินตนาการของเราเท่านั้น แต่เรากลับเชื่อว่ามันมีอยู่จริง และไม่อาจเอาชนะได้ดุจเดียวกับแรงโน้มถ่วง\n\u0026ldquo;ระเบียบแบบแผนตามจินตนาการ\u0026rdquo; เป็นความจริงแบบจิตวิสัยร่วม (intersubjective realities) ซึ่งเป็นความจริงที่ขึ้นอยู่กับการสื่อสารในคนหมู่มาก ซึ่งต่างไปจาก ความจริงแบบวัตถุวิสัย (objective realities) ที่ดำรงอยู่อย่างอิสระโดยไม่ขึ้นอยู่กับความเชื่อหรือความรู้สึกของเรา และก็ไม่เหมือน ความจริงแบบจิตวิสัย (subjective realities) ที่ขึ้นอยู่กับความเชื่อและความรู้สึกเฉพาะตน สิ่งที่สำคัญที่สุดในประวัติศาสตร์ ไม่ว่าจะเป็นเงิน หรือพระเจ้า(ศาสนา) หรือประเทศชาติ รวมทั้งคุณค่าแบบมนุษยนิยมของเรา ล้วนเป็นผลผลิตของความจริงแบบจิตวิสัยร่วมทั้งสิ้น \u0026hellip; มิหนำซ้ำทั้งหมดนี้ล้วนเป็นแค่เรื่องที่แต่งขึ้นมา เพื่อทำให้ชีวิตเรามีความหมาย\nความจริงก็คือ ชีวิตของคนส่วนใหญ่จะมีความหมายก็แต่เพียงภายในเครือข่ายของ \u0026ldquo;เรื่องเล่า\u0026rdquo; ที่พวกเขาบอกเล่าให้คนอื่นฟังเท่านั้น ความหมายเกิดขึ้นเมื่อคนจำนวนมากถักทอเครือข่ายร่วมของเรื่องเล่าเข้าด้วยกัน ผู้คนต่างตอกย้ำความเชื่อของกันและกัน จนเกิดเป็นวงจรหมุนรอบไปได้ตลอดกาล โดยที่แต่ละรอบของการยืนยันความเชื่อระหว่างกัน ก็จะกระชับสายใยของความหมายให้หนาแน่นมากขึ้นไปอีก จนผู้นั้นแทบไม่มีทางเลือกอื่นใดนอกจากต้องเชื่อตามสิ่งที่คนอื่น ๆ ทุกคนเชื่อ\nการเห็นอนิจจังของผู้มีปัญญารู้เท่าทันจิต คือการเฝ้าดูการปั่นสายใยแห่งความหมายและความเชื่อผ่านเรื่องเล่าตั้งแต่ในอดีต แลเห็นการคลี่คลายตัวออกของสายใยเหล่านี้ด้วยจิตตั้งมั่น ปล่อยวาง รู้เท่าทัน เพราะตระหนักได้ดีว่า สิ่งที่ดูราวกับสำคัญที่สุดในชีวิตของผู้คนในยุคหนึ่ง อาจเป็นความเหลวไหลไร้สาระอย่างที่สุดสำหรับผู้คนในอนาคตข้างหน้า เพราะไม่ว่าผู้คนจะถักทอสายใยแห่งความหมาย เชื่อเรื่องเล่าที่ถักทอขึ้นอย่างหมดหัวใจแค่ไหน สักวันหนึ่งไม่ช้าก็เร็ว สายใยเหล่านั้นย่อมคลี่คลายออกจนได้อยู่ดี\nเมื่อ 70,000 ปีก่อน เซเปียนส์ได้สร้างภาษาขึ้นมาเพื่อสร้างความจริงแบบจิตวิสัยร่วมที่ทรงพลังมาก ๆ จนทำให้เซเปียนส์ครองโลกใบนี้ได้ โลกกำลังก้าวไปสู่ยุคของดีอุส เมื่อเซเปียนส์หลงเชื่อเรื่องเล่าเกี่ยวกับดีอุส (มนุษย์เทพ) ที่ตนเองสร้างขึ้น จนมุ่งมั่นที่จะอัปเกรดตนเอง จนกลายพันธุ์จากเซเปียนส์ไปเป็นดีอุสในอนาคตข้างหน้า เมื่อนั้นความจริงแบบจิตวิสัยร่วม จะกลืนกินความจริงแบบจิตวิสัยและความจริงแบบชีววิทยาเข้าไปหลอมรวมกับ \u0026ldquo;ประวัติศาสตร์แห่งอนาคต\u0026rdquo;\nด้วยเหตุนี้ เรื่องเล่าเกี่ยวกับดีอุส จึงกลายเป็นอำนาจที่ทรงพลังที่สุดในโลกปัจจุบัน เพราะมีเทคโนโลยีชีวภาพกับเทคโนโลยีปัญญาประดิษฐ์หนุนหลัง คนที่จะอ่านอนาคตได้ เข้าใจอนาคตได้ คือคนที่เข้าใจความสำคัญของพลังของจิตวิสัยร่วม และสามารถถอดรหัสเรื่องแต่งเกี่ยวกับดีอุส ที่ให้ความหมายแก่ชนชั้นนำของโลกในปัจจุบันเท่านั้น การมองการณ์ไกลของผู้นำจึงต้องมาจากดวงจิตที่เปิดกว้าง และปราศจากอคติใดๆในการเฝ้ามองความเป็นไปของสรรพสิ่ง สายตาของผู้นำต้องไม่ขุ่นมัวเพราะถูกบดบังด้วยความมืดบอดของใจ และวิสัยทัศน์ของผู้นำต้องไม่ถูกจำกัดเฉพาะสิ่งที่เห็นอยู่เบื้องหน้า รวมทั้งไม่ถูกจำกัดเฉพาะสิ่งที่ตามองเห็นเท่านั้น เพราะมีหลายสิ่งหลายเรื่องเหมือนกันที่ผู้นำชั้นยอดต้องเห็นมัน รับรู้มัน และเข้าใจมันด้วยใจของเขาตรง ๆ โดยไม่ได้ผ่านกระบวนการคิด คุณสมบัติอันนี้ ยากแก่การเลียนแบบ เพราะมันเป็นคุณสมบัติ ติดตัวของคนบางคนที่เกิดมาเพื่อเป็นผู้นำในทางใดทางหนึ่งเท่านั้น\nในแง่ของความยั่งยืน ผู้นำทางความคิดย่อมเหนือกว่าผู้นำทางธุรกิจหรือผู้นำทางการเมือง แต่ผู้นำทางธรรมหรือผู้นำทางจิตวิญญาณที่แท้จริง ย่อมอยู่เหนือกาลเวลา จึงเหนือกว่าผู้นำประเภทอื่นๆทั้งปวง\n","date":1588978800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588978800,"objectID":"de6f8956de5bde122cd64e393d596f57","permalink":"https://example.com/book/deus/deus-4/","publishdate":"2020-05-09T00:00:00+01:00","relpermalink":"/book/deus/deus-4/","section":"book","summary":"โดย ดร. สุวินัย ภรณวลัย\n เซเปียนส์ให้ความหมายแก่โลกผ่านเรื่องเล่าที่เป็นเรื่องแต่ง แต่เซเปียนส์ ยินยอมแลกความหมาย กับอำนาจเพื่อเสพสุขในยุคทำให้ทันสมัย (modernization) เนื่องจากมีแต่เซเปียนส์เท่านั้น ที่สามารถใช้ภาษาเพื่อพิจารณาใคร่ครวญประสบการณ์ของพวกเขาในอดีตและการกระทำที่จะเกิดขึ้นในอนาคต\nการที่เซเปียนส์ครองโลกได้เพราะมีแต่พวกเราเท่านั้นที่สามารถร่วมมือกันอย่างยืดหยุ่นได้ในหมู่คนจำนวนมาก โดยตั้งอยู่บนความเชื่อของเราในเรื่องระเบียบแบบแผนตามจินตนาการ ทำให้สามารถสร้างระบบราชการ ที่เป็นการสร้างลำดับชั้นของมนุษย์ในการบริหาร การจัดการและการสั่งการ จนเกิดเครือข่ายความร่วมมือ ในหมู่คนหมู่มากที่มั่นคงขึ้นมาได้ \u0026hellip; ทั้งนี้เพราะพวกเขาเชื่อในเรื่องเล่าเดียวกัน จึงทำตามกฏเดียวกันได้ ทั้ง ๆ ที่ชุดของกฏเหล่านี้ดำรงอยู่แค่ในจินตนาการของเราเท่านั้น แต่เรากลับเชื่อว่ามันมีอยู่จริง และไม่อาจเอาชนะได้ดุจเดียวกับแรงโน้มถ่วง\n\u0026ldquo;ระเบียบแบบแผนตามจินตนาการ\u0026rdquo; เป็นความจริงแบบจิตวิสัยร่วม (intersubjective realities) ซึ่งเป็นความจริงที่ขึ้นอยู่กับการสื่อสารในคนหมู่มาก ซึ่งต่างไปจาก ความจริงแบบวัตถุวิสัย (objective realities) ที่ดำรงอยู่อย่างอิสระโดยไม่ขึ้นอยู่กับความเชื่อหรือความรู้สึกของเรา และก็ไม่เหมือน ความจริงแบบจิตวิสัย (subjective realities) ที่ขึ้นอยู่กับความเชื่อและความรู้สึกเฉพาะตน สิ่งที่สำคัญที่สุดในประวัติศาสตร์ ไม่ว่าจะเป็นเงิน หรือพระเจ้า(ศาสนา) หรือประเทศชาติ รวมทั้งคุณค่าแบบมนุษยนิยมของเรา ล้วนเป็นผลผลิตของความจริงแบบจิตวิสัยร่วมทั้งสิ้น \u0026hellip; มิหนำซ้ำทั้งหมดนี้ล้วนเป็นแค่เรื่องที่แต่งขึ้นมา เพื่อทำให้ชีวิตเรามีความหมาย\nความจริงก็คือ ชีวิตของคนส่วนใหญ่จะมีความหมายก็แต่เพียงภายในเครือข่ายของ \u0026ldquo;เรื่องเล่า\u0026rdquo; ที่พวกเขาบอกเล่าให้คนอื่นฟังเท่านั้น ความหมายเกิดขึ้นเมื่อคนจำนวนมากถักทอเครือข่ายร่วมของเรื่องเล่าเข้าด้วยกัน ผู้คนต่างตอกย้ำความเชื่อของกันและกัน จนเกิดเป็นวงจรหมุนรอบไปได้ตลอดกาล โดยที่แต่ละรอบของการยืนยันความเชื่อระหว่างกัน ก็จะกระชับสายใยของความหมายให้หนาแน่นมากขึ้นไปอีก จนผู้นั้นแทบไม่มีทางเลือกอื่นใดนอกจากต้องเชื่อตามสิ่งที่คนอื่น ๆ ทุกคนเชื่อ\nการเห็นอนิจจังของผู้มีปัญญารู้เท่าทันจิต คือการเฝ้าดูการปั่นสายใยแห่งความหมายและความเชื่อผ่านเรื่องเล่าตั้งแต่ในอดีต แลเห็นการคลี่คลายตัวออกของสายใยเหล่านี้ด้วยจิตตั้งมั่น ปล่อยวาง รู้เท่าทัน เพราะตระหนักได้ดีว่า สิ่งที่ดูราวกับสำคัญที่สุดในชีวิตของผู้คนในยุคหนึ่ง อาจเป็นความเหลวไหลไร้สาระอย่างที่สุดสำหรับผู้คนในอนาคตข้างหน้า เพราะไม่ว่าผู้คนจะถักทอสายใยแห่งความหมาย เชื่อเรื่องเล่าที่ถักทอขึ้นอย่างหมดหัวใจแค่ไหน สักวันหนึ่งไม่ช้าก็เร็ว สายใยเหล่านั้นย่อมคลี่คลายออกจนได้อยู่ดี","tags":null,"title":"ตอนที่ 4 - พลังของจิตวิสัยร่วม","type":"docs"},{"authors":null,"categories":null,"content":" หลังจากเห็นความสำเร็จของ Macintosh กับระบบปฏบัติการใหม่ที่เป็นกราฟฟิก Microsoft ก็ได้เริ่มพัฒนาระบบปฏิบัติการของตัวเองที่ใช้รูปแบบของกราฟฟิก และ ใช้การ input ข้อมูลด้วย เม้าส์ แบบเดียวกับที่ Macintosh ทำ ซึ่งระบบปฏิบัติการดังกล่าวถูกตั้งชื่อว่า “Windows” โดยเป็นการขยายความสามารถของ MS-DOS และให้ผู้ใช้งานใช้เม้าส์สั่งงานผ่านภาพกราฟฟิกที่ปรากฏบนหน้าจอ ซึ่ง Windows มาจากการที่มีหน้าต่างหลาย ๆ หน้าต่าง แต่ละหน้าต่างจะใช้กับโปรแกรมที่แตกต่างกันออกไปนั่นเอง\nเป้าหมายใหญ่ของ Microsoft ก็คือการสร้างมาตรฐานแบบเปิด และนำการสั่งงานด้วยภาพกราฟฟิกมาใช้ในคอมพิวเตอร์ทุกเครื่อง ที่ใช้ระบบปฏิบัติการ MS-DOS นั่นเอง ที่ขณะนั้นได้แพร่หลายไปทั่วโลกเป็นที่เรียบร้อยแล้ว ซึ่งเนื่องจากการที่ตอนนั้น มีผู้ผลิตคอมพิวเตอร์กว่าพันรายทั่วโลก ทำให้ลูกค้าทั่วไปที่จะซื้อคอมพิวเตอร์ส่วนบุคคล มีตัวเลือกมากมาย แต่ Microsoft นั้นเสนอความสามารถในการทำงานร่วมกันได้กับทุกผู้ผลิต\nและเหล่าผู้ผลิต Software ที่เกี่ยวข้องที่ตอนนั้นกลายเป็นตลาดขนาดใหญ่มาก ๆ นับแสนราย แทบจะไม่ต้องกังวลว่า Software ของตนจะนำไปเล่นในเครื่องรุ่นใด แบบใด เพราะ Windows ของ Microsoft นั้นเปิดรับให้กับผู้ผลิตทุกรายนั่นเอง แม้ตัว Gates เองจะมองว่าความสำเร็จของ Windows นั้นอาจจะต้องใช้เวลาอีกนาน ใน Windows เวอร์ชั่นแรก ๆ นั้น ต้องใช้กับเครื่องที่มีหน่วยความจำสูง ซึ่งมีราคาแพง และ ยังต้องใช้งานร่วมกับโปรแกรมหลายตัว\nหลังจากที่ทำการปล่อย Windows 1.0 ซึ่งเป็นระบบปฏิบัติการแบบ 16 bit ที่มีกราฟฟิก ตัวแรกของ Microsoft โดยออกวางขายในวันที่ 20 พฤศจิกายน 1985 วางขายในรูปแบบของ Floppy Disk โดยผู้ใช้ต้องลง DOS ก่อน แล้วถึงลง Windows 1.0 ตามอีกที สามารถรันโปรแกรมของ MS-DOS ได้แบบ Multitasking โปรแกรมที่มาพร้อมกับระบบปฏิบัติการ Windows 1.0 เช่น Calculator, Calendar, Clock, Notepad, Paint เป็นต้น\nWindows 1.0 ที่มาพร้อมโปรแกรมมากมาย ซึ่งหลังจากปล่อย Windows ออกมานั้น ก็มีคำถามเกิดขึ้นมากมายกับระบบปฏิบัติการใหม่อย่าง Windows ในเมื่อ MS-DOS มันใช้งานได้ดีอยู่แล้ว ทำไมต้องมีโปรแกรมมาเขียนซ้อนลงไปบน MS-DOS แล้วใครจะเสียเวลาทำงานกับระบบกราฟฟิก ซึ่งกระแสต่อต้านเหล่านี้มีอยู่หลายปี กว่า Windows จะประสบความสำเร็จ\nซึ่งความสำเร็จของ Windows นั้นมีวิวัฒนาการมาอย่างต่อเนื่อง โดย Microsoft พยายามเติมความสามารถใหม่ ๆ เข้าไปอย่างต่อเนื่องให้กับ Windows เพื่อลบคำสบประมาทเหล่านี้ และที่สำคัญยังเปิดให้เหล่าผู้ผลิต Software ทั่วโลก ทุกรายสามารถเขียนโปรแกรมเพื่อทำงานบน Windows โดยไม่จำเป็นต้องแจ้งหรือขออนุญาติจาก Microsoft ซึ่งแตกต่างจากคู่แข่งอย่าง Macintosh ของ Apple ที่เป็นระบบปิด Gates นั้นเปิดเสรีเต็มที่ในด้านการพัฒนา Software เพื่อให้ทำงานกับ Windows มันเป็นการเร่งการพัฒนาอุตสาหกรรม Software ให้ยกระดับจากหน้าจอ Terminal แบบเดิม ๆ ให้กลายมาเป็นระบบกราฟฟิกทั้งหมด ซึ่งแม้จะเป็นโปรแกรมที่มาแข่งกับ Microsoft เอง Gates ก็ไม่เคยโกรธเคืองแต่อย่างใด เขาเพียงต้องการให้อุตสาหกรรม Software ไปในทิศทางที่เขาคิดไว้เท่านั้น\nMicrosoft นั้นไม่เคยหยุดพัฒนาเพราะรู้ว่าคู่แข่งแต่ละรายนั้นไม่ธรรมดา ไม่ว่าจะเป็น Macintosh , Unix หรือ OS/2 ของ IBM เองก็ตาม Microsoft จะปรับปรุงให้ Windows รุ่นใหม่ ๆ ของเขาดึงดูดใจต่อผู้บริโภคมากที่สุด ทั้งในด้านของราคาและประโยชน์การใช้สอยเองก็ตามที และในปี 1993 Microsoft ได้ปล่อย Windows 3.11 ออกสู่ตลาด ซึ่งเป็นการต่อยอดมาจาก Windows 3.1 โดยเสริมคุณสมบัติระบบ network และการสร้าง Protocol TCP/IP ที่ช่วยทำให้เครื่อง PC สามารถใช้งานได้ในระบบ Network และคอมพิวเตอร์แบบ Home user สามารถติดต่อผ่านเครือข่าย Internet นับเป็นการเปิดโลกใหม่ให้กับ PC ในแบบที่ไม่มี Windows ตัวไหนทำได้มาก่อนนั่นเอง\nBill Gates กับการในการผลักดัน Windows ให้เป็นเบอร์ 1 ได้สำเร็จ ซึ่งสุดท้ายด้วยการพัฒนาอย่างต่อเนื่องจนสามารถครองใจผู้บริโภคทั่วโลกได้สำเร็จ ก็ทำให้ Windows นั้นกลายเป็นระบบปฏิบัติการหลักที่มีผู้ใช้งานกันทั่วโลก กลายเป็นมาตรฐานของคอมพิวเตอร์ส่วนบุคคลในขณะนั้นได้สำเร็จ แต่ความท้าทายใหม่ที่กำลังจะเกิดขึ้นกับ Gates และ Microsoft คือการเข้ามาของ Internet ซึ่งแน่นอนว่าเป็นความท้าทายครั้งสำคัญของ Gates ที่จะทำให้โลกเห็นว่า Windows เป็นเครื่องมือที่ดีที่สุดในการเข้าสู่โลก Internet จะเกิดอะไรขึ้นต่อกับ Microsoft เมื่อเทคโนโลยีกำลังจะหมุนเปลี่ยนผ่านไปยังโลกของ Internet โปรดติดตามตอนต่อไปครับผม\n","date":1589065200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589065200,"objectID":"c62ca27c978af4889a850c8b71adfffe","permalink":"https://example.com/book/gates/bill-gate-5/","publishdate":"2020-05-10T00:00:00+01:00","relpermalink":"/book/gates/bill-gate-5/","section":"book","summary":"หลังจากเห็นความสำเร็จของ Macintosh กับระบบปฏบัติการใหม่ที่เป็นกราฟฟิก Microsoft ก็ได้เริ่มพัฒนาระบบปฏิบัติการของตัวเองที่ใช้รูปแบบของกราฟฟิก และ ใช้การ input ข้อมูลด้วย เม้าส์ แบบเดียวกับที่ Macintosh ทำ ซึ่งระบบปฏิบัติการดังกล่าวถูกตั้งชื่อว่า “Windows” โดยเป็นการขยายความสามารถของ MS-DOS และให้ผู้ใช้งานใช้เม้าส์สั่งงานผ่านภาพกราฟฟิกที่ปรากฏบนหน้าจอ ซึ่ง Windows มาจากการที่มีหน้าต่างหลาย ๆ หน้าต่าง แต่ละหน้าต่างจะใช้กับโปรแกรมที่แตกต่างกันออกไปนั่นเอง\nเป้าหมายใหญ่ของ Microsoft ก็คือการสร้างมาตรฐานแบบเปิด และนำการสั่งงานด้วยภาพกราฟฟิกมาใช้ในคอมพิวเตอร์ทุกเครื่อง ที่ใช้ระบบปฏิบัติการ MS-DOS นั่นเอง ที่ขณะนั้นได้แพร่หลายไปทั่วโลกเป็นที่เรียบร้อยแล้ว ซึ่งเนื่องจากการที่ตอนนั้น มีผู้ผลิตคอมพิวเตอร์กว่าพันรายทั่วโลก ทำให้ลูกค้าทั่วไปที่จะซื้อคอมพิวเตอร์ส่วนบุคคล มีตัวเลือกมากมาย แต่ Microsoft นั้นเสนอความสามารถในการทำงานร่วมกันได้กับทุกผู้ผลิต\nและเหล่าผู้ผลิต Software ที่เกี่ยวข้องที่ตอนนั้นกลายเป็นตลาดขนาดใหญ่มาก ๆ นับแสนราย แทบจะไม่ต้องกังวลว่า Software ของตนจะนำไปเล่นในเครื่องรุ่นใด แบบใด เพราะ Windows ของ Microsoft นั้นเปิดรับให้กับผู้ผลิตทุกรายนั่นเอง แม้ตัว Gates เองจะมองว่าความสำเร็จของ Windows นั้นอาจจะต้องใช้เวลาอีกนาน ใน Windows เวอร์ชั่นแรก ๆ นั้น ต้องใช้กับเครื่องที่มีหน่วยความจำสูง ซึ่งมีราคาแพง และ ยังต้องใช้งานร่วมกับโปรแกรมหลายตัว\nหลังจากที่ทำการปล่อย Windows 1.","tags":null,"title":"ตอนที่ 5 - Windows​ to the World","type":"docs"},{"authors":null,"categories":null,"content":"   การหลอกลวงครั้งยิ่งใหญ่ที่สุดในประวัติศาสตร์ ตอนนี้เรามาถึงยุคสมัยของ Agricultural Revolution หรือการที่มนุษย์เริ่มปลูกพืชผักแทนการเก็บอาหารป่า และนำสัตว์มาเลี้ยงเพื่อเป็นอาหารแทนการออกล่า ยุคแห่งการปฏิวัติเกษตรกรรมนี้เกิดขึ้นเมื่อประมาณ 12,000 ปีที่แล้ว โดยพื้นที่ที่มีการทำเกษตรกรรมครั้งแรกเกิดขึ้นใน Hilly Flanks* ซึ่งอยู่บริเวณริมแม่น้ำไทกริสระหว่างประเทศตุรกีและอิหร่านในปัจจุบัน พืชชนิดแรกๆ ที่มนุษย์นำมาเพาะปลูกคือข้าวสาลี (wheat) การเริ่มทำไร่ไถนาและเลี้ยงสัตว์นี้ทำให้มนุษย์เราสามารถผลิตอาหารได้มากกว่าเดิมหลายเท่า\nในตอนแรกที่เหล่า Sapiens เริ่มค้นพบวิธีการทำไร่ พวกเขาคงคิดว่าอีกหน่อยชีวิตคงสบายแล้ว เพราะจะมีอาหารกินตลอดปี ไม่ต้องมาคอยลุ้นวันต่อวันว่าจะล่าสัตว์ได้มั้ยหรือจะเป็นผู้ถูกล่าเองหรือเปล่า แต่สิ่งที่เกิดขึ้นก็คือ การหันมาทำไร่ไถนา ทำให้คนยุคนี้มีความเป็นอยู่แย่กว่าคนยุคล่าสัตว์เสียอีก!\n ชีวิตของคนยุคชาวนาต้องทำงานหนักกว่าคนยุคล่าสัตว์ สมัยที่ต้องล่าสัตว์นั้น แค่ออกไปล่าซักสี่ห้าชั่วโมง ก็ได้กลับมาที่เผ่าแล้ว แต่คนยุคชาวนาต้องตากแดดตากลมพรวนดินรดน้ำ ไหนจะต้องคอยระวังวัชพืชและสัตว์อื่นๆ มาทำลายพืชผล\n เมื่อมีไร่นาที่ต้องประคบประหงม จึงเกิด “ความเป็นเจ้าข้าวเจ้าของ” ขึ้นมา เริ่มมีการสร้างรั้วล้อมสวน เริ่มมีการทำแนวกั้นรอบหมู่บ้าน เริ่มมีการตั้งการ์ดเพื่อคอยปกป้องไม่ให้คนเผ่าอื่นมาลักลอบอาหารไป การรบกันระหว่างเผ่าเพื่อแย่งชิง “ทรัพยากร” ของเหล่า Sapiens จึงเริ่มมีขึ้นในสมัยนี้\n คนยุคชาวนาจะสุขภาพไม่สมบูรณ์เท่าไหร่ เพราะได้กินแต่แป้งตลอดทั้งปี ขณะที่คนยุคล่าสัตว์นั้น ได้กินอาหารที่หลากหลายกว่ามาก ไม่ว่าจะเป็นโปรตีนจากสัตว์ที่ล่ามาได้หรือวิตามินที่ได้จากการเก็บผักและผลไม้ในป่า\n แหล่งอาหารของชาวนานั้นเปราะบางมาก ถ้าปีไหนสภาพอากาศไม่เป็นใจจนทำให้พืชผักที่ปลูกไว้นั้นไม่ออกดอกออกผล นั่นหมายถึงหายนะและการอดตายของคนทั้งหมู่บ้าน\n มีความเสี่ยงสูงที่จะเกิดโรคระบาด เพราะชุมชนชาวนานั้นมีสัตว์เลี้ยง (ซึ่งเป็นพาหะนำโรค) และการลงหลักปักฐานทำให้หมู่บ้านนั้นๆ เป็นแหล่งเพาะพันธุ์เชื้อโรคชั้นดี\n  ครับ สิ่งที่เรียกว่า “ความเจริญ” ของสังคมมนุษย์ กลับทำให้คุณภาพชีวิตแต่ละคนย่ำแย่ลง ผู้เขียนหนังสือเล่มนี้ จึงเรียกการปฏิวัติเกษตรกรรมนี้ว่าเป็นการหลอกลวงครั้งยิ่งใหญ่ที่สุดในประวัติศาสตร์ (History’s Biggest Fraud) จริงๆ แล้ว “การหลอกลวง” ในลักษณะอย่างนี้ก็มีให้เห็นมาทุกยุคทุกสมัยนะครับ เมื่อซักสี่สิบปีที่แล้ว ที่เราเริ่มมีคอมพิวเตอร์และหุ่นยนต์ เราก็จินตนาการกันว่า อีกหน่อยมนุษย์เราคงไม่ต้องทำงานกัน แล้วเพราะคอมพิวเตอร์จะทำแทนให้หมด แต่สิ่งที่เกิดขึ้นจริงก็คือ เราทำงานมากกว่าเดิมเสียอีกเพราะมันตามติดเราไปทุกที่\nหรือความเชื่อที่ว่า ให้ตั้งใจเรียน เพื่อจะได้เข้ามหาวิทยาลัยดีๆ ออกมาจะได้ไปอยู่บริษัทใหญ่โต จงขยันทำงานเก็บเงิน จะได้เออร์ลี่รีไทร์แล้วได้ทำอะไรที่อยากทำ แต่พอเอาเข้าจริงๆ พอเรามีเงินมากขึ้น ความต้องการของเราก็มากขึ้น เริ่มแบกรับภาระหนักขึ้น ไหนจะต้องส่งลูกเข้าโรงเรียนอินเตอร์ ไหนจะต้องผ่อนบ้านหลังใหญ่ รถสองคัน ฯลฯ ความฝันที่จะได้เออร์ลี่รีไทร์เลยกระเถิบออกไปเรื่อยๆ “การหลอกลวง” ที่ว่านี้ก็ไม่ได้เกิดจากใครหรอกนะครับ เพียงแต่มนุษย์ไม่สามารถจะมองเห็นอนาคตได้อย่างครบถ้วนว่าการเปลี่ยนแปลงในวันนี้จะส่งผลกระทบอะไรบ้าง ตอนที่คนยุคชาวนาเริ่มหันมาทำไร่ เขาก็คงเชื่อจริงๆ ว่ามันจะทำให้ชีวิตของเขาสบายขึ้น แต่เขาคงลืมคิดไปว่า เมื่อมีอาหารที่อุดมสมบูรณ์ขึ้น จะมีผลกระทบอะไรตามมาบ้าง\nสมัยที่เรายังอยู่ในยุคล่าสัตว์ การมีลูกเล็กในขณะที่ต้องย้ายถิ่นฐานไปเรื่อยๆ นั้นเป็นเรื่องยากลำบาก ผู้หญิงจึงมักจะรอให้ลูกตัวเองโตระดับหนึ่งก่อนจึงจะยอมปล่อยให้มีลูกคนถัดไป แต่เมื่อถึงยุคชาวนาที่ลงหลักปักฐานแล้ว การมีลูกหัวปีท้ายปีเป็นสิ่งที่ทำได้ จำนวนคนในเผ่าจึงเพิ่มขึ้นอย่างรวดเร็ว ทำให้ต้องผลิตอาหารมากขึ้น ต้องทำงานกันหนักขึ้น ต้องใช้กำลังคนมากขึ้น ขนาดของหมู่บ้านจึงใหญ่ขึ้นเรื่อยๆ จนกลายเป็นเมืองและอาณาจักรไปในที่สุด อีกคำถามหนึ่งก็คือ ในเมื่อชีวิตความเป็นอยู่ของคนยุคชาวนานั้นแย่กว่าเดิม ทำไมพวกเขาถึงไม่กลับไปใช้วิถีชีวิตแบบเก่า คำตอบก็คือเขาทำไม่ได้ เพราะการเปลี่ยนแปลงจากสังคมล่าสัตว์ไปสู่สังคมเกษตรกรรมนี้ไม่ได้เกิดขึ้นชั่วข้ามคืน แต่เกิดขึ้นผ่านคนนับร้อยเจนเนอเรชั่น พอมาถึงรุ่นที่ร้อยเขาก็ไม่มีทางรู้แล้วว่ารุ่นที่หนึ่งนี่เคยอยู่กันอย่างไร และถึงจะรู้ก็ไม่มีทักษะที่จะกลับไปอยู่อย่างนั้นอีกต่อไปแล้ว\nโดยธรรมชาติของวิวัฒนาการหรือ Evolution นั้น มันไม่แคร์หรอกว่าในระดับปัจเจกจะมีความทุกข์ทนหรือความลำบากแค่ไหน สิ่งเดียวที่มันแคร์ก็คือการส่งต่อยีนที่แข็งแรงที่สุดและการเพิ่มจำนวนของเผ่าพันธุ์ให้ได้มากที่สุด เพราะถ้ามันทำไม่ได้ สัตว์ชนิดนั้นก็จะสูญพันธุ์และวิวัฒนาการของเผ่าพันธุ์นี้ก็จะถือเป็น “ความล้มเหลว” ดังนั้นแม้ว่าแต่ละคนจะอยู่อย่างลำบากมากยิ่งขึ้นในยุคแห่งการปฏิวัติเกษตรกรรม แต่สิ่งหนึ่งที่ปฏิเสธไม่ได้ก็คือมันได้ทำให้จำนวนประชากรของ Sapiens เพิ่มขึ้นหลายเท่าทวีคูณ ซึ่งเป็น “ความสำเร็จ” ในเชิงวิวัฒนาการ\nเหยื่อของความสำเร็จ อย่าลืมว่านอกจากเราจะหันมาทำไร่ทำนาแล้ว ยุคแห่งการปฏิวัติเกษตรกรรม คือยุคที่เราเริ่มนำสัตว์มาเลี้ยงเพื่อใช้งานหรือเป็นอาหารด้วย และเมื่อจำนวนคนมากขึ้น จำนวนสัตว์เหล่านี้ก็มากขึ้นเป็นเงาตามตัว เมื่อหนึ่งหมื่นปีที่แล้ว มีแกะ หมู วัว และไก่อยู่แค่ไม่กี่ล้านตัว แต่ในตอนนี้ โลกมีแกะหนึ่งพันล้านตัว หมูหนึ่งพันล้านตัว วัวมากกว่าหนึ่งพันล้านตัว และไก่สองหมื่นห้าพันล้านตัว\nถ้ามองในแง่จำนวนประชากรแล้ว สัตว์สี่อย่างนี้ถือเป็นสัตว์ที่ประสบความสำเร็จอย่างสูงในการแพร่กระจายเผ่าพันธุ์ไปทั่วโลก แต่แม้จะมีจำนวนประชากรมหาศาล แต่ความเป็นอยู่ของมันกลับน่าสงสารเป็นอย่างยิ่ง คนในประเทศนิวกินี (New Guinea)่ จะถือว่าการมีหมูในครอบครองคือความมั่งคั่ง เพื่อกันไม่ให้หมูหนีไปไหน เจ้าของหมู จึงมักจะเฉือนจมูกหมูของตัวเองเพื่อที่หมูมันจะได้ดมกลิ่นหาทางไม่ได้ ส่วนบางเผ่า ก็ใช้วิธีควักลูกตาออกมาเพื่อให้หมูต้องพึ่งพาเจ้านายของมันไปตลอดชีวิต\nอุตสาหกรรมนมวัวก็ทำให้ชีวิตแม่วัวมีชะตากรรมที่รันทดพอกัน แม่วัวจะมีนมก็ต่อเมื่อมันมีลูกเท่านั้น มันจึงถูกฉีดยาเพื่อทำให้ท้อง พอมันคลอดลูกแล้วมันก็จะถูกพรากลูกไปทันที แล้วพวกเราก็จะรีดนมจากแม่วัวจนเกลี้ยง จากนั้นแม่วัวก็จะถูกทำให้ท้องอีกภายในเวลา 60-120 วัน แล้ววงจรนี้ก็จะวนไปเรื่อยๆ จนเมื่ออายุครบห้าปีแล้วแม่วัวก็จะถูกฆ่าทิ้ง\nมาดูชีวิตลูกวัวกันบ้าง – ลูกวัวตัวเมียนั้นจะถูกเลี้ยงให้เป็นโคนม ส่วนลูกวัวที่เป็นตัวผู้ จะถูกเลี้ยงเพื่อให้เป็นสเต๊กจานเด็ด โดยตอนที่ลูกวัวตัวผู้เกิดมา มันจะถูกจับไปอยู่ในคอกที่มีขนาดเท่ากับตัวมันพอดี ตลอดช่วงเวลาที่มันอยู่ในคอกมันจะไม่ได้เดินไปไหนหรือเล่นกับลูกวัวตัวอื่นเลย เพราะถ้าปล่อยให้มันได้ออกกำลัง กล้ามเนื้อของมันจะแข็งแรงและทำให้เนื้อเหนียวกินไม่อร่อย โอกาสเดียวที่มันจะได้เดิน และได้เล่นกับวัวตัวอื่นก็คือตอนที่มันถูกต้อนขึ้นรถไปโรงฆ่าสัตว์ตอนที่มันอายุครบสี่เดือน\nแม้วัวจะเป็นหนึ่งในเผ่าพันธุ์ที่ประสบความสำเร็จที่สุดในเชิงปริมาณ แต่ถ้ามองในเชิงคุณภาพชีวิตแล้ว ถือว่ามันเป็นเผ่าพันธุ์ที่ซวยที่สุดเผ่าพันธุ์หนึ่งเลยทีเดียว นิทานเรื่องนี้สอนให้รู้ว่า การมองความสำเร็จเชิงปริมาณอย่างเดียวนั้น ให้ภาพที่ไม่ครบถ้วน เราต้องดูด้วยว่า สุดท้ายแล้วความสำเร็จนั้นมันได้สร้างผลกระทบอะไรให้กับชีวิตของแต่ละคน (หรือแต่ละตัว) บ้าง ในบทต่อไปเราจะเห็นภาพที่ชัดขึ้นว่า “การพัฒนา” ของสังคมมนุษย์ในยุคต่อๆ มาได้นำพามาซึ่งความเจ็บปวดในระดับปัจเจกอย่างไรอีกบ้าง\n ที่มา: https://anontawong.com.\n ","date":1588978800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588978800,"objectID":"6f6bee06348d57b31ab9fe140633ef3d","permalink":"https://example.com/book/sapiens/sapiens-4/","publishdate":"2020-05-09T00:00:00+01:00","relpermalink":"/book/sapiens/sapiens-4/","section":"book","summary":"การหลอกลวงครั้งยิ่งใหญ่ที่สุดในประวัติศาสตร์ ตอนนี้เรามาถึงยุคสมัยของ Agricultural Revolution หรือการที่มนุษย์เริ่มปลูกพืชผักแทนการเก็บอาหารป่า และนำสัตว์มาเลี้ยงเพื่อเป็นอาหารแทนการออกล่า ยุคแห่งการปฏิวัติเกษตรกรรมนี้เกิดขึ้นเมื่อประมาณ 12,000 ปีที่แล้ว โดยพื้นที่ที่มีการทำเกษตรกรรมครั้งแรกเกิดขึ้นใน Hilly Flanks* ซึ่งอยู่บริเวณริมแม่น้ำไทกริสระหว่างประเทศตุรกีและอิหร่านในปัจจุบัน พืชชนิดแรกๆ ที่มนุษย์นำมาเพาะปลูกคือข้าวสาลี (wheat) การเริ่มทำไร่ไถนาและเลี้ยงสัตว์นี้ทำให้มนุษย์เราสามารถผลิตอาหารได้มากกว่าเดิมหลายเท่า\nในตอนแรกที่เหล่า Sapiens เริ่มค้นพบวิธีการทำไร่ พวกเขาคงคิดว่าอีกหน่อยชีวิตคงสบายแล้ว เพราะจะมีอาหารกินตลอดปี ไม่ต้องมาคอยลุ้นวันต่อวันว่าจะล่าสัตว์ได้มั้ยหรือจะเป็นผู้ถูกล่าเองหรือเปล่า แต่สิ่งที่เกิดขึ้นก็คือ การหันมาทำไร่ไถนา ทำให้คนยุคนี้มีความเป็นอยู่แย่กว่าคนยุคล่าสัตว์เสียอีก!\n ชีวิตของคนยุคชาวนาต้องทำงานหนักกว่าคนยุคล่าสัตว์ สมัยที่ต้องล่าสัตว์นั้น แค่ออกไปล่าซักสี่ห้าชั่วโมง ก็ได้กลับมาที่เผ่าแล้ว แต่คนยุคชาวนาต้องตากแดดตากลมพรวนดินรดน้ำ ไหนจะต้องคอยระวังวัชพืชและสัตว์อื่นๆ มาทำลายพืชผล\n เมื่อมีไร่นาที่ต้องประคบประหงม จึงเกิด “ความเป็นเจ้าข้าวเจ้าของ” ขึ้นมา เริ่มมีการสร้างรั้วล้อมสวน เริ่มมีการทำแนวกั้นรอบหมู่บ้าน เริ่มมีการตั้งการ์ดเพื่อคอยปกป้องไม่ให้คนเผ่าอื่นมาลักลอบอาหารไป การรบกันระหว่างเผ่าเพื่อแย่งชิง “ทรัพยากร” ของเหล่า Sapiens จึงเริ่มมีขึ้นในสมัยนี้\n คนยุคชาวนาจะสุขภาพไม่สมบูรณ์เท่าไหร่ เพราะได้กินแต่แป้งตลอดทั้งปี ขณะที่คนยุคล่าสัตว์นั้น ได้กินอาหารที่หลากหลายกว่ามาก ไม่ว่าจะเป็นโปรตีนจากสัตว์ที่ล่ามาได้หรือวิตามินที่ได้จากการเก็บผักและผลไม้ในป่า\n แหล่งอาหารของชาวนานั้นเปราะบางมาก ถ้าปีไหนสภาพอากาศไม่เป็นใจจนทำให้พืชผักที่ปลูกไว้นั้นไม่ออกดอกออกผล นั่นหมายถึงหายนะและการอดตายของคนทั้งหมู่บ้าน\n มีความเสี่ยงสูงที่จะเกิดโรคระบาด เพราะชุมชนชาวนานั้นมีสัตว์เลี้ยง (ซึ่งเป็นพาหะนำโรค) และการลงหลักปักฐานทำให้หมู่บ้านนั้นๆ เป็นแหล่งเพาะพันธุ์เชื้อโรคชั้นดี\n  ครับ สิ่งที่เรียกว่า “ความเจริญ” ของสังคมมนุษย์ กลับทำให้คุณภาพชีวิตแต่ละคนย่ำแย่ลง ผู้เขียนหนังสือเล่มนี้ จึงเรียกการปฏิวัติเกษตรกรรมนี้ว่าเป็นการหลอกลวงครั้งยิ่งใหญ่ที่สุดในประวัติศาสตร์ (History’s Biggest Fraud) จริงๆ แล้ว “การหลอกลวง” ในลักษณะอย่างนี้ก็มีให้เห็นมาทุกยุคทุกสมัยนะครับ เมื่อซักสี่สิบปีที่แล้ว ที่เราเริ่มมีคอมพิวเตอร์และหุ่นยนต์ เราก็จินตนาการกันว่า อีกหน่อยมนุษย์เราคงไม่ต้องทำงานกัน แล้วเพราะคอมพิวเตอร์จะทำแทนให้หมด แต่สิ่งที่เกิดขึ้นจริงก็คือ เราทำงานมากกว่าเดิมเสียอีกเพราะมันตามติดเราไปทุกที่","tags":null,"title":"ตอนที่ 4 - การหลอกลวงครั้งยิ่งใหญ่","type":"docs"},{"authors":null,"categories":null,"content":" โดย ดร. สุวินัย ภรณวลัย\n หากความทันสมัยเริ่มต้นพร้อมๆกับการปฏิวัติวิทยาศาสตร์ที่เริ่มขึ้นเมื่อ 500 ปีก่อน ความทันสมัยคือข้อตกลงอย่างหนึ่ง พวกเราทุกคนต้องลงนามข้อตกลงนี้ตั้งแต่เกิดและจะมีผลบังคับชีวิตเราจวบจนวันตาย ข้อตกลงเรื่องความทันสมัยนี้ สรุปได้อย่างรวบยอดว่า \u0026ldquo;เซเปียนส์ตกลงจะละทิ้งความหมายเพื่อแลกเปลี่ยนกับอำนาจ\u0026rdquo; เพราะในอดีตก่อนเข้าสู่ความทันสมัย มนุษย์ต้องยึดมั่นถือมั่นในเรื่องความหมาย (ของพระผู้เป็นเจ้าที่กำหนดชีวิตเราภายใต้แผนการจักรวาลอันยิ่งใหญ่) เพื่อเผชิญกับความทุกข์ยาก จากความอดอยาก โรคระบาด และสงคราม อย่างมีความหวังในชีวิตหลังความตายได้ พวกเขาต้องสร้างสวรรค์ กับนรกผ่านเรื่องเล่า หรือเรื่องแต่งขึ้นมา เป็นความเชื่อความศรัทธาให้ยึดถือเพื่อเผชิญความตาย และความยากลำบากในชีวิตได้อย่างไม่ไหวหวั่น และเปี่ยมความหมาย แต่ความทันสมัย ได้ปฏิเสธความเชื่อแต่โบราณข้างต้นของเซเปียนส์อย่างสิ้นเชิง ชีวิตกลายเป็นไม่มีบทละคร ไม่มีคนเขียนบท ไม่มีผู้กำกับการแสดง และไม่มีผู้อำนวยการสร้างอย่างพระผู้เป็นเจ้า ชีวิตจึงไม่มีความหมายใด ๆ เลยตามความเข้าใจทางวิทยาศาสตร์ที่ดีที่สุด ที่เซเปียนส์มีในตอนนี้ เพราะแม้แต่จักรวาลเอง ก็ยังเป็นกระบวนการที่มืดบอดและไม่มีจุดมุ่งหมาย\nในสายตาของพวกทันสมัยนิยม สิ่งต่าง ๆ แค่เกิดขึ้น เรื่องแล้วเรื่องเล่า มีแต่เพียงสาเหตุ ไม่มีเป้าหมาย มนุษย์จึงสามารถทำอะไรก็ได้ ตามที่กิเลสกระตุ้นให้อยากทำถ้าหาหนทางทำได้ มนุษย์ไม่ได้ถูกกักขังจากอะไร นอกจากความโง่เขลาของตัวเอง ความอดอยาก โรคระบาด และสงครามไม่มีความหมายกับจักรวาล แต่มนุษย์สามารถกำจัดมันได้ ไม่มีสวรรค์รอคอยเราอยู่หลังความตาย แต่คนเราสามารถเสพสุขด้วยการสร้างสวรรค์เอาไว้บนโลกตอนนี้ ตรงนี้ และใช้ชีวิตอยู่ที่นี่ไปให้ยืดยาวที่สุดเท่าที่จะยืดได้ ขอเพียงแค่คนเรา สามารถจัดการเอาชนะความยุ่งยากทางเทคนิคบางอย่างด้วยวิทยาศาสตร์ได้เท่านั้น\nนี่คือข้อตกลงแห่งความทันสมัยที่เย้ายวนใจยิ่งสำหรับพวกเซเปียนส์ เพราะความทันสมัย สามารถมอบอำนาจไร้ขีดจำกัด ให้แก่คนเราในระยะที่แทบจะเอื้อมถึงได้เรื่อย ๆ มาโดยตลอดนั่นเอง โดยที่ข้างใต้เราคือ ห้วงเหวแห่งความว่างกลวงที่กำลังอ้าปากกว้างรอ ให้พวกเราพลัดตกลงไปได้ทุกเมื่อ ชีวิตที่\u0026rdquo;ทันสมัย\u0026rdquo;ของพวกเซเปียนส์ จึงเป็นการไล่ล่าอำนาจทางโลก หรืออำนาจเหนือวัตถุอย่างไม่หยุดหย่อน ภายในเอกภพที่ปราศจากความหมายหรือหาความหมายไม่เจอ\nการวิจัย ประดิษฐ์ ค้นพบ และเติบโตทางเศรษฐกิจอย่างไม่หยุดยั้งคือหัวใจของความทันสมัย โดยที่ความทุกข์กลับดำรงอยู่ ในยุคสมัยใหม่มากยิ่งกว่า ซับซ้อนยิ่งกว่ายุคก่อนสมัยใหม่อย่างเทียบกันไม่ได้เลย ทุนนิยม คือสิ่งประดิษฐ์ขั้นสุดยอดที่เป็นผลพวงของข้อตกลงเรื่องความทันสมัย ของพวกเซเปียนส์ ในขณะที่ศาสนาแบบเอกเทวนิยม ให้สัญญาแก่ผู้คนด้วยวิมานในอากาศ แต่ทุนนิยมกลับสัญญาด้วยปาฏิหารย์ของเทคโนโลยีบนโลกนี้ในเวลานี้ แถมยังเอามาส่งถึงที่ด้วย\nเทวทัณฑ์ (天罰) อันแท้จริงเพียงหนึ่งเดียวของทุนนิยมและข้อตกลงเรื่องความทันสมัย คือการล่มสลายของระบบนิเวศ รวมทั้งการล่มสลายของอารยธรรมทางวัตถุ ในปัจจุบันของพวกเซเปียนส์ผ่านการล่มสลายของชีวมณฑล (biosphere) มิหนำซ้ำเทวทัณฑ์นี้กำลังเริ่มขึ้นแล้ว หลังจากที่พวกเซเปียนส์ จมจ่อมหมกมุ่นอยู่กับการเสพสุขบนโลกใบนี้ แบบล้างผลาญในช่วงร้อยกว่าปีที่ผ่านมานี้ โครงการดีอุสเพื่ออัปเกรดพวกเซเปียนส์ที่เป็นชนชั้นนำทั่วโลกที่มีอำนาจ คือ หนึ่งในโครงการเอาตัวรอดจากเทวทัณฑ์ ที่กำลังเกิดขึ้นหลังจากนี้ในอนาคตอันใกล้นั่นเอง โครงการดีอุสที่จัดอยู่ในความเชื่อเรื่อง \u0026ldquo;เรือโนอาห์ไฮเทค\u0026rdquo; ของชนชั้นนำส่วนน้อยที่ครองโลกตะวันตก ในปัจจุบัน จึงเป็นหนึ่งในภัยคุกคามที่ยิ่งใหญ่ที่สุดของมนุษยชาติและระบบนิเวศทั้งปวงในปัจจุบัน เพราะคนพวกนี้เต็มใจ ให้คนค่อนโลกล้มตายไปกับหายนะจากการล่มสลายของระบบนิเวศ และสงครามโลกครั้งสุดท้ายในอนาคตอันใกล้ ขอเพียงพวกตนสามารถขึ้นเรือโนอาห์ไฮเทคได้ทันเวลาเท่านั้นก็พอ\nอย่ามัวแต่โทษก่นด่ารัฐบาลหาแพะกันอยู่เลย ความทุกข์ยากที่ผู้คนประสบอยู่ตอนนี้ มันเป็น \u0026ldquo;ข้อตกลงของความทันสมัย\u0026rdquo; ที่พวกเราทุกคนต้องเซ็นยินยอมนับตั้งแ ต่วินาทีแรกที่เราเกิดมาแล้วต่างหาก ความทันสมัยมันกำลังทำงานอย่างหนักเพื่อให้แน่ใจว่า ต้องไม่มีมนุษย์คนไหนแม้เพียงคนเดียว หรือหมู่คณะเดียวจะพยายามเลิกการแข่งขันแบบการแข่งหนู (the rat race) ที่สร้างความเครียด ความกดดันและความทุกข์ให้แก่ผู้คนอย่างมหาศาล\n","date":1588978800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588978800,"objectID":"ed1ca94cc32164899733988a3239dc10","permalink":"https://example.com/book/deus/deus-5/","publishdate":"2020-05-09T00:00:00+01:00","relpermalink":"/book/deus/deus-5/","section":"book","summary":"โดย ดร. สุวินัย ภรณวลัย\n หากความทันสมัยเริ่มต้นพร้อมๆกับการปฏิวัติวิทยาศาสตร์ที่เริ่มขึ้นเมื่อ 500 ปีก่อน ความทันสมัยคือข้อตกลงอย่างหนึ่ง พวกเราทุกคนต้องลงนามข้อตกลงนี้ตั้งแต่เกิดและจะมีผลบังคับชีวิตเราจวบจนวันตาย ข้อตกลงเรื่องความทันสมัยนี้ สรุปได้อย่างรวบยอดว่า \u0026ldquo;เซเปียนส์ตกลงจะละทิ้งความหมายเพื่อแลกเปลี่ยนกับอำนาจ\u0026rdquo; เพราะในอดีตก่อนเข้าสู่ความทันสมัย มนุษย์ต้องยึดมั่นถือมั่นในเรื่องความหมาย (ของพระผู้เป็นเจ้าที่กำหนดชีวิตเราภายใต้แผนการจักรวาลอันยิ่งใหญ่) เพื่อเผชิญกับความทุกข์ยาก จากความอดอยาก โรคระบาด และสงคราม อย่างมีความหวังในชีวิตหลังความตายได้ พวกเขาต้องสร้างสวรรค์ กับนรกผ่านเรื่องเล่า หรือเรื่องแต่งขึ้นมา เป็นความเชื่อความศรัทธาให้ยึดถือเพื่อเผชิญความตาย และความยากลำบากในชีวิตได้อย่างไม่ไหวหวั่น และเปี่ยมความหมาย แต่ความทันสมัย ได้ปฏิเสธความเชื่อแต่โบราณข้างต้นของเซเปียนส์อย่างสิ้นเชิง ชีวิตกลายเป็นไม่มีบทละคร ไม่มีคนเขียนบท ไม่มีผู้กำกับการแสดง และไม่มีผู้อำนวยการสร้างอย่างพระผู้เป็นเจ้า ชีวิตจึงไม่มีความหมายใด ๆ เลยตามความเข้าใจทางวิทยาศาสตร์ที่ดีที่สุด ที่เซเปียนส์มีในตอนนี้ เพราะแม้แต่จักรวาลเอง ก็ยังเป็นกระบวนการที่มืดบอดและไม่มีจุดมุ่งหมาย\nในสายตาของพวกทันสมัยนิยม สิ่งต่าง ๆ แค่เกิดขึ้น เรื่องแล้วเรื่องเล่า มีแต่เพียงสาเหตุ ไม่มีเป้าหมาย มนุษย์จึงสามารถทำอะไรก็ได้ ตามที่กิเลสกระตุ้นให้อยากทำถ้าหาหนทางทำได้ มนุษย์ไม่ได้ถูกกักขังจากอะไร นอกจากความโง่เขลาของตัวเอง ความอดอยาก โรคระบาด และสงครามไม่มีความหมายกับจักรวาล แต่มนุษย์สามารถกำจัดมันได้ ไม่มีสวรรค์รอคอยเราอยู่หลังความตาย แต่คนเราสามารถเสพสุขด้วยการสร้างสวรรค์เอาไว้บนโลกตอนนี้ ตรงนี้ และใช้ชีวิตอยู่ที่นี่ไปให้ยืดยาวที่สุดเท่าที่จะยืดได้ ขอเพียงแค่คนเรา สามารถจัดการเอาชนะความยุ่งยากทางเทคนิคบางอย่างด้วยวิทยาศาสตร์ได้เท่านั้น\nนี่คือข้อตกลงแห่งความทันสมัยที่เย้ายวนใจยิ่งสำหรับพวกเซเปียนส์ เพราะความทันสมัย สามารถมอบอำนาจไร้ขีดจำกัด ให้แก่คนเราในระยะที่แทบจะเอื้อมถึงได้เรื่อย ๆ มาโดยตลอดนั่นเอง โดยที่ข้างใต้เราคือ ห้วงเหวแห่งความว่างกลวงที่กำลังอ้าปากกว้างรอ ให้พวกเราพลัดตกลงไปได้ทุกเมื่อ ชีวิตที่\u0026rdquo;ทันสมัย\u0026rdquo;ของพวกเซเปียนส์ จึงเป็นการไล่ล่าอำนาจทางโลก หรืออำนาจเหนือวัตถุอย่างไม่หยุดหย่อน ภายในเอกภพที่ปราศจากความหมายหรือหาความหมายไม่เจอ","tags":null,"title":"ตอนที่ 5 - ข้อตกลงเรื่องความทันสมัยกับเทวทัณฑ์","type":"docs"},{"authors":null,"categories":null,"content":"Internet นั้นมีต้นกำเนิดมาจากเครือข่ายของรัฐบาลสหรัฐฯ ที่เรียกว่า ARPANET ซึ่งถือกำเนิดขึ้นในปี 1969 โดยกระทรวงกลาโหมสหรัฐ เพื่อให้บริษัทคู่สัญญาและเหล่านักวิจัยของกระทรวงสามารถสื่อสารกันได้แม้เมื่อมีการโจมตีด้วยอาวุธนิวเคลียร์\nประวัติ Bill Gates ตอนที่ 6 : NetScape Killer\nเมื่อ Internet ถูกเปลี่ยนมาให้บริการทางการค้า ลูกค้ารุ่นแรก ๆ ส่วนใหญ่จะเป็นองค์กรวิจัย , บริษัทคอมพิวเตอร์ , นักวิทยาศาสตร์ในมหาลัย ซึ่งคนเหล่านี้ต้องการแลกเปลี่ยน email ระหว่างกัน เพื่อให้ในการติดต่อสื่อสารผ่านข้อมูลต่าง ๆ\nซึ่งโปรแกรมที่ได้รับความนิยมบนระบบ Internet นั่นก็คือ Web Browser ไปสู่เครือข่าย World Wide Web ซึ่งเป็นเครือข่ายของเซิร์ฟเวอร์ที่เชื่อมต่อไปยัง Internet เพื่อนำเสนอหน้าต่าง ๆ ของข้อมูลในรูปแบบต่าง ๆ\nและ Internet กำลังกลายมาเป็นเทคโนโลยีใหม่ที่ถือเป็นการปฏิวัติวงการเทคโนโลยี นับแต่ IBM PC ออกวางจำหน่าย ใน ปี 1981 เหล่าบริษัทยักษ์ใหญ่ทั่วโลกต่างมุ่งเข้าหาเทคโนโลยี Internet และ Gates กับ Microsoft ก็ไม่ขอตกขบวนดังกล่าวด้วยเช่นเดียวกัน\nสำหรับ Browser ตัวแรกของโลกนั้นต้องยกให้กับ Mosaic ที่พัฒนาโดย Lab ของ University of Illinois of Urbana Chanpaign ที่ผู้ที่ได้ว่าเป็นผู้ถือกำเนิดมันก็คือ Marc Andreessen ซึ่งต้องถือเป็นเจ้าพ่อ internet ในยุคแรก ๆ เลยก็ว่าได้ ที่ทำให้ internet เป็น Graphic ที่สวยงามให้คนทั่วไปใช้งานได้อย่างง่ายดาย\nMarc Andreessen บิดาแห่ง Web Browser\nซึ่งในช่วงแรก ๆ นั้นการใช้งาน Internet ยังคงเป็นรูปแบบของ text mode อยู่ คล้าย ๆ กับยุคของคอมพิวเตอร์ส่วนบุคคลที่ตอนแรกนั้นระบบปฏิบัติการอย่าง MS-DOS ก็เป็นการใช้งานแบบ Text mode เช่นเดียวกัน\nซึ่งหลังจากปล่อยให้ตัว Mosaic นั้น Download Free และเป็นที่นิยมอย่างมากแล้วนั้น Marc Andreessen ก็ถูกนายทุน ที่นำโดย Jim Clark ทำการชักชวน Marc ให้มาเปิดบริษัทเพื่อพัฒนา Web Browser เพื่อขายเชิงพานิชย์ เพราะตอนนั้น Internet กำลังเริ่มแพร่หลายอย่างรวดเร็ว\nโดยทั้งสองได้ร่วมกันก่อตั้ง Netscape ขึ้นมา ซึ่งในช่วงปลาย 1990 นั้น Marc ถือว่าเป็นบุคคลที่โด่งดังมาก เนื่องจากหลังจากสร้าง NetScape และปล่อยออกสู่ตลาดนั้น ก็สามารถที่จะนำบริษัทเข้าทำ IPO เพื่อเข้าตลาดหุ้นโดยแทบจะทันที ซึ่งถือเป็นต้นแบบของความสำเร็จให้บริษัทเทคโนโลีหลาย ๆ แห่งต้องการดำเนินรอยตามสิ่งที่ NetScape ทำ\nซึ่งมูลค่าหุ้นของ NetScape นั้นขึ้นไปสูงถึงระดับ 171 ดอลลาร์ ในช่วงเปิดตัววันแรก ๆ ทำให้บริษัทมีมูลค่าสูงขึ้นถึง 2 พันล้านเหรียญทันที ซึ่งในยุคนั้น ถือว่าเป็นบริษัททางเทคโนโลยีที่มีมูลค่าสูงมาก ๆ และทำให้เค้ากลายเป็นเศรษฐีหนุ่มทันทีจากมูลค่าหุ้น และเหล่านักลงทุนก็รวยกันไปตาม ๆ กันจากมูลค่าหุ้นที่พุ่งขึ้นสูงสุดในช่วงเวลาดังกล่าว\nแต่การเกิดขึ้นของ NetScape นั้นเหมือนเป็นการปลุกยักษ์ใหญ่อย่าง Microsoft ให้ตื่น ซึ่งหลังจากประสบความสำเร็จอย่างสูงกับระบบปฏิบัติการ Windows ทำให้ Microsoft กลายเป็นบริษัทที่มีมูลค่าแทบจะสูงที่สุดในโลกของบริษัททางด้านเทคโนโลยี ซึ่ง Gates เองก็ไม่รอช้า และในช่วงนั้นก็เป็นช่วงเวลาเดียวกันที่ Microsoft ต้องออก OS ใหม่พอดีซึ่งก็คือ Microsoft Windows 95\nWindows 95 เปิดตัวในเดือน สิงหาคม ปี 1995 เป็น Windows รุ่นต่อจาก 3.1 เป็น Windows รุ่นแรกที่มีกลุ่มเป้าหมายเป็นผู้ใช้ทั่วไป ด้วยความสามารถต่างๆ ที่เพิ่มขึ้นอย่างก้าวกระโดดสำหรับผู้ใช้ทั่วไป Windows 95 ประสบความสำเร็จอย่างสูง ยอดการใช้ Windows 95 สูงที่สุดเป็นประวัติการณ์ของ Windows เลยก็ว่าได้หลังจาก Microsoft ได้สร้างระบบปฏิบัติการ Windows ขึ้นมา\nซึ่ง Gates นั้นใช้แผนการที่ถือเป็น Case Study ครั้งสำคัญของวงการธุรกิจทางด้านเทคโนโลยีโลก นั่นก็คือการนำเอา Internet Explorer ที่ถูกสร้างโดย Microsoft ออกสู่ตลาดโดยแถมมากับระบบปฏิบัติการ Windows 95 ไปเลยทันที ผู้ใช้งานไม่ต้องไปซื้อโปรแกรม Browser เสริมให้ยุ่งยาก\nGates กับการใช้กลยุทธ์ซื้อ Windows แถม Browser ในตำนาน\nซึ่ง Microsoft นั้นก็ได้พัฒนาตัว Internet Explorer โดยใช้พื้นฐานมาจาก Mosaic ที่ Marc Andreessen เป็นคนพัฒนาขึ้นในตอนอยู่ที่ University of illinois of Urbana Chanpaign นั่นเอง\nซึ่ง Microsoft นั้นเป็นบริษัทที่ทุนหนาอยู่แล้วจึงไม่มีปัญหาเรื่องการเงินแต่อย่างใดในขณะนั้น ในการแถม Browser ไปกับระบบปฏิบัติการ และเป็นยิ่งส่งเสริมให้คนหันมาใช้ ระบบปฏิบัติการ Windows 95 มากยิ่งขึ้น\nซึ่งถือเป็นความโหดมากของ Gates และ Microsoft ในการที่แทบจะ ฆ่า Netscape ออกไปจากตลาดแทบจะเบ็ดเสร็จเด็ดขาดเลยก็ว่าได้ และ ทำให้เพิ่มยอดขายของ Windows 95 จนสูงขึ้นเป็นประวัติการณ์ นับตั้งแต่ก่อตั้งบริษัทมา ซึ่งเหมือนเป็นการยิงปืนนัดเดียวได้นกสองตัวเลยทีเดียวเลยก็ว่าได้สำหรับกลยุทธ์นี้ของ Gates และ Microsoft ในการจัดการกับ NetScape\nแม้สุดท้ายจะมีการฟ้องร้องกันโดยมีการกล่าวหาว่า Microsoft ผูกขาดการตลาดของระบบปฏิบัติการ แต่ทางฝั่ง Microsoft นั้นก็ไม่แยแสกับเรื่องที่เกิดขึ้น ยังเดินหน้าแถม Browser ต่อไปจนครองส่วนแบ่งแทบจะทั้งหมดของ Browser ในขณะนั้นในที่สุด\nและ ทำให้ Netscape ต้องถูกขายให้กับ AOL ในภายหลังก่อนจะพัฒนากลายมาเป็น Moziila Firefox อย่างที่เราเห็นในปัจจุบัน ส่วนคดีความฟ้องร้องนั้น ถึงแม้สุดท้าย ศาลจะพิพากษาให้ Microsoft เป็นฝ่ายผิด แต่ Microsoft ก็ยินยอมจ่ายค่าปรับเพียงร้อยกว่าล้านเหรียญเท่านั้น ซึ่งเปรียบเหมือนในสงครามนี้ Microsoft ยอมแพ้ในศาลแต่ ในเชิงธุรกิจนั้น Netscape ได้สูญพันธุ์จากตลาดไปเป็นที่เรียบร้อยแล้วนั่นเอง\n Written with StackEdit.\n ","date":1589324400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589324400,"objectID":"4d972edb38fd001889c38b3e76f882e4","permalink":"https://example.com/book/gates/bill-gate-6/","publishdate":"2020-05-13T00:00:00+01:00","relpermalink":"/book/gates/bill-gate-6/","section":"book","summary":"Internet นั้นมีต้นกำเนิดมาจากเครือข่ายของรัฐบาลสหรัฐฯ ที่เรียกว่า ARPANET ซึ่งถือกำเนิดขึ้นในปี 1969 โดยกระทรวงกลาโหมสหรัฐ เพื่อให้บริษัทคู่สัญญาและเหล่านักวิจัยของกระทรวงสามารถสื่อสารกันได้แม้เมื่อมีการโจมตีด้วยอาวุธนิวเคลียร์\nประวัติ Bill Gates ตอนที่ 6 : NetScape Killer\nเมื่อ Internet ถูกเปลี่ยนมาให้บริการทางการค้า ลูกค้ารุ่นแรก ๆ ส่วนใหญ่จะเป็นองค์กรวิจัย , บริษัทคอมพิวเตอร์ , นักวิทยาศาสตร์ในมหาลัย ซึ่งคนเหล่านี้ต้องการแลกเปลี่ยน email ระหว่างกัน เพื่อให้ในการติดต่อสื่อสารผ่านข้อมูลต่าง ๆ\nซึ่งโปรแกรมที่ได้รับความนิยมบนระบบ Internet นั่นก็คือ Web Browser ไปสู่เครือข่าย World Wide Web ซึ่งเป็นเครือข่ายของเซิร์ฟเวอร์ที่เชื่อมต่อไปยัง Internet เพื่อนำเสนอหน้าต่าง ๆ ของข้อมูลในรูปแบบต่าง ๆ\nและ Internet กำลังกลายมาเป็นเทคโนโลยีใหม่ที่ถือเป็นการปฏิวัติวงการเทคโนโลยี นับแต่ IBM PC ออกวางจำหน่าย ใน ปี 1981 เหล่าบริษัทยักษ์ใหญ่ทั่วโลกต่างมุ่งเข้าหาเทคโนโลยี Internet และ Gates กับ Microsoft ก็ไม่ขอตกขบวนดังกล่าวด้วยเช่นเดียวกัน\nสำหรับ Browser ตัวแรกของโลกนั้นต้องยกให้กับ Mosaic ที่พัฒนาโดย Lab ของ University of Illinois of Urbana Chanpaign ที่ผู้ที่ได้ว่าเป็นผู้ถือกำเนิดมันก็คือ Marc Andreessen ซึ่งต้องถือเป็นเจ้าพ่อ internet ในยุคแรก ๆ เลยก็ว่าได้ ที่ทำให้ internet เป็น Graphic ที่สวยงามให้คนทั่วไปใช้งานได้อย่างง่ายดาย","tags":null,"title":"ตอนที่ 6 - NetScape Killer","type":"docs"},{"authors":null,"categories":null,"content":"   เมื่ออาหารมากขึ้น จำนวนประชากรก็ทวีคูณ ในเวลาหนึ่งหมื่นปี ประชากร Sapiens เพิ่มจาก 5 ล้านเป็น 250 โดยเกือบร้อยละร้อยมีอาชีพเป็นชาวนา ความตลกร้ายอย่างหนึ่งของชีวิตชาวนาก็คือ พวกเขามีเรื่องให้ต้องกังวลอยู่เสมอ ถ้าย้อนเวลากลับไปช่วงที่บรรพบุรุษพวกเขายังเป็น Hunter-Gatherer (ล่าสัตว์เก็บผลไม้ป่า) พวกเขามีชีวิตวันต่อวัน ไม่มีการวางแผนล่วงหน้า แต่ก็ไม่มีอะไรให้ต้องกังวลด้วย ในขณะที่ชีวิตชาวนาแม้จะมีอาหารพอมีพอกิน แต่ก็ต้องคิดเผื่อว่าหากมีโรคระบาดหรือน้ำท่วม เรือกสวนไร่นาที่ทำเอาไว้ก็จะเสียหายและอาจต้องอดตาย คนรุ่นชาวนาถึงขยันทำงานหามรุ่งหามค่ำด้วยหวังว่าจะมีอาหารเพียงพอแม้ในยามที่ฟ้าฝนไม่เป็นใจ\nแต่สิ่งที่เกิดขึ้นจริงๆ ก็คือ เมื่อสังคมขยายใหญ่ขึ้น ประชาชนจำเป็นต้องมี ผู้นำที่จะช่วยปกป้องบ้านเมืองและรักษาความสงบสุขเรียบร้อย โดยสิ่งที่ผู้นำเรียกร้องเป็นการตอบแทนก็คือ อาหารส่วนเกินที่ชาวนาเก็บไว้นั่นเอง ชาวนาจึงไม่เคยมีความมั่นคงทางปากท้องอย่างแท้จริงเลย เพราะทำเท่าไหร่ก็ต้องส่งส่วยไปเกือบหมด การปกครองคนนับหมื่นนับแสนนั้นไม่ใช่เรื่องง่าย ผู้นำจึงจำเป็นต้องสร้าง “Myth” หรือเรื่องเล่าที่คนในการปกครองนั้นเชื่อเหมือนๆ กัน โดยผู้นำยุคแรกๆ ที่เป็นกษัตริย์นั้นมักจะอ้างว่าตนเอง เป็นตัวแทนของเทพเจ้าที่ถูกส่งมาดูแลราชอาณาจักรแห่งนี้ กษัตริย์ที่โด่งดังที่สุดพระองค์หนึ่งมีนามว่าพระเจ้า Hammurabi ซึ่งปกครองนครบาบิโลนเมื่อปี 1776 ก่อนคริสตกาล (บาบิโลนครอบคลุมพื้นที่เมโสโปเตเมียซึ่งเป็นพื้นที่ของอิรัก คูเวต ซีเรียและตุรกีในปัจจุบัน)\nกษัตริย์องค์นี้ได้บัญญัติกฎที่ชื่อว่า Code of Hammurabi ซึ่งได้ชื่อว่าเป็นกฎหมายฉบับแรกของโลก โดยกฎหมายนี้แบ่งคนในบาบิโลนออกเป็นสามระดับ คือคนชั้นสูง (superior) สามัญชน (commoners) และทาส (slaves) มาไล่ดูกฎหมายบางมาตรากันนะครับ\n– ถ้าชายชั้นสูงทำให้ชายชั้นสูงอีกคนตาบอด ชายคนนั้นต้องโดนทำให้ตาบอดเช่นกัน – ถ้าชายชั้นสูงทำให้ชายสามัญชนตาบอด ชายคนนั้นต้องจ่ายเงิน 60 ชีเกล (สกุลเงิน) – ถ้าชายชั้นสูงทำให้ทาสตาบอด ชายคนนั้นต้องชดใช้เป็นเงินครึ่งหนึ่งของมูลค่าของทาสคนนั้น – ถ้าชายชั้นสูงทำร้ายผู้หญิงชั้นสูงจนเธอแท้ง ชายคนนั้นต้องจ่ายเงิน 10 ชีเกล และถ้าเธอเสียชีวิต ลูกสาวของเขาต้องถูกประหาร – ถ้าชายชั้นสูงทำร้ายผู้หญิงสามัญชนจนเธอแท้ง ชายคนนั้นต้องจ่ายเงิน 5 ชีเกล และถ้าเธอเสียชีวิต เขาต้องจ่ายเงิน 30 ชีเกล – ถ้าชายชั้นสูงทำร้ายทาสผู้หญิงสามัญชนจนเธอแท้ง ชายคนนั้นต้องจ่ายเงิน 2 ชีเกล และถ้าเธอเสียชีวิต เขาต้องจ่ายเงิน 20 ชีเกล\nสิ่งหนึ่งที่ผู้อ่านน่าจะสังเกตได้ก็คือ ผู้ชายจะมีมูลค่ามากกว่าผู้หญิง และเด็ก จะไม่ถูกมองว่าเป็นคน แต่เป็นเพียงสมบัติของผู้ชายเท่านั้น (ลูกจึงถูกฆ่าเมื่อพ่อเป็นผู้ทำผิดต่อคนชั้นสูง) ในตอนท้ายของกฎหมาย กษัตริย์ฮัมมูราบียังประกาศด้วยว่า \u0026ldquo;นี่คือการตัดสินโดยเรา\u0026rdquo; กษัตริย์ฮัมมูราบี ผู้ทรงธรรมและได้บัญญัติกฎเหล่านี้ขึ้นมาเพื่อให้ประชาชนใช้ชีวิตอย่างถูกทำนองคลองธรรม เราคือผู้ถูกแต่งตั้งโดยเทพเจ้าเอ็นลิล (Enlil) และ เทพเจ้ามาร์ดุ๊ก (Marduk) ให้มาปกครองและดูแลมนุษยชาติ\nคุณผู้อ่านเห็นด้วยกับพระเจ้าฮัมมูรัมบีหรือไม่?\nผมเชื่อว่าพวกเราส่วนใหญ่ไม่เห็นด้วย เพราะเราเชื่อว่ามนุษย์ทุกคนมีความเท่าเทียมกัน และการอ้างว่าตัวเองได้รับมอบหมายจากเทพเจ้านี่ดูยังไงก็เป็นเรื่องหลอกเด็กชัด ๆ แต่ถ้าลองสำรวจความคิดตัวเองดี ๆ ก็จะพบว่า “ความเท่าเทียมกัน” ก็เป็นเพียงสิ่งที่มนุษย์บัญญัติขึ้นเอง ความเท่าเทียมไม่ได้มีตัวตนอยู่จริง เป็นเพียงสิ่งที่เรายึดถือกันเฉยๆ หรือถ้าจะให้พูดกันแรง ๆ ก็คือคำ ๆ นี้มีสถานะไม่ต่างอะไรกับ การอ้างว่าตัวเองเป็นผู้ได้รับมอบหมายจากพระเจ้าเลย\nกฎหมายฮัมมูรัมบีเกิดขึ้นราว 1776 ปีก่อนคริสตกาล จะเป็นความบังเอิญรึเปล่าก็ไม่รู้ ที่ 1776 หลังคริสตกาล (ค.ศ.1776) ประเทศอเมริกาประกาศอิสรภาพจากจักรวรรดิอังกฤษ โดยย่อหน้าที่โด่งดังที่สุดจากคำประกาศอิสรภาพนี้ก็คือ\n We hold these truths to be self-evident, that all men are created equal, that they are endowed by their Creator with certain unalienable Rights, that among these are Life, Liberty and the pursuit of Happiness.\nเราถือว่าความจริงต่อไปนี้เป็นสิ่งที่ประจักษ์แจ้งอยู่ในตัวเอง นั่นคือมนุษย์ทุกคนถูกสร้างขึ้นมาอย่างเท่าเทียมกัน และพระเจ้าผู้สร้างได้มอบสิทธิบางประการที่จะเพิกถอนมิได้ไว้ให้แก่มนุษย์ ในบรรดาสิทธิเหล่านั้น ได้แก่ ชีวิต เสรีภาพ และการเสาะแสวงหาความสุข\n แต่คำว่า “เท่าเทียม” “พระเจ้า” “สิทธิ” หรือ “เสรีภาพ” ไม่ได้มีตัวตนอยู่ในโลกแห่งความเป็นจริง เป็นเพียงสิ่งที่มนุษย์จินตนาการขึ้นมาเท่านั้น เพราะในเชิงชีววิทยาแล้วมนุษย์ทุกคนล้วนแตกต่างกัน ไม่ว่าจะเป็นเพศหรือรูปร่างหน้าตา ไม่มีหลักฐานที่พิสูจน์ได้ชิ้นใดที่บ่งบอกว่ามนุษย์ถูกพระเจ้าสร้างขึ้น มีแต่หลักฐานที่บ่งบอกว่ามนุษย์นั้นวิวัฒนาการมาจากลิง ในเชิงชีววิทยาคำว่า “สิทธิ” ก็ไร้ความหมายเช่นกัน นกบินได้ไม่ใช่เพราะว่ามันมีสิทธิ์ที่จะบิน แต่มันบินได้ เพราะร่างกาย มันวิวัฒนาการจนมันมีความสามารถที่จะบินได้ก็เท่านั้นเอง นกกระจอกเทศบินไม่ได้ ก็ไม่ใช่เพราะว่ามันถูกลิดรอนสิทธิ์ใดๆ เพียงแต่การวิวัฒนาการนำพาให้มันกลายเป็นนกที่บินไม่ได้เท่านั้นเอง\nเมื่อทั้ง “ความเท่าเทียมกัน” ของคนสมัยนี้ และ “การแบ่งชนชั้น” ของคนยุคพระเจ้าฮัมมูรัมบี ต่างก็มีตัวตนอยู่แต่ในจินตนาการและความเชื่อที่คนหมู่มากยึดถือ เช่นนี้แล้วเราจะบอกได้อย่างไรว่า บทบัญญัติของฮัมมูรัมบีนั้นผิด ส่วนคำประกาศอิสรภาพของอเมริกานั้นถูกต้องเที่ยงแท้? เพราะทั้งความเท่าเทียมกันและชนชั้นทางสังคมต่างก็เป็นคอนเซ็ปต์ที่ถูกสร้างขึ้นเพื่อเอื้อให้สังคมนั้นมีความเป็นปกติสุขเรียบร้อยเท่านั้นเอง ผู้เขียนเรียกคอนเซ็ปต์เหล่านี้ว่า imagined order หรือกฎระเบียบที่เราจินตนาการขึ้นมาเอง\nกำแพงคุก Imagined Order นี่อยู่ใกล้ตัวเราเสียจนเราลืมนึกไปเลยว่ามันเป็นเพียงสิ่งที่มนุษย์จินตนาการขึ้นมา มี 3 เหตุผล ที่พวกเราไม่เคยมองเห็นตัวตนที่แท้จริงของมัน\n1. กฎระเบียบในจินตนาการนี้สะท้อนออกมาสู่โลกความเป็นจริง คนสมัยนี้เชื่อในเรื่องความเป็นปัจเจกบุคคล (individualism) โดยเฉพาะฝรั่งที่เชื่อว่าแต่ละคนมีสิทธิ์และมีพื้นที่ของตัวเอง เด็กแต่ละคนจึงมีห้องนอนส่วนตัวที่เขาจะตกแต่งอย่างไรก็ได้ และพ่อแม่ก็ต้องเคาะประตูขออนุญาตทุกครั้งก่อนจะเข้าห้องลูก แต่ฝรั่งสมัยก่อนไม่ได้เชื่อในเรื่อง individualism ปราสาทสมัยเก่าจึงแทบไม่เคยมีห้องนอนส่วนตัว ลูกชายวัยรุ่นของบารอนยังต้องนอนรวมกับคนอื่นๆ และคุณค่าของเขาก็ขึ้นอยู่กับว่าคนรอบข้างมองเขายังไง\n2. กฎระเบียบในจินตนาการนี้เป็นตัวกำหนดความต้องการของเรา ตั้งแต่เราเกิดมา เราก็หลีกเลี่ยงไม่พ้น imagined order ที่คอยขีดเส้น (โดยที่เราไม่รู้ตัว) ว่าเราควรจะเชื่ออะไรและเราควรต้องการอะไร เช่นความเชื่อที่ว่า คนเราควรได้เดินทาง ในอดีตกาล กษัตริย์ฟาโรห์แห่งอียิปต์อาจจะใช้เงินและเวลามากมายเพื่อจะสร้างปีระมิดเอาไว้เก็บศพตัวเอง แต่ไม่มีฟาโรห์องค์ไหนสนใจจะไปชอปปิ้งที่เมืองบาบิโลน แต่คนเราสมัยนี้ยอมจ่ายเงินมากมายเพื่อจะได้เดินทาง โดยผู้เขียนบอกว่าเพราะพวกเรานั้นเชื่อใน Romantic consumerism (บริโภคนิยมโรแมนติค)\nRomanticism บอกเราว่า การจะมีชีวิตที่คุ้มค่านั้น เราต้องได้เจอคนหลายๆ แบบ ได้ลองกินอาหารที่แปลกรส ได้ฟังเพลงที่แปลกหู ได้เห็นสิ่งที่แปลกตาออกไป และหนึ่งในวิธีที่ดีที่สุดคือเก็บกระเป๋าและออกเดินทางไปยังดินแดนที่ไม่คุ้นเคย\nConsumerism บอกเราว่า การที่เราจะมีความสุขได้นั้นเราต้องซื้อผลิตภัณฑ์หรือบริการ โฆษณาทีวีเป็นเครื่องย้ำเตือนเราว่าความสุขอยู่ไม่ไกล แค่จ่ายเงินก็จะได้มันมา\nRomantic Consumerism จึงเป็น imagined order ซึ่งเป็นพื้นฐานของอุตสาหกรรรมการท่องเที่ยวนั่นเอง\nอุตสาหกรรมการท่องเที่ยวไม่ได้ขายตั๋วเครื่องบินหรือที่พัก แต่มันขายประสบการณ์ ปารีสหรืออินเดียก็ไม่ใช่สถานที่ แต่เป็นประสบการณ์ ถ้าชีวิตคู่ของเศรษฐีคนหนึ่งกำลังสั่นคลอน เขาอาจจะแก้ปัญหาด้วยการพาภรรยาไปเที่ยวปารีส แต่เศรษฐีอียิปต์ในอดีตไม่มีวันแก้ปัญหาชีวิตคู่ด้วยการพาภรรยาไปเที่ยวบาบิโลน แต่จะแสดงความรักด้วยการสร้างปีระมิดมอบให้เธอแทน “ปีระมิด” นั้นมีอยู่ทุกยุคทุกสม้ย เพียงแต่อาจจะมีหน้าตาและรูปร่างที่แตกต่างกันไป ปีระมิดของบางคนคือบ้านตากอากาศหลังงามบนภูเขา ส่วนปีระมิดของอีกคนอาจเป็นบริษัทมูลค่าพันล้าน แต่น้อยคนนักที่จะตั้งคำถามว่าเหตุใดเราถึงอยากจะสร้างปีระมิดตั้งแต่แรก\n3. ระเบียบในจินตนาการนี้เป็นอัตวิสัยร่วม สิ่งต่างๆ ในโลกใบนี้นั้นแบ่งออกได้เป็นสามจำพวก คือภววิสัย (objective) อัตวิสัย (subjective) และอัตวิสัยร่วม (inter-subjective) ภววิสัยคือสิ่งที่จะมีอยู่จริง แม้ว่าจะมีมนุษย์หรือไม่มีก็ตาม แม้ว่ามนุษย์จะเชื่อหรือไม่เชื่อก็ตาม ตัวอย่างของสิ่งที่เป็นภววิสัย (objective) ก็เช่นแรงโน้มถ่วง ซึ่งมีอยู่บนโลกใบนี้ก่อนที่มนุษย์จะเกิดขึ้นมา และแม้ว่ามนุษย์คนไหนจะไม่เชื่อเรื่องแรงโน้มถ่วง แต่เขาก็ยังตกอยู่ภายใต้กฎนั้นอยู่ดี\nตัวอย่างของอัตวิสัย (subjective) ก็คือสิ่งที่เห็นเฉพาะบุคคล เช่นสมัยพวกเราเด็ก เวลาเราเล่นกับตุ๊กตาเราก็จะคุยกับมันเหมือนเพื่อน ซึ่งเพื่อนคนนี้มีตัวตนอยู่แต่ในจินตนาการของเราคนเดียวเท่านั้น เมื่อเราโตขึ้น เพื่อนคนนี้ก็หายไปด้วย\nตัวอย่างของอัตวิสัยร่วม (inter-subjective) ก็คือสิ่งที่มีตัวตนอยู่ในจินตนาการร่วมของคนหมู่มาก เช่นศาสนา พระเจ้า กฎหมาย เงิน หรือประเทศชาติ แม้ว่าจะมีคนหนึ่งคนเลิกเชื่อในพระเจ้าก็ไม่มีปัญหา เพราะยังมีคนอีกหลายล้านคนเชื่ออยู่ บริษัทเปอร์โยต์ที่ผมพูดถึงในตอนที่ 2 ก็เป็นอัตวิสัยร่วมของผู้บริหาร นักกฎหมาย และลูกค้านับแสนนับล้านคน ต่อให้วันหนึ่ง CEO ของเปอร์โยต์ตื่นมาแล้วเลิกเชื่อในความมีอยู่จริงของเปอร์โยต์ เปอร์โยต์ก็จะยังคงมีอยู่ต่อไปอยู่ดี เช่นเดียวกับเงินดอลล่าร์ สิทธิมนุษยชน หรือประเทศสหรัฐอเมริกา ที่มีตัวตนอยู่ในจินตนาการของคนหลายร้อยหรือหลายพันล้านคน หากเราคิดจะเปลี่ยนหรือลบล้างความเชื่อนี้ เราก็ต้องพึ่งพาองค์กรที่เกิดขึ้นจากความเชื่ออื่นอยู่ดี เช่น ถ้าเราจะลบบริษัทเปอร์โต์ออกจากสารบบ เราก็ต้องเชื่อถึงความมีอยู่จริงของกระบวนการยุติธรมของฝรั่งเศส และถ้าเราต้องการจะรื้อถอนกระบวนการยุติธรรมของฝรั่งเศส เราก็ต้องเชื่อในสิ่งที่มีอำนาจยิ่งกว่านั้นเช่นความเป็นรัฐของฝรั่งเศส\nจะเห็นได้ว่า เราไม่มีทางหลีกหนีออกจากระเบียบในจินตนาการหรือ imagined order ได้เลย สังคมมนุษย์ Sapiens ได้สร้าง “คุกแห่งจินตนาการ” ที่สลับซับซ้อนเกินใครจะคาดคิดขึ้นมาเสียแล้ว ตอนต่อไปเราจะได้เห็นกันว่า กฎระเบียบที่เราจินตนาการกันขึ้นมานั้นได้นำพามาซึ่งนวัตกรรมอีกอย่างหนึ่งที่ขับเคลื่อนสังคมมนุษย์ไปอีกระดับ นวัตกรรมที่ว่านั้นคือ “ภาษาเขียน” ครับ\n ที่มา: https://anontawong.com.\n ","date":1588978800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588978800,"objectID":"bd74b3f1b48715a784006445e39c70ab","permalink":"https://example.com/book/sapiens/sapiens-5/","publishdate":"2020-05-09T00:00:00+01:00","relpermalink":"/book/sapiens/sapiens-5/","section":"book","summary":"เมื่ออาหารมากขึ้น จำนวนประชากรก็ทวีคูณ ในเวลาหนึ่งหมื่นปี ประชากร Sapiens เพิ่มจาก 5 ล้านเป็น 250 โดยเกือบร้อยละร้อยมีอาชีพเป็นชาวนา ความตลกร้ายอย่างหนึ่งของชีวิตชาวนาก็คือ พวกเขามีเรื่องให้ต้องกังวลอยู่เสมอ ถ้าย้อนเวลากลับไปช่วงที่บรรพบุรุษพวกเขายังเป็น Hunter-Gatherer (ล่าสัตว์เก็บผลไม้ป่า) พวกเขามีชีวิตวันต่อวัน ไม่มีการวางแผนล่วงหน้า แต่ก็ไม่มีอะไรให้ต้องกังวลด้วย ในขณะที่ชีวิตชาวนาแม้จะมีอาหารพอมีพอกิน แต่ก็ต้องคิดเผื่อว่าหากมีโรคระบาดหรือน้ำท่วม เรือกสวนไร่นาที่ทำเอาไว้ก็จะเสียหายและอาจต้องอดตาย คนรุ่นชาวนาถึงขยันทำงานหามรุ่งหามค่ำด้วยหวังว่าจะมีอาหารเพียงพอแม้ในยามที่ฟ้าฝนไม่เป็นใจ\nแต่สิ่งที่เกิดขึ้นจริงๆ ก็คือ เมื่อสังคมขยายใหญ่ขึ้น ประชาชนจำเป็นต้องมี ผู้นำที่จะช่วยปกป้องบ้านเมืองและรักษาความสงบสุขเรียบร้อย โดยสิ่งที่ผู้นำเรียกร้องเป็นการตอบแทนก็คือ อาหารส่วนเกินที่ชาวนาเก็บไว้นั่นเอง ชาวนาจึงไม่เคยมีความมั่นคงทางปากท้องอย่างแท้จริงเลย เพราะทำเท่าไหร่ก็ต้องส่งส่วยไปเกือบหมด การปกครองคนนับหมื่นนับแสนนั้นไม่ใช่เรื่องง่าย ผู้นำจึงจำเป็นต้องสร้าง “Myth” หรือเรื่องเล่าที่คนในการปกครองนั้นเชื่อเหมือนๆ กัน โดยผู้นำยุคแรกๆ ที่เป็นกษัตริย์นั้นมักจะอ้างว่าตนเอง เป็นตัวแทนของเทพเจ้าที่ถูกส่งมาดูแลราชอาณาจักรแห่งนี้ กษัตริย์ที่โด่งดังที่สุดพระองค์หนึ่งมีนามว่าพระเจ้า Hammurabi ซึ่งปกครองนครบาบิโลนเมื่อปี 1776 ก่อนคริสตกาล (บาบิโลนครอบคลุมพื้นที่เมโสโปเตเมียซึ่งเป็นพื้นที่ของอิรัก คูเวต ซีเรียและตุรกีในปัจจุบัน)\nกษัตริย์องค์นี้ได้บัญญัติกฎที่ชื่อว่า Code of Hammurabi ซึ่งได้ชื่อว่าเป็นกฎหมายฉบับแรกของโลก โดยกฎหมายนี้แบ่งคนในบาบิโลนออกเป็นสามระดับ คือคนชั้นสูง (superior) สามัญชน (commoners) และทาส (slaves) มาไล่ดูกฎหมายบางมาตรากันนะครับ\n– ถ้าชายชั้นสูงทำให้ชายชั้นสูงอีกคนตาบอด ชายคนนั้นต้องโดนทำให้ตาบอดเช่นกัน – ถ้าชายชั้นสูงทำให้ชายสามัญชนตาบอด ชายคนนั้นต้องจ่ายเงิน 60 ชีเกล (สกุลเงิน) – ถ้าชายชั้นสูงทำให้ทาสตาบอด ชายคนนั้นต้องชดใช้เป็นเงินครึ่งหนึ่งของมูลค่าของทาสคนนั้น – ถ้าชายชั้นสูงทำร้ายผู้หญิงชั้นสูงจนเธอแท้ง ชายคนนั้นต้องจ่ายเงิน 10 ชีเกล และถ้าเธอเสียชีวิต ลูกสาวของเขาต้องถูกประหาร – ถ้าชายชั้นสูงทำร้ายผู้หญิงสามัญชนจนเธอแท้ง ชายคนนั้นต้องจ่ายเงิน 5 ชีเกล และถ้าเธอเสียชีวิต เขาต้องจ่ายเงิน 30 ชีเกล – ถ้าชายชั้นสูงทำร้ายทาสผู้หญิงสามัญชนจนเธอแท้ง ชายคนนั้นต้องจ่ายเงิน 2 ชีเกล และถ้าเธอเสียชีวิต เขาต้องจ่ายเงิน 20 ชีเกล","tags":null,"title":"ตอนที่ 5 - คุกที่มองไม่เห็น","type":"docs"},{"authors":null,"categories":null,"content":" โดย ดร. สุวินัย ภรณวลัย\n ก่อนยุคทันสมัย เซเปียนส์ใช้ชีวิตโดยเอาเรื่องเล่าของพระเจ้าเป็นศูนย์กลาง (โดยเฉพาะในโลกของศาสนาคริสต์ ศาสนาอิสลามและศาสนาพราหมณ์) แต่พอเข้าสู่ยุคทันสมัย เซเปียนส์ได้หันมาเอาเรื่องเล่า เกี่ยวกับมนุษย์หรือความเชื่อใหม่เรื่องมนุษย์นิยมเป็นศูนย์กลางแทน การปฏิวัติมนุษย์นิยมอันเป็นหลักความเชื่อใหม่ที่ \u0026ldquo;พลิกฟ้าคว่ำแผ่นดิน\u0026rdquo; สำหรับคนสมัยนั้นได้พิชิตโลกทั้งโลกในช่วงสองสามศตวรรษที่ผ่านมา ศาสนามนุษย์นิยมบูชาความเป็นมนุษย์ และคาดหวังให้มนุษย์แสดงบทบาทที่พระเจ้าเคยแสดงในศาสนาคริสต์และอิสลาม\nมนุษย์นิยมคาดหวังให้ประสบการณ์ของมนุษย์เป็นฝ่ายมอบความหมายให้จักรวาล ผ่านการดึงประสบการณ์ภายในของตนออกมา เพื่อสร้างความหมายให้แก่โลกที่ไร้ความหมาย หัวใจของการปฏิวัติมนุษย์นิยมในยุคทันสมัย จึงมิใช่การสูญสิ้นศรัทธาในพระเจ้า แต่เป็นการหันมาศรัทธาในมนุษย์แทน\nคำขวัญของมนุษย์นิยมในทางจริยธรรม คือ \u0026ldquo;ถ้ารู้สึกดี จงทำ\u0026rdquo; คำขวัญของมนุษย์นิยมในทางการเมือง คือ \u0026ldquo;ผู้ออกเสียงรู้ดีที่สุด\u0026rdquo; คำขวัญของมนุษ์นิยมในทางเศรษฐกิจ คือ \u0026ldquo;ลูกค้าถูกเสมอ\u0026rdquo;\nคำขวัญของมนุษย์นิยมในทางสุนทรียศาสตร์ คือ \u0026ldquo;ความงามอยู่ในดวงตาของผู้ชม\u0026rdquo;\nสรุปสั้น ๆ ได้ว่า พวกมนุษย์นิยมเชื่อมั่นในความรู้สึกของปัจเจก ซึ่งเป็นอัตวิสัยเท่านั้นในการตัดสินทุกเรื่องราวในชีวิต ในยุคทันสมัยภายใต้การปฏิวัติมนุษย์นิยม ความรู้สึกของมนุษย์คือแหล่งกำเนิดของความหมาย และอำนาจทั้งปวง ด้วยเหตุนี้ เป้าหมายสูงสุดของชีวิตแบบมนุษย์นิยม คือการพัฒนาความรู้อย่างเต็มที่ผ่านประสบการณ์อันหลากหลายทางด้านปัญญา อารมณ์และทางกายภาพ\nเป้าหมายของการดำรงอยู่ คือ การกลั่นประสบการณ์ที่เป็นไปได้อย่างกว้างขวางที่สุดของชีวิตให้กลายเป็นภูมิปัญญา (wisdom) จุดยอดสูงสุดแห่งชีวิต มีเพียงประการเดียวคือ การได้วัดความรู้สึกทุกสิ่งทุกอย่างในการเป็นมนุษย์ ตั้งแต่เซเปียนส์สร้างประวัติศาสตร์ และวัฒนธรรมของตนขึ้นในช่วง 70,000 ปีที่ผ่านมา ไม่เคยมีวัฒนธรรมไหน ที่ให้ความสำคัญแก่ความรู้สึก ความปรารถนาและประสบการณ์ของมนุษย์ มากเท่ามนุษย์นิยมมาก่อน อย่างไรก็ดีลัทธิมนุษย์นิยมได้แตกออกเป็นสามนิกายย่อย ที่ตีความประสบการณ์ของมนุษย์แตกต่างกันไป คือ\n มนุษย์นิยมแบบเสรีนิยม (liberal humanism) หรือเรียกย่อๆว่า เสรีนิยม (liberalism) นี่คือ มนุษย์นิยมแบบดั้งเดิมและเป็นกระแสหลักที่มองว่ามนุษย์แต่ละคนเป็นปัจเจกบุคคลที่มีความเฉพาะตัว จึงให้ความสำคัญกับเสรีภาพมากที่สุด\n มนุษย์นิยมแบบสังคมนิยม (socialist humanism) ที่โอบอุ้มความเคลื่อนไหวของสังคมนิยมและคอมมิวนิสต์เอาไว้ โดยให้ความสำคัญกับความเสมอภาคมากกว่าเสรีภาพ และฝากศรัทธาทั้งหมดไว้ที่พรรคการเมืองของตน (เชื่อว่าพรรคการเมืองรู้ดีที่สุด)\n มนุษย์นิยมแบบวิวัฒนาการ (evolutionaly humanism) เชื่อมั่นแบบยึดมั่นถือมั่นในทฤษฎีวิวัฒนาการของดาร์วิน จึงไม่ชื่อว่าวิวัฒนาการจะหยุดอยู่แค่เซเปียนส์ แต่ยังมีหนทางอีกยาวไกลที่มุ่งไปสู่การเป็นอภิมนุษย์ (superhuman)\n  ผู้สนับสนุนแนวคิดมนุษย์นิยมแบบวิวัฒนาการที่โด่งดังที่สุด คือพวกนาซี แต่นี่เป็นเพียงเวอร์ชั่นที่สุดโต่ง ของมนุษย์นิยมแบบวิวัฒนาการเท่านั้น ลัทธินาซีเกิดขึ้นจากการจับคู่แบบมิจฉาทิฐิ ระหว่างมนุษย์นิยมแบบวิวัฒนาการกับทฤษฎีเชื้อชาติจำเพาะและอารมณ์คลั่งชาติอย่างรุนแรง แปลกแต่จริง ในช่วงต้นศตวรรษที่ 21 ที่เราเห็นได้ชัดถึงขีดจำกัดของมนุษย์นิยมแบบเสรีนิยม (ที่เลยจุดพีคมาแล้ว) และมนุษยนิยมแบบสังคมนิยม (ที่ส่วนใหญ่ล้มเหลวไม่เป็นท่ายกเว้นในประเทศจีน) ปรากฏว่า มนุษยนิยมแบบวิวัฒนาการ กลับผงาดขึ้นมาแทนและมีแนวโน้มว่าจะกลายมาเป็นกระแสหลักในการก่อร่างสร้างศตวรรษที่ 21 หลังจากนี้\nโครงการ Homo Deus (มนุษย์เทพ) ที่กำลังวิจัยและพัฒนาอยู่ในปัจจุบัน กับความก้าวหน้าอย่างก้าวกระโดด ของเทคโนโลยีปัญญาประดิษฐ์และเทคโนโลยีชีวภาพ คือพลังทางวัตถุที่หนุนหลังแนวคิดมนุษย์นิยมแบบวิวัฒนาการ ให้ผงาดขึ้นมาอีกครั้งหลังจากนี้ พร้อมกันนั้น ศาสนาเทคโนโลยี (techno-religion) กำลังจะเข้ามาแทนศาสนามนุษย์นิยม ที่ครองโลกในยุคทันสมัยมาอย่างยาวนาน เพราะพร้อม ๆ กับการเกิดขึ้นของมวลชนที่เป็น \u0026ldquo;มนุษย์ที่ไร้ประโยชน์ทางเศรษฐกิจ\u0026rdquo; จำนวนมหาศาล ที่เป็นผลมาจากการปฏิวัติปัญญาประดิษฐ์ในอนาคตอันใกล้ ความเชื่อความศรัทธา เรื่องมนุษย์นิยมแบบเสรีนิยม จะถูกบ่อนทำลายในระดับฐานราก ปัจจุบัน ขบวนรถไฟแห่ง \u0026ldquo;ความก้าวหน้า\u0026rdquo; ได้เคลื่อนออกจากสถานีที่ชื่อ โฮโมเซเปียนส์ ไปแล้ว สังคมไหน องค์กรไหน ปัจเจกคนไหนที่พลาดขบวนนี้จะไม่มีโอกาสอีกเป็นครั้งที่สอง\nการจะหาที่นั่งในขบวนนี้ได้ สังคมนั้น องค์กรนั้น ผู้นั้นจำเป็นต้องเข้าใจเทคโนโลยีของศตวรรษที่ 21 โดยเฉพาะอำนาจของเทคโนโลยีชีวภาพ และอัลกอริทึม ผู้ที่ขึ้นรถไฟแห่งความก้าวหน้าได้ทัน จะได้รับอำนาจวิเศษแห่งการสร้างสรรค์ และการทำลาย ส่วนพวกที่ถูกทอดทิ้งไว้ข้างหลังจะต้องเผชิญกับการสูญพันธุ์ไม่ช้าก็เร็ว\n","date":1588978800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588978800,"objectID":"f304f34ed8ded50575fbba88eb46bef4","permalink":"https://example.com/book/deus/deus-6/","publishdate":"2020-05-09T00:00:00+01:00","relpermalink":"/book/deus/deus-6/","section":"book","summary":"โดย ดร. สุวินัย ภรณวลัย\n ก่อนยุคทันสมัย เซเปียนส์ใช้ชีวิตโดยเอาเรื่องเล่าของพระเจ้าเป็นศูนย์กลาง (โดยเฉพาะในโลกของศาสนาคริสต์ ศาสนาอิสลามและศาสนาพราหมณ์) แต่พอเข้าสู่ยุคทันสมัย เซเปียนส์ได้หันมาเอาเรื่องเล่า เกี่ยวกับมนุษย์หรือความเชื่อใหม่เรื่องมนุษย์นิยมเป็นศูนย์กลางแทน การปฏิวัติมนุษย์นิยมอันเป็นหลักความเชื่อใหม่ที่ \u0026ldquo;พลิกฟ้าคว่ำแผ่นดิน\u0026rdquo; สำหรับคนสมัยนั้นได้พิชิตโลกทั้งโลกในช่วงสองสามศตวรรษที่ผ่านมา ศาสนามนุษย์นิยมบูชาความเป็นมนุษย์ และคาดหวังให้มนุษย์แสดงบทบาทที่พระเจ้าเคยแสดงในศาสนาคริสต์และอิสลาม\nมนุษย์นิยมคาดหวังให้ประสบการณ์ของมนุษย์เป็นฝ่ายมอบความหมายให้จักรวาล ผ่านการดึงประสบการณ์ภายในของตนออกมา เพื่อสร้างความหมายให้แก่โลกที่ไร้ความหมาย หัวใจของการปฏิวัติมนุษย์นิยมในยุคทันสมัย จึงมิใช่การสูญสิ้นศรัทธาในพระเจ้า แต่เป็นการหันมาศรัทธาในมนุษย์แทน\nคำขวัญของมนุษย์นิยมในทางจริยธรรม คือ \u0026ldquo;ถ้ารู้สึกดี จงทำ\u0026rdquo; คำขวัญของมนุษย์นิยมในทางการเมือง คือ \u0026ldquo;ผู้ออกเสียงรู้ดีที่สุด\u0026rdquo; คำขวัญของมนุษ์นิยมในทางเศรษฐกิจ คือ \u0026ldquo;ลูกค้าถูกเสมอ\u0026rdquo;\nคำขวัญของมนุษย์นิยมในทางสุนทรียศาสตร์ คือ \u0026ldquo;ความงามอยู่ในดวงตาของผู้ชม\u0026rdquo;\nสรุปสั้น ๆ ได้ว่า พวกมนุษย์นิยมเชื่อมั่นในความรู้สึกของปัจเจก ซึ่งเป็นอัตวิสัยเท่านั้นในการตัดสินทุกเรื่องราวในชีวิต ในยุคทันสมัยภายใต้การปฏิวัติมนุษย์นิยม ความรู้สึกของมนุษย์คือแหล่งกำเนิดของความหมาย และอำนาจทั้งปวง ด้วยเหตุนี้ เป้าหมายสูงสุดของชีวิตแบบมนุษย์นิยม คือการพัฒนาความรู้อย่างเต็มที่ผ่านประสบการณ์อันหลากหลายทางด้านปัญญา อารมณ์และทางกายภาพ\nเป้าหมายของการดำรงอยู่ คือ การกลั่นประสบการณ์ที่เป็นไปได้อย่างกว้างขวางที่สุดของชีวิตให้กลายเป็นภูมิปัญญา (wisdom) จุดยอดสูงสุดแห่งชีวิต มีเพียงประการเดียวคือ การได้วัดความรู้สึกทุกสิ่งทุกอย่างในการเป็นมนุษย์ ตั้งแต่เซเปียนส์สร้างประวัติศาสตร์ และวัฒนธรรมของตนขึ้นในช่วง 70,000 ปีที่ผ่านมา ไม่เคยมีวัฒนธรรมไหน ที่ให้ความสำคัญแก่ความรู้สึก ความปรารถนาและประสบการณ์ของมนุษย์ มากเท่ามนุษย์นิยมมาก่อน อย่างไรก็ดีลัทธิมนุษย์นิยมได้แตกออกเป็นสามนิกายย่อย ที่ตีความประสบการณ์ของมนุษย์แตกต่างกันไป คือ\n มนุษย์นิยมแบบเสรีนิยม (liberal humanism) หรือเรียกย่อๆว่า เสรีนิยม (liberalism) นี่คือ มนุษย์นิยมแบบดั้งเดิมและเป็นกระแสหลักที่มองว่ามนุษย์แต่ละคนเป็นปัจเจกบุคคลที่มีความเฉพาะตัว จึงให้ความสำคัญกับเสรีภาพมากที่สุด","tags":null,"title":"ตอนที่ 6 - ปลายทางของการปฏิวัติมนุษย์นิยมคืออภิมนุษย์","type":"docs"},{"authors":null,"categories":null,"content":"ในขณะที่ Microsoft ชนะศึกทางด้านเทคโนโลยีมาได้ทุกครา ไม่ว่าจะเป็นศึกใหญ่กับ IBM หรือ การบดขยี้เด็กน้อยอย่าง NetScape ให้ตายออกไปจากตลาด Web Browser ได้สำเร็จ และถึงเวลานั้นมันก็ได้เข้าสู่ยุคเริ่มต้นของธุรกิจ Internet แบบเต็มตัว เพราะเกิดเว๊บไซต์ใหม่ ๆ ขึ้นเป็นดอกเห็ด เกิด Business Model ใหม่ๆ ขึ้นบนโลกออนไลน์มากมาย\nซึ่งในเวลาเดียวกันนั้นเอง ลาร์รี่ เพจ และ เซอร์เกย์ บริน สองหนุ่มนักศึกษาปริญญาเอกจากมหาวิทยาลัย Stanford ได้เริ่มทำการสร้าง Index หรือ ดัชนีให้กับเหล่าเว๊บไซต์ทั้งหลายทั่วโลก\nซึ่งแม้วิธีเริ่มต้นในสิ่งที่ทั้งคู่ทำนั้นจะไม่ได้เป็นเรื่องใหม่ในขณะนั้น มีหลายบริษัทก็ทำอยู่เช่นกัน แต่ปัญหาก็คือ ตอนนั้นไม่มีใครคาดคิดถึง Model ธุรกิจของ Search Engine ว่าจะทำเงินจากมันได้อย่างไร เพราะกระแสในขณะนั้นกำลังแห่ไปทาง Web Directory อย่าง Yahoo ที่กำลังดังอยู่ในขณะนั้น\nเนื่องจากเว๊บเพจได้เริ่มเกิดขึ้นเป็นดอกเห็ดจึงทำให้ Yahoo นั้นได้เริ่มสร้าง Directory ให้กับเหล่าเว๊บไซต์หน้าใหม่เหล่านี้ โดยใช้การคัดเลือกจากบรรณาธิการที่เป็นมนุษย์ และแน่นอนว่า พอจำนวนเว๊บไซต์ยิ่งมากขึ้น มันก็เริ่มที่จะลำบากขึ้นเรื่อย ๆ ในการคัดเลือกเหล่านี้\nYahoo เว๊บไดเรคทอรี่ ที่เป็นที่นิยมในขณะนั้น\nอีกฝากฝั่งหนึ่งนั้น Gates และ Microsoft แทบจะไม่ยินดียินร้ายกับการเกิดขึ้นของเหล่าบริการค้นหาทางออนไลน์เลยเสียด้วยซ้ำ Microsoft นั้นสามารถล้มศัตรูมาได้ทั้งหมด และพวกเขาก็ยิ่งใหญ่เกินกว่าที่จะกลัวใครหน้าไหนอีกต่อไป\nตอนนี้ผลิตภัณฑ์ของพวกเขามีการใช้งานอยู่ทั่วโลก ไม่ว่าจะเป็น Windows หรือ ชุด Microsoft Office ซึ่งพวกเขาก็ขายกันไม่ทันอยู่แล้วแค่เพียง product สองตัวนี้ที่มีอยู่ เพราะเป็นผลิตภัณฑ์ที่แทบจะผูกขาดการใช้งานทั่วทั้งโลก\nมันไม่ใช่เรื่องน่าแปลกใจ ว่า Microsoft แทบไม่แยแสกับกระแสออนไลน์ บ้าเห่อ ของเหล่าบริษัทหน้าใหม่ในขณะนั้น เพราะมันมีจำนวนผู้ใช้งานเพียงน้อยนิด และยังไม่มีใครคิดว่าจะทำเงินจากมันได้อย่างไรเลยด้วยซ้ำ\nแต่ด้วยความเป็นยักษ์ใหญ่ จึงได้ทำการกระจายความเสี่ยงไว้ โดยในปี 1997 นั้น Microsoft ได้สร้างเว๊บท่าขนาดใหญ่ แต่จะใช้บริการค้นหาจริง ๆ ของอีกหนึ่งบริษัทคือ Inktomi ซึ่งตอนนั้นเริ่มทำบริการที่เป็นลักษณะเว๊บ Crawler เพื่อไปดึงดูดข้อมูลต่าง ๆ ทั่ว WWW มาทำ Index หรือดัชนี\nซึ่งในรายปลายทศวรรษ 1990 แม้จะมี Search Engine มากมาย เช่น Yahoo , Altavista , Lycos , Excite , AOL , Infoseek แต่ดูเหมือนว่าเหล่า Search Engine เหล่านี้นั้น ไม่มีตัวไหนเลย ที่ทำให้เหล่าผู้บริโภคถูกใจและแก้ปัญหาสำคัญของเหล่า User เมื่อมาค้นหาได้\nSearch Engine ที่มีอยู่อย่างมากมายแต่ยังไม่โดนใจผู้บริโภคในขณะนั้น\nตอนนี้ยังไม่มีใครที่เข้าใจอย่างลึกซึ้งจริง ๆ ในเรื่องการค้นหา ทำให้ผลการค้นหาไม่ได้ดั่งใจคนใช้งานเท่าที่ควร คือมีแค่ให้ใช้ แต่ไม่มีตัวไหนที่ประทับใจผู้ใช้งาน แม้กระทั่ง Microsoft เองก็ตามก็ยังไม่เข้าใจจริง ๆ ของความต้องการของ User จากระบบ Search Engine\nซึ่งในช่วงเวลานั้นนั่นเอง ขณะที่เหล่าผู้ใช้งานกำลังเบื่อกับ โปรแกรมการค้นหาที่มีอยู่เต็มไปหมดในตลาด เพจและบริน ได้สร้างอัลกอริทึมสำหรับจัดลำดับเว๊บเพจที่เรียกว่า “PageRank” ภายใน Lab ของมหาวิทยาลัยสแตนฟอร์ดขึ้นมาได้สำเร็จ\nซึ่งตอนนั้น พวกเขาทั้งสองเองก็ตามก็ยังไม่รู้เลยว่าสิ่งยิ่งใหญ่กำลังจะเกิดขึ้น การทดลองที่บังเอิญของพวกเขา สิ่งที่ทั้งสองต้องการนั่นคือ การนำการวิจัยดังกล่าวไปสู่หัวข้อวิทยานิพันธ์ปริญญาเอก โดยใช้เทคโนโลยีเพจแรงค์ กับโลกของอินเตอร์เน็ต\nซึ่งตอนแรกนั้น พวกเขาทั้งสองรวมถึงอาจารย์ที่ปรึกษาไม่ได้คิดถึงการสร้างโปรแกรมค้นหาเลยด้วยซ้ำ แต่เมื่อพวกเขาได้ทำไประยะหนึ่ง กับพบกับความเป็นจริงที่ว่า สิ่งที่พวกเขาร่วมกันสร้าง มันยิ่งใหญ่เกินกว่าจะเป็นเพียงงานวิชาการเสียแล้ว สิ่งที่เขาค้นพบนั้นมันคือประตูไปสู่ธุรกิจใหม่ ที่มีมูลค่ามหาศาล มันคือขุมทรัพย์ทาง Digital รูปแบบใหม่ ที่ไม่มีบริษัทไหน ๆ ในโลกนี้ เคยคาดคิดมาก่อน\nBill Gates และ Microsoft กำลังหลงระเริง อยู่กับความสำเร็จซ้ำแล้วซ้ำเล่าของพวกเขา โดยแทบจะไม่รู้ตัวเลยว่า ขณะนี้ ศัตรูรายใหม่ ได้ก่อกำเนิดขึ้นแล้ว และกำลังจะกลายเป็นศัตรูที่แข็งแกร่งที่สุด ฉลาดที่สุด เท่าที่พวกเขาเคยเจอมานับตั้งแต่ก่อตั้งธุรกิจเลยก็ว่าได้ จะเกิดอะไรขึ้นต่อกับ Gates และ Microsoft เมื่อธุรกิจเทคโนโลยีกำลังขับเคลื่อนไปยังโลก Internet โปรดอย่าพลาดติดตามตอนต่อไปครับผม\n Written with StackEdit.\n ","date":1589324400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589324400,"objectID":"23909e5652389f2d68ac2126f7fdc399","permalink":"https://example.com/book/gates/bill-gate-7/","publishdate":"2020-05-13T00:00:00+01:00","relpermalink":"/book/gates/bill-gate-7/","section":"book","summary":"ในขณะที่ Microsoft ชนะศึกทางด้านเทคโนโลยีมาได้ทุกครา ไม่ว่าจะเป็นศึกใหญ่กับ IBM หรือ การบดขยี้เด็กน้อยอย่าง NetScape ให้ตายออกไปจากตลาด Web Browser ได้สำเร็จ และถึงเวลานั้นมันก็ได้เข้าสู่ยุคเริ่มต้นของธุรกิจ Internet แบบเต็มตัว เพราะเกิดเว๊บไซต์ใหม่ ๆ ขึ้นเป็นดอกเห็ด เกิด Business Model ใหม่ๆ ขึ้นบนโลกออนไลน์มากมาย\nซึ่งในเวลาเดียวกันนั้นเอง ลาร์รี่ เพจ และ เซอร์เกย์ บริน สองหนุ่มนักศึกษาปริญญาเอกจากมหาวิทยาลัย Stanford ได้เริ่มทำการสร้าง Index หรือ ดัชนีให้กับเหล่าเว๊บไซต์ทั้งหลายทั่วโลก\nซึ่งแม้วิธีเริ่มต้นในสิ่งที่ทั้งคู่ทำนั้นจะไม่ได้เป็นเรื่องใหม่ในขณะนั้น มีหลายบริษัทก็ทำอยู่เช่นกัน แต่ปัญหาก็คือ ตอนนั้นไม่มีใครคาดคิดถึง Model ธุรกิจของ Search Engine ว่าจะทำเงินจากมันได้อย่างไร เพราะกระแสในขณะนั้นกำลังแห่ไปทาง Web Directory อย่าง Yahoo ที่กำลังดังอยู่ในขณะนั้น\nเนื่องจากเว๊บเพจได้เริ่มเกิดขึ้นเป็นดอกเห็ดจึงทำให้ Yahoo นั้นได้เริ่มสร้าง Directory ให้กับเหล่าเว๊บไซต์หน้าใหม่เหล่านี้ โดยใช้การคัดเลือกจากบรรณาธิการที่เป็นมนุษย์ และแน่นอนว่า พอจำนวนเว๊บไซต์ยิ่งมากขึ้น มันก็เริ่มที่จะลำบากขึ้นเรื่อย ๆ ในการคัดเลือกเหล่านี้\nYahoo เว๊บไดเรคทอรี่ ที่เป็นที่นิยมในขณะนั้น\nอีกฝากฝั่งหนึ่งนั้น Gates และ Microsoft แทบจะไม่ยินดียินร้ายกับการเกิดขึ้นของเหล่าบริการค้นหาทางออนไลน์เลยเสียด้วยซ้ำ Microsoft นั้นสามารถล้มศัตรูมาได้ทั้งหมด และพวกเขาก็ยิ่งใหญ่เกินกว่าที่จะกลัวใครหน้าไหนอีกต่อไป","tags":null,"title":"ตอนที่ 7 - Enemy at the Gates","type":"docs"},{"authors":null,"categories":null,"content":"   ชื่อมนุษย์คนแรกที่ถูกจารึก ในสมัยที่ Sapiens ยังเป็นนักล่าสัตว์-เก็บพืชผลอยู่นั้น พวกเราอยู่กันเป็นกลุ่มเล็กๆ แค่ไม่กี่สิบหรือร้อยกว่าคน ข้อมูลต่างๆ ที่ส่งต่อกันจึงมีปริมาณไม่มากนัก การถ่ายทอดข้อมูลกันด้วยปากนั้นก็เพียงพอแล้ว แต่พอเข้ายุคปฏิวัติเกษตรกรรม ขนาดของเมืองมีขนาดใหญ่ขึ้นเป็นแสนหรือกระทั่งเป็นล้านคน ปริมาณข้อมูลก็เพิ่มขึ้นอย่างมหาศาล จนเกินกว่าใครจะจำและถ่ายทอดได้หมด เช่นคนที่ดูแลยุ้งฉางอาจจะจำได้ว่าครอบครัวนาย A เคยเอาข้าวบาร์เลย่มาเก็บไว้ที่นี่เมื่อไหร่และมีปริมาณเท่าไหร่\nถ้าในเมืองมีแค่ 10-20 ครอบครัว นายคนนี้อาจจะจำได้ครบทุกครอบครัรว แต่ถ้าในเมืองมีเป็น 100 หรือ 1,000 ครอบครัว การพึ่งพาความจำนั้นแทบจะเป็นไปไม่ได้เลย เซเปี้ยนส์จึงต้องหาทางออกด้วยการ “ดาวน์โหลด” ข้อมูลในสมองลงสู่อะไรซักอย่าง และนั่นคือต้นกำเนิดของภาษาเขียนครับ คนกลุ่มแรกที่คิดค้นภาษาเขียนคือชาวสุเมเรียนที่อาศัยอยู่ในเมโสโปเตเมีย (อิรัก-คูเวต ในปัจจุบัน) ภาษาเขียนของชาวสุเมเรียนจะประกอบด้วยสัญลักษณ์สองชนิด\nชนิดแรกไว้บ่งบอกตัวเลข 1, 10, 60, 600, 3,600 และ 36,000 (ชาวสุเมเรียนใช้เลขฐาน 10 และเลขฐาน 6 ควบคู่กัน และการใช้เลขฐาน 6 ของชาวสุเมเรียนก็ได้ทิ้งมรดกมาให้เราจนถึงทุกวันนี้ เช่นการแบ่งเวลาหนึ่งวันเป็น 24 ชั่วโมง และการแบ่งวงกลมเป็น 360 องศา)\nสัญลักษณ์ชนิดที่สองเอาไว้บ่งบอกผู้คน สัตว์ สินค้า อาณาเขต วันเดือนปี ฯลฯ “ภาษาเขียน” ที่เก่าแก่ที่สุดที่เราเคยขุดพบนั้นถูกเขียนขึ้นบนกระดานดินเหนียวเมื่อประมาณ 5000 ปีที่แล้ว\nอยากรู้มั้ยครับว่าเขาเขียนว่าอะไร?\n 29,086 Barley 37 months Kushim\n29,086 บาร์ลีย์ 37 เดือน คูชิม\n ซึ่งน่าจะพอแปลได้ว่า\n ข้าวบาร์ลีย์ 29,086 หน่วยถูกนำมาส่งในช่วงเวลา 37 เดือน (ลงชื่อ) คูชิม\n \n“คูชิม” อาจจะเป็นแค่ชื่อตำแหน่งหรือชื่อคนจริงๆ ก็ได้ แต่ผู้เขียนหนังสือให้ความเห็นว่าน่าจะเป็นชื่อคน ซึ่งถ้าใช่จริงๆ นั่นก็แสดงว่า “คูชิม” คือชื่อเก่าที่สุดที่ประวัติศาสตร์มนุษยชาติได้บันทึกเอาไว้เป็นลายลักษณ์อักษร แทนที่จะเป็นชื่อกษัตริย์ นักรบ หรือศาสดา ชื่อแรกในประวัติศาสตร์กลับดูเหมือนจะเป็นชื่อพนักงานบัญชีนะครับ!\nอีกประเด็นที่น่าสนใจก็คือ นอกจากจะบันทึกข้อมูลลงเป็นสัญลักษณ์และอักขระแล้ว คนรุ่นโบราณยังมีวิธีบันทึกแบบอื่นอีก เช่นชาวอินคาที่จะ “จดบันทึก” ด้วยการเอา “เชือก” มามัดเป็นปมๆ เรียกว่า คิปู (Quipu) แทน\n\nความสมบูรณ์ของภาษา ภาษาของชาวสุเมเรียนนั้นใช้ได้แค่เพียงจดบันทึกการค้าขายหรือการเก็บส่วย ยังไม่สามารถเอามาแต่งเป็นกลอนหรือนิยายได้ ภาษาของชาวสุเมเรียนยุคเดิมเลยเรียกว่าเป็น partial script หรือเป็นภาษาเขียนที่ยังไม่สามารถถ่ายทอดภาษาพูดได้อย่างสมบูรณ์ แต่เมื่อประมาณ 2500 ปีก่อนคริสตกาล ภาษาของชาวสุเมเรียนก็พัฒนาขึ้นมาจนเป็น full script จนได้ โดยมีชื่อเรียกว่า cuneiform (คิวนิฟอร์ม) พระราชาใช้คิวนิฟอร์มในการออกกฎหมาย นักบวชใช้มันเพื่อบันทึกคำทำนาย และคนธรรมดาใช้ภาษานี้ในการเขียนจดหมายหากัน ในช่วงเวลาเดียวกันชาวอียิปต์ก็เริ่มมีภาษาที่สมบูรณ์ที่เรียกว่า hieroglyphics และกว่าประเทศจีนจะมีภาษาสมบูรณ์ใช้ ก็ราว 1200 ปีก่อนคริสตกาล\nระบบราชการ เชื่อมั้ยว่าระบบราชการ หรือ bureaucracy นั้นถือกำเนิดเพราะภาษาเขียน !?\nลองคิดภาพว่าเมื่อ 1776 ปีก่อนคริสตกาล ชาวสุเมเรียนสองคนมีข้อพิพาทกันว่าใครเป็นเจ้าของที่นาผืนนี้ นายเจคอบอ้างว่าเขาซื้อนาจากชายชื่ออีโซตั้งแต่ 30 ปีที่แล้ว แต่อีโซบอกว่าจริงๆ แล้วเขาแค่ให้เจคอบเซ้งที่นาเป็นเวลา 30 ปีต่างหาก และนี่ก็ถึงเวลาที่เจคอบต้องคืนผืนนาให้เขาได้แล้ว เมื่อตกลงกันไม่ได้ ทั้งสองคนจึงไปที่กรมที่ดิน เจ้าหน้าที่รับเรื่องแล้วก็เดินเข้าไปใน “ห้องเก็บเอกสาร” ที่มีแต่กระดานดินเหนียวเป็นหมื่นแผ่น คำถามคือเจ้าหน้าที่ผู้น่าสงสารคนนี้จะหากระดานดินเหนียวเจอได้ยังไง? และถ้าเจอจริงๆ จะรู้ได้อย่างไรว่ามันคือเอกสารตัวล่าสุด? และถ้าไม่เจอแสดงว่า อีโซไม่เคยขายที่นาผืนนี้หรือเป็นเพียงเพราะว่ากระดานแผ่นนี้สูญหายหรือแตกสลายไปแล้ว?\nการจดบันทึกเป็นเรื่องง่าย แต่การจัดเก็บข้อมูลให้เป็นระเบียบและการเรียกหาข้อมูล (retrieval) เป็นเรื่องที่ยากกว่ามาก สิ่งที่ทำให้ชาวสุเมเรียน ชาวอินคา หรือชาวจีนโดดเด่นกว่าชนกลุ่มอื่นจึงไม่ใช่เพียงเพราะพวกเขาคิดค้นภาษาเขียนได้เท่านั้น แต่พวกเขายังคิดค้นระบบที่จะช่วยในการจัดเก็บข้อมูลและเรียกข้อมูลได้อย่างมีประสิทธิภาพ อีกทั้งยังลงทุนสอนคนให้เป็น เสมียน นักบัญชีและอาลักษณ์ (ผู้คัดลอก) อีกด้วย มีการขุดค้นพบ “การบ้าน” ของนักเรียนวิชา Writing ในสมัยเมโสโปเตเมียที่แสดงให้เห็นสภาพความเป็นอยู่ของนักเรียนสมัยนั้นได้ดีทีเดียว\n ผมเข้าไปในห้องและนั่งลง อาจารย์อ่านกระดาน แล้วก็พูดว่า “เขียนคำตกหล่นนะ!”\nแล้วเขาก็เฆี่ยนผม\nเจ้าหน้าที่คนหนึ่งพูดว่า “ทำไมเจ้าอ้าปากก่อนที่เราจะอนุญาต”\nแล้วเขาก็เฆี่ยนผม\nเจ้าหน้าที่ที่ดูแลกฎระเบียบพูดว่า “ทำไมลุกขึ้นก่อนที่เราจะอนุญาต”\nแล้วเขาก็เฆี่ยนผม\nคนเฝ้าประตูพูดว่า “ทำไมเดินออกไปก่อนที่เราจะอนุญาต”\nแล้วเขาก็เฆี่ยนผม\nคนดูแลเหยือกเบียร์พูดว่า “ทำไมเอาเบียร์ไปก่อนที่เราจะอนุญาต”\nแล้วเขาก็เฆี่ยนผม\nอาจารย์วิชาสุเมเรียนพูดว่า “ทำไมเจ้าพูดภาษาอัคคาเดียน”\nแล้วเขาก็เฆี่ยนผม\nอาจารย์พูดว่า “ลายมือเจ้าแย่มาก”\nแล้วเขาก็เฆี่ยนผม\n โดยธรรมชาติ สมองของคนเรานั้นจะเชื่อมโยงข้อมูลอย่างเป็นอิสระ (free association) เช่น ขณะที่ผมนั่งเขียนบล็อกนี้ก็ได้ยินเสียงนกร้อง ทำให้นึกถึง Twitter ที่มีโลโก้เป็นรูปนก แล้วก็ทำให้นึกถึงทวิตเตอร์ของ Peter Thiel ที่มีคนตามนับแสนคนทั้งๆ ที่มีแค่ทวีตเดียว แล้วก็นึกถึง Elon Musk ที่เคยทำ Paypal กับ Peter Thiel แล้วก็นึกถึงดาวอังคารเพราะ Elon เป็นเจ้าของ SpaceX ที่มีเป้าหมายอพยพคนไปดาวอังคาร ฯลฯ\nสมองของคนเราถูกออกแบบให้การเก็บและเรียกข้อมูลนั้นเป็นไปอย่างอิสระและไร้ระเบียบ แต่คนที่เรียนเป็นอาลักษณ์หรือนักบัญชีนั้น ต้องรู้วิธีจัดเก็บข้อมูลให้เป็นระเบียบ มีแบบแผนที่ชัดเจน ทำให้เขามีกระบวนการคิดที่แตกต่างจากคนปกติไปโดยปริยาย เพราะในระบบราชการนั้น แต่ละเรื่องต้องถูกจัดเก็บแยกกัน ลิ้นชักนี้สำหรับสัญญากู้บ้าน อีกลิ้นชักนึงสำหรับทะเบียนสมรส อีกลิ้นชักนึงสำหรับคดีความ ฯลฯ\nผู้เขียนบอกว่า ผลกระทบสำคัญที่สุดที่ภาษาเขียนทิ้งไว้ให้เรา คือมันได้สร้างกระบวนการคิดแบบใหม่ (ซึ่งขัดกับการทำงานโดยธรรมชาติของสมอง) จากการมองทุกอย่างเป็นองค์รวมและเชื่อมโยงกันหมด กลายเป็นการมองแบบแยกส่วนและกระบวนการทำงานแบบราชการ\nภาษาคณิตศาสตร์ เวลาผ่านไปหลายศตวรรษ วิธีการจัดการข้อมูลแบบราชการก็มีประสิทธิภาพขึ้นเรื่อยๆ และห่างไกลวิธีคิดของมนุษย์ตามธรรมชาติมากขึ้นเรื่อยๆ ในปีค.ศ.900 partial script ชนิดใหม่ก็ถือกำเนิดขึ้น และทำให้การจัดการข้อมูลเชิงปริมาณมีประสิทธิภาพเพิ่มขึ้นอีกหลายเท่า โดย partial script ชนิดนี้ประกอบไปด้วยสัญลักษณ์สิบแบบตั้งแต่ 0 ถึง 9 และมันถูกเรียกขานว่าตัวเลขอารบิก ทั้งๆ ที่จริงๆ แล้วมันถูกคิดค้นโดยชาวฮินดู แต่ที่มันได้รับชื่อนี้เพราะว่าตอนที่ชาวอาหรับบุกอินเดียแล้วได้รู้จักกับระบบเลขชนิดนี้ พวกเขาก็ได้นำไปพัฒนาและเผยแพร่มันออกไปทั่วตะวันออกกลางและยุโรปนั่นเอง\nในเวลาเพียงไม่นาน ภาษาคณิตศาสตร์ก็ถูกใช้งานไปทั่วโลกและเข้ามามีบทบาทสำคัญในแทบทุกศาสตร์ ยิ่งในสาขาฟิสิกส์และวิศวกรรมด้วยแล้ว ตัวเลขอารบิก และสัญลักษณ์ทางคณิตศาสตร์ ได้เข้ามาจับจองพื้นที่เกือบหมดจนแทบไม่หลงเหลือภาษามนุษย์ full script อยู่เลย\nใครก็ตามที่อยากจะโน้มน้าวคนมีอำนาจในบริษัทหรือในรัฐบาลล้วนแล้วแต่ต้องพึ่งพาภาษาคณิตศาสตร์ แม้กระทั่งสิ่งที่เป็นนามธรรมอย่าง “ความยากจน” “ความสุข” หรือ “ความน่าเชื่อถือ” ก็ยังถูกตีค่าออกมาให้เป็นตัวเลข (poverty line, wellbeing levels, credit rating) และในช่วงไม่กี่สิบปีที่ผ่านมา ภาษาที่มาแรงที่สุดก็มีสัญลักษณ์เพียงสองตัวเท่านั้น นั่นคือสัญลักษณ์ 0 กับ 1\nทุกคำที่ผมพิมพ์อยู่ในคอมพิวเตอร์ตอนนี้ และข้อความที่คุณอ่านอยู่บนจอล้วนแล้วแต่เป็นข้อมูลที่ถูกใส่รหัสด้วยเลข 0 และ 1 มันทำให้คนทั้งโลกได้เชื่อมต่อกันและเปิดทางให้เราเข้าถึงข้อมูลขนาดมหาศาลมากกว่ายุคใด คงไม่มีชาวสุเมเรียนคนไหนคาดคิดว่า ภาษาเขียนที่เอาไว้นับจำนวนข้าวบาร์เลย์จะพาเรามาได้ไกลขนาดนี้\n ที่มา: https://anontawong.com.\n ","date":1588978800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588978800,"objectID":"2031829e7381e7a8488b7890d3037494","permalink":"https://example.com/book/sapiens/sapiens-6/","publishdate":"2020-05-09T00:00:00+01:00","relpermalink":"/book/sapiens/sapiens-6/","section":"book","summary":"ชื่อมนุษย์คนแรกที่ถูกจารึก ในสมัยที่ Sapiens ยังเป็นนักล่าสัตว์-เก็บพืชผลอยู่นั้น พวกเราอยู่กันเป็นกลุ่มเล็กๆ แค่ไม่กี่สิบหรือร้อยกว่าคน ข้อมูลต่างๆ ที่ส่งต่อกันจึงมีปริมาณไม่มากนัก การถ่ายทอดข้อมูลกันด้วยปากนั้นก็เพียงพอแล้ว แต่พอเข้ายุคปฏิวัติเกษตรกรรม ขนาดของเมืองมีขนาดใหญ่ขึ้นเป็นแสนหรือกระทั่งเป็นล้านคน ปริมาณข้อมูลก็เพิ่มขึ้นอย่างมหาศาล จนเกินกว่าใครจะจำและถ่ายทอดได้หมด เช่นคนที่ดูแลยุ้งฉางอาจจะจำได้ว่าครอบครัวนาย A เคยเอาข้าวบาร์เลย่มาเก็บไว้ที่นี่เมื่อไหร่และมีปริมาณเท่าไหร่\nถ้าในเมืองมีแค่ 10-20 ครอบครัว นายคนนี้อาจจะจำได้ครบทุกครอบครัรว แต่ถ้าในเมืองมีเป็น 100 หรือ 1,000 ครอบครัว การพึ่งพาความจำนั้นแทบจะเป็นไปไม่ได้เลย เซเปี้ยนส์จึงต้องหาทางออกด้วยการ “ดาวน์โหลด” ข้อมูลในสมองลงสู่อะไรซักอย่าง และนั่นคือต้นกำเนิดของภาษาเขียนครับ คนกลุ่มแรกที่คิดค้นภาษาเขียนคือชาวสุเมเรียนที่อาศัยอยู่ในเมโสโปเตเมีย (อิรัก-คูเวต ในปัจจุบัน) ภาษาเขียนของชาวสุเมเรียนจะประกอบด้วยสัญลักษณ์สองชนิด\nชนิดแรกไว้บ่งบอกตัวเลข 1, 10, 60, 600, 3,600 และ 36,000 (ชาวสุเมเรียนใช้เลขฐาน 10 และเลขฐาน 6 ควบคู่กัน และการใช้เลขฐาน 6 ของชาวสุเมเรียนก็ได้ทิ้งมรดกมาให้เราจนถึงทุกวันนี้ เช่นการแบ่งเวลาหนึ่งวันเป็น 24 ชั่วโมง และการแบ่งวงกลมเป็น 360 องศา)\nสัญลักษณ์ชนิดที่สองเอาไว้บ่งบอกผู้คน สัตว์ สินค้า อาณาเขต วันเดือนปี ฯลฯ “ภาษาเขียน” ที่เก่าแก่ที่สุดที่เราเคยขุดพบนั้นถูกเขียนขึ้นบนกระดานดินเหนียวเมื่อประมาณ 5000 ปีที่แล้ว\nอยากรู้มั้ยครับว่าเขาเขียนว่าอะไร?","tags":null,"title":"ตอนที่ 6 - กำเนิดภาษาเขียน","type":"docs"},{"authors":null,"categories":null,"content":" โดย ดร. สุวินัย ภรณวลัย\n ตามความเข้าใจของวิทยาศาสตร์ที่ดีที่สุดที่เรามีอยู่ตอนนี้ คำว่าเจตจำนงเสรีและคำว่าวิญญาณ (soul) ล้วนเป็นวาทกรรมที่กลวงโบ๋ คือไม่มีความหมายที่มองเห็นได้เลย (หน้า 371) เสรีภาพมีอยู่ได้แต่เพียงเรื่องเล่าในจินตนาการแบบมนุษย์นิยมซึ่งมนุษย์ประดิษฐ์ขึ้นมาเท่านั้น\nวิญญาณก็เช่นกันมันดำรงอยู่แค่ในเรื่องเล่าเกี่ยวกับพระเจ้าซึ่งมนุษย์แต่งขึ้นมาเพื่อศาสนาในยุคปฏิวัติเกษตรกรรมเท่านั้นลัทธิข้อมูลนิยมซึ่งเป็นตัวแทนศาสนาข้อมูล (The Data Religion) หรือศาสนาเทคโนโลยีซึ่งเป็นศาสนาล่าสุดในยุคนี้ ได้พิชิตลัทธิเอกเทวนิยม ด้วยการหักล้างว่า วิญญาณนิรันดร์ไม่มีจริง\nต่อมาลัทธิข้อมูลนิยมยังพิชิตลัทธิมนุษย์นิยมด้วยการพิสูจน์ทางวิทยาศาสตร์ชีวภาพว่า \u0026ldquo;เจตจำนงเสรี\u0026rdquo;ที่เป็นใจกลางปรัชญามนุษย์นิยมก็ไม่มีจริงเช่นกัน สิ่งที่พวกเสรีนิยมหลงเชื่ออย่างผิดๆว่าเป็นเจตจำนงเสรีหรือตัวตนของตนนั้น ที่แท้ก็มีแต่ยีน ฮอร์โมน และเซลล์ประสาทที่เชื่อฟังกฏทางฟิสิกส์และเคมีเท่านั้น\nสิ่งที่ปัจเจกเคยคิดว่าเป็นการตัดสินใจอย่างอิสระ ที่แท้มันเกิดขึ้นจากการสุ่ม โดยประสานรวมกลับกระบวนการที่กำหนดล่วงหน้าได้ และได้ผลลัพธ์ที่เป็รไปได้เท่านั้น \u0026hellip; กระบวนการเหล่านี้อาจกำหนดได้หรือสุ่มได้ แต่มันไม่เสรี ส่วนสิ่งที่มนุษย์เคยหลงเชื่อว่าเป็นวิญญาณ (soul) อันเป็นนิรันดร์ (หรืออาตมัน)นั้น ที่แท้ก็ไร้แก่นสารภายในที่เรียกว่าตัวตน (เป็นอนัตตา) น่าแปลกมากที่ข้อสรุปนี้ของพวกข้อมูลนิยมช่างคล้ายบทเสนอของพระพุทธเจ้าเมื่อสองพันห้าร้อยกว่าปีก่อนในเรื่องอนัตตามาก\nเพราะพวกข้อมูลนิยมมองว่า ในความเป็นจริงแล้ว มันมีแค่กระแสของจิตสำนึก (a stream of consciousness) กับความปรารถนาโผล่ขึ้นมาและผลุบหายไปภายในกระแสนั้นเท่านั้น หามีตัวตนถาวรที่เป็นเจ้าของความปรารถนานั้นไม่ พวกข้อมูลนิยมจึงเสนอว่า ถ้าสิ่งมีชีวิตไม่มีเจตจำนงเสรีและวิญญาณแล้วไซร้ ก็หมายความว่า เราสามารถเข้าไปจัดการหรือแม้แต่ควบคุมความอยากความปรารถนาได้โดยใช้ ยา ใช้พันธุวิศวกรรม และการกระตุ้นสมองโดยตรงด้วยเทคโนโลยี (หน้า 374)\nผมขอย้ำว่าตรงนี้คือทางแยกที่แทบเป็นคู่ขนานกันระหว่าง พวกสายวัตถุกับพวกสายจิตที่แม้จะยอมรับความยิ่งใหญ่ของลัทธิข้อมูลนิยมเหมือนกัน แต่ใช้วิธีการต่างกันมากในการอยู่เหนือใจหรือพิชิตใจตนเอง พวกสายวัตถุในลัทธิข้อมูลนิยม เชื่อว่าเซเปียนส์ก็สามารถถูกจัดการได้เช่นเดียวกับหนูในห้องทดลอง และมีความเป็นไปได้ที่จะสร้างหรือทำลายความรู้สึกต่างๆอันซับซ้อน ไม่ว่าความรัก ความโกรธ ความกลัว ความหดหู่โดยการกระตุ้นจุดที่ถูกต้องในสมองของมนุษย์ อาการซึมเศร้าสามารถหายไปได้ด้วยการฝังขั้วไฟฟ้าเข้าไปในสมองของผู้ป่วย ทันทีที่ทหารสวมหมวก \u0026ldquo;กระตุ้นสมองด้วยไฟฟ้ากระแสตรงผ่านกระโหลกศีรษะ\u0026rdquo; ก็สามารถอยู่ในสมาธิขั้นสูงได้อย่างต่อเนื่องยาวนานเหมือนนักบวชที่บำเพ็ญสมาธิภาวนามาหลายสิบปีนี่คือทางเลือกของสายวัตถุของพวกข้อมูลนิยมซึ่งเป็นสายกระแสหลักในตอนนี้\nขณะที่ทางเลือกของสายจิตในยุคข้อมูลนิยมเป็นใหญ่ยังคงหันไปพึ่งวิธีการฝึกจิตแบบโบราณในยุคก่อนทันสมัย โดยเอามาผนวกและบูรณาการกับเทคโนโลยีในปัจจุบัน โดยยังคงเป็นนายของตัวเองเอาไว้ได้ ไม่ถูกลัทธิข้อมูลนิยมและลัทธิวัตถุนิยมครอบงำความคิดอย่างสิ้นเชิง\n","date":1588978800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588978800,"objectID":"14165bba1ce25a3c977a0cd5a09339c5","permalink":"https://example.com/book/deus/deus-7/","publishdate":"2020-05-09T00:00:00+01:00","relpermalink":"/book/deus/deus-7/","section":"book","summary":"โดย ดร. สุวินัย ภรณวลัย\n ตามความเข้าใจของวิทยาศาสตร์ที่ดีที่สุดที่เรามีอยู่ตอนนี้ คำว่าเจตจำนงเสรีและคำว่าวิญญาณ (soul) ล้วนเป็นวาทกรรมที่กลวงโบ๋ คือไม่มีความหมายที่มองเห็นได้เลย (หน้า 371) เสรีภาพมีอยู่ได้แต่เพียงเรื่องเล่าในจินตนาการแบบมนุษย์นิยมซึ่งมนุษย์ประดิษฐ์ขึ้นมาเท่านั้น\nวิญญาณก็เช่นกันมันดำรงอยู่แค่ในเรื่องเล่าเกี่ยวกับพระเจ้าซึ่งมนุษย์แต่งขึ้นมาเพื่อศาสนาในยุคปฏิวัติเกษตรกรรมเท่านั้นลัทธิข้อมูลนิยมซึ่งเป็นตัวแทนศาสนาข้อมูล (The Data Religion) หรือศาสนาเทคโนโลยีซึ่งเป็นศาสนาล่าสุดในยุคนี้ ได้พิชิตลัทธิเอกเทวนิยม ด้วยการหักล้างว่า วิญญาณนิรันดร์ไม่มีจริง\nต่อมาลัทธิข้อมูลนิยมยังพิชิตลัทธิมนุษย์นิยมด้วยการพิสูจน์ทางวิทยาศาสตร์ชีวภาพว่า \u0026ldquo;เจตจำนงเสรี\u0026rdquo;ที่เป็นใจกลางปรัชญามนุษย์นิยมก็ไม่มีจริงเช่นกัน สิ่งที่พวกเสรีนิยมหลงเชื่ออย่างผิดๆว่าเป็นเจตจำนงเสรีหรือตัวตนของตนนั้น ที่แท้ก็มีแต่ยีน ฮอร์โมน และเซลล์ประสาทที่เชื่อฟังกฏทางฟิสิกส์และเคมีเท่านั้น\nสิ่งที่ปัจเจกเคยคิดว่าเป็นการตัดสินใจอย่างอิสระ ที่แท้มันเกิดขึ้นจากการสุ่ม โดยประสานรวมกลับกระบวนการที่กำหนดล่วงหน้าได้ และได้ผลลัพธ์ที่เป็รไปได้เท่านั้น \u0026hellip; กระบวนการเหล่านี้อาจกำหนดได้หรือสุ่มได้ แต่มันไม่เสรี ส่วนสิ่งที่มนุษย์เคยหลงเชื่อว่าเป็นวิญญาณ (soul) อันเป็นนิรันดร์ (หรืออาตมัน)นั้น ที่แท้ก็ไร้แก่นสารภายในที่เรียกว่าตัวตน (เป็นอนัตตา) น่าแปลกมากที่ข้อสรุปนี้ของพวกข้อมูลนิยมช่างคล้ายบทเสนอของพระพุทธเจ้าเมื่อสองพันห้าร้อยกว่าปีก่อนในเรื่องอนัตตามาก\nเพราะพวกข้อมูลนิยมมองว่า ในความเป็นจริงแล้ว มันมีแค่กระแสของจิตสำนึก (a stream of consciousness) กับความปรารถนาโผล่ขึ้นมาและผลุบหายไปภายในกระแสนั้นเท่านั้น หามีตัวตนถาวรที่เป็นเจ้าของความปรารถนานั้นไม่ พวกข้อมูลนิยมจึงเสนอว่า ถ้าสิ่งมีชีวิตไม่มีเจตจำนงเสรีและวิญญาณแล้วไซร้ ก็หมายความว่า เราสามารถเข้าไปจัดการหรือแม้แต่ควบคุมความอยากความปรารถนาได้โดยใช้ ยา ใช้พันธุวิศวกรรม และการกระตุ้นสมองโดยตรงด้วยเทคโนโลยี (หน้า 374)\nผมขอย้ำว่าตรงนี้คือทางแยกที่แทบเป็นคู่ขนานกันระหว่าง พวกสายวัตถุกับพวกสายจิตที่แม้จะยอมรับความยิ่งใหญ่ของลัทธิข้อมูลนิยมเหมือนกัน แต่ใช้วิธีการต่างกันมากในการอยู่เหนือใจหรือพิชิตใจตนเอง พวกสายวัตถุในลัทธิข้อมูลนิยม เชื่อว่าเซเปียนส์ก็สามารถถูกจัดการได้เช่นเดียวกับหนูในห้องทดลอง และมีความเป็นไปได้ที่จะสร้างหรือทำลายความรู้สึกต่างๆอันซับซ้อน ไม่ว่าความรัก ความโกรธ ความกลัว ความหดหู่โดยการกระตุ้นจุดที่ถูกต้องในสมองของมนุษย์ อาการซึมเศร้าสามารถหายไปได้ด้วยการฝังขั้วไฟฟ้าเข้าไปในสมองของผู้ป่วย ทันทีที่ทหารสวมหมวก \u0026ldquo;กระตุ้นสมองด้วยไฟฟ้ากระแสตรงผ่านกระโหลกศีรษะ\u0026rdquo; ก็สามารถอยู่ในสมาธิขั้นสูงได้อย่างต่อเนื่องยาวนานเหมือนนักบวชที่บำเพ็ญสมาธิภาวนามาหลายสิบปีนี่คือทางเลือกของสายวัตถุของพวกข้อมูลนิยมซึ่งเป็นสายกระแสหลักในตอนนี้","tags":null,"title":"ตอนที่ 7 - ไม่มีทั้งเจตจำนงเสรีและวิญญาณในโลกของข้อมูลนิยม (dataism)","type":"docs"},{"authors":null,"categories":null,"content":"พอถึงต้นปี 2000 google นั้นก็ได้กลายเป็นเว๊บไซต์ยอดนิยม ของเหล่านักค้นหา แต่ข่าวร้ายก็มาถึงเช่นเดียวกัน เพราะ เกิดวิกฤติดอทคอมขึ้นในช่วงเดือนมีนาคมปี 2000 ซึ่งทำให้พวกเหล่าเศรษฐีอินเตอร์เน็ตพากันล้มหายตายจากไปพอสมควร รวมถึงเหล่านักวิจารณ์ก็พากันวิจารณ์ google ว่ามันเป็นเพียงแค่ของเล่น เพราะไม่มี โมเดลธุรกิจที่ชัดเจน ซึ่งคงมีจุดจบไม่ต่างจากบริษัทดอทคอมรายอื่น ๆ ที่ล้มหายตายจากกันเป็นว่าเล่นในขณะนั้น\nประวัติ Bill Gates ตอนที่ 8 : The Internet Trap\nแต่สิ่งที่ช่วยรักษา Google ให้อยู่รอดปลอดภัยจากวิกฤติครั้งนี้ได้ และเป็นจุดเด่นที่สำคัญที่สุดของ google คงจะเป็นเรื่องของการตัดสินใจต่าง ๆ โดยทุกครั้งนั้น google จะเอาข้อมูลเป็นตัวตั้งเสมอ ทั้งเรื่องการตลาด ผลิตภัณฑ์ หรือแม้กระทั่งเรื่องเทคนิคอลต่าง ๆ ภายใน google เพราะหากไม่มีข้อมูลที่มาสนับสนุนการตัดสินใจได้ดีพอ คนที่เสนออาจจะถูกตอกกลับหน้าหงายโดยสองผู้ก่อนตั้งไปเลยก็ได้\nซึ่งในขณะที่ Google เติบโตอย่างเงียบ ๆ นั้น ในเวลาเดียวกันในตลาดบนอินเตอร์เน็ต Microsoft โฟกัสไปที่ผลิตภัณฑ์เว๊บพอร์ทัล อย่าง MSN เพราะดูจะเข้าท่ากว่าโปรแกรมค้นหาอย่างเห็นได้ชัด และ Microsoft ยังปั้นให้ MSN กลายเป็นเว๊บท่าที่ยอดนิยมที่สุดในโลก ได้อย่างรวดเร็วอีกด้วย\nซึ่งในปี 2000 มีคนเข้ามาใช้งาน MSN กว่า 201 ล้านคน โดยที่ Microsoft แทบจะไม่ได้สนใจโปรแกรมค้นหาใด ๆ ด้วยซ้ำ เพราะพวกเขากำลังก้าวไปสู่จุดสูงสุดของการเป็นเว๊บ portal ที่ทุกคนทั่วโลกต้องเข้าใช้งาน\nMicrosoft กำลังโฟกัสเว๊บพอร์ทัลอย่าง MSN ไม่สนใจโปรแกรมค้นหาเลยด้วยซ้ำ\nแต่จุดเปลี่ยนครั้งสำคัญที่สุดของ google คือการสร้างสิ่งที่เรียกว่า Adwords ซึ่งได้กลายเป็นที่นิยมอย่างรวดเร็วในหมู่ผู้โฆษณา โดยทำให้โปรแกรมค้นหาของ Google นั้นสามารถทำตลาดแทบจะตลอด 24 ชั่วโมงในทุก ๆ วัน\nโดยในทุก ๆ วัน มันมีคำหรือ วลีนับล้านคำ ที่ผู้คนกำลังค้นหา ซึ่งล้วนแล้วแต่เป็นสินค้าและบริการแทบจะทั้งสิ้น ตัวอย่างชื่อสินค้าประจำวันเช่น “Pet food” อาจจะมีราคาประมํูลที่ถูก กว่า คำอย่าง “Investment Advice” ซึ่งเป็นกลไกของตลาดในเรื่องราคาที่ผู้ลงโฆษณายินดีที่จะจ่ายเพื่อให้โฆษณาของตนได้ปรากฏเมื่อมีคนค้นหาคำ ๆ นั้นบน Google\nมันทำให้ Google ได้เงินทุกครั้งที่ผู้ใช้คอมพิวเตอร์คลิกบนโฆษณา ที่มันแสดงขึ้นบนผลการค้นหา และมันถูกทำงานแบบอัตโนมัติ โดยระบบการประมูลออนไลน์ ซึ่งมันทำให้ Google มั่นใจได้ว่า จะได้รับราคาที่ดีที่สุดอยู่เสมอ และสร้างกระแสเงินสดปริมาณมหาศาลให้ Google มากขึ้นเรื่อย ๆ\nและที่สำคัญ Google ยังได้มือดีอย่าง เอริค ชมิดต์ เข้ามาเป็น CEO โดย ชมิดต์ได้เข้ามาเพิ่มมิติของ google ให้ขยายขอบเขตขึ้น ซึ่งจากประสบการณ์บริษัทเก่าที่เขาเคยทำงานด้วยไม่ว่าจะเป็น Novell และ Sun Microsystem เขาล้วนมีประสบการณ์ที่ดีในการสู้กับยักษ์ใหญ๋อย่าง Microsoft ในสงครามกฏหมายในรอบทศวรรษที่ผ่านมา\nชมิดต์ นั้นมักเตือน บรินและเพจ อยู่เสมอว่า อย่าไปท้าทายยักษ์ใหญ่อย่าง Microsoft เหมือนที่ NetScape ทำ พยายามแอบอยู่ในมุมมืด และอย่าพยายามวาดภาพว่า google นั้นเป็นบริษัทเทคโนโลยีที่จะมาแข่งกับ Microsoft\nซึ่งส่วนนี้จะทำให้ Microsoft นั้นยังไม่สนใจ และคิดว่า google ทะเยอะทะยานต้องการทำธุรกิจมากกว่าการค้นหา ซึ่งแม้จะเป็นความจริงก็ตาม แต่ไม่จำเป็นต้องประกาศให้คนรับรู้ ยุทธศาสตร์สำคัญที่สุดของ google คือ กันตัวเองห่างออกจาก Microsoft ให้นานที่สุดเท่าที่จะนานได้ ซึ่งมันเปรียบเสมือนเป็นหลุมพรางที่กันไม่ให้ Microsoft รู้ความเคลื่อนไหวของ Google ในโลก Internet นั่นเอง\nGoogle ได้มือดีอย่าง เอริก ชมิดต์ มาช่วยวางแผนสู้กับ Microsoft\nและในที่สุด ฐานะทางการเงินของ Google ก็เติบโตขึ้นแบบฉุดไม่อยู่ ในปี 2002 นั้น Google สร้างรายได้ 440 ล้านเหรียญ และสามารถทำกำไรได้ถึงกว่า 100 ล้านเหรียญ ซึ่งกำไรทั้งหมดมันมาจากการที่ผู้ใช้คลิกข้อความโฆษณาที่วางอยู่ทางขวาในหน้ารายงานผลการค้นหาบน Google.com\nการเป็นผู้ริเริ่มทำเป็นคนแรก และการเติบโตอย่างรวดเร็วที่สุดในประวัติศาสตร์ของบริษัทอเมริกาของ Google มันได้ย้ายเงินโฆษณาที่เดิมต้องจ่ายให้สื่อเก่า ๆ อย่าง ทีวี วิทยุ หนังสือพิมพ์ และ นิตยสาร มายังอินเทอร์เน็ตแทน และตอนนี้ บริษัทซึ่งตั้งเป้าหมายแรกเพียงแค่ต้องการเป็นผู้สนองการค้นข้อมูลเพียงอย่างเดียวอย่าง Google ได้ก้าวขึ้นมาท้าทายอำนาจของบริษัทยักษ์ใหญ่ในโลกอินเทอร์เน็ต ผ่านการโฆษณาทางอินเทอร์เน็ตได้สำเร็จแล้ว\nและเมื่อทาง Microsoft เริ่มรู้ตัว Gates ก็สั่งให้ทีมงานเข้ามาลุยในธุรกิจ Search Engine แบบทันที แต่แน่นอนว่าเป็นงานที่หนักหน่วงมาก ๆ สำหรับ ยักษ์ใหญ่อย่าง Microsoft ที่ต้องการเข้ามาในตลาดการค้นหา ซึ่ง google ได้นำหน้าไปไกลแล้ว\nเพราะตอนนี้มันไม่ใช่แค่เรื่องความสามารถทางวิศวกรรมคอมพิวเตอร์เท่านั้น แต่มันเป็นเรื่องของความเข้าใจต่อผู้ใช้งาน ว่าพวกเขาต้องการอะไร และ Search Engine ต้องให้สิ่งที่ดีที่สุดให้กับพวกเขาได้ ซึ่ง Google นั้นนำไปแบบไม่เห็นฝุ่นเป็นที่เรียบร้อยแล้ว\nMicrosoft นั้นสามารถเอาชนะ NetScape ได้แบบไม่ยากนัก เพราะมีการเขียน software มาอย่างดี และติดตั้งเป็นค่าเริ่มต้นมาพร้อมกับ Windows ได้ ส่วน google นั้นให้บริการฟรีอยู่แล้ว จึงไม่มีทางที่ Microsoft จะมาตัดราคาเหมือน NetScape ได้เหมือนกลยุทธ์เก่า ๆ\nซึ่งมันมีเพียงทางเลือกเดียวที่จะสามารถล้ม google ได้คือ การสร้าง Search Engine ที่ดีกว่า แต่ดูเหมือนทุกอย่างมันจะสายไปเสียแล้ว เพราะ Brand ของ Google มันได้กลายเป็นคำสามัญสำหรับการค้นหาไปเป็นที่เรียบร้อยแล้ว google กลายเป็นอำนาจที่ทรงพลังที่สุดในอินเตอร์เน็ตได้สำเร็จแล้ว และมันเป็นครั้งแรกที่ Gates และ Microsoft ต้องพ่ายแพ้ในศึกเทคโนโลยี ให้กับบริษัทหน้าใหม่ ที่เพิ่งเกิดไม่กี่ปีอย่าง Google มันเป็นการฝากรอยแผลในใจให้กับ Gates และ Microsoft เป็นอย่างมาก\nแล้วสถานการณ์ที่มาถึงขนาดนี้ Bill Gates จะแก้เกมส์ Google อย่างไร ด้วยความสดใหม่ของเหล่าพนักงาน Google แถมยังได้ไปแย่งชิงตัวเอาพนักงานมือดีมาจาก Microsoft อีกมากมาย มันเป็นการหักหน้า Gates ที่แสนจะเจ็บปวดครั้งแรกในการแข่งขันในธุรกิจทางด้านเทคโนโลยี Gates จะแก้แค้นด้วยวิธีไหน โปรดอย่าพลาดติดตามตอนต่อไปครับ\n Written with StackEdit.\n ","date":1589324400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589324400,"objectID":"1821e5f82d722f7b466e1ba59abbb7ad","permalink":"https://example.com/book/gates/bill-gate-8/","publishdate":"2020-05-13T00:00:00+01:00","relpermalink":"/book/gates/bill-gate-8/","section":"book","summary":"พอถึงต้นปี 2000 google นั้นก็ได้กลายเป็นเว๊บไซต์ยอดนิยม ของเหล่านักค้นหา แต่ข่าวร้ายก็มาถึงเช่นเดียวกัน เพราะ เกิดวิกฤติดอทคอมขึ้นในช่วงเดือนมีนาคมปี 2000 ซึ่งทำให้พวกเหล่าเศรษฐีอินเตอร์เน็ตพากันล้มหายตายจากไปพอสมควร รวมถึงเหล่านักวิจารณ์ก็พากันวิจารณ์ google ว่ามันเป็นเพียงแค่ของเล่น เพราะไม่มี โมเดลธุรกิจที่ชัดเจน ซึ่งคงมีจุดจบไม่ต่างจากบริษัทดอทคอมรายอื่น ๆ ที่ล้มหายตายจากกันเป็นว่าเล่นในขณะนั้น\nประวัติ Bill Gates ตอนที่ 8 : The Internet Trap\nแต่สิ่งที่ช่วยรักษา Google ให้อยู่รอดปลอดภัยจากวิกฤติครั้งนี้ได้ และเป็นจุดเด่นที่สำคัญที่สุดของ google คงจะเป็นเรื่องของการตัดสินใจต่าง ๆ โดยทุกครั้งนั้น google จะเอาข้อมูลเป็นตัวตั้งเสมอ ทั้งเรื่องการตลาด ผลิตภัณฑ์ หรือแม้กระทั่งเรื่องเทคนิคอลต่าง ๆ ภายใน google เพราะหากไม่มีข้อมูลที่มาสนับสนุนการตัดสินใจได้ดีพอ คนที่เสนออาจจะถูกตอกกลับหน้าหงายโดยสองผู้ก่อนตั้งไปเลยก็ได้\nซึ่งในขณะที่ Google เติบโตอย่างเงียบ ๆ นั้น ในเวลาเดียวกันในตลาดบนอินเตอร์เน็ต Microsoft โฟกัสไปที่ผลิตภัณฑ์เว๊บพอร์ทัล อย่าง MSN เพราะดูจะเข้าท่ากว่าโปรแกรมค้นหาอย่างเห็นได้ชัด และ Microsoft ยังปั้นให้ MSN กลายเป็นเว๊บท่าที่ยอดนิยมที่สุดในโลก ได้อย่างรวดเร็วอีกด้วย\nซึ่งในปี 2000 มีคนเข้ามาใช้งาน MSN กว่า 201 ล้านคน โดยที่ Microsoft แทบจะไม่ได้สนใจโปรแกรมค้นหาใด ๆ ด้วยซ้ำ เพราะพวกเขากำลังก้าวไปสู่จุดสูงสุดของการเป็นเว๊บ portal ที่ทุกคนทั่วโลกต้องเข้าใช้งาน","tags":null,"title":"ตอนที่ 8 - The Internet Trap","type":"docs"},{"authors":null,"categories":null,"content":"    ทำไมอินเดียถึงมีแบ่งชั้นวรรณะ?\nทำไมในอเมริกาคนผิวขาวถึงเหยียดคนผิวดำ?\nทำไมผู้ชายถึงเป็นใหญ่กว่าผู้หญิงในทุกสังคม?\n บทความนี้จะอธิบายปรากฎการณ์ดังกล่าวได้ (แม้จะแค่บางส่วนก็ตามที)\nวรรณะในอินเดีย เมื่อประมาณ 3,000 ปีที่แล้ว ชาวอารยัน (ที่มาจากเปอร์เซีย-ประเทศอิหร่านในปัจจุบัน) ได้ย้ายถิ่นฐานลงมาทางบริเวณตะวันตกเฉียงเหนือของอินเดีย ทำการสู้รบและเอาชนะคนท้องถิ่นได้ จึงยึดครองพื้นที่และทำการแบ่งชนชั้นให้เสร็จสรรพ โดยคนในท้องที่เดิมถูกจัดให้เป็นวรรณะศูทร (กรรมกร) ในขณะที่ชาวอารยันเองนั้นครอบครองวรรณะพราหมณ์ (นักบวช) กษัตริย์ (นักรบ) และแพศย์ (พ่อค้า) และเพื่อป้องกันการแข็งขืนของคนท้องถิ่น (ซึ่งมีจำนวนมากกว่า) ชาวอารยันก็ได้แต่งคัมภีร์พระเวทมามาอธิบายการแบ่งชนชั้นวรรณะว่าเป็น “เรื่องธรรมชาติ” โดยคัมภีร์ระบุว่าโลกและทุกสิ่งในจักรวาลนี้ล้วนเกิดจากปฐมธาตุที่ชื่อ “ปุรุษะ” โดยพระอาทิตย์ถือกำเนิดจากตาของปุรุษะ พระจันทร์เกิดจากสมอง พราหมณ์เกิดจากปาก กษัตริย์เกิดจากแขน ส่วนพวกศูทรนั้นเกิดจากเท้าของปุรุษะ\nCommon Myth หรือเรื่องเล่านี้ทำให้ผู้คนเชื่อว่าพวกศูทรถูกสร้างมาให้เป็นเท้าที่คอยแบกรับวรรณะอื่นๆ อยู่แล้ว และทำให้การแบ่งชนชั้นวรรณะฝังรากลึกในวัฒนธรรมของคนอินเดียมาถึงปัจจุบัน ยิ่งไปกว่านั้นการ “ผสมวรรณะ” ก็เป็นเรื่องต้องห้ามเพราะจะทำให้วรรณะนั้นๆ แปดเปื้อน ใครก็ตามที่ละเมิดกฎเหล็กข้อนี้ ลูกที่เกิดมาจะถือเป็นจัณฑาลที่ถูกทุกคนรังเกียจ (ภาษาอังกฤษเรียกจัณฑาลว่า Untouchables หรือคนที่ไม่มีใครอยากจะแตะต้องร่างกาย)\nการเหยียดผิวในอเมริกา ในช่วงคริสตศตวรรษที่ 16-18 ชาวยุโรปที่ไปตั้งรกราก อยู่ในอเมริกาได้นำเข้าทาสจากแอฟริกาหลายล้านคน เพื่อมาช่วยทำเหมืองและทำไร่ เหตุผลที่แรงงานทาสส่วนใหญ่มาจากแอฟริกาก็เพราะว่าอยู่ใกล้กว่าเอเชีย แถมแอฟริกาก็มีตลาดซื้อขายแรงงานทาสรองรับอยู่แล้ว แต่เหตุผลที่สำคัญที่สุดก็คือ ในหลายพื้นที่ที่ทำไร่นั้นมีโรคมาเลเรียและไข้เหลืองระบาด โรคเหล่านี้ถือกำเนิดในแอฟริกา ชาวแอฟริกาจึงพอจะมีภูมิคุ้มกันอยู่บ้างแล้ว ในขณะที่คนยุโรปไม่มีภูมิคุ้มกันโรคเหล่านี้เลย และนี่คือตลกร้าย คนแอฟริกาที่มีภูมิคุ้มกันเหนือกว่าคนยุโรป (biological superiority) กลับถูกขายมาเป็นแรงงานชั้นต่ำที่ต้องคอยทำงานรับใช้คนยุโรป (social inferiority)\nจากนั้นเป็นต้นมา คนผิวขาวก็รู้สึกว่าตัวเองเหนือกว่าคนผิวดำอยู่เสมอ ตอนที่มีการประกาศอิสรภาพจากอังกฤษ ประโยคทองที่ว่า All men are created equal คนที่ลงชื่อท้ายคำประกาศอย่างจอร์จวอชิงตัน หรือเบนจามินแฟรงคลินต่างก็ล้วนแล้วแต่มีทาสในครอบครอง และเขาก็ไม่ได้มองว่านี่เป็นเรื่องมือถือสากปากถือศีลด้วย เพราะสำหรับเขาแล้ว “มนุษย์” (men) กับ “คนดำ” (Negroes) เป็นคนละพวกกัน\nในสมัยนั้นมีความพยายามสร้างความชอบธรรมมากมายสำหรับการแบ่งแยกนี้ โดยนักเทววิทยาอ้างว่า ชาวแอฟริกันนั้นสืบสายพันธุ์มาจากลูกของโนอาห์ (Noah) ที่ชื่อว่าแฮม (Ham) ซึ่งถูกพ่อตัวเองสาปแช่งเอาไว้ว่า ลูกหลานที่เกิดมาจะเป็นทาส ส่วนนักชีววิทยาก็บอกว่าคนดำนั้นฉลาดน้อยกว่าและมีศีลธรรมน้อยกว่าคนขาว และแม้กระทั่งหมอก็บอกว่าคนดำนั้นสกปรกและเป็นพาหะนำโรคแม้ว่าการค้าทาสจะถูกยกเลิกไปนานแล้ว แต่ความเชื่อที่ว่าคนดำนั้นต่ำต้อยกว่าคนขาวก็ยังฝังรากลึก แม้กระทั่งคนดำเอง ก็ถูกทำให้เชื่อไปแล้วว่าพวกของตัวเองขี้เกียจกว่าและสกปรกว่าคนขาว ยิ่งตำแหน่งหน้าที่การงานที่มีเกียรติต่างๆ ล้วนแล้วแต่ถูกครอบครองโดยคนผิวขาว คนก็ยิ่งเชื่อขึ้นไปอีกว่าคนผิวดำนั้นด้อยกว่า โดยใช้ตรรกะที่ว่า “ดูสิ นี่ขนาดเลิกทาสมาตั้งนานแล้ว คนดำก็ยังไม่เห็นจะเจริญขึ้นเลย” ทั้งๆ ที่จริงๆ แล้วกฎหมายและอคตินั้น มีส่วนสำคัญอย่างมากที่ทำให้โอกาสเจริญก้าวหน้าของคนดำนั้นต่ำกว่าคนขาวอย่างเทียบไม่ติด ยกตัวอย่างเช่นในปี 1938 ที่นาย Clennon King นักเรียนผิวดำถูกบังคับให้เข้ารับรักษาในโรงพยาบาลบ้า เหตุผลเพียงเพราะว่าไปสมัครเรียนมหาวิทยาลัย University of Mississippi โดยผู้พิพากษาได้ตัดสินไว้ว่านักศึกษาผิวดำคนนี้ต้องวิกลจริตไปแล้วแน่ๆ ที่คิดว่าตัวเองจะมีโอกาสได้เรียนมหาลัยชั้นนำแห่งนี้!\nหญิงชายไม่เท่ากัน ความไม่เท่าเทียมกันที่เกิดจากเรื่องสีผิวหรือวรรณะนั้นเกิดแค่ในบางประเทศเท่านั้น แต่ความไม่เท่าเทียมกัน ทางเพศนั้นมีให้เห็นในทุกสังคม โดยเกือบทั้งหมดนั้นผู้ชายจะได้เปรียบกว่าผู้หญิงเสมอ ในหลายสังคมผู้หญิงยังถูกมองเป็นเพียงแค่ทรัพย์สมบัติของพ่อ ของสามี หรือของพี่ชาย การทำผิดอย่างการข่มขืนนั้นจึงถูกจัดว่าเป็นการ “ละเมิดทรัพย์สินส่วนบุคคล” โดย “ผู้เสียหาย” ไม่ใช่ผู้หญิงที่ถูกข่มขืนแต่เป็นผู้ชายที่เป็นเจ้าของผู้หญิงคนนั้นต่างหาก ส่วนการข่มขืนผู้หญิง ที่ไม่ได้เป็นสมบัติของชายใดนั้นไม่ถือว่าเป็นอาชญากรรมเลยด้วยซ้ำ อุปมาเหมือนการที่เราเก็บเหรียญที่ตกอยู่บนถนนได้ก็ไม่ถือว่าเป็นการลักทรัพย์\nสังคมแต่ละสังคมได้สร้างวาทกรรม “ความเป็นชาย” (masculinity) และ “ความเป็นหญิง” (femininity) เพื่อเป็นกรอบในการประพฤติตนในสังคมนั้น ๆ ยกตัวอย่าง หนึ่งในคุณลักษณะความเป็นชายของหลายสังคม คือเขาจะต้องรู้สึกดึงดูดกับเพศตรงข้าม ถ้าชายคนนั้นชอบพอเพศเดียวกันถือเป็นเรื่อง “ผิดปกติ” หรือ “ผิดธรรมชาติ”แต่จริงๆ แล้วการที่คนๆ หนึ่งจะชอบเพศเดียวกันไม่ใช่เรื่องผิดธรรมชาติแต่อย่างใด เพราะอะไรก็ตามที่ชีววิทยาเปิดทางให้ เรื่องนั้นต้องถือเป็น “เรื่องธรรมชาติ” (natural) โดยตัวมันเอง\nเรื่องที่ “ผิดธรรมชาติ” อย่างแท้จริงย่อมไม่สามารถเกิดขึ้นได้และไม่จำเป็นต้องให้ใครมาห้าม ไม่เคยมีสังคมไหนที่ห้ามผู้ชายสังเคราะห์แสง หรือห้ามผู้หญิงวิ่งเร็วกว่าแสง หรือห้ามอิเลคตรอนประจุลบดึงดูดกันเอง เวลาที่สังคมฝรั่งบอกว่าเรื่องอะไรคือเรื่องธรรมชาติ เราจึงไม่ได้พูดถึงธรรมชาติในเชิงชีววิทยา แต่เรากำลังพูดถึงธรรมชาติในเชิงความเชื่อทางศาสนาคริสต์ที่ว่ามนุษย์ถูกสร้างจากพระเจ้า หากเราปฏิบัติตนสอดคล้องกับความต้องการของพระเจ้า เราก็จะบอกว่านั่นเป็นเรื่องที่ถูกธรรมชาติ แต่ถ้าเราทำอะไรไม่สอดคล้องกับความต้องการของพระองค์ เราก็กำลังทำอะไรที่ผิดธรรมชาติ\nทำไมผู้ชายถึงเป็นใหญ่กว่าเรื่อยไป สังคมที่ผู้ชายเป็นใหญ่หรือที่เรียกว่า patriarchy นั้นมีมาอย่างช้านาน นักวิชาการพยายามจะอธิบายถึงเหตุผลที่อาจจะส่งผลให้เกิดความเหลื่อมล้ำทางเพศในทุกยุคทุกสมัย แต่คำอธิบายเหล่านี้ก็มักจะมีหลักฐานอื่นมาหักล้างเสมอ บางคนเชื่อว่าที่ผู้ชายเป็นใหญ่เพราะแข็งแรงกว่า เพราะสมัยก่อนการผลิตอาหารต้องใช้แรงงาน และเมื่อผู้ชายแข็งแรงกว่าจึงเป็นกำลังหลักในการผลิตอาหารให้กับสังคม ผู้ชายจึงเป็นกลุ่มคนที่กุมอำนาจมาที่สุดเสมอ\nแต่ถ้าใช้ความแข็งแรงเป็นตัวตั้ง เราจะอธิบายได้อย่างไรว่าทำไมตำแหน่งอื่น ๆ ที่แทบไม่ต้องใช้แรงอะไรเลยเช่นนักบวช นักกฎหมาย หรือนักการเมือง ถึงตกอยู่ในมือเพศชายแต่เพียงฝ่ายเดียว? อีกทฤษฎีหนึ่งบอกว่าเพราะผู้ชายมีความก้าวร้าวกว่า จึงมักเป็นผู้เริ่มต้นสงครามและเป็นผู้คุมเกมสงคราม ทำให้ขึ้นมามีอำนาจมากกว่าผู้หญิง แต่ก็มีคำถามหักล้างอีกว่า แม้ผู้ชายจะก้าวร้าวกว่า เป็นนักรบที่มีประสิทธิภาพกว่า แต่นั่นหมายความว่าคนที่กุมทัพต้องเป็นผู้ชายด้วยเหรอ? ถ้าคนที่ทำไร่ข้าวโพดเป็นคนผิวดำทั้งหมด คนที่คุมคนงานต้องเป็นคนผิวดำด้วยรึเปล่า? ก็เปล่าเสียหน่อย แล้วเหตุใดผู้หญิงจึงไม่เคยได้รับโอกาสกุมกองทัพบ้าง?\nส่วนอีกทฤษฎีหนึ่งบอกว่าเพราะผู้หญิงต้องอุ้มท้องและดูแลลูก ผู้หญิงจึงจำเป็นต้องพึ่งพาผู้ชายให้ช่วยดูแลลูก คอยปกป้องและหาอาหาร แต่ทำไมผู้หญิงต้องพึ่งพาแต่เพศชายด้วย? ในสังคมอย่างช้างหรือชิมแปนซีโบโนโบ การพึ่งพาคนอื่นให้ช่วยเลี้ยงดูลูกนำพามาซึ่งสังคมที่เพศเมียเป็นใหญ่ด้วยซ้ำ (matriarchy) เพราะเมื่อตัวเมียรู้ตัวว่ามันจำเป็นต้องมีคน(ลิง)คอยช่วยเหลือ มันจึงพัฒนาทักษะในการเข้าสังคมและอยู่ร่วมกับลิงตัวอื่น ลิงกลุ่มนี้จึงสร้างเครือข่าย “มนุษย์แม่” ที่แข็งแกร่ง ในขณะที่ลิงตัวผู้ เอาแต่สู้กับตัวอื่นจนไม่มีเวลามาพัฒนาทักษะทางสังคมเลย\nจะด้วยเหตุผลอะไรก็ตามแต่ เพศหญิงนั้นตกเป็นฝ่ายเสียเปรียบมาโดยตลอด แม้ในศตวรรษที่ 21 สถานการณ์จะดีขึ้นกว่าเมื่อ 100 ปีที่แล้วมาก แต่ในหลายสังคมก็นับว่ายังอยู่ห่างไกล “ความเท่าเทียมกัน” อย่างที่เราฝันถึง\n ที่มาบทความ :https://anontawong.com\n ","date":1588978800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588978800,"objectID":"1325ac2ae6206190c2fcd35ab96bf22c","permalink":"https://example.com/book/sapiens/sapiens-7/","publishdate":"2020-05-09T00:00:00+01:00","relpermalink":"/book/sapiens/sapiens-7/","section":"book","summary":"ทำไมอินเดียถึงมีแบ่งชั้นวรรณะ?\nทำไมในอเมริกาคนผิวขาวถึงเหยียดคนผิวดำ?\nทำไมผู้ชายถึงเป็นใหญ่กว่าผู้หญิงในทุกสังคม?\n บทความนี้จะอธิบายปรากฎการณ์ดังกล่าวได้ (แม้จะแค่บางส่วนก็ตามที)\nวรรณะในอินเดีย เมื่อประมาณ 3,000 ปีที่แล้ว ชาวอารยัน (ที่มาจากเปอร์เซีย-ประเทศอิหร่านในปัจจุบัน) ได้ย้ายถิ่นฐานลงมาทางบริเวณตะวันตกเฉียงเหนือของอินเดีย ทำการสู้รบและเอาชนะคนท้องถิ่นได้ จึงยึดครองพื้นที่และทำการแบ่งชนชั้นให้เสร็จสรรพ โดยคนในท้องที่เดิมถูกจัดให้เป็นวรรณะศูทร (กรรมกร) ในขณะที่ชาวอารยันเองนั้นครอบครองวรรณะพราหมณ์ (นักบวช) กษัตริย์ (นักรบ) และแพศย์ (พ่อค้า) และเพื่อป้องกันการแข็งขืนของคนท้องถิ่น (ซึ่งมีจำนวนมากกว่า) ชาวอารยันก็ได้แต่งคัมภีร์พระเวทมามาอธิบายการแบ่งชนชั้นวรรณะว่าเป็น “เรื่องธรรมชาติ” โดยคัมภีร์ระบุว่าโลกและทุกสิ่งในจักรวาลนี้ล้วนเกิดจากปฐมธาตุที่ชื่อ “ปุรุษะ” โดยพระอาทิตย์ถือกำเนิดจากตาของปุรุษะ พระจันทร์เกิดจากสมอง พราหมณ์เกิดจากปาก กษัตริย์เกิดจากแขน ส่วนพวกศูทรนั้นเกิดจากเท้าของปุรุษะ\nCommon Myth หรือเรื่องเล่านี้ทำให้ผู้คนเชื่อว่าพวกศูทรถูกสร้างมาให้เป็นเท้าที่คอยแบกรับวรรณะอื่นๆ อยู่แล้ว และทำให้การแบ่งชนชั้นวรรณะฝังรากลึกในวัฒนธรรมของคนอินเดียมาถึงปัจจุบัน ยิ่งไปกว่านั้นการ “ผสมวรรณะ” ก็เป็นเรื่องต้องห้ามเพราะจะทำให้วรรณะนั้นๆ แปดเปื้อน ใครก็ตามที่ละเมิดกฎเหล็กข้อนี้ ลูกที่เกิดมาจะถือเป็นจัณฑาลที่ถูกทุกคนรังเกียจ (ภาษาอังกฤษเรียกจัณฑาลว่า Untouchables หรือคนที่ไม่มีใครอยากจะแตะต้องร่างกาย)\nการเหยียดผิวในอเมริกา ในช่วงคริสตศตวรรษที่ 16-18 ชาวยุโรปที่ไปตั้งรกราก อยู่ในอเมริกาได้นำเข้าทาสจากแอฟริกาหลายล้านคน เพื่อมาช่วยทำเหมืองและทำไร่ เหตุผลที่แรงงานทาสส่วนใหญ่มาจากแอฟริกาก็เพราะว่าอยู่ใกล้กว่าเอเชีย แถมแอฟริกาก็มีตลาดซื้อขายแรงงานทาสรองรับอยู่แล้ว แต่เหตุผลที่สำคัญที่สุดก็คือ ในหลายพื้นที่ที่ทำไร่นั้นมีโรคมาเลเรียและไข้เหลืองระบาด โรคเหล่านี้ถือกำเนิดในแอฟริกา ชาวแอฟริกาจึงพอจะมีภูมิคุ้มกันอยู่บ้างแล้ว ในขณะที่คนยุโรปไม่มีภูมิคุ้มกันโรคเหล่านี้เลย และนี่คือตลกร้าย คนแอฟริกาที่มีภูมิคุ้มกันเหนือกว่าคนยุโรป (biological superiority) กลับถูกขายมาเป็นแรงงานชั้นต่ำที่ต้องคอยทำงานรับใช้คนยุโรป (social inferiority)","tags":null,"title":"ตอนที่ 7 - ความเหลื่อมล้ำ","type":"docs"},{"authors":null,"categories":null,"content":" โดย ดร. สุวินัย ภรณวลัย\n ในยุคข้อมูลนิยมที่เริ่มต้นขึ้นแล้ว มีการคุกคามในทางปฏิบัติ 3 ประการที่จะบั่นทอนความเชื่อแบบเสรีนิยมให้หมดสมัย (หน้า 398)\n มนุษย์จะสูญเสียความมีประโยชน์ทางเศรษฐกิจและทางการทหาร เพราะระบบเศรษฐกิจในยุคข้อมูลนิยม (dataism) ที่กำลังเข้ามาแทนที่ยุคทุนนิยม (capitalism) จะเลิกเชื่อมโยงคุณค่ากับมนุษย์ส่วนใหญ่ที่เป็นมวลชน (mass) ในระบบทุนนิยมที่กำลังกลายเป็นอดีต\n ระบบข้อมูลนิยมจะยังค้นหาคุณค่าในมนุษย์โดยรวมได้บางส่วนอยู่ แต่มิใช่ในปัจเจกบุคคลที่ไม่เหมือนใครเหมือนในช่วงรุ่งโรจน์ของเสรีนิยมที่กำลังกลายเป็นอดีต\n ระบบข้อมูลนิยมจะยังคงค้นหาคุณค่าในปัจเจกบุคคลบางส่วนที่จะประกอบกันเป็น \u0026ldquo;กลุ่มอภิมนุษย์ที่อัปเกรดแล้ว\u0026rdquo; หรือโฮโมดีอุสซึ่งเป็นอภิสิทธิ์ชนกลุ่มใหม่ในอนาคต มิใช่กลุ่มของประชากรจำนวนมากที่กำลังกลายเป็นสิ่งชำรุดทางประวัติศาสตร์\n  สิ่งนี้กำลังเกิดขึ้นและหลีกเลี่ยงได้ยากมาก เพราะนี่เป็นครั้งแรกในประวัติศาสตร์ของมนุษยชาติที่การพัฒนาปัญญา (intelligence) กับจิต (consciousness) (ในหนังสือแปลภาษาไทยใช้คำว่า สติสัมปชัญญะ ซึ่งผมไม่เห็นด้วย) เริ่มแยกจากกันไปคนละทาง ก่อนหน้านี้ ปัญญาอันสูงยิ่งมักเดินเคียงคู่กับจิตที่พัฒนาแล้วเสมอ คือมีแต่สิ่งที่มีจิตเท่านั้นจึงสามารถทำในสิ่งที่จำเป็นต้องใช้ปัญญามาก อย่างเช่นการเล่นหมากรุก ขับรถยนต์ การวิเคราะห์โรค การระบุตัวผู้ก่อการร้ายเป็นต้น\nแต่บัดนี้ในยุคข้อมูลนิยม เรากำลังพัฒนา \u0026ldquo;ปัญญารูปแบบใหม่\u0026rdquo; ที่ไม่ต้องพึ่งจิตมนุษย์ แต่กลับสามารถทำงานดังที่กล่าวมาได้ดีกว่ามนุษย์เสียอีก เพราะงานดังกล่าวมีพื้นฐานอยู่ที่การรับรู้รูปแบบ และอัลกอริทึมซึ่งไม่มีจิตสำนึกสามารถรับรู้รูปแบบได้เด่นล้ำกว่ามนุษย์ที่มีจิตเสียอีก สั้น ๆ การไปสู่ปัญญายวดยิ่ง (super-intelligence) ในยุคข้อมูลนิยมต่อจากนี้ ไม่จำเป็นต้องพึ่งเส้นทางที่ต้องผ่านจิตสำนึกของมนุษย์ที่เป็นชีวิตอินทรีย์อีกต่อไปแล้ว เพราะวิวัฒนาการของ \u0026ldquo;คอมพิวเตอร์อนินทรีย์\u0026rdquo;สามารถลัดข้ามเส้นทางนี้ไปเลย โดยหันไปสร้างเส้นทางใหม่ที่แตกต่าง (จักรกลเรียนรู้ด้วยตนเองหรือ machine learning) และเร็วกว่ามากไปสู่ปัญญายวดยิ่ง\nเมื่อเป็นเช่นนี้ จะเห็นได้ชัดว่าคำถามที่สำคัญที่สุดในคริสต์ศตวรรษที่ 21 ต่อจากนี้คือ \u0026ldquo;จะทำอย่างไรดีกับคนที่มีมากเกินไปและกลายเป็นชนชั้นไร้ประโยชน์ (the useless class) ทางเศรษฐกิจ? จะเอามนุษย์ที่มีจิตไปทำอะไร เมื่อเรามีอัลกอริทึมที่ไม่มีจิตแต่มีปัญญาสูงยิ่งซึ่งสามารถทำได้ดีกว่าคนเกือบทุกอย่าง ?\u0026rdquo; (หน้า 411) วิทยาศาสตร์ชีวภาพในปัจจุบันได้หักล้างทำลาย ความเชื่อผิดๆที่หลงคิดว่าเซเปียนส์เป็น \u0026ldquo;สัตว์ประเสริฐ\u0026rdquo; เหนือกว่าอัลกอริทึมที่ไร้จิตเพราะตัวเองมีจิต ด้วยหลักการง่ายๆ 3 ประการดังต่อไปนี้\n สิ่งมีชีวิตก็เป็นอัลกอริทึม สัตว์ทุกชนิดรวมถึงเซเปียนส์คือการรวมตัวของอัลกอริทึมอินทรีย์ที่ได้รับอิทธิพลจากการคัดสรรตามธรรมชาติตลอดวิวัฒนาการหลายล้านปี\n การคำนวณของอัลกอริทึมมิได้ขึ้นกับสสารที่ใช้สร้างเครื่องคำนวณ\n จึงไม่มีเหตุผลที่จะคิดว่าอัลกอริทึมอินทรีย์สามารถทำในสิ่งที่อัลกอริทึมอนินทรีย์ไม่มีวันทำตามได้ ตราบใดที่การคำนวณได้ผล จะสำคัญตรงไหนว่า อัลกอริทึมนั้นเป็นคาร์บอน (อินทรีย์)หรือซิลิคอน(อนินทรีย์) ?\n  มาถึงตรงนี้ ไม่ทราบว่าคุณเห็นเหมือนผมหรือไม่ว่า หลักคิดแบบข้อมูลนิยม เป็นวิธีคิดแบบลดทอนนิยม (reductionism) ที่สุดโต่งประเภทหนึ่ง (แต่ทรงพลังยิ่ง) ที่ลดทอนชีวิตเป็นแค่อัลกอริทึมเท่านั้น\nโดยที่ชีวิตเป็นแค่การประมวลผลข้อมูลเท่านั้น ปัญหาเชิงปรัชญาที่เป็นจุดอ่อนที่ใหญ่ที่สุดของพวกลัทธิข้อมูลนิยม คือการไม่เห็นคุณค่าของจิต รวมทั้งให้คุณค่าแก่ปัญญาอย่างเดียวเท่านั้น การไม่เข้าใจเรื่องจิต ไม่ยอมรับคุณค่าและความหมายแห่งการดำรงอยู่ของจิต คือข่าวร้ายที่เป็นคำสาปใหม่ในยุคข้อมูลนิยมที่จะครองโลกในไม่ช้านี้\nบทสรุปของผมซึ่งต่างจากพวกนักวิทยศาสตร์ชีวภาพและพวกข้อมูลนิยม รวมทั้งพวกวัตถุนิยมประวัติศาตร์ คือ คนเราต้องแยกการพัฒนาจิต (consciousness) ออกจากการพัฒนาปัญญา(intelligence) และทุ่มเทชีวิตให้กับการพัฒนาจิต ยกระดับจิตเป็นหลัก มิใช่ปัญญาซึ่งต่อไปอัลกอริทึมอนินทรีย์จะทำได้ดีกว่าคนแน่ ๆ ในไม่ช้านี้\n","date":1588978800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588978800,"objectID":"6c257c476e00568672d3b920fb7e2118","permalink":"https://example.com/book/deus/deus-8/","publishdate":"2020-05-09T00:00:00+01:00","relpermalink":"/book/deus/deus-8/","section":"book","summary":"โดย ดร. สุวินัย ภรณวลัย\n ในยุคข้อมูลนิยมที่เริ่มต้นขึ้นแล้ว มีการคุกคามในทางปฏิบัติ 3 ประการที่จะบั่นทอนความเชื่อแบบเสรีนิยมให้หมดสมัย (หน้า 398)\n มนุษย์จะสูญเสียความมีประโยชน์ทางเศรษฐกิจและทางการทหาร เพราะระบบเศรษฐกิจในยุคข้อมูลนิยม (dataism) ที่กำลังเข้ามาแทนที่ยุคทุนนิยม (capitalism) จะเลิกเชื่อมโยงคุณค่ากับมนุษย์ส่วนใหญ่ที่เป็นมวลชน (mass) ในระบบทุนนิยมที่กำลังกลายเป็นอดีต\n ระบบข้อมูลนิยมจะยังค้นหาคุณค่าในมนุษย์โดยรวมได้บางส่วนอยู่ แต่มิใช่ในปัจเจกบุคคลที่ไม่เหมือนใครเหมือนในช่วงรุ่งโรจน์ของเสรีนิยมที่กำลังกลายเป็นอดีต\n ระบบข้อมูลนิยมจะยังคงค้นหาคุณค่าในปัจเจกบุคคลบางส่วนที่จะประกอบกันเป็น \u0026ldquo;กลุ่มอภิมนุษย์ที่อัปเกรดแล้ว\u0026rdquo; หรือโฮโมดีอุสซึ่งเป็นอภิสิทธิ์ชนกลุ่มใหม่ในอนาคต มิใช่กลุ่มของประชากรจำนวนมากที่กำลังกลายเป็นสิ่งชำรุดทางประวัติศาสตร์\n  สิ่งนี้กำลังเกิดขึ้นและหลีกเลี่ยงได้ยากมาก เพราะนี่เป็นครั้งแรกในประวัติศาสตร์ของมนุษยชาติที่การพัฒนาปัญญา (intelligence) กับจิต (consciousness) (ในหนังสือแปลภาษาไทยใช้คำว่า สติสัมปชัญญะ ซึ่งผมไม่เห็นด้วย) เริ่มแยกจากกันไปคนละทาง ก่อนหน้านี้ ปัญญาอันสูงยิ่งมักเดินเคียงคู่กับจิตที่พัฒนาแล้วเสมอ คือมีแต่สิ่งที่มีจิตเท่านั้นจึงสามารถทำในสิ่งที่จำเป็นต้องใช้ปัญญามาก อย่างเช่นการเล่นหมากรุก ขับรถยนต์ การวิเคราะห์โรค การระบุตัวผู้ก่อการร้ายเป็นต้น\nแต่บัดนี้ในยุคข้อมูลนิยม เรากำลังพัฒนา \u0026ldquo;ปัญญารูปแบบใหม่\u0026rdquo; ที่ไม่ต้องพึ่งจิตมนุษย์ แต่กลับสามารถทำงานดังที่กล่าวมาได้ดีกว่ามนุษย์เสียอีก เพราะงานดังกล่าวมีพื้นฐานอยู่ที่การรับรู้รูปแบบ และอัลกอริทึมซึ่งไม่มีจิตสำนึกสามารถรับรู้รูปแบบได้เด่นล้ำกว่ามนุษย์ที่มีจิตเสียอีก สั้น ๆ การไปสู่ปัญญายวดยิ่ง (super-intelligence) ในยุคข้อมูลนิยมต่อจากนี้ ไม่จำเป็นต้องพึ่งเส้นทางที่ต้องผ่านจิตสำนึกของมนุษย์ที่เป็นชีวิตอินทรีย์อีกต่อไปแล้ว เพราะวิวัฒนาการของ \u0026ldquo;คอมพิวเตอร์อนินทรีย์\u0026rdquo;สามารถลัดข้ามเส้นทางนี้ไปเลย โดยหันไปสร้างเส้นทางใหม่ที่แตกต่าง (จักรกลเรียนรู้ด้วยตนเองหรือ machine learning) และเร็วกว่ามากไปสู่ปัญญายวดยิ่ง\nเมื่อเป็นเช่นนี้ จะเห็นได้ชัดว่าคำถามที่สำคัญที่สุดในคริสต์ศตวรรษที่ 21 ต่อจากนี้คือ \u0026ldquo;จะทำอย่างไรดีกับคนที่มีมากเกินไปและกลายเป็นชนชั้นไร้ประโยชน์ (the useless class) ทางเศรษฐกิจ?","tags":null,"title":"ตอนที่ 8 - เซเปียนส์กลายเป็นสิ่งชำรุดทางประวัติศาสตร์ได้อย่างไร","type":"docs"},{"authors":null,"categories":null,"content":"ในเมื่อมีการประกาศอย่างชัดเจนจาก Bill Gates และ Microsoft ว่า google คือ ศัตรูหมายเลขหนึ่งที่กำลังจะรุกรานธุรกิจต่าง ๆ ของ Microsoft และในโลกของ Search Engine นั้นดูเหมือนว่า Microsoft จะเพลี่ยงพล้ำให้กับ google ไปเสียแล้ว ทางเลือกใหม่ของ Microsoft จึงเป็นการหาพันธมิตรใหม่ในโลกออนไลน์แทน\nประวัติ Bill Gates ตอนที่ 9 : Revenge of the Fallen\nและแน่นอนว่าบริการใดที่เป็นที่นิยมในโลกอินเตอร์เน็ต บริการนั้นก็ถือเป็นภัยคุกคามของ google เช่นเดียวกัน เมื่อเข้าสู่ปี 2007 บริการ Social Network น้องใหม่อย่าง facebook เริ่มปรากฏกายออกมาเป็นภัยคุกคุมใหม่ของ google\nสาเหตุสำคัญก็เนื่องมาจาก มาร์ค ซักเคอร์เบิร์ก พยายามปลุกปั้น facebook ด้วยความชาญฉลาด โดย facebook จะทำการซ่อนเนื้อหาทั้งหมดไว้ ไม่ให้ Search Engine รายใดเข้ามาย่างกรายใน platform ของ facebook ผ่านเนื้อหาของไฟล์ “robot.txt” ที่เป็นตัวกรองไม่ให้ Search Engine เข้ามาทำการเก็บข้อมูล Content ภายในเว๊บของตนเอง\nมันเปรียบเสมือนปราการขนาดยักษ์คอยป้องกันไม่ให้ google เข้ามาสอดส่องข้อมูลภายใน facebook เพราะมันเป็นเรื่องของข้อมูลส่วนตัวของผู้ใช้งาน มาร์ค จึงไม่อยากให้ข้อมูลเหล่านี้ถูกค้นหาได้ทั่วไปในระบบอินเตอร์เน็ต เพราะหากจะค้นหาต้องเข้ามา join ใน platform ของเขาเท่านั้นที่เป็นระบบปิด ที่ต้องสมัครเข้ามาใช้งาน\nหนุ่มน้อยอย่าง มาร์ค ซักเคอร์เบิร์ก ที่สร้างธุรกิจใหม่บนโลกออนไลน์อย่าง Social Network\ngoogle ที่เคยเป็นพี่ใหญ่คอยสอดส่องไปทั่วทั้งระบบ internet เริ่มรู้สึกหงุดหงิด เพราะเนื้อหาใน facebook นั้น google ไม่มีอำนาจที่จะเข้าถึงได้ และที่สำคัญมันกำลังเติบโตอย่างรวดเร็ว เมื่อเหล่าผู้คนบนโลกออนไลน์แห่แหนกันมาเล่น social network เพิ่มมากขึ้นเรื่อย ๆ มันทำให้ google ไม่สามารถทำการโฆษณาให้กลุ่มคนเหล่านี้ได้เลย เพราะถูกกำแพงที่ facebook สร้างกั้นไว้\nและดูเหมือนว่า google จะโดนกับตัวเองบ้าง เพราะตอนนี้ มาร์ค ซักเคอร์เบิร์กก็มอง google เหมือนที่ google มองไปยัง Microsoft ในช่วงแรก ๆ ซึ่ง มาร์ค ก็ไม่อยากให้ facebook ถูกกลืนกินโดย google เช่นกันเดียวกัน เหมือนตอนที่ google ก็ไม่ยอมให้ Microsoft กลืนกินธุรกิจของตัวเองในช่วงแรก\nและเป็นพี่ใหญ่อย่าง Microsoft นี่เอง ที่แทนที่จะสู้รบกับ google ที่สดกว่าด้วยน้ำมือตัวเอง จึงได้คิดแผนการใหม่ด้วยการ ซื้อหุ้น facebook ในปริมาณเพียง 1.6% ด้วยมูลค่ากว่า 240 ล้านเหรียญสหรัฐ\nซึ่งต้องบอกว่าในขณะนั้น facebook มีผู้ใช้งานเพียงแค่ 42 ล้านคนเท่านั้น แต่นี่เป็นแผนการที่เหนือชั้นอีกครั้งของ Microsoft ที่ต้องการเตะตัดขา google ในโลกออนไลน์ ที่กำลังคิดการณ์ใหญ่ และเริ่มที่จะรุกล้ำเข้ามาที่ธุรกิจของ Microsoft มากขึ้นเรื่อย ๆ ซึ่งดีลดังกล่าวนี้ ทำให้มูลค่า facebook ในตอนนั้นพุ่งสูงขึ้นไปถึงกว่า 1.5 หมื่นล้านเหรียญเลยทีเดียว\nแม้จะเป็นชัยชนะเล็ก ๆ ของ Microsoft ต่อ google แต่อย่างไรก็ตามสัดส่วนของ Bing นั้นก็ไม่ได้เพิ่มขึ้นในระดับที่ทำให้เหล่าผู้บริหารสบายใจ ไม่ว่าจะเป็นตลาดในสหรัฐ หรือ ทั่วโลก ซึ่ง Bing นั้นได้ครองส่วนแบ่งเพียงเล็กน้อยในตลาดการค้นหา และดำเนินธุรกิจได้ด้วยอาศัยเงินทุนที่มหาศาลของ Microsoft เพียงเท่านั้น\nซึ่ง Microsoft ก็จำเป็นต้องหาทางเลือกทางอื่น เพราะรู้อยู่แล้วว่าการไปสู้กับ google แบบตรง ๆ ในโลกธุรกิจออนไลน์นั้น พวกเขาเป็นรองอย่างชัดเจน ในช่วงต้นปี 2008 Microsoft จึงได้ทำการเสนอราคาซื้อ Yahoo สูงถึง 4.5 หมื่นล้านเหรียญ เป้าหมายของ Microsoft ก็เพื่อที่จะเพิ่มอำนาจการค้นหาของบริษัท โดยการขยายธุรกิจ ซึ่งตอนนั้น Yahoo ก็ถือเป็นอันดับสองในโลกอินเตอร์เน็ต รองจาก google เพียงเท่านั้น\nYahoo ครองส่วนแบ่งการตลาดโฆษณาออนไลน์ที่ใหญ่ที่สุดบนเว๊บไซต์ มีทั้งเนื้อหาข่าว บริการ email ซึ่งมีผู้ใช้งานอยู่มากมายทั่วโลก และที่สำคัญ Microsoft ก็มองว่า Yahoo น่าจะเป็นส่วนเติมเต็มที่ดีให้กับ Bing ได้อย่างแน่นอน\nแต่ครั้งนี้ ดูเหมือน ผู้บริหารฝั่ง Yahoo จะตัดสินใจพลาดครั้งใหญ่ เพราะได้ปฏิเสธข้อเสนอของ Microsoft ไปอย่างไม่ใยดี ซึ่งเจอร์รี่ หยาง ก็ได้กลายเป็นคนต้องรับผิดชอบถูกกดดันให้ลาออกไปในที่สุด ซึ่งการปฏิเสธครั้งนี้ถือเป็นจุดเปลี่ยนครั้งสำคัญของอุตสาหกรรมโฆษณาออนไลน์เลยก็ว่าได้\nแม้จะมีการสร้าง Partnership กันระหว่าง Microsoft และ Yahoo ในเรื่องการค้นหา ภายหลัง โดย Microsoft จะเข้ามาสนับสนุนในเรื่องการค้นหาแทน แต่ตอนนั้นต้องบอกว่ามันสายไปเสียแล้ว\nYahoo ใช้โปรแกรมค้นหาของ Bing จาก Microsoft แต่ดูเหมือนจะสายไปเสียแล้ว\nเมื่อ facebook กำลังเติบโตขึ้นเรื่อย ๆ และได้ฉกฉวยรายได้จากโฆษณาออนไลน์ไปเป็นจำนวนมาก ด้วยจำนวนผู้ใช้งานทั่วโลกที่เติบโตขึ้นอย่างรวดเร็ว ทำให้รายรับของ Yahoo ลดลง หลังจากนั้น Yahoo ก็ดำดิ่งจนสุดท้ายก็ต้องขายกิจการไปในที่สุด\nต้องบอกว่า ตลาดโฆษณา online ก่อนหน้ายุค facebook เกิดนั้น google ครองตลาดส่วนนี้แบบแทบจะเบ็ดเสร็จ เหลือช่องว่างไว้ให้ bing ของ microsoft เพียงเล็กน้อยเท่านั้น\nการส่ง facebook ไปทำการรบกับ google แทน และเป็นการถ่วงดุลอำนาจของ google หลังจากที่ไม่ได้มีคู่แข่งที่สมน้ำสมเนื้อมานาน\nซึ่งต้องบอกว่าเป็นแผนที่เหนือชั้นมากของ Bill Gates และ Microsoft อีกครั้งหนึ่งในสงครามด้านเทคโนโลยี ที่ห้ำหั่นกันอย่างสุดมันส์ ใครพลาดพลั้งเพียงเล็กน้อย ก็อาจจะทำให้ธุรกิจของตัวเองล้มหายตายจากไปเลยก็ว่าได้ อย่างที่เราได้เห็นตัวอย่างมานับต่อนับแล้วนั่นเอง และแน่นอนว่า มันทำให้ Microsoft นั้นได้มีเวลาหายใจหายคอ และกลับมาโฟกัสกับธุรกิจตัวเองมากขึ้น เพื่อสร้างความสามารถในการเติบโตในระยะยาวได้อีกครั้งนั่นเองครับ\n Written with StackEdit.\n ","date":1589324400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589324400,"objectID":"459313debd8a9ec668ecd19662b08da2","permalink":"https://example.com/book/gates/bill-gate-9/","publishdate":"2020-05-13T00:00:00+01:00","relpermalink":"/book/gates/bill-gate-9/","section":"book","summary":"ในเมื่อมีการประกาศอย่างชัดเจนจาก Bill Gates และ Microsoft ว่า google คือ ศัตรูหมายเลขหนึ่งที่กำลังจะรุกรานธุรกิจต่าง ๆ ของ Microsoft และในโลกของ Search Engine นั้นดูเหมือนว่า Microsoft จะเพลี่ยงพล้ำให้กับ google ไปเสียแล้ว ทางเลือกใหม่ของ Microsoft จึงเป็นการหาพันธมิตรใหม่ในโลกออนไลน์แทน\nประวัติ Bill Gates ตอนที่ 9 : Revenge of the Fallen\nและแน่นอนว่าบริการใดที่เป็นที่นิยมในโลกอินเตอร์เน็ต บริการนั้นก็ถือเป็นภัยคุกคามของ google เช่นเดียวกัน เมื่อเข้าสู่ปี 2007 บริการ Social Network น้องใหม่อย่าง facebook เริ่มปรากฏกายออกมาเป็นภัยคุกคุมใหม่ของ google\nสาเหตุสำคัญก็เนื่องมาจาก มาร์ค ซักเคอร์เบิร์ก พยายามปลุกปั้น facebook ด้วยความชาญฉลาด โดย facebook จะทำการซ่อนเนื้อหาทั้งหมดไว้ ไม่ให้ Search Engine รายใดเข้ามาย่างกรายใน platform ของ facebook ผ่านเนื้อหาของไฟล์ “robot.txt” ที่เป็นตัวกรองไม่ให้ Search Engine เข้ามาทำการเก็บข้อมูล Content ภายในเว๊บของตนเอง","tags":null,"title":"ตอนที่ 9 - Revenge of the Fallen","type":"docs"},{"authors":null,"categories":null,"content":"   โลกใบเล็ก เมื่อประมาณ 10,000 ปีที่แล้ว เป็นยุคสิ้นสุดของ Ice Age ครั้งล่าสุด ระดับน้ำทะเลสูงขึ้นทั่วโลก แผ่นดินบางแห่งอย่างแทสมาเนียได้กลายเป็นเกาะที่ถูกตัดขาดจากแผ่นดินใหญ่อย่างออสเตรเลียโดยสิ้นเชิง เมื่อไม่มีการติดต่อสื่อสารกัน คนในสมัยนั้นจึงเปรียบเหมือนอยู่ใน “โลกคนละใบ” อย่างแท้จริง เป็นเวลาถึงหมื่นกว่าปีที่ชาวแทสมาเนียไม่เคยรับรู้ความเป็นไปหรือแม้กระทั่งสำเหนียกถึงความมีตัวตนอยู่ของสังคมอื่นๆ และคนในสังคมอื่นก็ไม่เคยรู้ถึงการมีตัวตนของชาวแทสมาเนียเช่นกัน\nถ้านับว่าแทสมาเนียเป็น “โลก 1 ใบ” เมื่อหมื่นปีที่แล้วก็มีโลกใบเล็กๆ อยู่หลายพันใบ (หลายพันสังคมที่อยู่แยกจากกันโดยสิ้นเชิง) แต่พอเข้าสู่ช่วง 2000 ปีก่อนคริสตกาลซึ่งคนเริ่มมีการติดต่อสื่อสารกันมากขึ้น จำนวนโลกก็ลดลงเหลือแค่หลักร้อย และเมื่อถึงปีปีค.ศ.1450 (ก่อนที่ชาวยุโรปจะเริ่มออกเดินทะเล) คน 90% บนโลกใบนี้ก็อยู่บนโลกขนาดใหญ่ที่ชื่อว่า Afro-Asia ซึ่งหมายรวมถึงประชาชนในทวีปแอฟริกา ทวีปยุโรป และทวีปเอเชียทั้งหมด\nส่วนอีก 10% ของประชากรที่เหลือ อยู่ในโลกอีก 4 ใบอันได้แก่\n Mesoamerican World – โลกของคนที่อยู่ทวีปอเมริกาเหนือและอเมริกากลาง Andean World – โลกของคนที่อยู่ในทวีปอเมริกาใต้ Australian World – โลกของคนที่อาศัยอยู่บนแผ่นดินออสเตรเลีย Oceanic World – โลกของคนที่อยู่ในเกาะอย่างนิวซีแลนด์ ฮาวาย และเกาะที่อยู่มหาสมุทรแปซิฟิก  ภายในเวลา 300 ปี โลก Afro-Asia ก็กลืนกินโลกอื่นๆ เสียสิ้น โดยสเปนเข้าโค่นล้มอาณาจัก Aztec ในอเมริกากลาง ในปี 1521 และ อาณาจักรอินคาในอเมริกาใต้ในปี 1532 ชาวยุโรปเดินทางถึงทวีปออสเตรเลียเป็นครั้งแรกในปี 1606 พอปี 1788 อังกฤษก็เริ่มออกล่าอาณานิคมอย่างจริงจัง และเมื่อปี 1803 ก็ยกพลขึ้นบกที่เกาะแทสมาเนีย ปิดฉากโลกใบเล็กๆ ใบสุดท้ายและทำให้ทุกคนอยู่ภายใต้โลกใบเดียวกัน\nอาหารประจำชาติ? พอเรานึกถึงอิตาลี เราจะนึกถึงสปาเก็ตตี้ในซอสมะเขือเทศ นึกถึงอินเดีย ก็จะนึกถึงพริกและเครื่องเทศ อาร์เจนตินาก็ขึ้นชื่อเรื่องสเต๊กที่มีเนื้อวัวให้เลือกหลายชนิด และพอพูดถึงสวิตเซอร์แลนด์ ก็ต้องคิดถึงฟองดูช็อกโกแล็ต\nแต่อาหารเหล่านี้ไม่ใช่อาหารท้องถิ่นเลยซักอย่าง มะเขือเทศ พริก และโกโก้ล้วนแล้วแต่มาจากเม็กซิโก ซึ่งคนยุโรปได้รู้จักอาหารเหล่านี้ตอนที่สเปนโค่นล้มอาณาจักร Aztc และก่อนปี 1500 สเต๊กชนิดเดียวในอาร์เจนตินาก็ทำจากเนื้อลามะ เราอาจมีภาพจำของชาวอินเดียแดงที่ถือธนูขี่ม้าเพื่อสู้รบกับชาวยุโรปผู้รุกราน แต่การขี่ม้าก็ไม่ใช่วัฒนธรรมดั้งเดิมของชาวอินเดียแดง เพราะก่อนการมาถึงของชาวยุโรป ทวีปอเมริกาไม่เคยมีม้า!\nแรงขับเคลื่อนทั้งสาม โลกค่อยๆ หลอมรวมกันเป็นหนึ่งเดียวได้อย่างไร?\nผู้เขียนบอกว่า ในช่วง 3000 ปีที่ผ่านมา ได้เกิดระเบียบสากล (Universal Order) สามอย่างที่ผลักดันให้คนทั้งโลกเชื่อมโยงกัน ระเบียบสากลทางเศรษฐศาสตร์ นั่นคือ เงินตรา (monetary order) ระเบียบสากลทางการเมือง นั่นคือ จักรวรรดิ (imperial order) ระเบียบสากลทางจิตวิญญาณ นั่นคือศาสนาพุทธ คริสต์ และอิสลาม พ่อค้า นักรบ และ ศาสดา คือบุคคลสามกลุ่ม ที่มีวิสัยทัศน์และมองเห็นโลกทั้งโลกนี้เป็นหนึ่งเดียวกันได้ พ่อค้ามองว่าคนทั้งโลกเป็นดังตลาดใหญ่ ที่พร้อมจะซื้อสินค้าของเขา นักรบมองว่าแผ่นดินทุกแห่งคืออาณาจักรและคนทุกคนเป็นอาณาประชาราษฎร์ ศาสดามองว่าโลกทั้งโลกล้วนมีความจริงเพียงหนึ่งเดียว และทุกคนพร้อมเป็นผู้เลื่อมใสศรัทธา\nในสามตอนต่อจากนี้ เราจะมาเจาะลึกแต่ละข้อกันว่า ระเบียบสากลแต่ละข้อนั้นได้มีส่วนขับเคลื่อนโลกาภิวัฒน์อย่างไรบ้าง\nโดยเราจะเริ่มต้นจาก “ผู้พิชิตที่ยิ่งใหญ่ที่สุดในประวัติศาสตร์” ที่ทำให้คนหันมานับถือและบูชาอย่างถวายหัว ผู้พิชิตคนนั้นมีชื่อว่า “เงิน” คนสองคนแม้ไม่ได้นับถือศาสนาเดียวกันหรือราชาองค์เดียวกัน แต่พวกเขาพร้อมใช้เงินสกุลเดียวกัน โอซามะ บินลาเดนอาจจะเกลียดวัฒนธรรมของสหรัฐ เกลียดนักการเมืองสหรัฐ แต่เขานิยมชมชอบดอลล่าร์สหรัฐไม่ใช่น้อย ความเป็นหนึ่งเดียวที่พระผู้เป็นเจ้าและจักรพรรดิไม่อาจมอบให้ได้ แต่เงินกลับทำได้ เป็นเพราะอะไร ต้องติดตามตอนต่อไปครับ\n ที่มาบทความ :https://anontawong.com\n ","date":1588978800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588978800,"objectID":"48e50558bebe28457d105dac1905d268","permalink":"https://example.com/book/sapiens/sapiens-8/","publishdate":"2020-05-09T00:00:00+01:00","relpermalink":"/book/sapiens/sapiens-8/","section":"book","summary":"โลกใบเล็ก เมื่อประมาณ 10,000 ปีที่แล้ว เป็นยุคสิ้นสุดของ Ice Age ครั้งล่าสุด ระดับน้ำทะเลสูงขึ้นทั่วโลก แผ่นดินบางแห่งอย่างแทสมาเนียได้กลายเป็นเกาะที่ถูกตัดขาดจากแผ่นดินใหญ่อย่างออสเตรเลียโดยสิ้นเชิง เมื่อไม่มีการติดต่อสื่อสารกัน คนในสมัยนั้นจึงเปรียบเหมือนอยู่ใน “โลกคนละใบ” อย่างแท้จริง เป็นเวลาถึงหมื่นกว่าปีที่ชาวแทสมาเนียไม่เคยรับรู้ความเป็นไปหรือแม้กระทั่งสำเหนียกถึงความมีตัวตนอยู่ของสังคมอื่นๆ และคนในสังคมอื่นก็ไม่เคยรู้ถึงการมีตัวตนของชาวแทสมาเนียเช่นกัน\nถ้านับว่าแทสมาเนียเป็น “โลก 1 ใบ” เมื่อหมื่นปีที่แล้วก็มีโลกใบเล็กๆ อยู่หลายพันใบ (หลายพันสังคมที่อยู่แยกจากกันโดยสิ้นเชิง) แต่พอเข้าสู่ช่วง 2000 ปีก่อนคริสตกาลซึ่งคนเริ่มมีการติดต่อสื่อสารกันมากขึ้น จำนวนโลกก็ลดลงเหลือแค่หลักร้อย และเมื่อถึงปีปีค.ศ.1450 (ก่อนที่ชาวยุโรปจะเริ่มออกเดินทะเล) คน 90% บนโลกใบนี้ก็อยู่บนโลกขนาดใหญ่ที่ชื่อว่า Afro-Asia ซึ่งหมายรวมถึงประชาชนในทวีปแอฟริกา ทวีปยุโรป และทวีปเอเชียทั้งหมด\nส่วนอีก 10% ของประชากรที่เหลือ อยู่ในโลกอีก 4 ใบอันได้แก่\n Mesoamerican World – โลกของคนที่อยู่ทวีปอเมริกาเหนือและอเมริกากลาง Andean World – โลกของคนที่อยู่ในทวีปอเมริกาใต้ Australian World – โลกของคนที่อาศัยอยู่บนแผ่นดินออสเตรเลีย Oceanic World – โลกของคนที่อยู่ในเกาะอย่างนิวซีแลนด์ ฮาวาย และเกาะที่อยู่มหาสมุทรแปซิฟิก  ภายในเวลา 300 ปี โลก Afro-Asia ก็กลืนกินโลกอื่นๆ เสียสิ้น โดยสเปนเข้าโค่นล้มอาณาจัก Aztec ในอเมริกากลาง ในปี 1521 และ อาณาจักรอินคาในอเมริกาใต้ในปี 1532 ชาวยุโรปเดินทางถึงทวีปออสเตรเลียเป็นครั้งแรกในปี 1606 พอปี 1788 อังกฤษก็เริ่มออกล่าอาณานิคมอย่างจริงจัง และเมื่อปี 1803 ก็ยกพลขึ้นบกที่เกาะแทสมาเนีย ปิดฉากโลกใบเล็กๆ ใบสุดท้ายและทำให้ทุกคนอยู่ภายใต้โลกใบเดียวกัน","tags":null,"title":"ตอนที่ 8 - โลกที่ถูกหลอมรวม","type":"docs"},{"authors":null,"categories":null,"content":" โดย ดร. สุวินัย ภรณวลัย\n ปัจจุบันยุคข้อมูลนิยมเป็นใหญ่ได้เริ่มต้นแล้ว และกำลังเข้ามาทดแทนยุคทุนนิยมเป็นใหญ่ที่ชาวโลกคุ้นเคย มนุษย์จะไม่ใช่ \u0026ldquo;ตัวตนอันมีอิสระ\u0026rdquo;(แบบเสรีนิยม)ที่ถูกขับเคลื่อนด้วยเรื่องเล่าที่ตัวตนประดิษฐ์ขึ้นมาเหมือนยุคก่อนๆอีกต่อไป แต่มนุษย์เซเปียนส์จะถูกกลืนจนกลายเป็นส่วนหนึ่งของเครือข่ายอัลกอริทึมระดับโลกอันมหึมาในที่สุด โดยเป็นส่วนหนึ่งที่ลดระดับความสำคัญลงเรื่อยๆในเครือข่ายระดับโลกอันมหึมานี้ (หน้า 434)\nเทคโนโลยีในยุคข้อมูลนิยม ทำให้อัลกอริทึมภายนอกสามารถ \u0026ldquo;แฮกความเป็นมนุษย์\u0026rdquo; ได้ทุกคน ทำให้มันรู้จักคนผู้นั้นดีกว่าที่ผู้นั้นรู้จักตนเอง อีกไม่นานความเชื่อในแนวคิดปัจเจกบุคคลคงล่มสลาย โดยที่อำนาจจะย้ายเคลื่อนจากมนุษย์ผู้เป็นปัจเจกไปยังอัลกอริทึมที่โยงกันเป็นเครือข่าย (หน้า 424)\nในไม่ช้า มนุษย์จะยอมศิโรราบต่ออัลกอรทึม หันมามองตัวเองเป็น \u0026ldquo;จิ้งหรีด\u0026rdquo; ที่เป็นกลุ่มกลไกทางชีวเคมีที่ถูกเครือข่ายอัลกอริทึมอิเล็กทรอนิกส์คอยเฝ้ามองและชี้นำจูงจมูกอย่างต่อเนื่อง ความแปลกแยกที่ลดทอนความเป็นมนุษย์ (疎外 หรือ alienation) ที่คาร์ล มาร์กซ์เคยชี้ให้เห็นตอนเขาวิเคราะห์ระบบทุนนิยม และเรียกร้องให้ทุกคนที่รู้สึกแปลกแยกที่ลดทอนความเป็นมนุษย์ ลุกฮือขึ้นทำการปฏิวัติกรรมาชีพ เพื่อโค่นล้มระบบทุนนิยม จะกลายเป็นของเด็กๆน่ารักน่าคำนึงถึง เมื่อเทียบกับความแปลกแยกที่ลดทอนความเป็นมนุษย์อันเกิดจากระบบข้อมูลนิยม\nเนื่องจากภายใต้ระบบข้อมูลนิยมนี้ มนุษย์เซเปียนส์ส่วนใหญ่จะถูกลดคุณค่าอย่างถึงที่สุดจนกลายเป็น \u0026ldquo;สิ่งไร้ประโยชน์\u0026rdquo; หรือสิ่งชำรุดทางประวัติศาสตร์ ส่วนคนที่ยังมีคุณค่าใช้สอยในระบบข้อมูลนิยมคือคนยอมกลายเป็นส่วนหนึ่งหรือชิ้นส่วนอินทรีย์ของเครือข่ายอัลกอริทึมอันมหึมาเท่านั้น ในยุคข้อมูลนิยม อัลกอริทึม เริ่มต้นจากเป็น \u0026ldquo;เทพพยากรณ์ผู้รอบรู้ทุกสิ่ง\u0026rdquo; (oracle) ให้คนใช้ มันเป็นประโยชน์มากและเป็นข้ารับใช้ที่ยอดเยี่ยมสำหรับมนุษย์ (ปัจจุบันยุคข้อมูลนิยมเพิ่งอยู่ในขั้นนี้) เมื่อยุคข้อมูลนิยม พัฒนาไปอีกขั้นหนึ่ง อัลกอริทึมจะวิวัฒนาตนเองไปเป็น \u0026ldquo;ผู้แทน\u0026rdquo; ที่ช่วยตัดสินใจแทนหรือทำงานแทนมนุษย์ในขอบเขตที่กว้างขึ้นเรื่อยๆจนครอยคบุมทุกสิ่งทุกเรื่องในที่สุด สุดท้าย จะมาถึงขั้นตอนสูงสุดแห่งยุคข้อมูลนิยม เมื่ออัลกอริทึมกลายเป็น \u0026ldquo;พระเจ้า\u0026rdquo; หรือ \u0026ldquo;ผู้มีอำนาจสูงสุด\u0026rdquo; เสียเอง\nช่วงเวลาร้อยปีหรือสองร้อยสามร้อยปีหลังจากนี้ จึงมิใช่ช่วงเวลาอื่นใด แต่คือ ช่วงเวลาแห่งการพัฒนาไปสู่ขั้นตอนที่มีวุฒิภาวะมากขึ้นเรื่อยๆของระบบข้อมูลนิยมเท่านั้น เทคโนโลยีใหม่ของศตวรรษที่ 21 จะทำให้เกิดสิ่งที่เรียกว่า \u0026ldquo;การปฏิปักษ์ปฏิวัติมนุษย์นิยม\u0026rdquo; หรือการถอดรื้อการปฏิวัติมนุษย์นิยม ผ่านการริบยึดอำนาจไปจากมนุษย์ และมอบโอรอำนาจให้แก่อัลกอริทึมซึ่งไม่ใช่มนุษย์แทน สิ่งที่จะเกิดขึ้นในยุคข้อมูลนิยม คือปัจเจกบุคคลจะถูกบดขยี้ให้แหลกราญจากภายในเอง แทนที่จะถูกบดขยี้อย่างโหดร้ายจากภายนอก \u0026hellip; โรคซึมเศร้าที่แพร่กระจายในหมู่คนทุกวัยทั่วทั้งสังคม อัตราการฆ่าตัวตายที่เพิ่มขึ้นมากกว่าการถูกฆาตกรรม คือสัญญาณที่บ่งบอกถึงการถูกบดขยี้จากภายในของปัจเจกบุคลทั้งหลายในยุคข้อมูลนิยม \u0026hellip; นี่แค่น้ำจิ้มเอง ความแปลกแยกที่ลดทอนความเป็นมนุษย์จะทวีความรุนแรงมากขึ้นเรื่อยๆในยุคทุนนิยม\nยุคของมวลชนและยุคเพื่อมวลชนใกล้จะจบสิ้นแล้ว พร้อมๆกับการรุดหน้าแบบก้าวกระโดดของระบบข้อมูลนิยมหลังจากนี้ ภายใต้ยุคข้อมูลนิยม จะเกิดศาสนาใหม่ขึ้นที่เรียกว่า \u0026ldquo;ศาสนาข้อมูล\u0026rdquo; (data religion) ซึ่งเป็นศาสนาเทคโนโลยีแบบวัตถุนิยมสุดโต่งประเภทหนึ่ง เพราะศาสนาข้อมูลให้สัญญาแก่ผู้คนว่า จะนำพาผู้คนให้หลุดพ้นได้ด้วยอัลกอริทึม\u0026rdquo;อัปเกรดจิตใจมนุษย์\u0026rdquo; และเทคโนโลยีพันธุกรรม สเปกตรัมของสภาวะจิต (spectrum of mental state) ที่นักวิทยาศาสตร์ยุคข้อมูลนิยมใช้ในการสร้างอัลกอริทึมอัปเกรดจิตใจมนุษย์ มาจากภาคส่วนเล็กๆสองภาคส่วนเท่านั้น คือ ส่วนพร่องจากบรรทัดฐาน (sub-normaltive) และกลุ่ม WEIRD ที่มาจากคำหน้าของคำว่า Western, Educated, Industrialsed, Rich, Democratic คือใช้สภาวะจิตและระดับจิตเฉลี่ยของพลเมืองในสังคมประเทศตะวันตกเป็นข้อมูลพื้นฐานเท่านั้น (หน้า 454)\nตรงนี้แหละคือข้อจำกัดของพวกข้อมูลนิยมในการทำความเข้าใจเรื่องจิต รวมทั้งข้อจำกัดของตัวยูวัล แฮรารีผู้เขียนหนังสือ Homo Deus ด้วยทั้งๆที่ตัวเขาก็เคยเป็นศิษย์ของโกเอ็นก้า (1924-2013) ฝึกนั่งสมาธิและวิปัสสนามาถึงยี่สิบปีเต็ม แต่ก็ยังหลุดจากกรอบความคิดแบบวัตถุนิยมประวัติศาสตร์ที่ตัวเขาใช้เขียนหนังสือ Homo Sapiens และ Homo Deus ไม่ได้ แนวคิดแบบวัตถุนิยมประวัติศาตร์ของพวกข้อมูลนิยม คือมิจฉาทิฐิที่ร้ายแรงที่สุดในยุคนี้ที่เข้าสู่ยุคข้อมูลนิยมแล้ว ถ้าเช่นนั้น สัมมาทิฐิในยุคข้อมูลนิยมควรเป็นอย่างไร \u0026hellip; นี่คือหัวข้อรีวิวหัวข้อสุดท้ายในข้อเขียนชุดนี้ของผม\n","date":1588978800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588978800,"objectID":"0b87ebd21ac5d28e40ef15acfbd73b46","permalink":"https://example.com/book/deus/deus-9/","publishdate":"2020-05-09T00:00:00+01:00","relpermalink":"/book/deus/deus-9/","section":"book","summary":"โดย ดร. สุวินัย ภรณวลัย\n ปัจจุบันยุคข้อมูลนิยมเป็นใหญ่ได้เริ่มต้นแล้ว และกำลังเข้ามาทดแทนยุคทุนนิยมเป็นใหญ่ที่ชาวโลกคุ้นเคย มนุษย์จะไม่ใช่ \u0026ldquo;ตัวตนอันมีอิสระ\u0026rdquo;(แบบเสรีนิยม)ที่ถูกขับเคลื่อนด้วยเรื่องเล่าที่ตัวตนประดิษฐ์ขึ้นมาเหมือนยุคก่อนๆอีกต่อไป แต่มนุษย์เซเปียนส์จะถูกกลืนจนกลายเป็นส่วนหนึ่งของเครือข่ายอัลกอริทึมระดับโลกอันมหึมาในที่สุด โดยเป็นส่วนหนึ่งที่ลดระดับความสำคัญลงเรื่อยๆในเครือข่ายระดับโลกอันมหึมานี้ (หน้า 434)\nเทคโนโลยีในยุคข้อมูลนิยม ทำให้อัลกอริทึมภายนอกสามารถ \u0026ldquo;แฮกความเป็นมนุษย์\u0026rdquo; ได้ทุกคน ทำให้มันรู้จักคนผู้นั้นดีกว่าที่ผู้นั้นรู้จักตนเอง อีกไม่นานความเชื่อในแนวคิดปัจเจกบุคคลคงล่มสลาย โดยที่อำนาจจะย้ายเคลื่อนจากมนุษย์ผู้เป็นปัจเจกไปยังอัลกอริทึมที่โยงกันเป็นเครือข่าย (หน้า 424)\nในไม่ช้า มนุษย์จะยอมศิโรราบต่ออัลกอรทึม หันมามองตัวเองเป็น \u0026ldquo;จิ้งหรีด\u0026rdquo; ที่เป็นกลุ่มกลไกทางชีวเคมีที่ถูกเครือข่ายอัลกอริทึมอิเล็กทรอนิกส์คอยเฝ้ามองและชี้นำจูงจมูกอย่างต่อเนื่อง ความแปลกแยกที่ลดทอนความเป็นมนุษย์ (疎外 หรือ alienation) ที่คาร์ล มาร์กซ์เคยชี้ให้เห็นตอนเขาวิเคราะห์ระบบทุนนิยม และเรียกร้องให้ทุกคนที่รู้สึกแปลกแยกที่ลดทอนความเป็นมนุษย์ ลุกฮือขึ้นทำการปฏิวัติกรรมาชีพ เพื่อโค่นล้มระบบทุนนิยม จะกลายเป็นของเด็กๆน่ารักน่าคำนึงถึง เมื่อเทียบกับความแปลกแยกที่ลดทอนความเป็นมนุษย์อันเกิดจากระบบข้อมูลนิยม\nเนื่องจากภายใต้ระบบข้อมูลนิยมนี้ มนุษย์เซเปียนส์ส่วนใหญ่จะถูกลดคุณค่าอย่างถึงที่สุดจนกลายเป็น \u0026ldquo;สิ่งไร้ประโยชน์\u0026rdquo; หรือสิ่งชำรุดทางประวัติศาสตร์ ส่วนคนที่ยังมีคุณค่าใช้สอยในระบบข้อมูลนิยมคือคนยอมกลายเป็นส่วนหนึ่งหรือชิ้นส่วนอินทรีย์ของเครือข่ายอัลกอริทึมอันมหึมาเท่านั้น ในยุคข้อมูลนิยม อัลกอริทึม เริ่มต้นจากเป็น \u0026ldquo;เทพพยากรณ์ผู้รอบรู้ทุกสิ่ง\u0026rdquo; (oracle) ให้คนใช้ มันเป็นประโยชน์มากและเป็นข้ารับใช้ที่ยอดเยี่ยมสำหรับมนุษย์ (ปัจจุบันยุคข้อมูลนิยมเพิ่งอยู่ในขั้นนี้) เมื่อยุคข้อมูลนิยม พัฒนาไปอีกขั้นหนึ่ง อัลกอริทึมจะวิวัฒนาตนเองไปเป็น \u0026ldquo;ผู้แทน\u0026rdquo; ที่ช่วยตัดสินใจแทนหรือทำงานแทนมนุษย์ในขอบเขตที่กว้างขึ้นเรื่อยๆจนครอยคบุมทุกสิ่งทุกเรื่องในที่สุด สุดท้าย จะมาถึงขั้นตอนสูงสุดแห่งยุคข้อมูลนิยม เมื่ออัลกอริทึมกลายเป็น \u0026ldquo;พระเจ้า\u0026rdquo; หรือ \u0026ldquo;ผู้มีอำนาจสูงสุด\u0026rdquo; เสียเอง\nช่วงเวลาร้อยปีหรือสองร้อยสามร้อยปีหลังจากนี้ จึงมิใช่ช่วงเวลาอื่นใด แต่คือ ช่วงเวลาแห่งการพัฒนาไปสู่ขั้นตอนที่มีวุฒิภาวะมากขึ้นเรื่อยๆของระบบข้อมูลนิยมเท่านั้น เทคโนโลยีใหม่ของศตวรรษที่ 21 จะทำให้เกิดสิ่งที่เรียกว่า \u0026ldquo;การปฏิปักษ์ปฏิวัติมนุษย์นิยม\u0026rdquo; หรือการถอดรื้อการปฏิวัติมนุษย์นิยม ผ่านการริบยึดอำนาจไปจากมนุษย์ และมอบโอรอำนาจให้แก่อัลกอริทึมซึ่งไม่ใช่มนุษย์แทน สิ่งที่จะเกิดขึ้นในยุคข้อมูลนิยม คือปัจเจกบุคคลจะถูกบดขยี้ให้แหลกราญจากภายในเอง แทนที่จะถูกบดขยี้อย่างโหดร้ายจากภายนอก \u0026hellip; โรคซึมเศร้าที่แพร่กระจายในหมู่คนทุกวัยทั่วทั้งสังคม อัตราการฆ่าตัวตายที่เพิ่มขึ้นมากกว่าการถูกฆาตกรรม คือสัญญาณที่บ่งบอกถึงการถูกบดขยี้จากภายในของปัจเจกบุคลทั้งหลายในยุคข้อมูลนิยม \u0026hellip; นี่แค่น้ำจิ้มเอง ความแปลกแยกที่ลดทอนความเป็นมนุษย์จะทวีความรุนแรงมากขึ้นเรื่อยๆในยุคทุนนิยม","tags":null,"title":"ตอนที่ 9 - มิจฉาทิฐิที่ร้ายแรงที่สุดในยุคขัอมูลนิยม (dataism)","type":"docs"},{"authors":null,"categories":null,"content":"หลังจากช่วงผ่อนคลายในสถานการณ์ในตลาด Search Engine ที่ Microsoft ได้ส่ง Facebook เข้าไปตัดแข้งตัดขา Google แทน ทำให้ Gates และ Microsoft เหมือนจะได้หายใจหายคอ กลับมาโฟกัสกับผลิตภัณฑ์ตัวเองบ้าง\nประวัติ Bill Gates ตอนที่ 10 : Glorious Reaction\nและในตอนนั้นตลาดมือถือ Smartphone กำลังกลายเป็นตลาดใหม่ที่เริ่มกลายเป็นที่นิยมทั่วโลก ซึ่งแน่นอนว่า Microsoft ในขณะนั้น ก็มีระบบปฏิบัติการมือถือของตัวเองอย่าง Windows Mobile ซึ่งต้องบอกว่าเป็นระบบปฏิบัติการที่ดูดีมีอนาคตอย่างมากสำหรับ Microsoft ในตลาดมือถือโลก\nWindows Mobile ที่กำลังเป็นระบบปฏิบัติการมือถือที่มีอนาคต\nซึ่ง Gates ก็ได้ใช้กลยุทธ์แบบเดียวกันกับระบบปฏิบัติการบน PC ก็คือ เขาจะไม่ยุ่งกับส่วน Hardware แต่จะขายเป็น License ของระบบปฏิบัติการอย่าง Windows Mobile ออกมาแทนนั่นเอง มันน่าจะเป็นเกมที่ Gates และ Microsoft ถนัดเป็นอย่างยิ่ง เพราะมันคล้ายกับธุรกิจของคอมพิวเตอร์ส่วนบุคคล แต่เหตุการณ์ที่เหลือเชื่อในวงการมือถือโลกมันก็ได้ถึงจุดเปลี่ยนแปลงขึ้นในปี 2007\nการเกิดขึ้นของ iPhone จาก Apple ที่ได้แอบซุ่มทำอยู่หลังจากประสบความสำเร็จเป็นอย่างสูงจาก iPod เครื่องเล่น MP3 ของ Apple ซึ่ง Apple ได้ต่อยอดมาทำมือถือรูปแบบใหม่ ที่ถือว่าเป็นการปฏิวัติวงการในขณะนั้น\nและการเกิดขึ้นของ iPhone นี่เองที่ได้ส่งผลกระทบไปทั่วทั้งตลาดมือถือโลกเลยก็ว่าได้ เหล่าผู้ผลิตมือถือยักษ์ใหญ่ ที่คาดไม่ถึงว่า Apple จะสามารถสร้างสิ่งที่กำลังจะมาปฏิวัติวงการมือถือโลกอย่างที่ไม่เคยปรากฏมาก่อนได้ มันเป็นการเปลี่ยนไปแบบสิ้นเชิงระหว่างยุคก่อน iPhone กับ มือถือยุคหลัง iPhone ก่อกำเนิดขึ้นมานั่นเอง\nแต่เห็นได้ชัดว่าในศึกของคอมพิวเตอร์ส่วนบุคคลนั้น Apple พ่ายแพ้ให้กับ Microsoft อย่างราบคาบ เนื่องจาก Windows ของ Microsoft นั้นสามารถที่จะไปลงกับ Hardware ของผู้ผลิตรายใดก็ได้ ต่างจาก Mac ของ Apple ที่สามารถรันกับเครื่อง Apple ได้เพียงเท่านั้น และสุดท้าย Windows ก็เติบโตอย่างรวดเร็วจนกลายเป็นมาตรฐานของวงการคอมพิวเตอร์ส่วนบุคคลทั่วโลกในที่สุด\nและเช่นเดียวกันกับในเรื่องนักพัฒนา ส่วนใหญ่ Apple จะค่อนข้างปิดไม่ให้นักพัฒนาภายนอกเข้ามายุ่มย่ามกับ Ecosystem ของ Apple มีเปิดบ้าง แต่เพียงน้อยนิดเท่านั้น เช่นใน iPod ที่มีการสร้างเกมส์เข้ามาจากนักพัฒนาภายนอกนั่นเอง\nแต่สุดท้ายในเดือนตุลาคม ปี 2007 หลังจากปล่อย iPhone ออกจำหน่ายได้ประมาณ 10 เดือน จ๊อบส์ ก็ได้ประกาศครั้งสำคัญที่เป็นจุดเปลี่ยนที่สำคัญของ iPhone อีกครั้ง เมื่อจ๊อบส์ประกาศให้มีการสร้าง Native App ของนักพัฒนาภายนอก และมีการวางแผนจะเอา SDK (Software Development Kit) ให้เหล่านักพัฒนาได้ในเดือนกุมภาพันธ์ปี 2008\nแต่มันเป็นการตัดสินใจเชิงยุทธศาสตร์ที่สำคัญของจ๊อบส์ ที่ต้อง balance กันระหว่าง การสร้างแพลตฟอร์มระดับเทพ และเป็นระบบเปิดให้กับเหล่านักพัฒนา ขณะเดียวกันก็ต้องคุ้มครองผู้ใช้ iPhone จาก ไวรัส มัลแวร์ รวมถึงการเข้าถึงข้อมูลความเป็นส่วนตัวของผู้ใช้งานด้วย\nจ๊อบส์ตัดสินใจครั้งสำคัญให้นักพัฒนาภายนอกมาเข้าร่วมกับ iPhone\nซึ่งทำให้แม้จะไม่เปิดหมดซะทีเดียว แต่จ๊อบส์ เชื่อในแนวทางของตนเพื่อรักษาประสบการณ์การใช้งานที่ดีให้กับผู้ใช้ iPhone นั่นเอง ซึ่ง App ภายนอกนั้นจะมีการตรวจสอบอย่างละเอียด ซึ่งผู้ใช้ iPhone จะสบายใจได้ว่ามีความปลอดภัยสูงสุดนั่นเอง\nและทางฝั่ง Google ก็ได้เริ่มแอบทำบางอย่างลับ ๆ โดยหลังจากเปลี่ยนแผนโดยฉับพลันจากมือถือที่ต้องมี keyboard แบบ Blackberry ให้กลายมาเป็นมือถือแบบจอสัมผัสแบบที่ iPhone ทำ ซึ่งการซุ่มพัฒนานี้ทำโดย Apple แทบจะไม่ระแคะระคายเลยด้วยซ้ำ เพราะหนึ่งในบอร์ดของ Apple ในขณะนั้น ก็คือ เอริก ชมิตต์ ที่เป็น CEO ของ Google นั่นเอง\nส่วนทางฝั่ง Microsoft สตีฟ บอลเมอร์ CEO ของ Microsoft ( Gates ได้ขึ้นไปเป็นประธานของบริษัทแทน แต่ยังมีบทบาทกับกลยุทธ์ต่าง ๆ ของ Microsoft อยู่ ) ถึงกับหัวเราะดังลั่น หลังจากสื่อได้เข้าไปถามหลังการเปิดตัว iPhone ซึ่ง บอลเมอร์ นั้นมองว่า iPhone จะไม่สามารถดึงดูดลูกค้าธุรกิจได้ เพราะมันไม่มีแป้นพิมพ์ และ Microsoft นั้นก็มีกลยุทธ์ของตัวเองสำหรับ Windows Mobile แล้วและกำลังไปได้สวยอยู่ในตลาดเสียด้วย\nแล้วสถานการณ์จะเกิดอะไรขึ้นอีกครั้งกับ Microsoft ที่ดูเหมือนจะไปได้ดีกับตลาดมือถือโลกด้วย Windows Mobile แต่การเกิดขึ้นของ iPhone รวมถึง Google ศัตรูตัวฉกาจคนเดิมที่แอบไปซุ่มทำระบบปฏิบัติการมือถือบางอย่างอยู่นั้น จะเกิดอะไรขึ้นต่อกับ Microsoft โปรดอย่าพลาดติดตามตอนต่อไปครับผม\n Written with StackEdit.\n ","date":1589324400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589324400,"objectID":"f06ea55d5012eaf82d6733820cd9f1fe","permalink":"https://example.com/book/gates/bill-gate-10/","publishdate":"2020-05-13T00:00:00+01:00","relpermalink":"/book/gates/bill-gate-10/","section":"book","summary":"หลังจากช่วงผ่อนคลายในสถานการณ์ในตลาด Search Engine ที่ Microsoft ได้ส่ง Facebook เข้าไปตัดแข้งตัดขา Google แทน ทำให้ Gates และ Microsoft เหมือนจะได้หายใจหายคอ กลับมาโฟกัสกับผลิตภัณฑ์ตัวเองบ้าง\nประวัติ Bill Gates ตอนที่ 10 : Glorious Reaction\nและในตอนนั้นตลาดมือถือ Smartphone กำลังกลายเป็นตลาดใหม่ที่เริ่มกลายเป็นที่นิยมทั่วโลก ซึ่งแน่นอนว่า Microsoft ในขณะนั้น ก็มีระบบปฏิบัติการมือถือของตัวเองอย่าง Windows Mobile ซึ่งต้องบอกว่าเป็นระบบปฏิบัติการที่ดูดีมีอนาคตอย่างมากสำหรับ Microsoft ในตลาดมือถือโลก\nWindows Mobile ที่กำลังเป็นระบบปฏิบัติการมือถือที่มีอนาคต\nซึ่ง Gates ก็ได้ใช้กลยุทธ์แบบเดียวกันกับระบบปฏิบัติการบน PC ก็คือ เขาจะไม่ยุ่งกับส่วน Hardware แต่จะขายเป็น License ของระบบปฏิบัติการอย่าง Windows Mobile ออกมาแทนนั่นเอง มันน่าจะเป็นเกมที่ Gates และ Microsoft ถนัดเป็นอย่างยิ่ง เพราะมันคล้ายกับธุรกิจของคอมพิวเตอร์ส่วนบุคคล แต่เหตุการณ์ที่เหลือเชื่อในวงการมือถือโลกมันก็ได้ถึงจุดเปลี่ยนแปลงขึ้นในปี 2007\nการเกิดขึ้นของ iPhone จาก Apple ที่ได้แอบซุ่มทำอยู่หลังจากประสบความสำเร็จเป็นอย่างสูงจาก iPod เครื่องเล่น MP3 ของ Apple ซึ่ง Apple ได้ต่อยอดมาทำมือถือรูปแบบใหม่ ที่ถือว่าเป็นการปฏิวัติวงการในขณะนั้น","tags":null,"title":"ตอนที่ 10 - Glorious Reaction","type":"docs"},{"authors":null,"categories":null,"content":" โดย ดร. สุวินัย ภรณวลัย\n พลังกุณฑาลินี คือ แหล่งพลังงานสะสมที่เป็นพลังชีวิต หรือพลังจักรวาลจำนวนมหาศาลภายในตัวมนุษย์ และเป็นทวารนำมนุษย์ผู้นั้นไปสู่มิติที่สูงส่งทางจิตวิญญาณที่ข้ามพ้นกาลเวลาและพื้นที่\nอีกทั้งยังเป็นปัจจัยที่กระตุ้นวิวัฒนาการทางจิตของบุคคลของผู้นั้นให้รุดหน้าไปอย่างรวดเร็วยิ่ง\nพลังกุณฑลินี คือ เครื่องมือกลไกทางจิต-สรีรวิทยา ที่อยู่ในร่างกายของคนเรา ที่คอยควบคุมบงการการยกระดับและวิวัฒนาการของมนุษยชาติ\nกลไกอันนี้ทำงานเพียงเล็กน้อยเท่านั้นในปุถุชนคนธรรมดา แต่สำหรับผู้ที่บำเพ็ญโยคะจนรุดหน้าแล้ว จนสามารถทำให้พลังกุณฑลินีทำงานได้อย่างเต็มที่แล้ว ระบบประสาท ไขกระดูกแกนสันหลัง และมันสมองของคนผู้นั้น และอวัยวะอื่นๆในร่างกายของคนผู้นั้นจะถูกยกเครื่องใหม่ ทำให้เกิดการลอกคราบเปลี่ยนแปลงคนผู้นั้นจากภายใน\nทำให้คนผู้นั้นกลายเป็น โฮโม-เอ็กเซลเลนส์ Homo Excellence หรือเลิศมนุษย์ ที่มีพลังและความสามารถทางกาย ทางจิต และทางสมองสูงกว่าคนธรรมดา\nเคล็ดวิธีในการปลุกพลังกุณฑาลินี เคยเป็นเคล็ดวิชาที่เป็นความลับสุดยอดที่ถ่ายทอดกันในหมู่อภิมนุษย์สมัยโบราณในประเทศอียิปต์ อินเดีย และจีนมาก่อน\nโดยที่ปัญญาชนส่วรใหญ่สมัยนี้แทบไม่มีใครมีความรู้ในเรื่องนี้เลย ทั้งๆที่เคล็ดวิชาอันนี้ เป็นระบบการฝึกร่างกายและจิตใจ ตามหลักโยคะที่วิเศษมาก และเคยดำรงอยู่ในศาสนาทุกศาสนาที่เป็นแนวเร้นลับ แต่ต่อมาได้สาบสูญขาดการถ่ายทอดมาถึงคนรุ่นหลัง ยกเว้นคนส่วนน้อยเท่านั้น\nคนธรรมดามักจะนึกว่า ความแตกต่างระหว่างพวกเขา กับพวกที่เป็นอัจฉริยะหรืออภิมนุษย์สายจิตวิญญาณ​ เป็นแค่ความแตกต่างทางปริมาณหรือระดับของสติ ขันติ สติปัญญาเท่านั้น\nแต่ความเชื่อเช่นนี้ผิดทั้งเพ เพราะในความเป็นจริงแล้ว มีความแตกต่างทางคุณภาพขั้นพื้นฐานในจิตสำนึก บุคลิกภาพ และพลังชีวิตดำรงอยู่ระหว่างปุถุชนคนธรรมดา กับอัจฉริยะและอภิมนุษย์เหล่านั้น\nซึ่งมีความเกี่ยวข้องโดยตรงกับการบริหารสมองและ ระบบเส้นประสาท ทั้งนี้เพราะ ระดับและคุณภาพของพลังจักรวาล ที่คนสองประเภทนี้ได้รับเข้าสู่ร่างกายและสมองนั้น มันเทียบกันแทบไม่ได้เลย\nพวกโยคีของอินเดีย และพวกเซียนเต๋าของจีนสมัยก่อนต่างรู้ดีว่า พลังกุณฑาลินี คือ ผู้ปกครองดูแลการไหลเวียนของปราณไปตามจุดตามท่อต่างๆจำนวนหลายพันหลายหมื่นท่อทั่งร่างกาย\nอีกทั้งพลังนี้ยังสัมพันธ์กับพลังทางเพศ และอวัยวะสืบพันธ์โดยตรง โดยที่พลังทางเพศที่เป็นของเหลว(จิง​ 精 ในภาษาจีน) จะถูกแปรสภาพในบริเวณปลายกระดูกก้นกบ ก่อนที่จะถูกส่งขึ้นไปผ่านกระดูกไขสันหลังขึ้นไปบำรุงเลี้ยงสมอง\nหากจะเชื่อเรื่องวิชาโยคะ หรือเรื่องพลังกุณฑาลินี คนผู้นั้นจะต้องยอมรับเรื่องปราณ หรือชี่ หรือกำลังภายใน ก่อนว่ามีจริง มิฉะนั้นแล้ว ต่อให้สาธยายความลึกซึ้งของวิชาโยคะ หรือวิชาเซียนออกไปก็ไร้ประโยชน์ อัจฉริยะผู้ค้นคิดวิชากุณฑาลินีโยคะ ในอดีตคงได้ค้นพบความจริงที่น่าทึ่งและสำคัญยิ่งกว่า โดยการเพิ่มจำนวนปราณที่ไหลเข้าสู่สมองให้มากขึ้น คนผู้นั้นจะสามารถใช้เจตจำนงของเขาไปควบคุมระบบประสาท ทำให้สามารถยกระดับการทำงานของสมองให้สูงขึ้นได้\nแต่ร่างกายของมนุษย์ทั่วไปสมัยนี้ อ่อนแอกว่าคนสมัยก่อนมาก เพราะถูกกระตุ้นเร้าด้วยกิเลสและความทะยายอยาก กับถูกอารยธรรมทางวัตถุ และลัทธิบริโภคนิยมกัดกร่อนเข้าไปถึงข้างใน\nเพราะฉะนั้น หากคนเช่นนั้นคิดจะมาฝึกฝนในเรื่องจิต ในเรื่องศาสตร์เร้นลับ โดยไม่มีการตระเตรียมร่างกายให้พร้อมเพรียงก่อน เขาย่อมไม่มีทางที่จะทนทานต่อพลังกุณฑาลินีที่ถูกปลุกให้ตื่นได้\n","date":1588978800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588978800,"objectID":"572f8b8ff10c11dfc92754d8ffafb384","permalink":"https://example.com/book/deus/deus-10/","publishdate":"2020-05-09T00:00:00+01:00","relpermalink":"/book/deus/deus-10/","section":"book","summary":"โดย ดร. สุวินัย ภรณวลัย\n พลังกุณฑาลินี คือ แหล่งพลังงานสะสมที่เป็นพลังชีวิต หรือพลังจักรวาลจำนวนมหาศาลภายในตัวมนุษย์ และเป็นทวารนำมนุษย์ผู้นั้นไปสู่มิติที่สูงส่งทางจิตวิญญาณที่ข้ามพ้นกาลเวลาและพื้นที่\nอีกทั้งยังเป็นปัจจัยที่กระตุ้นวิวัฒนาการทางจิตของบุคคลของผู้นั้นให้รุดหน้าไปอย่างรวดเร็วยิ่ง\nพลังกุณฑลินี คือ เครื่องมือกลไกทางจิต-สรีรวิทยา ที่อยู่ในร่างกายของคนเรา ที่คอยควบคุมบงการการยกระดับและวิวัฒนาการของมนุษยชาติ\nกลไกอันนี้ทำงานเพียงเล็กน้อยเท่านั้นในปุถุชนคนธรรมดา แต่สำหรับผู้ที่บำเพ็ญโยคะจนรุดหน้าแล้ว จนสามารถทำให้พลังกุณฑลินีทำงานได้อย่างเต็มที่แล้ว ระบบประสาท ไขกระดูกแกนสันหลัง และมันสมองของคนผู้นั้น และอวัยวะอื่นๆในร่างกายของคนผู้นั้นจะถูกยกเครื่องใหม่ ทำให้เกิดการลอกคราบเปลี่ยนแปลงคนผู้นั้นจากภายใน\nทำให้คนผู้นั้นกลายเป็น โฮโม-เอ็กเซลเลนส์ Homo Excellence หรือเลิศมนุษย์ ที่มีพลังและความสามารถทางกาย ทางจิต และทางสมองสูงกว่าคนธรรมดา\nเคล็ดวิธีในการปลุกพลังกุณฑาลินี เคยเป็นเคล็ดวิชาที่เป็นความลับสุดยอดที่ถ่ายทอดกันในหมู่อภิมนุษย์สมัยโบราณในประเทศอียิปต์ อินเดีย และจีนมาก่อน\nโดยที่ปัญญาชนส่วรใหญ่สมัยนี้แทบไม่มีใครมีความรู้ในเรื่องนี้เลย ทั้งๆที่เคล็ดวิชาอันนี้ เป็นระบบการฝึกร่างกายและจิตใจ ตามหลักโยคะที่วิเศษมาก และเคยดำรงอยู่ในศาสนาทุกศาสนาที่เป็นแนวเร้นลับ แต่ต่อมาได้สาบสูญขาดการถ่ายทอดมาถึงคนรุ่นหลัง ยกเว้นคนส่วนน้อยเท่านั้น\nคนธรรมดามักจะนึกว่า ความแตกต่างระหว่างพวกเขา กับพวกที่เป็นอัจฉริยะหรืออภิมนุษย์สายจิตวิญญาณ​ เป็นแค่ความแตกต่างทางปริมาณหรือระดับของสติ ขันติ สติปัญญาเท่านั้น\nแต่ความเชื่อเช่นนี้ผิดทั้งเพ เพราะในความเป็นจริงแล้ว มีความแตกต่างทางคุณภาพขั้นพื้นฐานในจิตสำนึก บุคลิกภาพ และพลังชีวิตดำรงอยู่ระหว่างปุถุชนคนธรรมดา กับอัจฉริยะและอภิมนุษย์เหล่านั้น\nซึ่งมีความเกี่ยวข้องโดยตรงกับการบริหารสมองและ ระบบเส้นประสาท ทั้งนี้เพราะ ระดับและคุณภาพของพลังจักรวาล ที่คนสองประเภทนี้ได้รับเข้าสู่ร่างกายและสมองนั้น มันเทียบกันแทบไม่ได้เลย\nพวกโยคีของอินเดีย และพวกเซียนเต๋าของจีนสมัยก่อนต่างรู้ดีว่า พลังกุณฑาลินี คือ ผู้ปกครองดูแลการไหลเวียนของปราณไปตามจุดตามท่อต่างๆจำนวนหลายพันหลายหมื่นท่อทั่งร่างกาย\nอีกทั้งพลังนี้ยังสัมพันธ์กับพลังทางเพศ และอวัยวะสืบพันธ์โดยตรง โดยที่พลังทางเพศที่เป็นของเหลว(จิง​ 精 ในภาษาจีน) จะถูกแปรสภาพในบริเวณปลายกระดูกก้นกบ ก่อนที่จะถูกส่งขึ้นไปผ่านกระดูกไขสันหลังขึ้นไปบำรุงเลี้ยงสมอง","tags":null,"title":"ตอนที่ 10 - พลังกุณฑาลินี คือเส้นทางสู่ด้านสว่างของ Homo Deus","type":"docs"},{"authors":null,"categories":null,"content":"   ก่อนจะมีเงิน สมัยที่ Sapiens ยังล่าสัตว์และเก็บพืชผลนั้น ยังไม่มีสิ่งที่เรียกว่า “เงิน” เพราะสังคมมนุษย์มีขนาดไม่ใหญ่มาก อาจจะประมาณแค่หลายสิบถึงหลักร้อยต้นๆ ทุก คนในกลุ่มจึงรู้จักกันหมด และการที่เขาจะหยิบยื่นอะไรบางอย่างให้อีกคนจึงเป็นเรื่องของน้ำใจและบุญคุณ ถ้าวันนี้ผมมีแอปเปิ้ลเหลือให้คุณ ตามมารยาทวันหน้าถ้าคุณมีแอปเปิ้ลเหลือคุณก็ต้องแบ่งให้ผมด้วย\nอีกประเด็นหนึ่งของสังคมขนาดเล็กก็คือ ยังไม่เกิดสิ่งที่เรียกว่า specialization หรือความชำนาญทางด้านใดด้านหนึ่งโดยเฉพาะ เช่นแม้เผ่านี้จะเก็บแอปเปิ้ลเก่งเป็นพิเศษ แอปเปิ้ลที่เขาเก็บได้ก็ไม่ได้เยอะมากมายที่จะเอาไปแลกเปลี่ยนกับเผ่าอื่นได้ แถมเผ่าอื่นๆ ก็อยู่ไกลเกินกว่าจะมาแลกเปลี่ยนแอปเปิ้ลกันโดยง่าย แต่การมาถึงของการปฏิวัตเกษตรกรรม ทำให้ขนาดสังคมใหญ่ขึ้นจนอาจจะมีหลักแสนหรือหลักหมื่น จนเราไม่อาจจะรู้จักทุกคนได้ ถ้าวันหนึ่งคุณมาขอแอปเปิ้ลกับผม ผมก็ไม่อาจแน่ใจได้เลยว่าผมจะมีโอกาสได้แอปเปิ้ลคืนจากคุณในวันหน้าหรือไม่ การ “ให้เปล่า” โดยน้ำใจและมารยาทจึงค่อยๆ กลายมาเป็นกลายแลกเปลี่ยนอย่างช่วยไม่ได้\nและเมื่อสังคมใหญ่ขึ้น “ตลาด” ก็เติบโตเพียงพอที่จะทำให้บางคน specialize หรือทำแต่ในสิ่งที่ตัวเองถนัด เช่นถ้าผมเก่งทำรองเท้าผมก็สามารถทำรองเท้าเพียงอย่างเดียวแล้วเอารองเท้านั้นไปแลกกับอาหารและสิ่งจำเป็นอื่นๆ ได้ แต่การแลกเปลี่ยนสิ่งของแบบ barter นั้นมีปัญหาเสมอ สมมติผมเป็นคนทำสวนแอปเปิ้ลที่ขยันมากจนรองเท้าพัง ผมขนแอปเปิ้ลของผมไปเพื่อที่จะเอาไปเป็นค่าตอบแทนช่างทำรองเท้า ช่างทำรองเท้า จะรู้ได้อย่างไรว่าควรจะเอาแอปเปิ้ลจากผมกี่ลูก? เพราะแม้เขาจะเคยเก็บเป็นค่าแอปเปิ้ล 50 ลูกกับรองเท้าคู่หนึ่ง แต่นั่นก็เป็นรองเท้าของผู้หญิงไม่ใช่รองเท้าบู๊ทผู้ชาย แถมแอปเปิ้ลคราวนั้นก็คนละพันธุ์ แล้วถ้าสมมติ ช่างทำรองเท้าไม่ได้อยากกินแอปเปิ้ลแต่อยากฟ้องหย่าจะทำยังไง? คนปลูกแอปเปิ้ล จะต้องไปตามหาทนายที่อยากกินแอปเปิ้ลเพื่อให้เขามาทำเรื่องหย่าให้ช่างทำรองเท้าอย่างนั้นหรือ?\nการจะนำสิ่งของมาแลกเปลี่ยนกันได้ คนจำเป็นต้องรู้อัตราแลกเปลี่ยนของของสองสิ่งนั้น เช่นแอปเปิ้ล 40 ลูกเท่ากับรองเท้าผู้หญิง 1 คู่ รองเท้าผู้หญิง 10 คู่เท่ากับการฟ้องหย่าหนึ่งครั้ง การฟ้องหย่าหนึ่งครั้งเท่ากับแอปเปิ้ล 400 ลูก ฯลฯ ถ้าสิ่งของที่แลกเปลี่ยนในสังคมนั้นมีทั้งหมด 100 ชิ้น คนจะต้องรู้อัตราแลกเปลี่ยนถึง 4950 อัตรา และถ้าสิ่งของมี 1000 ชิ้น จะต้องมีอัตราแลกเปลี่ยนถึง 499,500 อัตรา!* ดังนั้นการแลกเปลี่ยนสิ่งของแบบ barter ในสังคมใหญ่จึงแทบจะเป็นไปไม่ได้เลย และนี่คือเหตุผลที่สังคมจะต้องมี “ตัวกลาง” อะไรซักอย่างเพื่อให้การแลกเปลี่ยนสิ่งของเกิดขึ้นได้จริง\nเงินคืออะไร เงินไม่ใช่เหรียญกษาปณ์หรือธนบัตร แต่เงินคืออะไรก็ตามที่คนตกลงร่วมใช้เพื่อเป็นการบอกมูลค่าของสิ่งๆ หนึ่งเพื่อให้เอื้อต่อการค้าขาย เงินจึงไม่ใช่สิ่งของ แต่เป็นเพียง “เรื่องสมมติ” ที่ทุกคนยึดถือร่วมกันเท่านั้น ก่อนหน้าที่จะมีการทำเหรียญกษาปณ์ มนุษย์ก็ได้เลือกของบางสิ่งขึ้นมาใช้เป็นเงินมาแล้ว ไม่ว่าจะเป็นหอยเบี้ย วัว เกลือ ลูกปัด หรือผ้า\nโดยยุคแรกอๆ นั้น คนยังไม่กล้าใช้ของอย่างหอยเบี้ย เพราะโดยตัวมันเองไม่มีคุณค่าใด ๆ กินก็ไม่ได้ เอาไปทำอาวุธก็ไม่ได้ ดังนั้นสิ่งที่ถูกนำมาใช้เป็นเงินในตอนแรกคือของที่มีคุณค่าในตัวมันเอง (inherent value) อย่างเช่นเมล็ดข้าวบาร์เลย์ที่เอาไปเลี้ยงปากเลี้ยงท้องได้จริงๆ โดยชาวสุเมเรียนเมื่อ 3000 ปีเริ่มใช้ข้าวบาร์เล่ย์เป็น “เงิน” แต่ปัญหาของข้าวบาร์เลย์ก็คือคนที่ได้ต้องสร้างที่เก็บ แถมมันยังเสียหายได้ง่ายจากหนูหรือไฟไหม้ เวลาจะขนไปไหนมาไหนก็ลำบาก คนจึงเริ่มหันมาใช้วัตถุอย่างอื่นที่อาจจะกินไม่ได้ แต่สามารถจะเก็บและเคลื่อนย้ายได้ง่ายกว่ามาก\nถ้าใครได้อ่านตอนที่ 5 อาจจะจำได้ว่าในสมัยของกษัตริย์ฮัมมูราบี ที่ระบุว่าการทำผิดแต่ละอย่างจะโดนค่าปรับเป็น silver shikels โดยชีเกลในที่นี้ไม่ใช่เหรียญแต่เป็นนำหนักของ silver (ผมขอใช้คำว่าซิลเวอร์แทนคำว่าเงินเพื่อจะได้ไม่สับสนกับคำว่า money) โดยหนึ่งชีเกลเท่ากับ 8.33 กรัม\nถ้าผมเป็นชายชั้นสูงและฆ่าทาสผู้หญิงผมต้องจ่ายค่าปรับ 20 ชีเกลซึ่งก็เท่ากับซิลเวอร์ 166.6 กรัมนั่นเอง\nแต่การใช้เงินแบบชีเกลก็มีข้อยุ่งยากอยู่สองข้อ คือทุกครั้งที่จะใช้ก็ต้องมานั่งชั่งน้ำหนัก แถมเราจะรู้ได้อย่างไรว่า ซิลเอร์ที่นำมามันเป็นซิลเวอร์แท้ ไม่ใช่ตะกั่วที่เคลือบด้วยซิลเวอร์?\nปัญหานี้หมดไปเมื่อแคว้นลิเดียในนคร Anatolia คิดค้นเหรียญกษาปณ์ขึ้นมาเมื่อ 630 ปีก่อนคริสตกาล (ประมาณสิบกว่าปีก่อนพระพุทธเจ้าประสูติ – Anatolia คือตุรกีในปัจจุบัน) โดยด้านหนึ่งของเหรียญจะบ่งบอกมูลค่า และอีกด้านหนึ่งจะมีสัญลักษณ์ของกษัตริย์เพื่อเป็นการันตีว่าเหรียญนี้ทำจากเงินแท้เชื่อถือได้ และแม้เวลาจะล่วงเลยไปสองพันหกร้อยกว่าปีแล้ว แต่รูปแบบของเหรียญกษาปณ์ลิเดียนี้ ก็ยังตกทอดมาถึงเหรียญกษาปณ์ที่เราใช้กันในปัจจุบัน (ด้านหนึ่งระบุมูลค่า อีกด้านหนึ่งระบุผู้มีอำนาจในการผลิตเหรียญ)\nชาวยุโรปและชาวตะวันออกกลางริเริ่มใช้เหรียญกษาปณ์นี้และเผยแพร่มันออกไปทั่วโลกไม่เว้นแม้กระทั่งตะวันออกไกลอย่างประเทศจีน เพียงไม่นานคนทั้งโลกก็หันมาให้คุณค่ากับ silver และ gold และสร้างระบบเศรษฐกิจโลกที่เป็นหนึ่งเดียวกัน ถ้าปราศจากเงิน การค้าขายข้ามดินแดนจะเป็นเรื่องที่เป็นไปไม่ได้เลย\nอีเกร็ดความรู้หนึ่งอีกอย่างหนึ่งก็คือ ในโลกปัจจุบันมีเงินไหลเวียนอยู่ถึง $60 trillion (60 ล้านล้านดอลล่าร์) แต่มูลค่าของเหรียญและธนบัตรทั่วโลกนั้นรวมกันแล้วแค่ $6 trillion หรือ 10% ของเงินเท่านั้น อีก 90% เป็นเพียงตัวเลขในคอมพิวเตอร์เท่านั้น\nไม่มีใครปฏิเสธเงิน เราต้องการเงินเพราะเราเชื่อว่าคนอื่นต้องการเงินนั้นเช่นกัน เงินจึงเป็นระบบความเชื่อใจกัน (mutual trust system) ที่ใหญ่ที่สุดเท่าที่มนุษย์เคยสร้างมา การมีอยู่ของเงินทำให้คนแปลกหน้าสามารถทำงานร่วมกันได้ (enable strangers to cooperate)\nแต่เพราะว่าเงินป็นเพียงไม่ได้มีตัวตนอย่างแท้จริง เป็นเพียง “สิ่งปลูกสร้างในจินตนาการมนุษย์” (psychological construct in our collective imagintion) ที่ต้องอาศัยความเชื่อมั่นเป็นพื้นฐาน มูลค่าของเงินจึงผูกติดกับการเมืองอย่างแยกไม่ออก เมื่อใดก็ตามที่บ้านเมืองมีปัญหาจนความเชื่อมั่นสั่นคลอน มูลค่าของเงินก็จะถูกกระทบไปด้วยเช่นกัน (ดูอย่างเวเนซูเอล่าที่มีอัตราเงินเฟ้อถึง 800% ในปีที่ผ่านมา แค่คิดภาพว่ามาม่าราคาซองละ 50 บาทก็หนาวแล้ว)\nเงินยังมีส่วนในการกัดกร่อน “คุณค่าความเป็นมนุษย์” อีกด้วย ในสังคมโบราณ เราเชื่อกันว่ายังมีหลายสิ่งที่ไม่อาจซื้อขายกันได้ เช่นความรักของพ่อกับแม่ที่มีให้ลูก หรือความจงรักภักดีของอัศวิน ที่มีต่อเจ้านาย แต่แล้วพ่อแม่บางคนถึงกับยอมขายลูกไปเป็นทาสเพื่อจะได้มีเงินมาจุนเจือครอบครัว และอัศวินหลายคน ก็พร้อมที่จะหันไปรับใช้เจ้านายที่ยินดีจะจ่ายเงินก้อนโตที่สุด\nและแม้เงินจะช่วยให้เราสามารถทำงานร่วมกับคนแปลกหน้าได้ แต่จริงๆ แล้วเราไม่ได้เชื่อใจคนแปลกหน้า เราเชื่อใจเงินที่คนคนนั้นถือต่างหาก เมื่อใดที่คนนั้นไม่มีเงิน ความเชื่อใจเราก็หมดไปเช่นกัน และนี่คือบทบาทของเงินต่อมนุษยชาติ แต่นอกจาก “เงิน” และ “ทอง” แล้ว เหล็กกล้า (ที่มาทำเป็นอาวุธ) ก็มีบทบาทสำคัญไม่แพ้กัน ในตอนหน้าเราจะมาดูกันครับว่าราชอาณาจักรและการก่อสงครามมีผลต่อการหลอมรวมโลกใบนี้อย่างไรบ้าง\n ของ 1000 ชิ้นเท่ากับ 499500 อัตราแลกเปลี่ยน – ใครที่เคยเรียนเลขเรื่อง nCr จะเข้าใจว่ามันคือ 1000c2 หรือ 1000!/(998!2!)\nที่มาบทความ :https://anontawong.com\n ","date":1588978800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588978800,"objectID":"885e037cdfc39031f6327322c8149efc","permalink":"https://example.com/book/sapiens/sapiens-9/","publishdate":"2020-05-09T00:00:00+01:00","relpermalink":"/book/sapiens/sapiens-9/","section":"book","summary":"ก่อนจะมีเงิน สมัยที่ Sapiens ยังล่าสัตว์และเก็บพืชผลนั้น ยังไม่มีสิ่งที่เรียกว่า “เงิน” เพราะสังคมมนุษย์มีขนาดไม่ใหญ่มาก อาจจะประมาณแค่หลายสิบถึงหลักร้อยต้นๆ ทุก คนในกลุ่มจึงรู้จักกันหมด และการที่เขาจะหยิบยื่นอะไรบางอย่างให้อีกคนจึงเป็นเรื่องของน้ำใจและบุญคุณ ถ้าวันนี้ผมมีแอปเปิ้ลเหลือให้คุณ ตามมารยาทวันหน้าถ้าคุณมีแอปเปิ้ลเหลือคุณก็ต้องแบ่งให้ผมด้วย\nอีกประเด็นหนึ่งของสังคมขนาดเล็กก็คือ ยังไม่เกิดสิ่งที่เรียกว่า specialization หรือความชำนาญทางด้านใดด้านหนึ่งโดยเฉพาะ เช่นแม้เผ่านี้จะเก็บแอปเปิ้ลเก่งเป็นพิเศษ แอปเปิ้ลที่เขาเก็บได้ก็ไม่ได้เยอะมากมายที่จะเอาไปแลกเปลี่ยนกับเผ่าอื่นได้ แถมเผ่าอื่นๆ ก็อยู่ไกลเกินกว่าจะมาแลกเปลี่ยนแอปเปิ้ลกันโดยง่าย แต่การมาถึงของการปฏิวัตเกษตรกรรม ทำให้ขนาดสังคมใหญ่ขึ้นจนอาจจะมีหลักแสนหรือหลักหมื่น จนเราไม่อาจจะรู้จักทุกคนได้ ถ้าวันหนึ่งคุณมาขอแอปเปิ้ลกับผม ผมก็ไม่อาจแน่ใจได้เลยว่าผมจะมีโอกาสได้แอปเปิ้ลคืนจากคุณในวันหน้าหรือไม่ การ “ให้เปล่า” โดยน้ำใจและมารยาทจึงค่อยๆ กลายมาเป็นกลายแลกเปลี่ยนอย่างช่วยไม่ได้\nและเมื่อสังคมใหญ่ขึ้น “ตลาด” ก็เติบโตเพียงพอที่จะทำให้บางคน specialize หรือทำแต่ในสิ่งที่ตัวเองถนัด เช่นถ้าผมเก่งทำรองเท้าผมก็สามารถทำรองเท้าเพียงอย่างเดียวแล้วเอารองเท้านั้นไปแลกกับอาหารและสิ่งจำเป็นอื่นๆ ได้ แต่การแลกเปลี่ยนสิ่งของแบบ barter นั้นมีปัญหาเสมอ สมมติผมเป็นคนทำสวนแอปเปิ้ลที่ขยันมากจนรองเท้าพัง ผมขนแอปเปิ้ลของผมไปเพื่อที่จะเอาไปเป็นค่าตอบแทนช่างทำรองเท้า ช่างทำรองเท้า จะรู้ได้อย่างไรว่าควรจะเอาแอปเปิ้ลจากผมกี่ลูก? เพราะแม้เขาจะเคยเก็บเป็นค่าแอปเปิ้ล 50 ลูกกับรองเท้าคู่หนึ่ง แต่นั่นก็เป็นรองเท้าของผู้หญิงไม่ใช่รองเท้าบู๊ทผู้ชาย แถมแอปเปิ้ลคราวนั้นก็คนละพันธุ์ แล้วถ้าสมมติ ช่างทำรองเท้าไม่ได้อยากกินแอปเปิ้ลแต่อยากฟ้องหย่าจะทำยังไง? คนปลูกแอปเปิ้ล จะต้องไปตามหาทนายที่อยากกินแอปเปิ้ลเพื่อให้เขามาทำเรื่องหย่าให้ช่างทำรองเท้าอย่างนั้นหรือ?\nการจะนำสิ่งของมาแลกเปลี่ยนกันได้ คนจำเป็นต้องรู้อัตราแลกเปลี่ยนของของสองสิ่งนั้น เช่นแอปเปิ้ล 40 ลูกเท่ากับรองเท้าผู้หญิง 1 คู่ รองเท้าผู้หญิง 10 คู่เท่ากับการฟ้องหย่าหนึ่งครั้ง การฟ้องหย่าหนึ่งครั้งเท่ากับแอปเปิ้ล 400 ลูก ฯลฯ ถ้าสิ่งของที่แลกเปลี่ยนในสังคมนั้นมีทั้งหมด 100 ชิ้น คนจะต้องรู้อัตราแลกเปลี่ยนถึง 4950 อัตรา และถ้าสิ่งของมี 1000 ชิ้น จะต้องมีอัตราแลกเปลี่ยนถึง 499,500 อัตรา!","tags":null,"title":"ตอนที่ 9 - มนตราของเงินตรา","type":"docs"},{"authors":null,"categories":null,"content":"แม้สถานการณ์ในช่วงที่การแข่งขันด้านมือถือ smartphone กำลังขับเคี่ยวกันอย่างสนุก และ ณ ช่วงเวลาดังกล่าว Steve Ballmer ได้ขึ้นมากุมบังเหียนใหญ่เป็น CEO ของ Microsoft อยู่ในขณะนั้น แต่ต้องบอกว่า Bill Gates ในฐานะประธานบริษัท ก็ยังคงมีบทบาทที่สำคัญในการตัดสินใจทางยุทธศาสตร์แทบจะทั้งหมดของ Microsoft อยู่\nประวัติ Bill Gates ตอนที่ 11 : Glorious Failure\nฟากฝั่ง Android จาก Google นั้นเริ่มต้นใหม่ด้วยแนวคิดแบบจอสัมผัส ซึ่งเป็นรูปแบบเดียวกับที่ Apple ประสบความสำเร็จกับ iPhone ซึ่ง Android ได้ทำการเปิดตัวมือถือรุ่นแรกคือ HTC G1 โดยเปิดตัวไปเมื่อเดือนตุลาคมปี 2008\nHTC G1 มือถือ Android รุ่นแรกของ Google ที่ดูไม่มีแววว่าจะรุ่ง\nมันแทบจะไม่มีอะไรพิเศษในแง่ของ Hardware แุถมยังมีแป้นพิมพ์แบบเลื่อนได้คล้าย ๆ มือถือของ Nokia ด้วยซ้ำ และความสามารถในการใช้จอแบบสัมผัสก็ดูต่างจาก iPhone ราวฟ้ากับเหว มันเหมือนรุ่น เบต้า ของ iPhone เสียมากกว่าที่จะมาเป็นคู่แข่งกับ iPhone\nแม้จ๊อบส์ จะโมโหมากที่ Google มาทำ Android ออกมาเพื่อแข่งกับ iPhone เพราะตอนแรกทั้งสองเหมือนจะเป็น พาร์ทเนอร์กันมากกว่า แต่ความสัมพันธ์ของทั้งสองได้ขาดสะบั้นลงไปเป็นที่เรียบร้อยแล้ว Google ก็ต้องการที่ยืนในตลาด smartphone เช่นเดียวกัน ดีกว่าการไปผูกชะตาชีวิตไว้กับ iPhone ของ Apple ที่จะนำบริการของพวกเขาออกไปเมื่อไหร่ก็ได้\nแต่จุดเปลี่ยนครั้งสำคัญของ Android ที่ทำให้พวกเขาสามารถแจ้งเกิดได้สำเร็จในวงการมือถือโลก น่าจะมาจาก Samsung ที่ได้ลองเปลี่ยนจาก Symbian มาใช้ Android โดยรุ่นแรกที่ได้ใช้ชื่อตระกูล Samsung Galaxy คือรุ่น “Samsung I7500 Galaxy” ที่ได้ถูกเปิดตัวครั้งแรกในปี 2009\nโดยกลายเป็น smartphone รุ่นแรกของค่ายที่รันบนระบบปฏิบัติการ Android เวอร์ชั่น 1.5 (Cupcake) ซึ่งต่อมาทาง Samsung ยังคงพัฒนา smartphone ของตัวเองอย่างต่อเนื่องด้วยการเปิดตัวสมาร์ทโฟนในตระกูล Galaxy รุ่นใหม่อย่าง Samsung Galaxy S\nและช่วยให้ผู้คนเริ่มหันมามอง Android เพราะเริ่มมี Features ที่ดูคล้าย iPhone เข้าไปทุกที ในสนนราคาที่ต่ำกว่า และ Galaxy S ก็กลายเป็นมือถือที่ทำให้เห็นศักยภาพของ Android อย่างแท้จริงนั่นเอง\nและความชัดเจนมันได้เริ่มเกิดขึ้นในไตรมาส 4 ของปี 2009 Android เริ่มเติบโตขึ้นทั่วโลก มีการขายโทรศัพท์ Android ไปได้กว่า 4 ล้านเครื่อง ซึ่งในขณะนั้นได้ขึ้นมาทาบรัศมีของ Windows Mobile ที่ยอดขายใกล้เคียงกันเป็นที่เรียบร้อยแล้ว ซึ่งถือเป็นการเติบโตแบบก้าวกระโดดที่น่ากลัวมาก ๆ ของ Android ในช่วงนั้น\nในขณะที่ Android กำลังอยู่ในช่วงขาขึ้น ฝั่ง Microsoft ก็ได้เริ่มตระหนักแล้วว่าสถานการณ์ของ Windows Mobile เริ่มจะมีปัญหาครั้งใหญ่ เหล่าผู้บริหารของ Microsoft เริ่มรู้ตัวว่า Windows Mobile นั้นไม่สามารถแข่งขันกับ smartphone รุ่นใหม่ ๆ ได้ ไม่ว่าจะเป็น iPhone จอสัมผัส หรือ ระบบปฏิบัติการน้องใหม่อย่าง Android\nจึงได้เริ่มมีความคิดที่จะสร้าง แพลตฟอร์ม มือถือใหม่ ที่เป็นจอสัมผัสบ้าง โดยจะใช้ code name ว่า “Windows Phone” ซึ่งจะมีการ Design Interface ของหน้าจอรูปแบบใหม่ที่เรียกว่า “Metro” และหันมาใช้เทคโนโลยีของตัวเองในการสร้างระบบปฏิบัติการใหม่นี้ขึ้นมาแทน\nMetro UI ของ Windows Phone ที่เหล่านักพัฒนาร้องยี้\nและสถานการณ์ของ Nokia ที่แม้จะยังคงเป็นผู้ผลิตมือถือรายใหญ่ที่สุดในโลกอยู่ แต่กราฟการเติบโตของพวกเขาเริ่มดิ่งลงเรื่อย ๆ โดยเฉพาะในตลาด smartphone ที่ Symbian โดนแย่งชิงตลาดจากทั้ง Android และ iOS ของ Apple อย่างหนัก จนต้องมีการปลด CEO คนเก่าออกแล้วตั้ง Stephen Elop ที่เป็นอดีตลูกหม้อของ Microsoft ขึ้นมากุมบังเหียนแทน\nซึ่งสุดท้าย Elop ที่ด้วยความเป็นลูกหม้อเก่าของ Microsoft ก็ได้ตัดสินใจว่าจะร่วมวงกับ Microsoft ในการผลักดัน Windows Phone และรอให้ Windows Phone นั้นสมบูรณ์พร้อมซึ่งคาดว่าน่าจะภายในปี 2012\nโดยทั้ง 2 บริษัทจะใช้ระบบปฏิบัติการ Windows Phone เป็นแพลทฟอร์มหลักของ smartphone ของ Nokia โดย Nokia จะอาศัยความเชี่ยวชาญด้านการปรับแต่งฮาร์ดแวร์ การเลือกสรรซอฟต์แวร์ ภาษาที่รองรับและขีดความสามารถในการผลิตและการเข้าถึงตลาด\nนอกจากนี้จะร่วมกันให้บริการเพื่อขับเคลื่อนสินค้าใหม่ ๆ เช่น Nokia Maps ซึ่งจะเป็นส่วนสำคัญของบริการเด่นของ Microsoft อย่าง Bing และ AdCenter แอพพลิเคชั่นและคอนเทนท์ของ Nokia จะรวมเข้ากับ Microsoft Marketplace ด้วยเช่นกัน\nแต่ดูเหมือนกลยุทธ์ดังกล่าว ก็ไม่ได้ทำให้ Nokia สถานการณ์ดีขึ้นแต่อย่างใด จนสุดท้าย Microsoft ก็ได้เดินเกมเดิมพันครั้งสุดท้ายในตลาดมือถือ smartphone ด้วยการเข้า Take Over เอา Nokia มาครอบครองได้สำเร็จในช่วงปลายปี 2013\nแต่เนื่องด้วยความล่าช้า และการพัฒนาอย่างรวดเร็วของทั้ง android และ iOS ของ iPhone รวมถึงการที่ตัว Windows Phone ไม่ได้รับความสนใจจากเหล่านักพัฒนา App ให้มาสนใจ Windows Phone เลยด้วยซ้ำ และที่สำคัญด้วย UI ใหม่แบบ Metro นั้นทำให้เหล่านักพัฒนาแขยงที่จะร่วมวงด้วยเพราะมันมีความแตกต่างอย่างชัดเจนกับ iOS และ Android ที่พวกเขาแทบจะต้องพัฒนาแอปต่าง ๆ ขึ้นมาใหม่หมด\nทำให้ App ดี ๆ ที่คนใช้งานทั่วไปในทั้ง Android และ iOS ไม่มีการมาพัฒนาบนแพลตฟอร์มของ Windows Phone และมันก็ได้ทำให้ผู้ใช้งานแทบจะไม่สนใจ Windows Phone เลย จนท้ายที่สุด Windows Mobile ก็ต้องปิดฉากตัวเองไปจากวงการมือถือโลก อย่างที่เราได้เห็นจวบจนถึงปัจจุบันนั่นเองครับ\n Written with StackEdit.\n ","date":1589324400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589324400,"objectID":"2a1e82f30fba39c244cc1ca3f0dc157c","permalink":"https://example.com/book/gates/bill-gate-11/","publishdate":"2020-05-13T00:00:00+01:00","relpermalink":"/book/gates/bill-gate-11/","section":"book","summary":"แม้สถานการณ์ในช่วงที่การแข่งขันด้านมือถือ smartphone กำลังขับเคี่ยวกันอย่างสนุก และ ณ ช่วงเวลาดังกล่าว Steve Ballmer ได้ขึ้นมากุมบังเหียนใหญ่เป็น CEO ของ Microsoft อยู่ในขณะนั้น แต่ต้องบอกว่า Bill Gates ในฐานะประธานบริษัท ก็ยังคงมีบทบาทที่สำคัญในการตัดสินใจทางยุทธศาสตร์แทบจะทั้งหมดของ Microsoft อยู่\nประวัติ Bill Gates ตอนที่ 11 : Glorious Failure\nฟากฝั่ง Android จาก Google นั้นเริ่มต้นใหม่ด้วยแนวคิดแบบจอสัมผัส ซึ่งเป็นรูปแบบเดียวกับที่ Apple ประสบความสำเร็จกับ iPhone ซึ่ง Android ได้ทำการเปิดตัวมือถือรุ่นแรกคือ HTC G1 โดยเปิดตัวไปเมื่อเดือนตุลาคมปี 2008\nHTC G1 มือถือ Android รุ่นแรกของ Google ที่ดูไม่มีแววว่าจะรุ่ง\nมันแทบจะไม่มีอะไรพิเศษในแง่ของ Hardware แุถมยังมีแป้นพิมพ์แบบเลื่อนได้คล้าย ๆ มือถือของ Nokia ด้วยซ้ำ และความสามารถในการใช้จอแบบสัมผัสก็ดูต่างจาก iPhone ราวฟ้ากับเหว มันเหมือนรุ่น เบต้า ของ iPhone เสียมากกว่าที่จะมาเป็นคู่แข่งกับ iPhone\nแม้จ๊อบส์ จะโมโหมากที่ Google มาทำ Android ออกมาเพื่อแข่งกับ iPhone เพราะตอนแรกทั้งสองเหมือนจะเป็น พาร์ทเนอร์กันมากกว่า แต่ความสัมพันธ์ของทั้งสองได้ขาดสะบั้นลงไปเป็นที่เรียบร้อยแล้ว Google ก็ต้องการที่ยืนในตลาด smartphone เช่นเดียวกัน ดีกว่าการไปผูกชะตาชีวิตไว้กับ iPhone ของ Apple ที่จะนำบริการของพวกเขาออกไปเมื่อไหร่ก็ได้","tags":null,"title":"ตอนที่ 11 - Glorious Failure","type":"docs"},{"authors":null,"categories":null,"content":"   สองตอนที่ผ่านมา เราพูดถึงเงินที่ช่วยหลอมรวมโลกในเชิงเศรษฐกิจ พูดถึงจักรวรรดิที่หลอมรวมโลกในเชิงรัฐศาสตร์ วันนี้เราจะมาพูดถึง ศาสนาที่หลอมรวม โลกในเชิงจิตวิญญาณนะครับระเบียบสังคม (social order) เป็นสิ่งที่มนุษย์จินตนาการขึ้นมาทั้งนั้น เช่นการแบ่งคนออกเป็นวรรณะ ทั้ง ๆ ที่จริง ๆ แล้วในเชิงชีววิทยาเราแทบไม่มีอะไรต่างกันเลย เมื่อระเบียบสังคมเป็นสิ่งที่จินตนาการขึ้น มันจึงมีความเปราะบาง และยิ่งสังคมมนุษย์ขยายใหญ่มากขึ้นเท่าไหร่ ก็ยิ่งเปราะบางขึ้นเท่านั้น บทบาทที่สำคัญของศาสนาก็คือ มันได้สร้างความชอบธรรมที่มาจากสิ่งที่อยู่เหนือมนุษย์ (superhuman legitimacy) ขึ้นมาช่วยลดความเปราะบางของระเบียบสังคมนี้ ศาสนาบอกว่ากฎกติกาหลายอย่างไม่ใช่สิ่งที่มนุษย์ตั้งขึ้นตามอำเภอใจ แต่เป็นคำบัญชาจากเบื้องบน เมื่อคนส่วนใหญ่เชื่อในแนวคิดนี้ คนย่อมไม่กล้าที่จะตั้งคำถามหรือแข็งขืนกับกฎระเบียบ สังคมนั้นจึงมีเสถียรภาพ\nนิยามของศาสนา “ศาสนา” คือระบบที่กำหนดบรรทัดฐานทางศีลธรรมโดยตั้งอยู่บนความเชื่อในเรื่องเหนือมนุษย์\nศาสนาจึงมีเกณฑ์วัดอยู่สองข้อ\n ศาสนายึดถือว่าโลกนี้มีกฎระเบียบที่มาจากสิ่งที่เหนือมนุษย์ (superhuman order) ฟุตบอลไม่ถือว่าเป็นศาสนา เพราะถึงแม้ว่าฟุตบอลจะมีกฎกติกามากมายแต่คนที่ตั้งกฎเหล่านี้ขึ้นมาคือฟีฟ่า และพวกเขามีสิทธิ์ที่จะเปลี่ยนแปลงกฎเองได้\n ศาสนาเป็นตัวกำหนดว่ามนุษย์ควรจะประพฤติตนอย่างไร คนมากมายเชื่อในเรื่องผีสางนางไม้ (ซึ่งเป็นความเชื่อเรื่องเหนือมนุษย์) แต่ความเชื่อเหล่านี้ ไม่ได้เป็นตัวกำหนดมาตรฐานทางศีลธรรมและความประพฤติ จึงไม่อาจถือได้ว่าเป็นศาสนา\n  การที่ศาสนาใดศาสนาหนึ่งจะมีบทบาทในการหลอมรวมคนจำนวนมากได้นั้นยังต้องมีคุณลักษณะเพิ่มอีกสองข้อ นั่นคือกฎกติกาที่ศาสนากำหนดขึ้นมานี้ต้องเป็นสากล (universal) ที่ถูกต้องในทุกสถานในกาลทุกเมื่อ และคำสอนของศาสนานี้เป็นเรื่องที่พึงนำไปเผยแผ่ให้แก่มนุษย์ทุกผู้ทุกนาม (missionary) ศาสนาที่เป็นที่รู้จักกันดีอย่างคริสต์ อิสลาม และพุทธนั้น อ้างว่าคำสอนของตัวเองเป็นสากลและเป็นสิ่งที่ต้องนำไปประกาศให้ชาวโลกรับรู้ แต่ศาสนาส่วนใหญ่ในยุคแรก ๆ นั้นมีคุณลักษณะตรงกันข้ามคือ มีความเป็น local และ exclusive พวกเขาเชื่อในเทพเจ้าที่สิงสถิตอยู่เฉพาะละแวกนั้น ๆ และไม่เคยคิดจะไปเผยแผ่ให้คนอื่นเห็นดีเห็นงามด้วย\nวิญญาณนิยม (Animism) ในยุคที่คนเรายังเข้าป่าล่าสัตว์กันนั้น ความเชื่อของพวกเขาจะยึดกับสิ่งที่อยู่ในพื้นที่ เช่นคนที่อยู่ริมแม่น้ำคงคา อาจจะมีความเชื่อว่า ห้ามตัดต้นไม้ศักดิ์สิทธิ์ต้นนี้ ไม่อย่างนั้นภูติจะพิโรธ ขณะที่ชาวบ้านริมแม่น้ำสินธุ อาจจะห้ามล่าจิ้งจอกหางขาว เพราะตำนานเล่าว่าจิ้งจอกหางขาวเคยมาบอกสถานที่เก็บขุมทรัพย์ คนยุคนั้นใช้เวลาทั้งชีวิตอยู่ในพื้นที่แค่ไม่กี่พันตารางกิโลเมตร สิ่งที่จำเป็นสำหรับพวกเขาคือ ความรู้ความเข้าใจสิ่งศักดิ์สิทธิ์ในพื้นที่นั้น ๆ เพื่อประพฤติตนให้เหมาะสม จึงมองไม่เห็นความจำเป็นใดๆ ที่จะต้องไปโน้มน้าวให้คนในพื้นที่อื่นต้องมาเชื่อตามเขา คนริมแม่น้ำสินธุ จึงไม่เคยคิดไปบอกคนริมแม่น้ำคงคาว่าห้ามล่าจิ้งจอกหางขาวนะ นี่คือศาสนาที่เรียกว่า “วิญญาณนิยม” (animism) หรือความเชื่อที่ว่าทุกสรรพสิ่งมีจิตวิญญาณ ไม่ว่าจะเป็นสัตว์ ต้นไม้ หรือแม้กระทั่งก้อนหิน มนุษย์มองตัวเองว่า เป็นเพียงสมาชิกอีกคนหนึ่งในบรรดาสรรพสัตว์ และให้คุณค่ากับชีวิตของสัตว์และต้นไม้เท่าเทียมกับเผ่าพันธุ์ของตน\nแต่การมาถึงของการปฏิวัติเกษตรกรรมก็ทำให้ทุกอย่างเปลี่ยนไป เมื่อมนุษย์หันมาเพาะพืชและเลี้ยงสัตว์ พืชและสัตว์ จึงถูกเปลี่ยนฐานะจากเพื่อนร่วมโลก มาเป็นทรัพย์สินที่อยู่ในความดูแลของมนุษย์แทน ความเชื่อเรื่องเทพเจ้าเริ่มเกิดในยุคนี้นี่เอง เพราะถึงแม้เขาจะดูแลข้าวในไร่ของตัวเองเป็นอย่างดี แต่หากมีภัยแล้งหรืออุทกภัย ไร่นาย่อมเสียหาย คนจึงเริ่มบวงสรวงเทพเจ้า ทำการบูชายัญด้วยลูกแกะ ฯลฯ เพื่อแลกกับความอุดมสมบูรณ์ของไร่นา และปศุสัตว์ที่เป็นสมบัติของพวกเขา\nศาสนาเทพเจ้าหลายองค์ (Polytheistic Religions) ในสมัยที่คนยังอยู่ในพื้นที่จำกัด การมีเทพเจ้าท้องถิ่นคอยดูแลก็เพียงพอแล้ว แต่พออาณาเขตของบ้านเมือง เริ่มขยายใหญ่ขึ่นเรื่อย ๆ เทพเจ้าในความเชื่อของมนุษย์จึงต้องมีพลังมากขึ้นเช่นกัน นี่คือที่มาของศาสนาที่เชื่อในเทพเจ้าหลายองค์ (polytheistic religions – poly = many, theos = god)โดยเทพเจ้าแต่ละองค์ก็จะมีความชำนาญที่แตกต่างกันไป เช่นเทพเจ้าแห่งฝน เทพเจ้าแห่งความอุดมสมบูรณ์ และเทพเจ้าแห่งสงคราม แต่อีกหนึ่งผลกระทบสำคัญของศาสนาหลายเทพเจ้าก็คือ มันได้ลดฐานะของสัตว์ต่างๆ เป็นเพียงแค่ตัวประกอบในโรงละครใหญ่ที่มีมนุษย์เป็นนักแสดงนำ มนุษย์เริ่มมองว่าสิ่งต่างๆ ที่เกิดขึ้นบนโลกใบนี้เป็นเพียงภาพสะท้อนความสัมพันธ์ระหว่างมนุษย์และเทพเจ้า หากเกิดเหตุน้ำท่วมใหญ่จนสัตว์ตายเป็นเบือ นั่นก็เพียงเพราะว่ามนุษย์โง่ ๆ บางคนไปทำให้เทพเจ้าโกรธเคืองเท่านั้นเอง\nการเกิดขึ้นของศาสนาหลายเทพจึงไม่เป็นเพียงการยกระดับของเทพเจ้าเท่านั้น แต่เป็นการยกฐานะของมนุษย์ ให้เหนือกว่าสรรพสัตว์ทั้งปวงด้วย ศาสนาหลายเทพเจ้าแตกต่างจากศาสนาที่มีพระเจ้าองค์เดียว ตรงที่เขาไม่ค่อยซีเรียสกับการไปเปลี่ยนศาสนาคนอื่น ในยุคที่อาณาจักรโรมันเฟื่องฟู จักรพรรดิโรมัน ไม่เคยพยายามเปลี่ยนศาสนาของประชาชนในบ้านเมืองที่ท่านเข้าไปตีและยึดครอง ประชาชนในพื้นที่ จะถูกคาดหวังให้เคารพเทพเจ้าของชาวโรมัน แต่ไม่จำเป็นต้องเลิกเชื่อในเทพเจ้าที่ตัวเองเคยยึดถืออยู่ก่อน ศาสนาเดียวที่กรุงโรมมีปัญหาด้วยคือศาสนาคริสต์ เพราะชาวคริสต์ปฏิเสธที่จะบูชาเทพเจ้า และจักพรรดิแห่งกรุงโรม ชาวโรมจึงเขียนเสือให้วัวกลัวด้วยการจับพระเยซูตรึงไม้กางเขน ในช่วงระยะเวลา 300 ปี นับแต่นั้นจนถึงวันที่พระเจ้าคอนสแตนตินแห่งกรุงโรม เปลี่ยนมาถือคริสต์ ชาวโรมจับชาวคริสเตียนมาลงโทษและประหารไปไม่น้อย ตัวเลขน่าจะอยู่ในหลักสองพันถึงสามพันคน\nแต่การสูญเสียนี้เทียบไม่ได้เลยกับการประหัตประหารของผู้ที่นับถือศาสนาคริสต์ด้วยกันเอง ชาวคริสต์นิกายโปรเตสแตนท์ เชื่อว่าพระเจ้าจุติลงมาเป็นมนุษย์และยอมโดนทรมานและตรึงกางเขน ดังนั้นจึงได้ไถ่บาปทั้งหมด และเปิดประตูสวรรค์เพื่อรับใครก็ตามที่เลือกนับถือศาสนานี้ แต่คริสต์นิกายแคธอลิคเชื่อว่าแค่ศรัทธาอย่างเดียวไม่พอ ต้องทำความดีและเข้าโบสถ์ด้วย ความแตกต่างในรายละเอียด ของสองนิกายนี้มากพอที่จะทำให้ทั้งสองฝ่าย เข่นฆ่ากันเป็นจำนวนมากในช่วงคริสตศตวรรษที่ 16 และ 17 ยกตัวอย่างเช่นเหตุการณ์สังหารหมู่วันเซนต์บาโธโลมิว (St. Bartholomew’s Day massacre) ที่ชาวคาธอลิกสังหารชาวโปรเตสแตนท์ในปารีสนับหมื่นคนภายในเวลาแค่ 24 ชั่วโมง\nศาสนาพระเจ้าองค์เดียว (Monotheistic religion) ศาสนาแบบพระเจ้าองค์เดียวเกิดขึ้นในสมัยฟาโรห์แอเคนาเตนเมื่อ 350 ปีก่อนคริสตกาล ฟาโรห์องค์นี้ได้ประกาศว่า หนึ่งในเทพเจ้าของชาวอียิปต์นาม “อาเต็น” (Aten) แท้จริงแล้วเป็นพระเจ้าผู้อยู่สูงสุดและปกครองทุกสรรพสิ่งในจักรวาล องค์ฟาโรห์จึงตั้ง “อาเต็น” เป็นศาสนาประจำชาติและคอยตรวจสอบการบวงสรวงเทพเจ้าองค์อื่น ๆ แต่ภายหลังจากฟาโรห์องค์นี้ เสด็จสวรรคตชาวอียิปต์ก็กลับไปนับถือเทพเจ้าหลายองค์ตามเดิม การบุกเบิกครั้งยิ่งใหญ่เกิดในสมัยของศาสนาคริสต์ ซึ่งเริ่มต้นจากการเป็นลัทธิเล็ก ๆ ของชาวยิว ที่ต้องการจะโน้มน้าวคนยิวว่าชายนามจีซัส แห่งนาซาเรธคือผู้มาโปรดที่ชาวยิวเฝ้ารอมานานแสนนาน โดยมีนักบุญพอลแห่งทาร์ซัส (Paul of Tarsus) เป็นตัวตั้งตัวตี ในการเผยแผ่คำสอนของจีซัสไปทั่วโลก อีก 700 ปีต่อมาลัทธิเล็ก ๆ ในคาบสมุทรอาหรับ ก็เดินตามรอยศาสนาคริสต์ และเผยแผ่ไปได้รวดเร็วกว่าศาสนาคริสต์เสียอีก คนที่นับถือพระเจ้าองค์เดียว จะเชื่อว่าคำสอนในศาสนาของตนคือความจริงทั้งหมด จึงมีความอดทนต่ำต่อความเชื่อที่แตกต่าง ในประวัติศาสตร์ที่ผ่านมาศาสนาเหล่านี้จึงพยายามนำ “คนนอกศาสนา” มาเข้ารีต รวมถึงทำลายศาสนา “คู่แข่ง” ด้วย\nซึ่งยุทธศาสตร์นี้ก็ได้ผลเป็นอย่างดี สองพันปีที่แล้ว แทบไม่มีใครนับถือศาสนาพระเจ้าองค์เดียวเลย แต่ปัจจุบัน มนุษย์ส่วนใหญ่ที่อาศัยอยู่นอกเอเชียตะวันออกล้วนแล้วแต่นับถือศาสนาที่มีพระเจ้าองค์เดียว ในตอนหน้า เราจะมาพูดถึงศาสนาที่ตั้งอยู่บนกฎธรรมชาติ (ศาสนาพุทธ) และ “ศาสนา” ที่บูชามนุษย์อย่างศาสนาคอมมิวนิสต์ และศาสนานาซีครับ\nที่มาบทความ :https://anontawong.com\n","date":1589065200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589065200,"objectID":"09f95689b38ff58e5f28bafc3ff53cea","permalink":"https://example.com/book/sapiens/sapiens-11/","publishdate":"2020-05-10T00:00:00+01:00","relpermalink":"/book/sapiens/sapiens-11/","section":"book","summary":"สองตอนที่ผ่านมา เราพูดถึงเงินที่ช่วยหลอมรวมโลกในเชิงเศรษฐกิจ พูดถึงจักรวรรดิที่หลอมรวมโลกในเชิงรัฐศาสตร์ วันนี้เราจะมาพูดถึง ศาสนาที่หลอมรวม โลกในเชิงจิตวิญญาณนะครับระเบียบสังคม (social order) เป็นสิ่งที่มนุษย์จินตนาการขึ้นมาทั้งนั้น เช่นการแบ่งคนออกเป็นวรรณะ ทั้ง ๆ ที่จริง ๆ แล้วในเชิงชีววิทยาเราแทบไม่มีอะไรต่างกันเลย เมื่อระเบียบสังคมเป็นสิ่งที่จินตนาการขึ้น มันจึงมีความเปราะบาง และยิ่งสังคมมนุษย์ขยายใหญ่มากขึ้นเท่าไหร่ ก็ยิ่งเปราะบางขึ้นเท่านั้น บทบาทที่สำคัญของศาสนาก็คือ มันได้สร้างความชอบธรรมที่มาจากสิ่งที่อยู่เหนือมนุษย์ (superhuman legitimacy) ขึ้นมาช่วยลดความเปราะบางของระเบียบสังคมนี้ ศาสนาบอกว่ากฎกติกาหลายอย่างไม่ใช่สิ่งที่มนุษย์ตั้งขึ้นตามอำเภอใจ แต่เป็นคำบัญชาจากเบื้องบน เมื่อคนส่วนใหญ่เชื่อในแนวคิดนี้ คนย่อมไม่กล้าที่จะตั้งคำถามหรือแข็งขืนกับกฎระเบียบ สังคมนั้นจึงมีเสถียรภาพ\nนิยามของศาสนา “ศาสนา” คือระบบที่กำหนดบรรทัดฐานทางศีลธรรมโดยตั้งอยู่บนความเชื่อในเรื่องเหนือมนุษย์\nศาสนาจึงมีเกณฑ์วัดอยู่สองข้อ\n ศาสนายึดถือว่าโลกนี้มีกฎระเบียบที่มาจากสิ่งที่เหนือมนุษย์ (superhuman order) ฟุตบอลไม่ถือว่าเป็นศาสนา เพราะถึงแม้ว่าฟุตบอลจะมีกฎกติกามากมายแต่คนที่ตั้งกฎเหล่านี้ขึ้นมาคือฟีฟ่า และพวกเขามีสิทธิ์ที่จะเปลี่ยนแปลงกฎเองได้\n ศาสนาเป็นตัวกำหนดว่ามนุษย์ควรจะประพฤติตนอย่างไร คนมากมายเชื่อในเรื่องผีสางนางไม้ (ซึ่งเป็นความเชื่อเรื่องเหนือมนุษย์) แต่ความเชื่อเหล่านี้ ไม่ได้เป็นตัวกำหนดมาตรฐานทางศีลธรรมและความประพฤติ จึงไม่อาจถือได้ว่าเป็นศาสนา\n  การที่ศาสนาใดศาสนาหนึ่งจะมีบทบาทในการหลอมรวมคนจำนวนมากได้นั้นยังต้องมีคุณลักษณะเพิ่มอีกสองข้อ นั่นคือกฎกติกาที่ศาสนากำหนดขึ้นมานี้ต้องเป็นสากล (universal) ที่ถูกต้องในทุกสถานในกาลทุกเมื่อ และคำสอนของศาสนานี้เป็นเรื่องที่พึงนำไปเผยแผ่ให้แก่มนุษย์ทุกผู้ทุกนาม (missionary) ศาสนาที่เป็นที่รู้จักกันดีอย่างคริสต์ อิสลาม และพุทธนั้น อ้างว่าคำสอนของตัวเองเป็นสากลและเป็นสิ่งที่ต้องนำไปประกาศให้ชาวโลกรับรู้ แต่ศาสนาส่วนใหญ่ในยุคแรก ๆ นั้นมีคุณลักษณะตรงกันข้ามคือ มีความเป็น local และ exclusive พวกเขาเชื่อในเทพเจ้าที่สิงสถิตอยู่เฉพาะละแวกนั้น ๆ และไม่เคยคิดจะไปเผยแผ่ให้คนอื่นเห็นดีเห็นงามด้วย","tags":null,"title":"ตอนที่ 11 - บทบาทของศาสนา","type":"docs"},{"authors":null,"categories":null,"content":" เมื่อตอนที่แล้วเราพูดถึง “เงิน” ซึ่งมีบทบาทในการสร้างโลภาภิวัฒน์ในเชิงเศรษฐกิจ วันนี้จะขอพูดถึง จักรรรดิ (Empires) ที่มีส่วนสำคัญ ในการสร้างโลกาภิวัฒน์ในเชิงสังคมและการเมืองนะครับ\nจักรวรรดิคืออะไร? มีจักรวรรดิมากมายที่เราคุ้นหู เช่น จักรวรรดิโรมัน จักรวรรดิเปอร์เซีย จักรวรรดิออตโตมัน จักรวรรดิอังกฤษ จักรวรรดิมองโกล รวมไปถึงราชวงศ์ฮั่น แต่อะไรคือตัวชี้วัดว่า อาณาเขตหรือการปกครองใดเป็นจักรวรรรดิ?\nผู้เขียนบอกว่าจักรวรรดิจะมีคุณลักษณะสองข้อด้วยกัน\n ปกครองผู้คนหลายเชื้อชาติ (rule over a significant number of distinct peoples)\n มีอาณาเขตที่เปลี่ยนแปลงตลอดเวลา เพราะพร้อมจะกลืนกินบ้านอื่นเมืองอื่นโดยไม่จำเป็น ต้องเปลี่ยนโครงสร้างพื้นฐานหรืออัตลักษณ์ไป\n  ประเทศอังกฤษในตอนนี้ไม่ถือว่าเป็นจักรวรรดิเพราะไม่สามารถเพิ่มอาณาเขตได้โดยไม่ต้องเปลี่ยนอัตลักษณ์ของตัวเอง แต่เมื่อร้อยปีที่แล้วเกือบทุกที่บนโลกใบนี้มีโอกาสที่จะกลายมาเป็นส่วนหนึ่งของจักรวรรดิอังกฤษ คำว่า “จักรวรรดิ” นั้นมีความหมายแง่ลบอยู่ในที เพราะเราจะเห็นภาพของการทำสงคราม ฆ่าฟัน และกดขี่ข่มเหงประชาชนในเมืองที่ถูกยึดครอง แต่ความจริงก็คือในช่วง 2500 ปีที่ผ่านมาการปกครองแบบจักรวรรดิคือการปกครองที่มีเสถียรภาพที่สุดของมนุษย์ การที่จักรวรรดิใดจักรวรรดิหนึ่งจะล่มสลายนั้นมักไม่ได้เกิดจากการลุกฮือขึ้นของประชาชนที่ทนต่อการกดขี่ไม่ได้ (เพราะกลุ่มกบฎเหล่านี้ปราบปรามได้ง่ายมาก) แต่มักจะเกิดจากการทะเลาะกันเองในหมู่ผู้ปกครอง หรือการรุกรานจากจักรวรรดิอื่น\nจักรวรรดิแรก จักรวรรดิแรกของมนุษย์มีชื่อว่าจักรวรรดิอัคคาเดียนของซาร์กอนมหาราช (Akkadian Empire of Sargon the Great) ในปี 2250 ก่อนคริสตกาล โดยซาร์กอนนั้นเริ่มต้นจากการเป็นพระราชาของ Kish เมืองเล็กๆ ในเมโสโปเตเมีย (ปัจจุบันอยู่ทางใต้ของเมืองแบกแดดไป 80 กิโลเมตร) ก่อนจะค่อยๆ ยึดครองเมืองในเมโสโปเตเมียทั้งหมดและเมืองรอบนอกต่างๆ ด้วย โดยซาร์กอนมหาราชได้ประกาศว่าท่านได้ผู้ชิตโลกทั้งใบแล้ว (ทั้งที่จริงๆ อาณาเขตของจักรวรรดิ อัคคาเดียนนั้นกินพื้นที่ของประเทศอิรักและซีเรียเท่านั้น)\nซาร์กอนมหาราชสวรรคตตได้ไม่นาน จักรวรรดิอัคคาเดียนก็ล่มสลาย แต่พระราชาในยุคถัดมาในแคว้นบาบิโลนหรือแคว้นอัสซีเรีย ต่างก็พยายามเดินตามรอยซาร์กอนและประกาศตนว่าเขาคือผู้พิชิตโลกทั้งใบ เมื่อ 550 ปีก่อนคริสตกาลก็เกิดมหาราชอีกองค์หนึ่งคือไซรัสมหาราชซึ่งเป็นผู้สร้างจักรวรรดิเปอร์เซีย (ซึ่งกินพื้นที่ใหญ่กว่าจักรวรรดิอาคาเรียนหลายสิบเท่า) สิ่งที่ทำให้ไซรัสมหาราชแตกต่างจากพระราชาองค์ก่อนๆ ก็คือท่านไม่ได้มองตัวเองว่าเป็นพระราชาของชาวเปอร์เซียเท่านั้น แต่มองว่าตัวเองเป็นพระราชา ของพสกนิกรทุกคนที่ตกอยู่ใต้การปกครองของท่าน\nดังนั้นไซรัสมหาราชจึงมองว่า การขยายอาณาเขตของจักรวรรดิเปอร์เซียนั้น เป็นการทำไปเพื่อประโยชน์สุขของมนุษย์ทุกหมู่เหล่า และประชาชนในเมืองที่ถูกจักรวรรดิเปอร์เซียยึดครองควรจะดีใจที่ได้ท่านมาเป็นพระราชา แนวคิดว่าการเข้ายึดครองคือการเข้าไปโปรด ถูกส่งต่อมายังอเล็กซานเดอร์มหาราช, จักรพรรดิแห่งโรมัน, เคาลีฟะห์ (ประมุขของอาณาจักรอิสลามต่าง ๆ ) ราชวงศ์ในอินเดีย และรวมถึงประธานาธิบดีของรัสเซียและสหรัฐอเมริกาด้วย วิธีคิดแบบนี้จึงถูกใช้เพื่อเป็นการสร้างความชอบธรรมในการเข้าไปปกครองดินแดนต่างๆ มาโดยตลอด\nจักรวรรดิเป็นเหตุผลหลักในการผสมผสาน กฎหมาย ภาษา วัฒนธรรม วิถีชีวิตของคนเชื้อชาติและเชื้อสายต่างๆ ให้เป็นเนื้อเดียวกัน ทำให้สินค้า ความรู้ เทคโนโลยีส่งต่อกันไปมาได้ง่ายขึ้น แต่การหลอมรวมนั้นก็ใช่ว่าจะโปรยปรายด้วยดอกกุหลาบ เพราะผู้คนที่ถูกยึดครองต้องใช้เวลาหลายทศวรรษหรือแม้กระทั่งนานนับศตวรรษกว่าจะปรับตัวให้เข้ากับวิถีของผู้ปกครองคนใหม่ (ลองคิดภาพว่าถ้าวันนี้เราโดนประเทศเพื่อนบ้านยึดครองจนเราจำเป็นต้องเรียนรู้ภาษาใหม่ เราต้องใช้เวลาอีกนานเท่าไหร่กว่าจะปรับตัวได้) และประวัติศาสตร์ ก็เต็มไปด้วยเรื่องราวการต่อสู้ของผู้ถูกรุกรานเพื่อให้ได้มาซึ่งสิทธิ์ที่เขาควรจะได้\nแม้จักรวรรดิจะถูกมองว่าเป็น “ผู้ร้าย” ในประวัติศาสตร์ แต่จักรวรรดิก็ได้สร้างคุณูปการ ให้กับดินแดนที่จักรวรรดิเหล่านั้นเคยแผ่อาณาเขตไม่ถึง\nยกตัวอย่างเช่นประเทศอินเดีย ที่ถูกจักรวรรดิอังกฤษยึดครอง แม้อังกฤษจะเข่นฆ่ชาวอินเดียไปไม่น้อย แต่อังกฤษก็ได้รวมแคว้นต่างๆ ในอินเดีย (ซึ่งก่อสงครามกันประจำ) เข้าไว้ด้วยกัน วางรากฐานกระบวนการยุติธรรมและระบบราชการให้ และสร้างทางรถไฟซึ่งจำเป็นอย่างมาก ในการเชื่อมโยงเศรษฐกิจของทั้งประเทศให้เป็นหนึ่งเดียวกัน เมื่ออินเดียได้เอกราชแล้วก็ยังนำระบอบการปกครองแบบประชาธิปไตยมาใช้ตามรอยอังกฤษ ภาษาอังกฤษถูกใช้เป็นภาษาราชการที่ทำให้คนท้องถิ่นซึ่งพูดภาษาฮินดี ทมิฬ และมาลายาลัมคุยกันรู้เรื่อง\nจักรวรรดิโลก ในศตวรรษที่ 21 เกือบทุกประเทศในโลกต่างก็ต้องพึ่งพากันในเชิงเศรษฐกิจ ไม่มีใครจะสามารถรุกรานใครได้ตามอำเภอใจ แต่ละรัฐต่างก็ต้องปฏิบัติตามกติการและมารยาทของนานาชาติ พลังของทุนนิยมและข้อมูลข่าวสาร เป็นกระแสอันเชี่ยวกรากที่กำหนดพฤติกรรมของทุกประเทศบนโลกนี้ จักรวรรดิโลกที่กำลังเกิดขึ้น ไม่ได้ถูกปกครองด้วยจักรพรรดิองค์ใดองค์หนึ่ง แต่ด้วยกลุ่มคนผู้มีอิทธิพลจากหลายเชื้อชาติ ผู้ประกอบการ วิศวกร นักวิชาการ และผู้คนต่างสาขาอาชีพกำลังถูกชักชวนให้เข้าร่วมจักรวรรดิใหม่นี้ พวกเขามีทางเลือกสองทาง คือจะจงรักภักดีกับประเทศของเขา หรือจะเข้าร่วมกับจักรวรรดิที่ได้แผ่อาณาเขตไปกว้างไกลกว่าจักรวรรดิใดที่เคยมีมา\n ที่มาบทความ :https://anontawong.com\n ","date":1588978800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588978800,"objectID":"d62cdb924c7e8bebb6e86a381c7d33df","permalink":"https://example.com/book/sapiens/sapiens-10/","publishdate":"2020-05-09T00:00:00+01:00","relpermalink":"/book/sapiens/sapiens-10/","section":"book","summary":"เมื่อตอนที่แล้วเราพูดถึง “เงิน” ซึ่งมีบทบาทในการสร้างโลภาภิวัฒน์ในเชิงเศรษฐกิจ วันนี้จะขอพูดถึง จักรรรดิ (Empires) ที่มีส่วนสำคัญ ในการสร้างโลกาภิวัฒน์ในเชิงสังคมและการเมืองนะครับ\nจักรวรรดิคืออะไร? มีจักรวรรดิมากมายที่เราคุ้นหู เช่น จักรวรรดิโรมัน จักรวรรดิเปอร์เซีย จักรวรรดิออตโตมัน จักรวรรดิอังกฤษ จักรวรรดิมองโกล รวมไปถึงราชวงศ์ฮั่น แต่อะไรคือตัวชี้วัดว่า อาณาเขตหรือการปกครองใดเป็นจักรวรรรดิ?\nผู้เขียนบอกว่าจักรวรรดิจะมีคุณลักษณะสองข้อด้วยกัน\n ปกครองผู้คนหลายเชื้อชาติ (rule over a significant number of distinct peoples)\n มีอาณาเขตที่เปลี่ยนแปลงตลอดเวลา เพราะพร้อมจะกลืนกินบ้านอื่นเมืองอื่นโดยไม่จำเป็น ต้องเปลี่ยนโครงสร้างพื้นฐานหรืออัตลักษณ์ไป\n  ประเทศอังกฤษในตอนนี้ไม่ถือว่าเป็นจักรวรรดิเพราะไม่สามารถเพิ่มอาณาเขตได้โดยไม่ต้องเปลี่ยนอัตลักษณ์ของตัวเอง แต่เมื่อร้อยปีที่แล้วเกือบทุกที่บนโลกใบนี้มีโอกาสที่จะกลายมาเป็นส่วนหนึ่งของจักรวรรดิอังกฤษ คำว่า “จักรวรรดิ” นั้นมีความหมายแง่ลบอยู่ในที เพราะเราจะเห็นภาพของการทำสงคราม ฆ่าฟัน และกดขี่ข่มเหงประชาชนในเมืองที่ถูกยึดครอง แต่ความจริงก็คือในช่วง 2500 ปีที่ผ่านมาการปกครองแบบจักรวรรดิคือการปกครองที่มีเสถียรภาพที่สุดของมนุษย์ การที่จักรวรรดิใดจักรวรรดิหนึ่งจะล่มสลายนั้นมักไม่ได้เกิดจากการลุกฮือขึ้นของประชาชนที่ทนต่อการกดขี่ไม่ได้ (เพราะกลุ่มกบฎเหล่านี้ปราบปรามได้ง่ายมาก) แต่มักจะเกิดจากการทะเลาะกันเองในหมู่ผู้ปกครอง หรือการรุกรานจากจักรวรรดิอื่น\nจักรวรรดิแรก จักรวรรดิแรกของมนุษย์มีชื่อว่าจักรวรรดิอัคคาเดียนของซาร์กอนมหาราช (Akkadian Empire of Sargon the Great) ในปี 2250 ก่อนคริสตกาล โดยซาร์กอนนั้นเริ่มต้นจากการเป็นพระราชาของ Kish เมืองเล็กๆ ในเมโสโปเตเมีย (ปัจจุบันอยู่ทางใต้ของเมืองแบกแดดไป 80 กิโลเมตร) ก่อนจะค่อยๆ ยึดครองเมืองในเมโสโปเตเมียทั้งหมดและเมืองรอบนอกต่างๆ ด้วย โดยซาร์กอนมหาราชได้ประกาศว่าท่านได้ผู้ชิตโลกทั้งใบแล้ว (ทั้งที่จริงๆ อาณาเขตของจักรวรรดิ อัคคาเดียนนั้นกินพื้นที่ของประเทศอิรักและซีเรียเท่านั้น)","tags":null,"title":"ตอนที่ 10 - จักรวรรดิ","type":"docs"},{"authors":null,"categories":null,"content":" โดย ดร. สุวินัย ภรณวลัย\n ลัทธิข้อมูลนิยม​ (dataism)​ เกิดขึ้นจากการรวมตัวครั้งใหญ่ของลูกคลื่นสูงสุดของวิทยาศาสตร์สองสาขา​คือวิทยาศาสตร์ชีวภาพกับวิทยาศาสตร์คอมพิวเตอร์​โดยสถาปนากระบวนทัศน์​ (paradigm)​ใหม่ขึ้นมาอันเป็น​ \u0026ldquo;ทฤษฎีเพียงหนึ่งเดียวที่สามารถควบคุมหลักวิชาทางวิทยาศาสตร์ทั้งหมดได้\u0026rdquo;\nA single​ overarching​ theory that unifies all the​ scientific disciplines\nโดยทฤษฎีนี้มีบทเสนอว่า​ศาสตร์ทั้งปวงในโลกนี้ตั้งแต่ดนตรี​วิทยา เศรษฐศาสตร์​ไปจนถึงชีววิทยาล้วนอธิบายได้จากมุมมองแบบข้อมูลนิยมเหมือนกัน กล่าวคือ​เพลงซิมโฟนีหมายเลข​ 5​ ของบีโธเฟน, ฟองสบู่ตลาดหุ้น​และไวรัสไข้หวัดใหญ่ล้วนเป็นแค่ \u0026ldquo;รูปแบบกระแสข้อมูลสามแบบที่สามารถวิเคราะห์ได้โดยใช้หลักการพื้นฐานและเครื่องมือแบบเดียวกัน\u0026rdquo; (หน้า​472) แนวคิดแบบข้อมูลนิยมนี้​ทำให้นักวิทยาศาสตร์ทั้งปวงใช้ภาษาเดียวกัน​จึงสามารถข้ามขอบเขตระหว่างสาขาวิชาได้อย่างง่ายดาย ในกระบวนการนี้​ลัทธิข้อมูลนิยมได้พลิกพีระมิดการเรียนรู้แบบกลับหัวกลับหางจากแต่ก่อน\nในอดีตมนุษย์เคยเชื่อว่า​คนเราต้องกลั่นข้อมูล​ (data)​ ให้ออกมาเป็นสารสนเทศ​(information)​ จากสารสนเทศเป็นความรู้​ (knowledge) และจากความรู้เป็นภูมิปัญญาหรือปัญญาญาณ​ (wisdom) อย่างไรก็ดี​นักข้อมูลนิยมเชื่อว่า​มนุษย์ยุคปัจจุบันไม่สามารถรับมือกับกระแสข้อมูลมหาศาลได้อีกต่อไปแล้ว ถ้าทำตามแนวทางการเรียนรู้แบบเดิม​ พวกเขาย่อมไม่สามารถกลั่นข้อมูลให้เป็นสารสนเทศ​ มิพักพูดถึงความรู้และปัญญาญาณ ดังนั้นงานประมวลผลข้อมูลจึงสมควรมอบหมายให้แก่อัลกอริทึมอิเล็กทรอนิกส์​ซึ่งมีขีดความสามารถล้ำกว่าสมองมนุษย์มาก ตรงนี้เห็นได้ชัดเจนเลยว่า ในยุคข้อมูลนิยม​ คนเราควรทุ่มเทฝึกฝนพัฒนาตนเองผ่านการฝึกทักษะการอ่าน, ทักษะการคิดและทักษะการเขียนแบบไตรภาคี​ (trinity หรือ​三位一体) เป็นหลักโดยผ่านการอ่านหนังสือกระดาษ, การครุ่นคิดไตร่ตรองผ่านการอ่านหนังสือกระดาษ​รวมทั้งการเขียนหนังสือออกมาเป็นหนังสือเล่ม​ แล้วปล่อยงานประมวลผลข้อมูลและสารสนเทศให้อัลกอริทึมอีเล็กทรอนิกส์ช่วยทำแทนเราเพื่อประหยัดพลังงานและเวลาของเราในการค้นข้อมูล​กลั่นข้อมูล\nแนวทางแบบนี้​ในวิชาโยคะโบราณ​เรียกว่า​ญาณโยคะ (Yoga​ of​ knowledge)​ หรือหนทางในการพัฒนาจิต​ และยกระดับจิตผ่านการศึกษาหาความรู้แบบสรรพวิชาเพื่อเพิ่มพูนความสามารถในการรับรู้​เรียนรู้สรรพสิ่ง​ รวมทั้งความสามารถในการตัดสินใจไม่ให้ผิดพลาดในเรื่องต่างๆในทุกย่างก้าวของชีวิต\nผม​เชื่อมั่นว่า​แนวทางแบบ​\u0026rdquo;ญาณโยคะ\u0026rdquo; เช่นนี้​เป็นแนวทางที่เหมาะสมที่สุดแล้วสำหรับคนยุคนี้​ในการปกป้องตัวตนของตนเองไม่ให้ตกเป็นทาสของอัลกอริทึมอิเล็กทรอนิกส์ที่มีแนวโน้มจะตัดสินใจแทนเราในทุกเรื่อง​ ยิ่งถ้าผนวกเข้ากับการฝึก​\u0026rdquo;กุณฑาลินีโยคะ\u0026rdquo; ด้วยยิ่งวิเศษ คนเราต้องมีวิถีแห่งตัวตน​เพื่อป้องกันมิให้ตนเองตกเป็นทาสของระบบข้อมูลนิยม​หรือกลายเป็น​\u0026rdquo;คนไร้ประโยชน์\u0026rdquo; ในสายตาของเครือข่ายอัลกอริทึมอันมหึมา​เพราะนั่นคือจุดจบของปัจเจกบุคคลผู้นั้นที่จะกลายเป็นคนไร้ค่า​สำหรับยุคข้อมูลนิยมอย่างช่วยไม่ได้\n","date":1588978800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588978800,"objectID":"dbca4dc930a628fc8ebfc6fb35dfdd9b","permalink":"https://example.com/book/deus/deus-11/","publishdate":"2020-05-09T00:00:00+01:00","relpermalink":"/book/deus/deus-11/","section":"book","summary":"โดย ดร. สุวินัย ภรณวลัย\n ลัทธิข้อมูลนิยม​ (dataism)​ เกิดขึ้นจากการรวมตัวครั้งใหญ่ของลูกคลื่นสูงสุดของวิทยาศาสตร์สองสาขา​คือวิทยาศาสตร์ชีวภาพกับวิทยาศาสตร์คอมพิวเตอร์​โดยสถาปนากระบวนทัศน์​ (paradigm)​ใหม่ขึ้นมาอันเป็น​ \u0026ldquo;ทฤษฎีเพียงหนึ่งเดียวที่สามารถควบคุมหลักวิชาทางวิทยาศาสตร์ทั้งหมดได้\u0026rdquo;\nA single​ overarching​ theory that unifies all the​ scientific disciplines\nโดยทฤษฎีนี้มีบทเสนอว่า​ศาสตร์ทั้งปวงในโลกนี้ตั้งแต่ดนตรี​วิทยา เศรษฐศาสตร์​ไปจนถึงชีววิทยาล้วนอธิบายได้จากมุมมองแบบข้อมูลนิยมเหมือนกัน กล่าวคือ​เพลงซิมโฟนีหมายเลข​ 5​ ของบีโธเฟน, ฟองสบู่ตลาดหุ้น​และไวรัสไข้หวัดใหญ่ล้วนเป็นแค่ \u0026ldquo;รูปแบบกระแสข้อมูลสามแบบที่สามารถวิเคราะห์ได้โดยใช้หลักการพื้นฐานและเครื่องมือแบบเดียวกัน\u0026rdquo; (หน้า​472) แนวคิดแบบข้อมูลนิยมนี้​ทำให้นักวิทยาศาสตร์ทั้งปวงใช้ภาษาเดียวกัน​จึงสามารถข้ามขอบเขตระหว่างสาขาวิชาได้อย่างง่ายดาย ในกระบวนการนี้​ลัทธิข้อมูลนิยมได้พลิกพีระมิดการเรียนรู้แบบกลับหัวกลับหางจากแต่ก่อน\nในอดีตมนุษย์เคยเชื่อว่า​คนเราต้องกลั่นข้อมูล​ (data)​ ให้ออกมาเป็นสารสนเทศ​(information)​ จากสารสนเทศเป็นความรู้​ (knowledge) และจากความรู้เป็นภูมิปัญญาหรือปัญญาญาณ​ (wisdom) อย่างไรก็ดี​นักข้อมูลนิยมเชื่อว่า​มนุษย์ยุคปัจจุบันไม่สามารถรับมือกับกระแสข้อมูลมหาศาลได้อีกต่อไปแล้ว ถ้าทำตามแนวทางการเรียนรู้แบบเดิม​ พวกเขาย่อมไม่สามารถกลั่นข้อมูลให้เป็นสารสนเทศ​ มิพักพูดถึงความรู้และปัญญาญาณ ดังนั้นงานประมวลผลข้อมูลจึงสมควรมอบหมายให้แก่อัลกอริทึมอิเล็กทรอนิกส์​ซึ่งมีขีดความสามารถล้ำกว่าสมองมนุษย์มาก ตรงนี้เห็นได้ชัดเจนเลยว่า ในยุคข้อมูลนิยม​ คนเราควรทุ่มเทฝึกฝนพัฒนาตนเองผ่านการฝึกทักษะการอ่าน, ทักษะการคิดและทักษะการเขียนแบบไตรภาคี​ (trinity หรือ​三位一体) เป็นหลักโดยผ่านการอ่านหนังสือกระดาษ, การครุ่นคิดไตร่ตรองผ่านการอ่านหนังสือกระดาษ​รวมทั้งการเขียนหนังสือออกมาเป็นหนังสือเล่ม​ แล้วปล่อยงานประมวลผลข้อมูลและสารสนเทศให้อัลกอริทึมอีเล็กทรอนิกส์ช่วยทำแทนเราเพื่อประหยัดพลังงานและเวลาของเราในการค้นข้อมูล​กลั่นข้อมูล\nแนวทางแบบนี้​ในวิชาโยคะโบราณ​เรียกว่า​ญาณโยคะ (Yoga​ of​ knowledge)​ หรือหนทางในการพัฒนาจิต​ และยกระดับจิตผ่านการศึกษาหาความรู้แบบสรรพวิชาเพื่อเพิ่มพูนความสามารถในการรับรู้​เรียนรู้สรรพสิ่ง​ รวมทั้งความสามารถในการตัดสินใจไม่ให้ผิดพลาดในเรื่องต่างๆในทุกย่างก้าวของชีวิต\nผม​เชื่อมั่นว่า​แนวทางแบบ​\u0026rdquo;ญาณโยคะ\u0026rdquo; เช่นนี้​เป็นแนวทางที่เหมาะสมที่สุดแล้วสำหรับคนยุคนี้​ในการปกป้องตัวตนของตนเองไม่ให้ตกเป็นทาสของอัลกอริทึมอิเล็กทรอนิกส์ที่มีแนวโน้มจะตัดสินใจแทนเราในทุกเรื่อง​ ยิ่งถ้าผนวกเข้ากับการฝึก​\u0026rdquo;กุณฑาลินีโยคะ\u0026rdquo; ด้วยยิ่งวิเศษ คนเราต้องมีวิถีแห่งตัวตน​เพื่อป้องกันมิให้ตนเองตกเป็นทาสของระบบข้อมูลนิยม​หรือกลายเป็น​\u0026rdquo;คนไร้ประโยชน์\u0026rdquo; ในสายตาของเครือข่ายอัลกอริทึมอันมหึมา​เพราะนั่นคือจุดจบของปัจเจกบุคคลผู้นั้นที่จะกลายเป็นคนไร้ค่า​สำหรับยุคข้อมูลนิยมอย่างช่วยไม่ได้","tags":null,"title":"ตอนที่ 11 - ทฤษฎีแห่งสรรพสิ่ง​(Theory​ of​ Everything)​ของลัทธิข้อมูลนิยมกับ​วิถีแห่งตัวตน","type":"docs"},{"authors":null,"categories":null,"content":"จากเรื่องราวทั้งหมดของ Series ชุดนี้ จะเห็นได้ว่า Bill Gates นั้นได้มีส่วนร่วมกับ Microsoft มาอย่างยาวนาน ตั้งแต่ยุคก่อตั้ง ในการปฏิวัติคอมพิวเตอร์ส่วนบุคคล เข้าสู่ยุคเปลี่ยนผ่านอย่างยุคของ อินเตอร์เน็ต ที่ Microsoft ก็ไม่พลาดที่จะตกกระแส แต่อย่างใด ต้องแข่งขันกับคู่ต่อสู้ที่น่ากลัวที่สุดอย่าง Google แต่สุดท้าย Microsoft ก็ผ่านมันมาได้\nประวัติ Bill Gates ตอนที่ 12 : Hit Refresh\nและการเข้าสู่ยุคของมือถือ นั้น น่าจะเป็นช่วงปลายของ Bill Gates ที่จะมีบทบาทกับ Microsoft แล้ว ซึ่งกลยุทธ์ต่าง ๆ มากมายที่ Microsoft ใช้ต่อสู้ไม่ว่าจะแข่งขันกับคู่ต่อสู้รูปแบบใด ก็ล้วนแล้วแต่มี Bill Gates อยู่เบื้องหลังแทบจะทั้งสิ้น\nMicrosoft ในยุคของ Steve Balmer ผู้รับช่วงต่อจาก Bill Gate นั้นถึงแม้จะสามารถทำกำไรได้อย่างมหาศาลอย่างต่อเนื่อง แต่ภายในองค์กรนั้นกลับเต็มไปด้วยปัญหาการเมืองและวัฒนธรรมองค์กร\nความหยิ่งผยองในความสำเร็จของ Windows และเครื่องมือต่างๆที่ถูกออกแบบขึ้นเพื่อให้ผู้ใช้งานทุกคนมีประสิทธิภาพในการทำงานสูงขึ้นได้กลับทำให้ Microsoft ไม่สามารถพัฒนา “นวัตกรรม” และในที่สุดก็ได้ถูกคู่แข่งอย่าง Apple, Google, Facebook และ Amazon ก้าวขึ้นมาแซงหน้าในหลายๆด้านในที่สุด\nและเมื่อเข้าสู่ยุคปลาย ของ CEO อย่าง Steve Ballmer นั้น ต้องบอกว่า เป็นช่วงขาลงที่ตกต่ำที่สุด ของ microsoft เลยก็ว่าได้ มีการก้าวเดินที่ผิดพลาดหลายอย่างในยุค Ballmber ขึ้นคุมบังเหียน ทั้งการพลาดในตลาดมือถือ ทั้งที่ตัวเองเป็นผู้นำอยู่ก่อนใน Smart Phone ยุคก่อนหน้า iPhone ที่มี Windows Mobile ซึ่งถือว่าล้ำที่สุดในสมัยนั้นครองตลาดอยู่\nเมื่อถึงเวลา ก็ต้องเปลี่ยนผู้นำเพื่อรับการเปลี่ยนแปลงของโลก ที่คนยุคเก่า ๆ เริ่มตามไม่ทัน ด้วยการเข้ามา Refresh Microsoft อีกครั้ง ของ สัตยา นาเดลลา ที่เปรียบเสมือนการเข้ามา Refresh องค์กรใหม่ทั้งหมด ผ่านการบริหารงานของเค้าหลังจากได้รับไม้ต่อมาจาก Steve Ballmer และ Bill Gates ที่ถึงเวลาลงจากตำแหน่งจริง ๆ เสียที\nMicrosoft ถึงเวลาส่งต่อให้ผู้นำรุ่นต่อไปเสียที\nและการทิ้งผลิตภัณฑ์ Windows Phone ที่ไม่น่าจะต่อกรกับยักษ์ใหญ่ได้อีกแล้ว ที่ microsoft ทำการ take over Nokia เข้ามาในตอนแรกนั้น ถือว่าเป็นการตัดสินใจที่สำคัญอย่างนึงของ สัตยา นาเดลลา ซึ่งมองว่า ในระยะยาว การลงทุนด้าน Windows Phone นั้นไม่น่าจะสามารถแย่งส่วนแบ่งจากเจ้าตลาดอย่าง IOS และ Android ได้อีกต่อไปแล้ว การตัดขาดทุน รวมถึงการโละพนักงานออกไปเป็นจำนวนมากเป็นสิ่งที่ยากของคนระดับ CEO แต่เพื่อพยุงบริษัทในระยะยาวนั้น ต้องถือว่า เป็นการที่ตัดสินใจที่ถูกต้องอย่างยิ่ง ของสัตยา นาเดลลา\nและเราจะเห็นได้ว่า การแค่เพียงเปลี่ยนเพียงผู้นำเป็น สัตยา นาเดลลา ต้องบอกว่าเป็นการเลือกตัดสินใจที่ถูกต้องอีกครั้งนึงของ Microsoft และ Bill Gates เพราะใช้เวลาเพียงแค่ไม่กี่ปี ทุกอย่างก็พลิกจากหน้ามือเป็นหลังมือ\nภาพลักษณ์ของ microsoft กลับมาดูดีขึ้นมาอย่างเห็นได้ชัด ทั้งในเรื่องรายได้ กำไร ความเป็นบริษัทนวัตกรรม เริ่มดึงดูดคนรุ่นใหม่กลับมาทำงานได้อีกครั้ง ซึ่งแน่นอนว่าคนตัดสินใจคนสำคัญที่จะเปลี่ยนแปลงครั้งใหญ่ในครั้งนี้ ก็คงต้องเป็น Bill Gates อีกนั่นเอง ที่ถึงเวลาแล้วจริง ๆ ที่เขาจะต้องลงจากตำแหน่งในการกำหนดยุทธศาสตร์ของ Microsoft เสียที เพราะมันได้ถึงเวลาแล้วที่ Microsoft จะได้ผลัดใบไปสู่ยุคใหม่ที่รุ่งโรจน์อีกครั้งนั่นเองครับผม\nแล้วเราได้อะไรจากการเรื่องราวของ Bill Gates จาก Blog Series ชุดนี้\nต้องบอกว่าเรื่องราวของ Bill Gates นั้นได้แสดงให้เห็นถึงการต่อสู้ในเชิงธุรกิจ ที่ Bill Gates นั้นได้ทำมาโดยตลอดในฐานะผู้วางยุทธ์ศาสตร์หลักของ Microsoft แม้จะมีการเปลี่ยนผ่าน CEO ไปยัง Steve Ballmer แต่ Bill Gates ก็ยังคงมีบทบาทสำคัญในการตัดสินใจทุก ๆ ครั้งของ Microsoft\nBill Gates ได้พาทั้งตัวเขาเอง และ บริษัทอย่าง Microsoft ขึ้นไปสู่จุดสูงสุดของบริษัททางด้านเทคโนโลยีได้สำเร็จ ด้วยฝีมือของเขาแทบจะทั้งสิ้น ต้องบอกว่าเป็นเรื่องราวที่น่าสนใจมาก ๆ\nMicrosoft นั้นเราจะเห็นได้อย่างชัดเจนว่า เป็นองค์กรที่ใหญ่ และมีอุปสรรคมากมายต่อการเติบโต ซึ่งแน่นอนว่า องค์กรใหญ่ ๆ หลาย ๆ องค์กรต้องเคยเจอ เมื่อตัวเองเติบโตไม่ใช่บริษัทเล็ก ๆ อีกต่อไป การขับเคลื่อนเพื่อที่จะสู้กับบริษัทเล็ก ๆ นั้นก็เป็นเรื่องยาก ซึ่งมันก็ไม่ได้เป็นเรื่องแปลกแต่อย่างใดกับสิ่งที่ Microsoft เจอ เพราะเราเห็นบทเรียนเหล่านี้มามากมายกับบริษัทยักษ์ใหญ่จำนวนมาก แต่ส่วนใหญ่พวกเข้าเหล่านั้นกลับล่มสลายไปเลย แต่มันไม่ใช่กับ Microsoft\nMicrosoft กลับมาเติบโตได้อีกครั้งในยุคของ สัตยา นาเดลลา\nซึ่งเราจะเห็นได้ว่าแม้หลาย ๆ ครั้ง Microsoft จะเป็นฝ่ายพ่ายแพ้ในรูปแบบธุรกิจใหม่ ๆ แต่อย่างน้อยพวกเขาก็ได้ลองแข่งขัน และได้เรียนรู้วิธีที่จะสู้กับบริษัทเล็ก ๆ เหล่านี้ ซึ่งสุดท้ายในปัจจุบัน เราจะเห็น Microsoft สามารถปรับตัวให้เข้ากับการแข่งขันในธุรกิจยุคใหม่ได้ในที่สุด ไม่ได้ล้มหายตายจากเหมือนยักษ์ใหญ่บริษัทอื่น ๆ และสามารถก้าวอย่างมั่นคงมาจวบจนถึงปัจจุบันนั่นเองครับ\n Written with StackEdit.\n ","date":1589324400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589324400,"objectID":"1b8b6e7e2418839ae50b4f7de4042451","permalink":"https://example.com/book/gates/bill-gate-12/","publishdate":"2020-05-13T00:00:00+01:00","relpermalink":"/book/gates/bill-gate-12/","section":"book","summary":"จากเรื่องราวทั้งหมดของ Series ชุดนี้ จะเห็นได้ว่า Bill Gates นั้นได้มีส่วนร่วมกับ Microsoft มาอย่างยาวนาน ตั้งแต่ยุคก่อตั้ง ในการปฏิวัติคอมพิวเตอร์ส่วนบุคคล เข้าสู่ยุคเปลี่ยนผ่านอย่างยุคของ อินเตอร์เน็ต ที่ Microsoft ก็ไม่พลาดที่จะตกกระแส แต่อย่างใด ต้องแข่งขันกับคู่ต่อสู้ที่น่ากลัวที่สุดอย่าง Google แต่สุดท้าย Microsoft ก็ผ่านมันมาได้\nประวัติ Bill Gates ตอนที่ 12 : Hit Refresh\nและการเข้าสู่ยุคของมือถือ นั้น น่าจะเป็นช่วงปลายของ Bill Gates ที่จะมีบทบาทกับ Microsoft แล้ว ซึ่งกลยุทธ์ต่าง ๆ มากมายที่ Microsoft ใช้ต่อสู้ไม่ว่าจะแข่งขันกับคู่ต่อสู้รูปแบบใด ก็ล้วนแล้วแต่มี Bill Gates อยู่เบื้องหลังแทบจะทั้งสิ้น\nMicrosoft ในยุคของ Steve Balmer ผู้รับช่วงต่อจาก Bill Gate นั้นถึงแม้จะสามารถทำกำไรได้อย่างมหาศาลอย่างต่อเนื่อง แต่ภายในองค์กรนั้นกลับเต็มไปด้วยปัญหาการเมืองและวัฒนธรรมองค์กร\nความหยิ่งผยองในความสำเร็จของ Windows และเครื่องมือต่างๆที่ถูกออกแบบขึ้นเพื่อให้ผู้ใช้งานทุกคนมีประสิทธิภาพในการทำงานสูงขึ้นได้กลับทำให้ Microsoft ไม่สามารถพัฒนา “นวัตกรรม” และในที่สุดก็ได้ถูกคู่แข่งอย่าง Apple, Google, Facebook และ Amazon ก้าวขึ้นมาแซงหน้าในหลายๆด้านในที่สุด\nและเมื่อเข้าสู่ยุคปลาย ของ CEO อย่าง Steve Ballmer นั้น ต้องบอกว่า เป็นช่วงขาลงที่ตกต่ำที่สุด ของ microsoft เลยก็ว่าได้ มีการก้าวเดินที่ผิดพลาดหลายอย่างในยุค Ballmber ขึ้นคุมบังเหียน ทั้งการพลาดในตลาดมือถือ ทั้งที่ตัวเองเป็นผู้นำอยู่ก่อนใน Smart Phone ยุคก่อนหน้า iPhone ที่มี Windows Mobile ซึ่งถือว่าล้ำที่สุดในสมัยนั้นครองตลาดอยู่","tags":null,"title":"ตอนที่ 12 - Hit Refresh","type":"docs"},{"authors":null,"categories":null,"content":" ตอนที่แล้วเราพูดถึงศาสนาที่มีพระเจ้าไปแล้ว วันนี้เราจะมาคุย ถึงศาสนาที่ไม่ได้มีพระเจ้าเป็นจุดศูนย์กลางนะครับ\nศาสนาที่อ้างอิงกฎธรรมชาติ ในช่วงคริสตศตวรรษแรก ศาสนากลุ่มใหม่ที่ไม่ได้ให้ความสำคัญกับพระเจ้าเริ่มเป็นที่รู้จักแพร่หลาย ไม่ว่าจะเป็นเชนและพุทธในอินเดีย เต๋าและขงจื้อในจีน และสโตอิคในแถบทะเลเมดิเตอเรเนียน ศาสนากลุ่มนี้เชื่อว่ากฎระเบียบที่อยู่เหนือมนุษย์ขึ้นไปนั้น (superhuman order) ไม่ได้เกิดจากความต้องการของเทพเจ้า แต่ถูกกำหนดโดยกฎของธรรมชาติ บางศาสนาเชื่อว่าเทพนั้นมีอยู่ แต่เทพเหล่านี้ ก็ตกอยู่ใต้กฎธรรมชาติไม่ต่างกับมนุษย์หรือสัตว์อื่น ๆ\nศาสนาที่สำคัญที่สุดในกลุ่มนี้คือศาสนาพุทธ\nตัวเอกของศาสนานี้ไม่ใช่เทพเจ้า แต่เป็นมนุษย์คนหนึ่งนามสิทธัตถะ โคตมะ ซึ่งเป็นเจ้าชายของแคว้นเล็กๆ แคว้นหนึ่งในแถบเทือกเขาหิมาลัย ในช่วง 500 ปีก่อนคริสตกาล สิทธัตถะเห็นว่ามนุษย์ทุกผู้ทุกนาม ไม่ว่าจะชายหรือหญิง เด็กหรือชรา ล้วนแล้วแต่ต้องเจอความทุกข์ด้วยกันทั้งนั้น ต่อให้เขามีเงิน อำนาจ มีความรู้ มีลูก มีบ้าน หรือมีวัง พวกเขาก็ยังไม่เคยพอใจอยู่ดี คนจนอยากรวย คนมีเงินล้านอยากมีสองล้าน คนมีสองล้านอยากมีสิบล้าน ทุก ๆ คนต่างก็โดนความกังวล ตามหลอกหลอนจนถึงวันสุดท้าย ชีวิตนี้เป็นเหมือนการถีบจักรที่ไร้ความหมาย แต่เราจะออกจากวงจรนี้ได้อย่างไร?\nหลังจากเรียนกับกูรูและลองผิดลองถูกอยู่นานถึง 6 ปี สิทธัตถะก็เข้าใจว่าความทุกข์ไม่ได้เกิดจากเหตุการณ์ร้าย ๆ ความอยุติธรรม หรือการลงโทษจากเทพเจ้า แต่เกิดจากความเคยชินในการทำงานของจิตต่างหาก (behaviour patterns of one’s own mind) สิ่งที่สิทธัตถะค้นพบก็คือไม่ว่าจิตใจจะประสบกับอะไรก็ตาม มันก็มักจะมีปฏิกิริยาเป็นความอยาก (craving) ถ้าจิตรู้สึกไม่ดี มันก็อยากจะให้ความรู้สึกนั้นจบไปไวๆ ถ้าจิตได้ประสบกับความรู้สึกดี ๆ มันก็จะอยากให้ความรู้สึกนั้นอยู่ไปนาน ๆ แม้ว่าเทพเจ้าจะส่งฝนมาให้ได้ และโชคชะตาอาจนำพาชื่อเสียงเงินทองมาให้ได้ แต่ไม่มีใครมาเปลี่ยนวิธีการทำงานของจิตของเราได้ ดังนั้นแม้แต่จักรพรรดิที่ยิ่งใหญ่ ก็ยังมีชีวิตที่คลอเคลียกับความทุกข์ และความกังวลและเฝ้าแต่ตามหาความสุขอยู่ร่ำไป\nสิทธัตถะพบว่า คนเราสามารถออกจากวงจรนี้ได้ นั่นคือ เมื่อใดก็ตามที่จิตใจประสบกับอะไร แต่ถ้าเราสามารถมองสิ่งนั้นอย่างที่มันเป็น ความทุกข์ก็จะไม่เกิด ถ้าเรากำลังเจอความเศร้า แต่เราไม่ได้ปรารถนาให้ความเศร้านั้นหมดไป เราก็จะไม่ทุกข์ หรือถ้าเรากำลังรู้สึกมีความสุข แต่เราไม่ได้ปรารถนาให้ความสุขอยู่ต่อไปเรื่อย ๆ เราก็จะสามารถดื่มด่ำกับความสุขได้โดยไม่สูญเสียความสงบในจิตใจ แล้วเราจะฝึกซ้อมจิตใจ ให้ยอมรับทุกอย่างอย่างที่มันเป็นได้อย่างไร?\nสิทธัตถะได้พัฒนาเทคนิคการทำสมาธิที่จะฝึกให้จิตใจตั้งมั่นอยู่กับคำถามที่ว่า “ตอนนี้เรากำลังประสบกับสภาวะอะไรอยู่?” แทนที่จะสนว่า “ตอนนี้เราอยากประสบกับสภาวะใด?” (‘What am I experiencing now?’ rather than ‘What would I rather be experiencing?’)\nผู้ที่ฝึกฝนจะต้องประพฤติตนให้อยู่ในศีล 5 เพื่อให้การดับไฟแห่งความปรารถนาหรือกิเลสนี้ง่ายขึ้น เมื่อไฟราคะถูกดับ มันก็จะถูกแทนที่ด้วย สภาวะแห่งความพอใจอันสมบูรณ์ที่มีชื่อว่านิพพาน คนที่ถึงนิพพานจะรับรู้สภาวะต่าง ๆ อย่างชัดเจนโดยปราศจากจินตนาการ หรือการปรุงแต่ง และแม้ว่าเขาจะเจอสถานการณ์เลวร้ายหรือคววามเจ็บปวดใด ๆ เขาก็จะไม่ทุกข์ใจอีก เพราะคนที่ไร้ซึ่งความต้องการ ย่อมไม่สามารถเป็นทุกข์ได้อีกแล้ว กฎของสิทธัตถะสามารถสรุปสั้นๆ ได้ว่า ความทุกข์เกิดจากความอยาก วิธีเดียวที่จะหยุดความทุกข์ได้ก็คือต้องหยุดอยาก และวิธีเดียวที่จะหลุดพ้นจากความอยากได้ก็คือ การฝึกฝนจิตใจให้เห็นสภาวะต่าง ๆ อย่างที่มันเป็น\n ในศาสนาที่นับถือพระเจ้า คำถามสำคัญคือ “พระเจ้านั้นมีอยู่ ท่านต้องการอะไรจากเรา?” ส่วนในศาสนาพุทธ คำถามสำคัญคือ “ความทุกข์นั้นมีอยู่ เราจะพ้นทุกข์ได้อย่างไร?”\n คอมมิวนิสต์ก็เป็นศาสนา? ในช่วงสองร้อยปีที่ผ่านมาเราได้เห็นการเติบใหญ่ของศาสนาใหม่ๆ ที่อ้างอิงถึงกฎทางธรรมชาติมากมาย ไม่ว่าจะเป็นเสรีนิยม สังคมนิยม คอมมิวนิสต์ ชาตินิยม ทุนนิยม หรือนาซี หลายคนอาจจะบอกว่านี่ไม่ใช่ศาสนาซักหน่อย น่าจะเรียกว่า Ideologies หรือคตินิยมมากกว่า แต่ถ้าเรานิยามศาสนาว่ามันคือ สิ่งที่กำหนดบรรทัดฐานทางศีลธรรม โดยตั้งอยู่บนความเชื่อในเรื่องระเบียบเหนือมนุษย์ (a system of human norms and values that is founded on belief in a superhuman order) ระบอบคอมมิวนิสต์ในสหภาพโซเวียตก็มีความเป็นศาสนาพอ ๆ กับอิสลาม\nคอมมิวนิสต์เชื่อในกฎสากลที่เป็นกำหนดความเป็นไปในโลกนี้คล้ายกับชาวพุทธ ชาวพุทธเชื่อว่าเจ้าชายสิทธัตถะเป็นค้นพบกฎนั้น ขณะที่ชาวคอมมิวนิสต์เชื่อว่า กฎของพวกเขาถูกค้นพบโดยคาร์ล มาร์กซ์, ฟรีดริช เองเกลส์ และวลาดิเมียร์ เลนิน ชาวมุสลิมมีอัลกุรอ่าน ชาวคอมมิวนิสต์ก็มี Das Kapital ที่เขียนโดยคาร์ล มาร์กซ์ ชาวพุทธมีวันหยุดทางศาสนา ชาวคอมมิวนิสต์ก็มีวันแรงงาน และวันรำลึกการปฏิวัติสังคมนิยมใหญ่เดือนตุลาคม (October Revolution) คนที่เคร่งคอมมิวนิสต์ ไม่สามารถนับถือศาสนาอื่นได้ และถูกคาดหวังให้เผยแพร่คำสอนของมาร์กซ์ และเลนินแม้จะต้องแลกด้วยชีวิต ผู้เขียนบอกว่าถ้าไม่สบายใจที่จะเรียกคอมมิวนิสต์ว่าศาสนา จะเรียกมันว่าคตินิยมก็ไม่เป็นไร แต่สุดท้ายมันก็เป็นเพียงแค่การเล่นคำ โดยเนื้อแท้แล้วมันก็ยังทำหน้าที่เหมือนศาสนาอยู่ดี\nศาสนามนุษยนิยม ศาสนาที่เราคุ้นเคยนั้นจะเน้นไปที่การบูชาพระเจ้า แต่ก็มีศาสนาอีกกลุ่มหนึ่งที่บูชาความเป็น Homo Sapiens โดยมองว่ามนุษย์นั้นมีธรรมชาติ ที่เป็นเอกลักษณ์ที่แตกต่างจากสัตว์อื่น ๆ ในโลกนี้ ผู้เขียนพูดถึงมนุษยนิยมสามจำพวก (จริงๆ มีมากกว่านั้น)\n กลุ่มแรกคือ liberal humanism (เสรีนิยม) ที่เชื่อว่ามโนธรรมและศีลธรรมถูกกำหนดโดยเสียงที่อยู่ในใจของมนุษย์ทุกคนอยู่แล้ว และมนุษย์แต่ละคน มีสิทธิ์ที่ใครก็ไม่อาจจะมาล่วงเกินได้ สิทธิ์ที่ว่านี้ก็คือสิ่งที่เราเรียกกันว่า สิทธิมนุษยชน หรือ human rights นั่นเอง\n ส่วนกลุ่มที่สองเชื่อว่าความดีสูงสุดไม่ใช่การปกป้องสิทธิส่วนบุคคล แต่เป็นการดูแลประโยชน์สุขของ Homo Sapiens ทั้งผอง กลุ่มนี้มีชื่อเรียกว่า socialist humanism หรือสังคมนิยม\n  ในขณะที่กลุ่มเสรีนิยมเรียกร้องสิทธิเสรีภาพของแต่ละบุคคล กลุ่มสังคมนิยม กลับเรียกร้องความเท่าเทียมกันของมนุษย์ทุกผู้ทุกนาม ทั้ง liberal และ socialist ต่างก็มีพื้นฐานความเชื่ออยู่บนศาสนาคริสต์ ที่มองว่าพระเจ้านั้นมองทุกดวงวิญญาณเท่าเทียมกันหมด แต่ก็มีมนุษยนิยมอีกจำพวกหนึ่งที่ไม่ได้มองอย่างนั้น นั่นคือกลุ่มนาซี กระบวนทัศน์ของนาซี ตั้งอยู่บนความคิดเชิงวิวัฒนาการของดาร์วิน ที่ไม่ได้มองว่ามนุษยชาติเป็นสิ่งที่เป็นสากลและเป็นนิรันดร์ แต่เป็นเผ่าพันธุ์ที่กลายพันธุ์ได้ วิวัฒนาการได้ และเสื่อมลงได้ มนุษย์บางสายพันธุ์จึงอาจจะพัฒนาจนกลายเป็น superhuman ขณะที่มนุษย์บางสายพันธุ์จะเสื่อมโทรมลงไปเป็น subhuman หรือสิ่งมีชีวิตที่ต่ำกว่ามนุษย์ นาซีมองว่าชาวอารยันนั้น เป็นเผ่าพันธุ์ที่มีวิวัฒนาการสูงสุดและจำเป็นต้องได้รับการปกป้อง ในขณะที่ชาวยิว ชาวโรม เกย์ และคนที่ป่วยทางจิตนั้น จะต้องถูกกักขังหรือแม้กระทั่งโดนกวาดล้าง\nHomo Sapiens ทำให้ Neanderthals สูญพันธุ์ฉันใด ชาวอารยันก็เหมือน Sapiens ส่วนชาวยิวก็เป็นเหมือน Neanderthals ฉันนั้น มันเป็น survial of the fittest – คนอ่อนแอก็ต้องแพ้ไปเท่านั้นเอง ชาวนาซีไม่ได้เกลียดมนุษยชาติ พวกเขาสู้กับพวกเสรีนิยม และคอมมิวนิสต์เพราะเชื่อว่ามนุษย์มีศักยภาพมากมาย แต่เมื่อมองผ่านเลนส์ของวิวัฒนาการแบบดาร์วินแล้ว นาซีเชื่อว่าการคัดเลือกโดยธรรมชาติ (natural selection) ควรได้ทำหน้าที่ของมัน เพื่อกำจัดคนอ่อนแอทิ้งและเหลือไว้แต่คนที่แข็งแกร่งเพื่อสืบทอดพันธุกรรม การที่คอมมิวนิสต์และพวกเสรีนิยม ช่วยเหลือหรือปกป้องคนอ่อนแอเท่ากับเป็นการแทรกแซงกระบวนการ natural selection นี้ ทำให้คนอ่อนแอได้อยู่ต่อ และสืบพันธุ์ไปเรื่อย ๆ จนคนที่แข็งแกร่งเหลือสัดส่วนน้อยลง และสุดท้ายมนุษยชาติก็จะเสื่อมลงและสูญพันธุ์ในที่สุด\nในช่วงหลายสิบปีหลังฮิตเลอร์พ่ายแพ้สงคราม การเชื่อมโยงมนุษยนิยมกับวิวัฒนาการได้กลายเป็นสิ่งต้องห้าม แต่ตอนนี้มันกำลังกลับมาอินเทรนด์อีกครั้ง แม้ไม่มีใครคิดจะสังหารเผ่าพันธุ์ที่อ่อนแอกว่าอีกแล้ว แต่หลายคนเริ่มฝันหวานกับการนำเทคโนโลยีมา “อัพเกรด” มนุษย์ให้กลายเป็น superhumans ในอนาคตอันใกล้นี้\nที่มาบทความ :https://anontawong.com\n","date":1589065200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589065200,"objectID":"e269cc46bf819155d90162bc1b7d38e6","permalink":"https://example.com/book/sapiens/sapiens-12/","publishdate":"2020-05-10T00:00:00+01:00","relpermalink":"/book/sapiens/sapiens-12/","section":"book","summary":"ตอนที่แล้วเราพูดถึงศาสนาที่มีพระเจ้าไปแล้ว วันนี้เราจะมาคุย ถึงศาสนาที่ไม่ได้มีพระเจ้าเป็นจุดศูนย์กลางนะครับ\nศาสนาที่อ้างอิงกฎธรรมชาติ ในช่วงคริสตศตวรรษแรก ศาสนากลุ่มใหม่ที่ไม่ได้ให้ความสำคัญกับพระเจ้าเริ่มเป็นที่รู้จักแพร่หลาย ไม่ว่าจะเป็นเชนและพุทธในอินเดีย เต๋าและขงจื้อในจีน และสโตอิคในแถบทะเลเมดิเตอเรเนียน ศาสนากลุ่มนี้เชื่อว่ากฎระเบียบที่อยู่เหนือมนุษย์ขึ้นไปนั้น (superhuman order) ไม่ได้เกิดจากความต้องการของเทพเจ้า แต่ถูกกำหนดโดยกฎของธรรมชาติ บางศาสนาเชื่อว่าเทพนั้นมีอยู่ แต่เทพเหล่านี้ ก็ตกอยู่ใต้กฎธรรมชาติไม่ต่างกับมนุษย์หรือสัตว์อื่น ๆ\nศาสนาที่สำคัญที่สุดในกลุ่มนี้คือศาสนาพุทธ\nตัวเอกของศาสนานี้ไม่ใช่เทพเจ้า แต่เป็นมนุษย์คนหนึ่งนามสิทธัตถะ โคตมะ ซึ่งเป็นเจ้าชายของแคว้นเล็กๆ แคว้นหนึ่งในแถบเทือกเขาหิมาลัย ในช่วง 500 ปีก่อนคริสตกาล สิทธัตถะเห็นว่ามนุษย์ทุกผู้ทุกนาม ไม่ว่าจะชายหรือหญิง เด็กหรือชรา ล้วนแล้วแต่ต้องเจอความทุกข์ด้วยกันทั้งนั้น ต่อให้เขามีเงิน อำนาจ มีความรู้ มีลูก มีบ้าน หรือมีวัง พวกเขาก็ยังไม่เคยพอใจอยู่ดี คนจนอยากรวย คนมีเงินล้านอยากมีสองล้าน คนมีสองล้านอยากมีสิบล้าน ทุก ๆ คนต่างก็โดนความกังวล ตามหลอกหลอนจนถึงวันสุดท้าย ชีวิตนี้เป็นเหมือนการถีบจักรที่ไร้ความหมาย แต่เราจะออกจากวงจรนี้ได้อย่างไร?\nหลังจากเรียนกับกูรูและลองผิดลองถูกอยู่นานถึง 6 ปี สิทธัตถะก็เข้าใจว่าความทุกข์ไม่ได้เกิดจากเหตุการณ์ร้าย ๆ ความอยุติธรรม หรือการลงโทษจากเทพเจ้า แต่เกิดจากความเคยชินในการทำงานของจิตต่างหาก (behaviour patterns of one’s own mind) สิ่งที่สิทธัตถะค้นพบก็คือไม่ว่าจิตใจจะประสบกับอะไรก็ตาม มันก็มักจะมีปฏิกิริยาเป็นความอยาก (craving) ถ้าจิตรู้สึกไม่ดี มันก็อยากจะให้ความรู้สึกนั้นจบไปไวๆ ถ้าจิตได้ประสบกับความรู้สึกดี ๆ มันก็จะอยากให้ความรู้สึกนั้นอยู่ไปนาน ๆ แม้ว่าเทพเจ้าจะส่งฝนมาให้ได้ และโชคชะตาอาจนำพาชื่อเสียงเงินทองมาให้ได้ แต่ไม่มีใครมาเปลี่ยนวิธีการทำงานของจิตของเราได้ ดังนั้นแม้แต่จักรพรรดิที่ยิ่งใหญ่ ก็ยังมีชีวิตที่คลอเคลียกับความทุกข์ และความกังวลและเฝ้าแต่ตามหาความสุขอยู่ร่ำไป","tags":null,"title":"ตอนที่ 12 - ศาสนาไร้พระเจ้า","type":"docs"},{"authors":null,"categories":null,"content":" โดย ดร. สุวินัย ภรณวลัย\n ในสายตาของนักข้อมูลนิยม​ สปีซีส์มนุษย์ทั้งหมดเป็นแค่ระบบประมวลผลข้อมูลเดี่ยวแห่งหนึ่ง​ (a​ single data-processing system)​ โดยที่มนุษย์แต่ละบุคคลทำงานเป็น​\u0026rdquo;ชิป\u0026rdquo; (chips)​ในระบบนั้น​ (หน้า​483) ด้วยเหตุนี้​ประวัติศาสตร์ทั้งมวลของพวกเซเปียนส์จึงมองได้ว่าเป็น​ กระบวนการหนึ่งในการพัฒนาประสิทธิภาพ​ของระบบประมวลผลข้อมูลเดี่ยวนี้​ โดยผ่านกระบวนวิธีพื้นฐาน​ 4​ แบบคือ\n การเพิ่มจำนวนประมวลผล เมืองที่มีพลเมืองมากยิ่งมีพลังการประมวลผลมาก การเพิ่มความหลากหลายของตัวประมวลผล การใช้ตัวประมวลผลหลายรูปแบบ ในระบบเดี่ยวระบบหนึ่งจะช่วยเพิ่มความคล่องแคล่วและความคิดสร้างสรรค์ได้ การเพิ่มจำนวนการเชื่อมโยงระหว่างตัวประมวลผล เครือข่ายที่เชื่อมโยงในวงกว้างย่อมก่อให้เกิดนวัตกรรมทางเศรษฐกิจ​เทคโนโลยีและสังคมมากกว่าเมืองที่อยู่อย่างโดดเดี่ยว การเพิ่มเสรีภาพในการเคลื่อนตัวตามการเชื่อมโยงที่มีอยู่  การก่อสร้างระบบประมวลผลข้อมูลเซเปียนส์ทำให้เกิดขั้นตอนหลัก​ 4​ ระยะคือ\n ระยะแรก​เริ่มด้วยการปฏิวัติการรับรู้เมื่อ​70,000 ปีก่อน​ ซึ่งทำให้สามารถเชื่อมโยงเซเปียนส์จำนวนมาก เข้ามาในเครือข่ายประมวลผลข้อมูลชุดเดียวกัน\n ระยะที่สองเริ่มต้นด้วยการปฏิวัติเกษตรกรรมและดำเนินไปจนกระทั่งถึงการคิดค้นระบบการเขียนแบะเงินตราเมื่อ​ 5,000 ปีที่แล้ว\n ระยะที่สามเริ่มต้นขึ้นด้วยการคิดค้นระบบการเขียนและเงินตราเมื่อ​ ​5,000 ​ปีก่อนและ ดำรงอยู่จวบกระทั่งการเริ่มต้นปฏิวัติทางวิทยาศาสตร์\n ระยะที่สี่ที่เป็นระยะสุดท้ายของประวัติศาสตร์เริ่มขึ้นราวปี​ ค.ศ.​1462 จนถึงปัจจุบัน ที่สารสนเทศได้ไหลเวียนอย่างเสรีไปทั่วโลก ​จนมนุษยชาติกลายเป็น​\u0026rdquo;หมู่บ้านโลก\u0026rdquo; ดังเช่นปัจจุบัน  จากนี้ไปทิศทางของมนุษยชาติในฐานะที่เป็นระบบประมวลผลเดี๋ยว​จึงมีแต่มุ่งไปเป็นระบบประมวลผลข้อมูลใหม่ที่มีประสิทธิภาพยิ่งกว่าเดิม​คือเป็นอินเตอร์เน็ตของสรรพสิ่ง​ (Internet​ of​ All Things) หากภารกิจนี้สำเร็จเมื่อไหร่​เมื่อนั้นคือถึงคราวที่​เซเปียนส์จะสาปสูญไปจากโลกนี้​ (หน้า​486) เพราะในมุมมองของข้อมูลนิยม​ \u0026ldquo;มนุษย์เป็นแค่เครื่องมือสำหรับสร้างอินเตอร์เน็ตของสรรพสิ่งเท่านั้น\u0026rdquo;\nจากระบบประมวลข้อมูลระดับโลก​มันจะแผ่ขยายตนเองไปสู่ระบบประมวลข้อมูลระดับเอกภพนี้​ สุดท้ายมันจะวิวัฒน์ต่อไปจนถึงขั้นเป็นระบบประมวลข้อมูลระดับจักรวาลในที่สุดมันจะมีอยู่ทุกแห่งหนและควบคุมทุกสิ่ง​ โดยที่มนุษย์ถูกกำหนดชะตาไว้ให้ควบรวมเข้าไปกับมัน โฮโมเซเปียนส์จะกลายเป็นอัลกอริทึมที่ตกยุค​ถ้าไม่สามารถยกระดับจิต​อัปเกรดจิตใจและปัญญาญาณให้สอดคล้องกับระบบประมวลข้อมูลระดับโลกที่กำลังรุดหน้าพัฒนาตัวเองอย่างรวดเร็วไปสู่​ซิงกูลาริตี้ (Singularity)​ แทบจะเป็นไปไม่ได้เลยที่จะหลีกเลี่ยงจากสิ่งที่กำลังเกิดในอนาคต นี่คือความจริงอย่างยิ่ง กึ๋นเรื่องวิชั่นของผู้นำที่สามารถมองอนาคตขาดด้วยหน่วยเวลาสามสิบ ห้าสิบปี หรือร้อยปีขึ้นไปดุจมีตาทิพย์คือตัวชี้ขาดว่าจะนำพาผู้คนไปรอดหรือไม่รอด\nเราต้องมองและตั้งโจทย์ว่าหลีกเลี่ยง \u0026ldquo;ความจริงใหม่\u0026rdquo;นี้ไม่ได้ แล้วถามตัวเองว่าเราจะเป็น อัศวินเจได หรือนีโอใน Matrix หรือเป็นพุทธะหรือพระอวโลกิเตศวร ในยุคข้อมูลนิยมได้อย่างไร? คนที่ตอบว่า \u0026ldquo;อย่าไปสนใจ เราคงตายก่อน ปล่อยให้คนรุ่นหลังเผชิญชะตากรรมตามยถากรรมกันเอง\u0026rdquo; คือ คนที่ใจแคบ จิตต่ำต้อย และด้อยปัญญา ในการช่วยชี้ทางให้คนรุ่นหลัง\nจิต ​(consciousness)​ และจิตวิญญาณ​(spirit)​ ​หรือธรรมจิตก็มีจริง​ แต่วิญญาณ (soul)​ ที่เป็นนิรันดร์ไม่มีจริง​ พวกข้อมูลนิยมจึงพูดถูกแค่ครึ่งเดียวคือ​เรื่อง​ soul​ ไม่มีจริง​ แต่​พวกข้อมูลนิยมหลงผิดอย่างสิ้นเชิงที่ไม่ยอมรับว่า​จิต​ (consciousness)​ มีจริง มีแต่ยอมรับและเข้าใจว่าจิตมีจริงก่อน​ ถึงจะมีปัญญาญาณเข้าใจได้ว่า​จิตวิญญาณ​ที่รูปการพัฒนาสูงสุดคือ​ พุทธะ​ก็มีจริงด้วยเช่นกัน นี่คือหนทางในการ \u0026ldquo;ก้าวข้ามแต่หลอมรวม\u0026rdquo; ลัทธิข้อมูลนิยม​\n","date":1588978800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588978800,"objectID":"cf6d12a4176bc47db6240b7da1f1a1ba","permalink":"https://example.com/book/deus/deus-12/","publishdate":"2020-05-09T00:00:00+01:00","relpermalink":"/book/deus/deus-12/","section":"book","summary":"โดย ดร. สุวินัย ภรณวลัย\n ในสายตาของนักข้อมูลนิยม​ สปีซีส์มนุษย์ทั้งหมดเป็นแค่ระบบประมวลผลข้อมูลเดี่ยวแห่งหนึ่ง​ (a​ single data-processing system)​ โดยที่มนุษย์แต่ละบุคคลทำงานเป็น​\u0026rdquo;ชิป\u0026rdquo; (chips)​ในระบบนั้น​ (หน้า​483) ด้วยเหตุนี้​ประวัติศาสตร์ทั้งมวลของพวกเซเปียนส์จึงมองได้ว่าเป็น​ กระบวนการหนึ่งในการพัฒนาประสิทธิภาพ​ของระบบประมวลผลข้อมูลเดี่ยวนี้​ โดยผ่านกระบวนวิธีพื้นฐาน​ 4​ แบบคือ\n การเพิ่มจำนวนประมวลผล เมืองที่มีพลเมืองมากยิ่งมีพลังการประมวลผลมาก การเพิ่มความหลากหลายของตัวประมวลผล การใช้ตัวประมวลผลหลายรูปแบบ ในระบบเดี่ยวระบบหนึ่งจะช่วยเพิ่มความคล่องแคล่วและความคิดสร้างสรรค์ได้ การเพิ่มจำนวนการเชื่อมโยงระหว่างตัวประมวลผล เครือข่ายที่เชื่อมโยงในวงกว้างย่อมก่อให้เกิดนวัตกรรมทางเศรษฐกิจ​เทคโนโลยีและสังคมมากกว่าเมืองที่อยู่อย่างโดดเดี่ยว การเพิ่มเสรีภาพในการเคลื่อนตัวตามการเชื่อมโยงที่มีอยู่  การก่อสร้างระบบประมวลผลข้อมูลเซเปียนส์ทำให้เกิดขั้นตอนหลัก​ 4​ ระยะคือ\n ระยะแรก​เริ่มด้วยการปฏิวัติการรับรู้เมื่อ​70,000 ปีก่อน​ ซึ่งทำให้สามารถเชื่อมโยงเซเปียนส์จำนวนมาก เข้ามาในเครือข่ายประมวลผลข้อมูลชุดเดียวกัน\n ระยะที่สองเริ่มต้นด้วยการปฏิวัติเกษตรกรรมและดำเนินไปจนกระทั่งถึงการคิดค้นระบบการเขียนแบะเงินตราเมื่อ​ 5,000 ปีที่แล้ว\n ระยะที่สามเริ่มต้นขึ้นด้วยการคิดค้นระบบการเขียนและเงินตราเมื่อ​ ​5,000 ​ปีก่อนและ ดำรงอยู่จวบกระทั่งการเริ่มต้นปฏิวัติทางวิทยาศาสตร์\n ระยะที่สี่ที่เป็นระยะสุดท้ายของประวัติศาสตร์เริ่มขึ้นราวปี​ ค.ศ.​1462 จนถึงปัจจุบัน ที่สารสนเทศได้ไหลเวียนอย่างเสรีไปทั่วโลก ​จนมนุษยชาติกลายเป็น​\u0026rdquo;หมู่บ้านโลก\u0026rdquo; ดังเช่นปัจจุบัน  จากนี้ไปทิศทางของมนุษยชาติในฐานะที่เป็นระบบประมวลผลเดี๋ยว​จึงมีแต่มุ่งไปเป็นระบบประมวลผลข้อมูลใหม่ที่มีประสิทธิภาพยิ่งกว่าเดิม​คือเป็นอินเตอร์เน็ตของสรรพสิ่ง​ (Internet​ of​ All Things) หากภารกิจนี้สำเร็จเมื่อไหร่​เมื่อนั้นคือถึงคราวที่​เซเปียนส์จะสาปสูญไปจากโลกนี้​ (หน้า​486) เพราะในมุมมองของข้อมูลนิยม​ \u0026ldquo;มนุษย์เป็นแค่เครื่องมือสำหรับสร้างอินเตอร์เน็ตของสรรพสิ่งเท่านั้น\u0026rdquo;\nจากระบบประมวลข้อมูลระดับโลก​มันจะแผ่ขยายตนเองไปสู่ระบบประมวลข้อมูลระดับเอกภพนี้​ สุดท้ายมันจะวิวัฒน์ต่อไปจนถึงขั้นเป็นระบบประมวลข้อมูลระดับจักรวาลในที่สุดมันจะมีอยู่ทุกแห่งหนและควบคุมทุกสิ่ง​ โดยที่มนุษย์ถูกกำหนดชะตาไว้ให้ควบรวมเข้าไปกับมัน โฮโมเซเปียนส์จะกลายเป็นอัลกอริทึมที่ตกยุค​ถ้าไม่สามารถยกระดับจิต​อัปเกรดจิตใจและปัญญาญาณให้สอดคล้องกับระบบประมวลข้อมูลระดับโลกที่กำลังรุดหน้าพัฒนาตัวเองอย่างรวดเร็วไปสู่​ซิงกูลาริตี้ (Singularity)​ แทบจะเป็นไปไม่ได้เลยที่จะหลีกเลี่ยงจากสิ่งที่กำลังเกิดในอนาคต นี่คือความจริงอย่างยิ่ง กึ๋นเรื่องวิชั่นของผู้นำที่สามารถมองอนาคตขาดด้วยหน่วยเวลาสามสิบ ห้าสิบปี หรือร้อยปีขึ้นไปดุจมีตาทิพย์คือตัวชี้ขาดว่าจะนำพาผู้คนไปรอดหรือไม่รอด","tags":null,"title":"ตอนที่ 12 - เราต้องก้าวข้ามแต่หลอมรวมลัทธิข้อมูลนิยม","type":"docs"},{"authors":null,"categories":null,"content":"   ซีรี่ส์ Sapiens ดำเนินมาได้เกินครึ่งทางแล้ว เลยขอวางหมุดหมายให้เห็นคร่าว ๆ กันอีกครั้งนึงนะครับ\n 200,000 ปีที่แล้ว – Homo Sapiens ถือกำเนิดในแอฟริกาตะวันออก\n 70,000 ปีที่แล้ว – เกิด Cognitive Revolution ในหมู่ Sapiens จนสามารถใช้ภาษาและออกเดินทางจากแอฟริกาไปยังดินแดนอื่นๆ ทั่วโลก\n 12,000 ปีที่แล้ว – เกิดการปฏิวัติเกษตรกรรม (Agricultural Revolution) ทำให้คนที่เคยเข้าป่าล่าสัตว์เริ่มออกมาตั้งรกราก และขยายถิ่นที่อยู่จากหมู่บ้านเป็นเมือง จากเมืองเป็นอาณาจักร จากอาณาจักรเป็นจักรวรรดิ 2500 ปีที่แล้ว – กำเนิดศาสนาพุทธ 2000 ปีที่แล้ว – กำเนิดศาสนาคริสต์ 1400 ปีที่แล้ว – กำเนิดศาสนาอิสลาม 500 ปีที่แล้ว – ปฏิวัติทางวิทยาศาสตร์ (Scientific Revolution) มนุษยชาติเริ่มยอมรับว่า ตัวเองไม่รู้และได้มาซึ่งอำนาจที่ไม่เคยมีมาก่อน\n 200 ปีที่แล้ว – ปฏิวัติอุตสาหกรรม (Industrial Revolution) ครอบครัวและชุมชนถูกแทนที่ด้วยรัฐและตลาด  หากชาวนาชาวสเปนคนหนึ่งหลับไปในปีค.ศ.1000 และตื่นขึ้นมา 500 ปีให้หลัง (ช่วงเดียวกับที่โคลัมบัสค้นพบทวีปอเมริกา) โลกอาจจะดูแตกต่างไปบ้างแต่เขาก็คงไม่รู้สึกแปลกแยกเสียทีเดียว แต่หากลูกเรือของโคลัมบัสหลับไหลในปี 1500 และตื่นขึ้นในปี 2000 สิ่งที่ลูกเรือคนนั้นพบเจออาจทำให้เขาคิดว่าตัวเองกำลังอยู่บนสวรรค์ – เอ…หรือว่าในนรกกันแน่?\n500 ปีที่ผ่านมาเกิดการเปลี่ยนแปลงขึ้นมากมาย จำนวนประชากรโตขึ้น 14 เท่า (จาก 500 ล้านเป็น 7,000 ล้าน) ขณะที่พลังงานที่มนุษย์บริโภคเพิ่มขึ้น 115 เท่า และผลผลิตต่อคนเพิ่มขึ้นถึง 240 เท่า ในปี 1500 (รวมถึง 4 พันล้านปีก่อนหน้านั้น) ไม่เคยมีมนุษย์หรือสัตว์ตัวไหนออกไปพ้นชั้นบรรยากาศโลก แต่วันที่ 20 กรกฎาคม 1969 มนุษย์ก็ได้ไปเหยียบดวงจันทร์ ก่อนหน้าปี 1674 เราไม่เคยรู้เลยว่ามีสิ่งมีชีวิตจำพวกหนึ่งที่มีจำนวนประชากรคิดเป็น 99.99% ของสิ่งมีชีวิตบนโลกใบนี้ นั่นคือ microorganism หรือจุลินทรีย์และแบคทีเรียต่างๆ จนนักวิทยาศาสตร์ชาวดัทช์ ค้นนึงได้ลองใช้จุลทรรศน์ที่เขาทำขึ้นเองส่องดูหยดน้ำ และวินาทีประวัติศาสตร์ที่สำคัญที่สุดในรอบ 500 ปีที่ผ่านมา คือเวลา 05:29:45 ของเช้าวันจันทร์ที่ 16 กรกฎาคม 1945 เมื่อนักวิทยาศาสตร์ชาวอเมริกันจุดระเบิดนิวเคลียร์ลูกแรกในเมือง Alamogordo รัฐ New Mexico นี่คือครั้งแรกที่มนุษย์ไม่เพียง มีพลังพอที่จะเปลี่ยนทิศทางของประวัติศาสตร์ แต่สามารถทำให้ประวัติศาสตร์สูญสิ้นได้ด้วยมือตนเอง\nเมื่อเรายอมรับว่าเราไม่รู้ กระบวนการที่ช่วยให้เราสร้างระเบิดนิวเคลียร์และพาเราไปเหยียบดวงจันทร์คือการปฏิวัติทางวิทยาศาสตร์ซึ่งเกิดขึ้นเมื่อประมาณ 500 ปีที่แล้ว ก่อนอื่นเราต้องเข้าใจก่อนว่าช่วงก่อนคริสตศตวรรษที่ 15 นั้น มนุษย์ไม่ได้มีแรงผลักดัน ที่จะค้นคว้าหรือค้นพบอะไรใหม่ ๆ เพราะมนุษย์เชื่อว่าคำตอบทั้งหมดนั้นอยู่ในคัมภีร์ต่าง ๆ อยู่แล้ว ไม่ว่าจะเป็นคำสอนของพุทธ คริสต์ อิสลามหรือขงจื๊อ ต่างก็บอกว่าสิ่งที่มนุษย์จำเป็นต้องรู้นั้นท่านได้บอกไว้หมดแล้ว ศาสนาเก่าแก่นั้นยอมรับ “ความไม่รู้” (ignorance) อยู่แค่สองแบบ แบบแรกคือ “คนคนหนึ่งอาจจะไม่รู้สิ่งที่จำเป็นต้องรู้” เช่นหากชาวนาคนหนึ่งไม่รู้ว่ามนุษย์กำเนิดขึ้นมาได้อย่างไร เขาเพียงแค่ต้องไปถาม คนที่รู้อย่างนักบวชในโบสถ์ใกล้บ้านก็เพียงพอแล้ว ความไม่รู้อีกแบบหนึ่งก็คือ “ไม่รู้เพราะไม่สำคัญ” เช่นในไบเบิ้ลอาจไม่ได้บอกว่าแมงมุมชักใยยังไง แต่นั่นไม่ได้แปลว่าคำสอนของศาสนาคริสต์ไม่สมบูรณ์ แต่เป็นเพราะเรื่องการชักใยของแมงมุมไม่ใช่เรื่องสำคัญต่างหาก เพราะถ้าการชักใยแมงมุมมันสำคัญจริง พระเจ้าย่อมต้องพูดถึงในพระคัมภีร์อยู่แล้ว\nนักวิทยาศาสตร์สมัยใหม่มองความไม่รู้ต่างออกไป พวกเขามองว่า “พวกเรายังไม่รู้สิ่งที่เราจำเป็นต้องรู้” (collective ignorance of the most important questions) ดาร์วินไม่เคยบอกว่าตัวเองรู้คำตอบเกี่ยวกับเรื่องวิวัฒนาการทั้งหมด นักฟิสิกส์ก็ยอมรับว่ายังไม่รู้ว่า Big Bang เกิดขึ้นได้อย่างไร โดยแท้จริงแล้ว Scientific Revolution คือ “การปฏิวัติของความไม่รู้” (revolution of ignorance) เมื่อมนุษย์ยอมรับว่าตัวเองไม่ได้มีคำตอบสำหรับคำถามที่สำคัญ พวกเขาจึงเริ่มหิวกระหายที่จะค้นคว้าและออกค้นหาอีกครั้ง\nความรู้คืออำนาจ ในปีค.ศ. 1620 Francis Bacon ตีพิมพ์แถลงการณ์ชื่่อวา The New Instrument โดยบอกว่าความรู้คืออำนาจ – Knowledge is Power โดยนายเบคอนบอกว่า ความรู้นั้นจะมีประโยชน์หรือไม่ไม่ได้ขึ้นอยู่กับว่ามันถูกต้องแค่ไหน แต่มันมีประโยชน์แค่ไหนต่างหาก (เพราะไม่มีชุดความรู้ใดที่จะถูกต้อง 100% อยู่แล้ว)\nเราคุ้นเคยกับคำว่า วิทยาศาสตร์ และ เทคโนโลยี มานานจนเรานึกว่าสองอย่างนี้ต้องเกิดขึ้นพร้อมกันเสมอ แต่จริง ๆ แล้วนายเบคอนนี่แหละที่เป็นคนแรกๆ ที่เอาคอนเซปต์สองอย่างนี้เชื่อมโยงกัน คือเมื่อคุณได้ความรู้ชุดใหม่ จากกระบวนการทางวิทยาศาสตร์ คุณก็สามารถนำมันมาพัฒนาเทคโนโลยีอันจะนำมาซึ่งพลังและอำนาจได้ ในช่วงก่อนปี 1500 นั้น วิทยาศาสตร์และเทคโนโลยี เป็นคนละเรื่องกันเลย ผู้นำแคว้นต่าง ๆ อาจจะสนับสนุนสถาบันการศึกษา เพื่อจะช่วยเผยแพร่ความรู้ดั้งเดิม ไม่ใช่เพื่อค้นพบความรู้ชุดใหม่ ส่วนเครื่องไม้เครื่องมือใหม่ ๆ ก็ไม่ได้เกิดจากการค้นคว้าของนักวิทยาศาสตร์ แต่เกิดจากบรรดานายช่างที่ไม่เคยไปโรงเรียนด้วยซ้ำ\nสงครามและเทคโนโลยี หนึ่งในเหตุผลที่วิทยาศาสตร์นำมาซึ่งความก้าวหน้าทางเทคโนโลยีคือสงครามโลก ในสงครามโลกครั้งที่หนึ่ง รัฐบาลได้สั่งให้นักวิทยาศาสตร์คิดค้นอาวุธใหม่ๆ และผลลัพธ์ที่ได้คือเครื่องบินรบ แก๊ซพิษ รถถัง เรือดำน้ำ และปืนกลทำลายล้างสูง วิทยาศาสตร์มีบทบาทมากขึ้นไปอีกในช่วงสงครามโลกครั้งที่สอง ในปี 1944 ฝ่ายอักษะอย่างอิตาลีนั้นได้ยอมแพ้ต่อกลุ่มสัมพันธมิตรแล้ว แต่เยอรมันนีก็ยังสู้ต่อเพราะเชื่อว่าขีปนาวุธตัวใหม่นาม V-2 ที่นาซีคิดค้นอยู่จะพลิกเกมได้\nในปี 1945 อเมริกาประดิษฐ์อาวุธนิวเคลียร์สำเร็จ แต่ถึงตอนนั้นเยอรมันนีได้ยอมแพ้สงครามไปแล้วว เหลือเพียงแต่ญี่ปุ่นที่ประกาศว่าจะสู้ยิบตา ในปี 1946 เมื่อรู้ว่าการส่งทหารอเมริกันขึ้นบกที่ญี่ปุ่น จะทำให้สูญเสียกำลังพลนับล้านคน ประธานาธิบดีทรูแมนจึงตัดสินใจใช้ระเบิดนิวเคลียร์ ภายในสองสัปดาห์ระเบิดนิวเคลียร์ถูกทิ้งลงที่เมืองฮิโรชิมา และเมืองนางาซากิ ทำให้ญี่ปุ่นยอมแพ้สงครามอย่างไม่มีเงื่อนไข\nการนำเทคโนโลยีมาใช้ในสงครามนั้นถือเป็นเรื่องที่ใหม่มาก ๆ ก่อนศตวรรษที่ 19 สงครามส่วนใหญ่ ตัดสินกันที่การวางแผน และจัดกำลังรบมากกว่า เรื่องความเหนือกว่าทางเทคโนโลยี กองทัพของโรมนั้นไม่ได้มีเครื่องมือที่ดีกว่าอาณาจักรอื่นเลย เพียงแต่มีกำลังพลมากกว่า มีวินัยกว่า และมียุทธศาตร์ที่ดีกว่าเท่านั้นเอง\nแม้กระทั่งเมืองจีนก็ไม่ได้มีการคิดค้นเทคโนโลยีใหม่ ๆ เพื่อนำมาใช้ในสงคราม เทคโนโลยีทางอาวุธที่สำคัญสุดของจีนคือดินปืน แต่เท่าเรารู้ก็คือดินปืนไม่ได้ถูกคิดค้นโดยนักวิทยาศาสตร์ แต่ถูกค้นพบโดยนักเล่นแร่แปรธาตุที่กำลังหาสูตรยาอายุวัฒนะ และแม้ว่าจะพบแล้วว่าดินปืนทำอะไรได้ มันก็ถูกใช้สำหรับการทำดอกไม้ไฟเท่านั้น! ต้องใช้เวลาอีกราว 600 ปีกว่าชาวจีนจะเริ่มเอาดินปืนมาทำเป็นอาวุธปืนใหญ่ในการสงคราม วิทยาศาสตร์ อุตสาหกรรม และเทคโนโลยีทางการทหารเพิ่งจะมาเกี่ยวพันกันในช่วงที่ระบบทุนนิยมเฟื่องฟูขึ้นมาพร้อมกับการปฏิวัติอุตสาหกรรม และจากวันนั้นโลกก็ไม่เหมือนเดิมอีกต่อไป\n ที่มาบทความ : https://anontawong.com\n ","date":1589065200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589065200,"objectID":"a2c622c248f6a584be0aa171966fa927","permalink":"https://example.com/book/sapiens/sapiens-13/","publishdate":"2020-05-10T00:00:00+01:00","relpermalink":"/book/sapiens/sapiens-13/","section":"book","summary":"ซีรี่ส์ Sapiens ดำเนินมาได้เกินครึ่งทางแล้ว เลยขอวางหมุดหมายให้เห็นคร่าว ๆ กันอีกครั้งนึงนะครับ\n 200,000 ปีที่แล้ว – Homo Sapiens ถือกำเนิดในแอฟริกาตะวันออก\n 70,000 ปีที่แล้ว – เกิด Cognitive Revolution ในหมู่ Sapiens จนสามารถใช้ภาษาและออกเดินทางจากแอฟริกาไปยังดินแดนอื่นๆ ทั่วโลก\n 12,000 ปีที่แล้ว – เกิดการปฏิวัติเกษตรกรรม (Agricultural Revolution) ทำให้คนที่เคยเข้าป่าล่าสัตว์เริ่มออกมาตั้งรกราก และขยายถิ่นที่อยู่จากหมู่บ้านเป็นเมือง จากเมืองเป็นอาณาจักร จากอาณาจักรเป็นจักรวรรดิ 2500 ปีที่แล้ว – กำเนิดศาสนาพุทธ 2000 ปีที่แล้ว – กำเนิดศาสนาคริสต์ 1400 ปีที่แล้ว – กำเนิดศาสนาอิสลาม 500 ปีที่แล้ว – ปฏิวัติทางวิทยาศาสตร์ (Scientific Revolution) มนุษยชาติเริ่มยอมรับว่า ตัวเองไม่รู้และได้มาซึ่งอำนาจที่ไม่เคยมีมาก่อน\n 200 ปีที่แล้ว – ปฏิวัติอุตสาหกรรม (Industrial Revolution) ครอบครัวและชุมชนถูกแทนที่ด้วยรัฐและตลาด  หากชาวนาชาวสเปนคนหนึ่งหลับไปในปีค.ศ.1000 และตื่นขึ้นมา 500 ปีให้หลัง (ช่วงเดียวกับที่โคลัมบัสค้นพบทวีปอเมริกา) โลกอาจจะดูแตกต่างไปบ้างแต่เขาก็คงไม่รู้สึกแปลกแยกเสียทีเดียว แต่หากลูกเรือของโคลัมบัสหลับไหลในปี 1500 และตื่นขึ้นในปี 2000 สิ่งที่ลูกเรือคนนั้นพบเจออาจทำให้เขาคิดว่าตัวเองกำลังอยู่บนสวรรค์ – เอ…หรือว่าในนรกกันแน่?","tags":null,"title":"ตอนที่ 13 - ยุคแห่งความไม่รู้","type":"docs"},{"authors":null,"categories":null,"content":" ก่อนจะเกิดการปฏิวัติทางวิทยาศาสตร์เมื่อ 500 ปีที่แล้ว มนุษย์ไม่ได้เชื่อว่าโลกจะสามารถก้าวหน้าไปได้มากกว่านี้ เพราะพวกเขารู้สึกว่า “ยุคทอง” ได้ผ่านพ้นไปแล้ว การยึดมั่นและปฏิบัติตามความรู้จากบรรพชนเป็นทางเดียวที่จะกล้บไปมี “ชีวิตดีๆ” ได้ เราอาจปรับปรุงชีวิตให้ดีขึ้นได้เล็กน้อย แต่ไม่มีใครเชื่อว่าเราจะแก้ปัญหาขั้นพื้นฐานไปได้มากกว่านี้ ถ้าศาสดาผู้รู้ความจริงของสรรพสิ่งอย่างท่านมูฮัมหมัด ขงจื๊อ พระพุทธเจ้า หรือพระเยซู ยังไม่สามารถขจัดโรคระบาด ความอดอยาก ความยากจน และสงครามได้แล้ว มนุษย์ธรรมดาอย่างเรา ๆ จะไปมีปัญญาแก้ปัญหาเหล่านี้ได้อย่างไร\nแต่เมื่อมนุษย์ยอมรับว่าตัวเองยังไม่รู้ทุกอย่าง และเริ่มเชื่อว่าการค้นพบทางวิทยาศาสตร์ จะมอบพลังและอำนาจให้ ผู้คนจึงมองว่าความก้าวหน้าอาจเป็นเรื่องที่เป็นไปได้ หลังจากวิทยาศาสตร์เริ่มแก้ปัญหาให้เห็นทีละข้อ มนุษย์ก็มีความเชื่อมั่นว่า ความยากจน ความเจ็บไข้ ความหิวโหย สงคราม ความชรา และความตายไม่ใช่โชคชะตาที่มนุษยชาติหลีกเลี่ยงไม่ได้ ที่มันยังเป็นปัญหา เพราะมนุษยชาติยังมีความรู้ไม่มากพอต่างหาก\nตัวอย่างง่าย ๆ ก็คือ ฟ้าผ่าที่มนุษย์เคยเชื่อว่ามันคือการฟาดค้อนของพระเจ้าเพื่อลงโทษคนบาป แต่ในช่วงกลางศตวรรษที่ 18 เบนจามิน แฟรงคลิน ได้ทำการทดลองปล่อยว่าว ให้บินอยู่ท่ามกลางฝนเพื่อจะทดสอบสมมติฐานที่ว่าฟ้าผ่านั้นจริง ๆ แล้วเป็นเพียงกระแสไฟรูปแบบหนึ่งเท่านั้น และเมื่อเสร็จการทดลองนี้ แฟรงคลินก็ได้สร้างสายล่อฟ้าที่ “ปลดอาวุธของพระเจ้า” ได้สำเร็จ ในประวัติศาตร์ที่ผ่านมา ทุพภิกขภัย (famine) หรือการขาดอาหารจนคนจำนวนมากล้มตายนั้น เป็นเรื่องปกติมาก แต่ในปัจจุบันทุพภิกขภัยนั้นลดระดับความรุนแรงไปมาก ครั้งใดก็ตามที่เกิดภัยธรรมชาติครั้งใหญ่ องค์กรนานาชาติ และประชาชนทั่วโลกก็พร้อมจะส่งความช่วยเหลือไปให้ และแม้ยังมีอีกหลายประเทศที่ประชาชนยังขาดสารอาหาร แต่ก็แทบไม่มีประเทศใดที่คนอดอาหารจนตายอีกแล้ว อันที่จริง ในหลายประเทศคนเสี่ยงที่จะตายจากโรคอ้วนมากกว่าด้วยซ้ำ\nโปรเจ็คกิลกาเมช (Gilgamesh Project) มหากาพย์กิลกาเมช เป็นหนึ่งในงานวรรณกรรมประเภทนิยาย ที่เก่าแก่ที่สุดในโลก ของชาวสุเมเรียนเกี่ยวกับวีรบุรุษในตำนานที่ชื่อว่า “กิลกาเมช” ซึ่งออกตามหาหนทางที่จะทำให้มนุษย์เป็นอมตะ เขาออกค้นหาไปสุดขอบจักรวาล ต้องต่อสู้กับสิงโตและมนุษย์แมงป่อง ลงไปยมโลกและได้พบกับเทพอุตนาพิชทิม (Utnapishtim) ปราชญ์ผู้รอดจากน้ำท่วมโลก แต่สุดท้ายแล้วกิลกาเมชก็กลับบ้านมือเปล่า เพราะไม่สามารถหาวิธีที่จะทำให้ตัวเองเป็นอมตะได้ กิลกาเมชจึงยอมรับว่าเมื่อพระเจ้าสร้างมนุษย์และมอบชีวิตให้ พระเจ้าก็ได้มอบความตายให้ด้วย มนุษย์จึงต้องเรียนรู้ที่จะอยู่กับมันให้ได้\nในบรรดาปัญหาทั้งหมดที่มนุษยชาติประสบ ปัญหาที่สำคัญและน่าสนใจที่สุดคงหนีไม่พ้นความตาย หลายศาสนาที่เรารู้จักบอกว่าความตายเป็นสิ่งที่เราหลีกเลี่ยงไม่ได้ และบางศาสนาก็ยังให้คำมั่นด้วยว่า ถ้าเชื่อมั่นในพระเจ้าเราก็จะมีชีวิตหลังความตายที่ดี ลองคิดภาพว่าถ้ามนุษย์ไม่ตาย ศาสนาเหล่านี้จะอยู่กันอย่างไร ผู้มีปัญญาในยุคก่อนจึงใช้เวลาและความคิดไปกับการหาความหมายให้ความตาย ไม่ใช่เพื่อจะหลุดรอดจากมัน แต่สำหรับนักวิทยาศาสตร์แล้ว ความตายไม่ใช่โชคชะตาที่ต้องยอมจำนน แต่เป็นเพียงปัญหาเชิงเทคนิคเท่านั้น คนเราตายไม่ใช่เพราะพระเจ้ากำหนดมา แต่เกิดจากความล้มเหลวเชิงเทคนิค (technical failures) เช่นหัวใจวาย มะเร็ง หรือการติดเชื้อ ถ้าหัวใจเต้นผิดปกติ เราก็สามารถฝัง pacemaker หรือผ่าตัดเปลี่ยนหัวใจได้ ถ้าเซลล์มะเร็งเริ่มขยายตัว เราก็แค่ฆ่ามันด้วยยาและการฉายแสง ถ้าแบคทีเรียอาละวาด เราก็กำจัดมันด้วยยาปฏิชีวนะ\nแม้ว่าเราจะยังไม่สามารถแก้ปัญหาทางเทคนิคได้ทั้งหมด แต่คนที่ฉลาดที่สุดในยุคนี้ก็ยังคงวิจัยค้นคว้ากันต่อไป พวกเขาไม่มานั่งหาความหมายให้ความตายแล้ว แต่ใช้เวลาและกำลังที่มีในการทำความเข้าใจระบบต่าง ๆ ในร่างกายที่นำไปสู่การเจ็บป่วยและความตาย และคิดค้นวิธีการรักษาใหม่ ๆ รวมถึงทำอวัยวะเทียม เพื่อยืดอายุให้กับมนุษย์และแม้กระทั่งเอาชนะความตายได้ในอนาคต\nรุกคืบความตาย แม้การเอาชนะความตายจะดูเหมือนความฝันที่ยังยาวไกล แต่ความรู้ทางวิทยาศาสตร์ และการแพทย์ของเราก็เดินทางมาไกลมากเมื่อเทียบกับไม่กี่ร้อยปีที่แล้ว ในปี 1199 กษัตริย์อังกฤษนามริชาร์ดใจสิงห์ (King Richard the Lionheart) ถูกธนูยิงที่หัวไหล่ซ้าย ถ้ามองจากสายตาคนสมัยนี้ก็จะรู้สึกว่าเป็นอาการบาดเจ็บที่ไม่ร้ายแรงมาก แต่ในปี 1199 ที่ยังไม่มียาปฏิชีวนะและคนยังไม่รู้วิธีการฆ่าเชื้อ แผลของริชาร์ดจึงติดเชื้อ และหัวไหล่ก็กลายเป็นเนื้อตายเน่า (gangrene) วิธีเดียวที่จะหยุดการลุกลามของเนื้อตายเน่าในสมัยนั้นคือ การตัดแขน ซึ่งก็ทำไม่ได้เพราะแผลเกิดตรงหัวไหล่พอดี ไม่มีใครช่วยริชาร์ดใจสิงห์ได้ และท่านก็เสด็จสวรรคตในอีกสองสัปดาห์ถัดมา ส่วนยาชา หรือยาสลบเพิ่งจะถูกนำมาใช้งานเมื่อประมาณ 150 ปีที่แล้วนี้เอง ก่อนหน้านั้น หากทหารคนไหนได้รับบาดเจ็บที่แขนหรือขา ก็จะถูกทหารอีกสี่คนช่วยกันรั้งตัวเอาไว้ ในขณะที่หมอตัดแขนนั้นทิ้ง เพื่อป้องกันไม่ให้เนื้อตายเน่านั้นลุกลาม ช่างไม้และคนชำแหละเนื้อสัตว์ มักจะถูกเกณฑ์ทหาร ให้ไปประจำอยู่ในหน่วยแพทย์ เพราะการผ่าตัดสมัยนั้นอาศัยเพียงรู้ว่า จะใช้มีดและเลื่อยยังไงก็เพียงพอแล้ว\nแต่วิวัฒนาการทางการแพทย์ในช่วงสองร้อยปีที่ผ่านมา ทำให้โลกเปลี่ยนไปจนแทบจำไม่ได้ ยาใหม่ ๆ และวิธีการผ่าตัดที่ก้าวหน้า ทำให้เรารับมือกับความเจ็บปวด และอาการบาดเจ็บได้ดียิ่งกว่ายุคใด ๆ อายุขัยเฉลี่ยของมนุษย์เพิ่มจาก 25 ปีเป็น 67 สำหรับประชากรโลก ส่วนในประเทศที่เจริญแล้วอายุเฉลี่ยจะอยู่ที่ 80 ปี ความตายถูกวิทยาศาสตร์รุกคืบมากที่สุด ในเรื่องการตายในวัยเยาว์ (child mortality) ก่อนจะเข้าสู่ศตวรรษที่ 19 เกือบ 1 ใน 3 ของเด็กที่เกิดมาไม่ได้อยู่จนถึงวัยผู้ใหญ่\nลองมาดูประวัติการให้กำเนิดของบุตรของกษัตริย์เอ็ดเวิร์ดที่ 1 (1237-1307) และพระราชินีเอเลนอร์ (1241-1290) กัน (ผมขออนุญาตไม่ใช้ราชาศัพท์นะครับ)\n ลูกสาว (ยังไม่ได้ตั้งชื่อ) เกิดในปี 1255 เสียชีวิตตอนคลอด ลูกสาวชื่อแคทเธอรีน เสียชีวิตตอนอายุ 1 ขวบ ลูกสาวชื่อโจน เสียชีวิตตอนอายุ 6 เดือน ลูกชาวชื่อจอห์น เสียชีวิตตอน 5 ขวบ ลูกชายชื่อเฮนรี่ เสียชีวิตตอน 6 ขวบ ลูกสาวชื่อเอเลนอร์ เสียชีวิตตอน 29 ปี ลูกสาว (ยังไม่ได้ตั้งชื่อ) เสียชีวิตตอน 5 เดือน ลูกชาวชื่อโจน เสียชีวิตตอนอายุ 35 ปี ลูกชายชื่ออัลฟองโซ เสียชีวิตตอน 10 ขวบ ลูกสาวชื่อมากาเร็ต เสียชีวิตตอนอายุ 58 ปี ลูกสาวชื่อเบอเรนเจเรีย เสียชีวิตตอนอายุ 2 ขวบ ลูกสาว (ยังไม่ได้ตั้งชื่อ) เสียชีวิตหลังคลอดได้ไม่นาน ลูกชาวชื่อโจน เสียชีวิตตอนอายุ 35 ปี ลูกชาย (ยังไม่ได้ตั้งชื่อ) เสียชีวิตหลังคลอดได้ไม่นาน ลูกสาวชื่อเอลิซาเบธ เสียชีวิตตอนอายุ 34 ปี ลูกชายชื่อเอ็ดเวิร์ด  ลูกชายคนสุดท้ายที่ชื่อเอ็ดเวิร์ด เป็นลูกผู้ชายคนเดียวที่รอดพ้นช่วงอันตรายในวัยเด็กมา และเติบโตพอจะขึ้นสืบทอดราชบัลลังก์เป็นพระเจ้าเอ็ดเวิร์ดที่ 2 ได้ พูดอีกในหนึ่งก็คือราชินีเอเลนอร์ต้องตั้งท้องถึง 16 ครั้ง ถึงจะให้กำเนิดรัชทายาทให้กับพระเจ้าเอ็ดเวิร์ดที่ 1 พระเจ้าเอ็ดเวิร์ดที่ 1 และพระราชินีเอเลนอร์ล้วนมีพระวรกายแข็งแรง แต่ในบรรดาลูก 16 คนนั้น มีเพียง 6 คนเท่านั้นที่มีพระชนมายุถึง 15 ปี นี่ยังไม่นับลูกอีกหลายคนที่แท้งเสียก่อนคลอดอีกด้วยนะครับ นึกภาพไม่ออกเลยว่าคนเป็นพ่อเป็นแม่สมัยนั้น ต้องพบเจอกับความเจ็บปวดจากการสูญเสียลูกมากมายแค่ไหน ตัดภาพมาที่อังกฤษสมัยนี้ ในเด็ก 1000 คน จะมีถึง 993 คนที่อยู่จนอายุครบ 15 ปี\nเมื่อไหร่มนุษย์จะเป็นอมตะ? แล้วต้องใช้เวลาอีกนานไหมกว่าที่โปรเจ็คกิลกาเมชจะประสบผลสำเร็จ? เมื่อมองกลับไป 100 ปีและเทียบกับสิ่งที่เรารู้ในตอนนี้ เราก็มีสิทธิ์หวังได้ว่า ความสามารถในการเรียนรู้ และการคิดค้นจะพาเราไปสู่ปลายทางได้ในเวลาไม่นานนัก วิศวกรพันธุกรรม (genetic engineer) ได้ค้นพบวิธีที่จะทำให้หนอน Caenorhabditis elegans มีอายุขัยเฉลี่ยเพิ่มขึ้น 2 เท่าแล้ว ส่วนจะทำกับมนุษย์ได้หรือไม่นั้นเป็นสิ่งที่ต้องรอดูกันต่อไป\n ผู้เชี่ยวชาญด้าน nanotechnologies ก็กำลังสร้าง nano-robots ที่จะสามารถเข้าไปอยู่ในร่างกายของเราเพื่อเปิดทางเดินส้นเลือดที่กำลังจะอุดตัน ต่อต้านเซลล์มะเร็ง หรือแม้กระทั่งย้อนรอยการชราภาพ (reverse ageing process) ผู้เชี่ยวชาญบางคนเชื่อว่ามนุษย์จะสามารถกลายเป็นคน amortal ได้ภายในปี 2050 มนุษย์ amortal ไม่ใช่ มนุษย์อมตะ (immortal) เพราะมนุษย์ amortal อาจจะยังตายได้จากอุบัติเหตุ แต่จะไม่ตายจากโรคหรือความชราอีกต่อไป  แรงขับเคลื่อนของวิทยาศาสตร์ เวลาเรานึกถึงนักวิทยาศาสตร์ เรามักจะเห็นภาพของชายวัยดึก ที่มีหนวดเคราที่ยึดมั่นในอุดมการณ์ และวิธีการที่จะให้ได้มาซึ่งความลับของธรรมชาติ แต่เราต้องไม่ลืมว่า วิทยาศาสตร์ไม่ใช่ศาสตร์ที่อยู่เหนือคนอื่นในด้านศีลธรรม หรืออุดมการณ์เลย เช่นเดียวกับกิจกรรมอื่นๆ ของมนุษย์ การค้นคว้าทางวิทยาศาสตร์ ก็ล้วนแต่ถูกขับเคลื่อนด้วยพลังทางการเมือง เศรษฐกิจและศาสนาเช่นกัน ที่วิทยาศาสตร์ก้าวหน้ามากในช่วง 500 ปีที่ผ่านมาก็เพราะว่ารัฐบาล ธุรกิจ และองค์กรต่าง ๆ เต็มใจที่จะให้เงินสนับสนุน นักวิทยาศาสตร์เหล่านี้ให้ได้ทำงานวิจัย สมมติกาลิเลโอหรือชาลส์ดาร์วินไม่ได้เกิดขึ้นมาบนโลกใบนี้ ความรู้ที่พวกเขาค้นพบก็น่าจะถูกค้นพบโดยนักวิทยาศาสตร์คนอื่นอยู่ดี แต่ถ้าไม่มีเงินสนับสนุนจากองค์กรต่าง ๆ นักวิทยาศาสตร์อย่างดาร์วิน จะไม่มีทางได้ไปเก็บข้อมูลทั่วโลกเพื่อนำมาสร้างองค์ความรู้ทางวิวัฒนาการได้อย่างแน่นอน\nสาเหตุที่ผู้มีอำนาจให้เงินสนับสนุนการค้นคว้า ก็เพราะว่าพวกเขาเชื่อว่า สิ่งที่ค้นพบนั้นจะยิ่งมาช่วยเพิ่มพูนอำนาจของเขา ยกตัวอย่างเช่นในศตวรรษที่ 16 ที่ผู้มีอำนาจในยุโรปต่างเป็นสปอนเซอร์ให้นักสำรวจเดินทางไปทั่วโลก แต่ไม่มีใครสนใจสปอนเซอร์การวิจัยจิตวิทยาในเด็ก เหตุผลก็เพราะว่าพวกเขาเชื่อว่าการออกสำรวจดินแดนใหม่ จะนำมาซึ่งทรัพยากรและเส้นทางการค้าใหม่ ๆ ขณะที่การเข้าใจความคิดของเด็กนั้นไม่เห็นจะมีประโยชน์ตรงไหน ดังนั้นความเชื่อหรือ ideologies ของผู้ที่มีอำนาจจึงเป็นตัวกำหนดว่านักวิทยาศาสตร์ควรจะศึกษาเรื่องอะไร และในทางกลับกัน เมื่อนักวิทยาศาสตร์ได้ความรู้นั้นมาแล้ว ผู้ที่เป็นสปอนเซอร์ก็จะเป็นคนที่ตัดสินใจว่าจะเอาความรู้นั้นไปใช้ในทางไหน\nแรงผลักที่สำคัญที่สุดต่อความก้าวหน้าทางวิทยาศาสตร์คือ จักรวรรดินิยมและทุนนิยม ความเชื่อมโยงกันระหว่างเงินทุน ความรู้ และพลังอำนาจ เป็นตัวขับเคลื่อนความเจริญก้าวหน้าที่สำคัญที่สุดในรอบ 500 ปีที่ผ่านมา ตอนหน้าเราจะมาคุยกันครับว่าจักรวรรดินิยมขับเคลื่อนวิทยาศาสตร์อย่างไรบ้าง\n ที่มาบทความ : https://anontawong.com\n ","date":1589065200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589065200,"objectID":"b6e50bec7382154b146e36f0d65d24e2","permalink":"https://example.com/book/sapiens/sapiens-14/","publishdate":"2020-05-10T00:00:00+01:00","relpermalink":"/book/sapiens/sapiens-14/","section":"book","summary":"ก่อนจะเกิดการปฏิวัติทางวิทยาศาสตร์เมื่อ 500 ปีที่แล้ว มนุษย์ไม่ได้เชื่อว่าโลกจะสามารถก้าวหน้าไปได้มากกว่านี้ เพราะพวกเขารู้สึกว่า “ยุคทอง” ได้ผ่านพ้นไปแล้ว การยึดมั่นและปฏิบัติตามความรู้จากบรรพชนเป็นทางเดียวที่จะกล้บไปมี “ชีวิตดีๆ” ได้ เราอาจปรับปรุงชีวิตให้ดีขึ้นได้เล็กน้อย แต่ไม่มีใครเชื่อว่าเราจะแก้ปัญหาขั้นพื้นฐานไปได้มากกว่านี้ ถ้าศาสดาผู้รู้ความจริงของสรรพสิ่งอย่างท่านมูฮัมหมัด ขงจื๊อ พระพุทธเจ้า หรือพระเยซู ยังไม่สามารถขจัดโรคระบาด ความอดอยาก ความยากจน และสงครามได้แล้ว มนุษย์ธรรมดาอย่างเรา ๆ จะไปมีปัญญาแก้ปัญหาเหล่านี้ได้อย่างไร\nแต่เมื่อมนุษย์ยอมรับว่าตัวเองยังไม่รู้ทุกอย่าง และเริ่มเชื่อว่าการค้นพบทางวิทยาศาสตร์ จะมอบพลังและอำนาจให้ ผู้คนจึงมองว่าความก้าวหน้าอาจเป็นเรื่องที่เป็นไปได้ หลังจากวิทยาศาสตร์เริ่มแก้ปัญหาให้เห็นทีละข้อ มนุษย์ก็มีความเชื่อมั่นว่า ความยากจน ความเจ็บไข้ ความหิวโหย สงคราม ความชรา และความตายไม่ใช่โชคชะตาที่มนุษยชาติหลีกเลี่ยงไม่ได้ ที่มันยังเป็นปัญหา เพราะมนุษยชาติยังมีความรู้ไม่มากพอต่างหาก\nตัวอย่างง่าย ๆ ก็คือ ฟ้าผ่าที่มนุษย์เคยเชื่อว่ามันคือการฟาดค้อนของพระเจ้าเพื่อลงโทษคนบาป แต่ในช่วงกลางศตวรรษที่ 18 เบนจามิน แฟรงคลิน ได้ทำการทดลองปล่อยว่าว ให้บินอยู่ท่ามกลางฝนเพื่อจะทดสอบสมมติฐานที่ว่าฟ้าผ่านั้นจริง ๆ แล้วเป็นเพียงกระแสไฟรูปแบบหนึ่งเท่านั้น และเมื่อเสร็จการทดลองนี้ แฟรงคลินก็ได้สร้างสายล่อฟ้าที่ “ปลดอาวุธของพระเจ้า” ได้สำเร็จ ในประวัติศาตร์ที่ผ่านมา ทุพภิกขภัย (famine) หรือการขาดอาหารจนคนจำนวนมากล้มตายนั้น เป็นเรื่องปกติมาก แต่ในปัจจุบันทุพภิกขภัยนั้นลดระดับความรุนแรงไปมาก ครั้งใดก็ตามที่เกิดภัยธรรมชาติครั้งใหญ่ องค์กรนานาชาติ และประชาชนทั่วโลกก็พร้อมจะส่งความช่วยเหลือไปให้ และแม้ยังมีอีกหลายประเทศที่ประชาชนยังขาดสารอาหาร แต่ก็แทบไม่มีประเทศใดที่คนอดอาหารจนตายอีกแล้ว อันที่จริง ในหลายประเทศคนเสี่ยงที่จะตายจากโรคอ้วนมากกว่าด้วยซ้ำ\nโปรเจ็คกิลกาเมช (Gilgamesh Project) มหากาพย์กิลกาเมช เป็นหนึ่งในงานวรรณกรรมประเภทนิยาย ที่เก่าแก่ที่สุดในโลก ของชาวสุเมเรียนเกี่ยวกับวีรบุรุษในตำนานที่ชื่อว่า “กิลกาเมช” ซึ่งออกตามหาหนทางที่จะทำให้มนุษย์เป็นอมตะ เขาออกค้นหาไปสุดขอบจักรวาล ต้องต่อสู้กับสิงโตและมนุษย์แมงป่อง ลงไปยมโลกและได้พบกับเทพอุตนาพิชทิม (Utnapishtim) ปราชญ์ผู้รอดจากน้ำท่วมโลก แต่สุดท้ายแล้วกิลกาเมชก็กลับบ้านมือเปล่า เพราะไม่สามารถหาวิธีที่จะทำให้ตัวเองเป็นอมตะได้ กิลกาเมชจึงยอมรับว่าเมื่อพระเจ้าสร้างมนุษย์และมอบชีวิตให้ พระเจ้าก็ได้มอบความตายให้ด้วย มนุษย์จึงต้องเรียนรู้ที่จะอยู่กับมันให้ได้","tags":null,"title":"ตอนที่ 14 - 500 ปีแห่งความก้าวหน้า","type":"docs"},{"authors":null,"categories":null,"content":" ก่อนปี 1500 กลุ่มประเทศยุโรปตะวันตกอย่างอังกฤษ ฝรั่งเศส สเปน หรือโปรตุเกสนั้นเป็นเพียง “พื้นที่ห่างไกลความเจริญ” ในแถบเมดิเตอเรเนียนเท่านั้น ยุโรปเพิ่งจะเริ่มมีบทบาทในเวทีโลกมากขึ้นในช่วงปี 1500-1750 เมื่อพวกเขาออกทะเลและพิชิต “โลกใหม่” อย่างอเมริกา ออสเตรเลีย และนิวซีแลนด์ แต่ถึงกระนั้น ยุโรปก็ยังถือว่าจิ๊บจ๊อยมากเมื่อเทียบกับประเทศยักษ์ใหญ่ในเอเชีย ในปี 1775 ขนาดเศรษฐกิจของของอินเดียกับจีน สองประเทศรวมกันก็คิดเป็น 2 ใน 3 ของเศรษฐกิจโลกแล้ว ศูนย์กลางทางอำนาจเพิ่งจะถูกปรับเปลี่ยนในช่วงปี 1750-1850 หลังจากที่ยุโรปพิชิตประเทศในเอเชียครั้งแล้วครั้งเล่า พอถึงปี 1900 ยุโรปก็ได้ครอบครองพื้นที่เกือบทั้งโลก ขนาดเศรษฐกิจของยุโรป และสหรัฐรวมกันมีมูลค่าเท่ากับ 50% ของเศรษฐกิจโลก ขณะที่จีนนั้นมีมูลค่าเพียง 5% เท่านั้น\n อะไรคือสิ่งที่ทำให้ยุโรปผงาดขึ้นมาเป็นผู้นำโลกในเวลาแค่ 100 ปี?\n เมื่อยอมรับว่าไม่รู้ ในสองตอนที่ผ่านมา ผมได้พูดถึงการปฏิวัติทางวิทยาศาสตร์ในยุโรป ซึ่งเริ่มจากทัศนคติที่ว่า “เรายังไม่ได้รู้ทุกอย่างที่เราจำเป็นต้องรู้”\nวิธีคิดแบบนี้สำคัญมาก เพราะก่อนหน้านี้มนุษย์ต่างเชื่อว่า พวกเขารู้ทุกอย่างที่จำเป็นต้องรู้แล้วผ่านคำสอนของมหาศาสดาทั้งหลาย แต่เมื่อมนุษย์ยอมรับได้ว่าตัวเองไม่รู้ จึงพร้อมออกเดินทางเพื่อค้นคว้าเพื่อให้ได้มาซึ่งความรู้ใหม่ ๆ และความรู้นั้น ก็ถูกนำมาแปรรูปเป็นเทคโนโลยี และเครื่องมือที่นำมาซึ่งอำนาจที่มากมายยิ่งขึ้น\nแผนที่อันว่างเปล่า มนุษย์นั้นชอบเขียน “แผนที่โลก” มาแต่ไหนแต่ไร แม้ว่าตัวเองไม่เคยได้ออกไปสำรวจดินแดนอื่นๆ มาก่อน คนในแอฟริกา เอเชีย และยุโรป ไม่เคยรู้ถึงการมีอยู่ของทวีปอเมริกา ส่วนคนในอเมริกาก็ไม่เคยรับรู้ถึงการมีอยู่ของแอฟริกา เอเชีย และยุโรป แต่แผนที่โลกสมัยนั้น ก็ถูกเขียนขึ้นราวกับว่าทวีปที่เขาไม่รู้จักนี้ไม่มีอยู่ หรือไม่พื้นที่เหล่านั้น ก็จะเต็มไปด้วยภาพสัตว์ประหลาด “แผนที่โลก” สมัยเก่าจึงไม่มีพื้นที่ว่างเผื่อไว้สำหรับดินแดนที่ยังไม่ถูกค้นพบเลย แต่ในศตวรรษที่ 15 และ 16 คนยุโรปเริ่มวาดแผนที่โลกโดย “เว้นพื้นที่ว่าง” เอาไว้เยอะมาก ซึ่งเป็นสัญญาณที่บ่งบอกว่า คนยุโรปยอมรับแล้วว่าพวกเขายังไม่รู้อะไรอีกมาก และยังมีดินแดนอีกมากมายที่พวกเขาอาจยังไม่เคยไปถึง\nค้นพบทวีปอเมริกา จุดเปลี่ยนสำคัญเกิดขึ้นเมื่อปี 1492 เมื่อเรือพินต้า (Pinta) ของคริสโตเฟอร์ โคลัมบัส (Christoper Columbus) ได้แล่นออกจากสเปน และล่องเรือมาทางทิศตะวันตกด้วยจุดประสงค์ที่จะหาเส้นทางใหม่สู่ญี่ปุ่น (ก่อนหน้านั้นคงแล่นไปทางทิศตะวันออกตลอด) โดยโคลัมบัสคำนวณว่าระยะทางจากสเปนไปญี่ปุ่น น่าจะอยู่ที่ประมาณ 7,000 ไมล์\nความเป็นจริงก็คือญี่ปุ่นอยู่ห่างจากสเปนถึง 20,000 ไมล์ และระหว่างทางจากสเปนไปญี่ปุ่นนั้นมีทวีปขนาดใหญ่คั่นกลางอยู่! ณ เวลาตี 2 ของ วันที่ 12 ตุลาคม ปี 1492 Juan Rodriguez Bermejo ซึ่งอยู่บนเสากระโดงเรือพินต้าตะโกนเสียงดังว่า “แผ่นดิน แผ่นดิน!” (Land! Land!) โคลัมบัส (ซึ่งคิดว่าแผนที่ในมือเขานั้นมีข้อมูลเรื่องทวีปต่าง ๆ ในโลกครบถ้วนแล้ว) เชื่อว่าพวกเขาได้เดินทางมาถึงชายฝั่งตะวันออกของหมู่เกาะ East Indies (หมู่เกาะของอินโดนีเซีย) โคลัมบัสจึงเรียกคนที่อยู่ในดินแดนแห่งนี้ว่า Indians\nโคลัมบัสไม่เคยยอมรับว่าเขาได้ค้นพบทวีปใหม่ตราบจนวันสุดท้ายของชีวิต เพราะสำหรับคนในยุคนั้น ไม่มีใครคาดคิดว่า จะมีทวีปอีกทวีปหนึ่งที่พวกเขาไม่เคยรู้จัก เพราะในคัมภีร์ไบเบิลรวมถึงนักปราชญ์ทุกคนก่อนหน้านี้ ก็พูดถึงแต่แอฟริกา ยุโรป และเอเชียเท่านั้น ใครเล่าจะเชื่อว่าคัมภีร์อันศักดิ์สิทธิ์จะตกหล่นทวีปไปทั้งทวีปได้!\nคนแรกที่เชื่อว่านี่คือทวีปใหม่จริง ๆ คือนักเดินทะเลชาวอิตาเลียนนาม Amerigo Vespucci ที่ได้เดินทางไปแผ่นดินใหม่นี้หลายครั้งในปี 1492-1504 และได้เขียนถึงการเดินทางครั้งนี้ว่า แผ่นดิน ที่โคลัมบัสค้นพบนั้นไม่ใช่ชายฝั่งตะวันออกของประเทศในเอเชีย แต่เป็นทวีปใหม่ที่ไม่เคยมีการบันทึกในไบเบิล ในปี 1507 นักวาดแผนที่ชื่อ Martin Waldseemuller ก็ได้ตีพิมพ์แผนที่โลกฉบับใหม่ที่เพิ่มทวีปใหม่นี้เข้าไป และด้วยความเข้าใจผิดว่านาย Amerigo เป็นคนค้นพบทวีปนี้ เขาจึงตั้งชื่อทวีปนี้ว่าอเมริกาเป็นเกียรติแก่นายอเมริโก แผนที่ใหม่นี้ป๊อปูล่าร์มากและถูกนักวาดแผนที่อื่น ๆ ก๊อปปี้ไปใช้ ทวีปใหม่นี้จึงถูกจารึกชื่อว่าเป็นอเมริกาไปโดยปริยาย\nหรือยุโรปจึงเก่งกว่าเอเชีย? ทำไมยุโรปถึงค้นพบทวีปอเมริกาก่อนจีน ทั้ง ๆ ที่จีนก็มีความรู้ด้านการเดินทะเลดีพอ ๆ กับคนยุโรปหรืออาจจะดีกว่าด้วยซ้ำ ราว 80 ปีก่อนโคลัมบัสจะค้นพบอเมริกา เจิ้งเหอ (Zheng He) ผู้บัญชาการทหารเรือจีนในยุคราชวงศ์หมิง ได้นำพาเรือ 300 ลำและลูกเรือถึง 30,000 คนออกท่องทะลไปถึงดินแดนอย่างอินโดนีเซีย ศรีลังกา ทะเลแดง และแอฟริกาตะวันออก\nกองเรือของเจิ้งเหอนั้นใหญ่กว่าของโคลัมบัสมาก เพราะโคลัมบัสมีเรือแค่ 3 ลำและลูกเรือ 120 คนเท่านั้นเอง ความแตกต่างที่สำคัญระหว่างเจิ้งเหอกับโคลัมบัสก็คือ เจิ้งเหอไม่ได้ไปเยือนดินแดนเหล่านั้นเพื่อรุกราน หรือนำมาเป็นดินแดนอาณานิคมแต่อย่างใด และเมื่อผู้ปกครองแผ่นดินจีนผัดเปลี่ยนในปี 1430 การออกเดินทางของเจิ้งเหอก็จบลงด้วย ข้อมูลต่าง ๆ สูญหาย และไม่เคยมีกองเรือที่ใหญ่ขนาดนี้จากน่านน้ำของจีนอีกเลย\nดังนั้น การที่ยุโรปค้นพบอเมริกาก่อนเมืองจีนนั้น ไม่ใช่เพราะคนยุโรปเก่งกว่าหรือมีเทคโนโลยีที่เหนือกว่า แต่เป็นเพราะค่านิยม และความเชื่อที่ต่างกันต่างหาก ที่ทำให้ชาวจีนไม่เคยคิดออกล่าอาณานิคมในแดนไกล\nเร่งเครื่องพัฒนา การค้นพบทวีปอเมริกาถือเป็นพื้นฐานสำคัญสำหรับการปฏิวัติทางวิทยาศาสตร์ เพราะนอกจากมันจะสอนให้ชาวยุโรปรู้ว่า ควรจะให้น้ำหนักกับหลักฐานปัจจุบันมากกว่าความรู้ในอดีตแล้ว มันยังบังคับให้ชาวยุโรปต้องเร่งศึกษา ค้นคว้าและพัฒนาโดยเร็ว เพราะหากพวกเขาต้องการจะยึดครองดินแดนใหม่ ที่เรียกว่าอเมริกานี้ ก็ย่อมต้องศึกษาข้อมูลทางประวัติศาสตร์ ข้อมูลเชิงชีววิทยา และนิเวศน์วิทยาของโลกใหม่นี้ให้ได้มากที่สุด ความรู้ที่อยู่ในพระคัมภีร์ไม่เพียงพออีกต่อไปแล้ว\nในศตวรรษที่ 15 และ 16 ชาวยุโรปออกท่องไปทั่วโลกและล่าอาณานิคมมาได้มากมาย และที่สำคัญยังได้สร้างเครือข่ายทางการค้า ที่เชื่อมโลกผู้คนทั้งโลกไว้ด้วยกัน การล่าอาณานิคมอย่างหิวกระหาย ได้นำพาผู้คน และประวัติศาสตร์ที่เคยเป็นเอกเทศให้มาอยู่ในประวัติศาสตร์เล่มเดียวกัน\nสเปนบุกอเมริกาใต้ ภายใน 20 ปี หลังการค้นพบทวีปอเมริกา สเปนได้เข้ายึดครองหมู่เกาะแคริบเบียนและบังคับให้คนท้องถิ่นเป็นทาสเกือบหมด คนพื้นเมืองเหล่านี้ล้มตายจากการถูกใช้งานอย่างทารุณและจากโรคที่พวกเขาไม่มีภูมิคุ้มกันที่แฝงมากับลูกเรือจากสเปน\nเมื่อยึดหมู่เกาะแคริบเบียนได้เสร็จสรรพแล้ว อาณาจักแอซเท็กก็เป็นเหยื่อรายต่อไป (Aztec – ปัจจุบันคือเม็กซิโก) เมื่อนายเฮอร์นัน คอร์เทส (Hernán Cortés) และพรรคพวก 550 คน จอดเรือริมหาดในเมือง Vera Cruz ในปี 1519 และประกาศกับชาวพื้นเมืองว่า “เราถูกกษัตริย์สเปนส่งมา เรามาโดยสันติ โปรดพาเราไปพบผู้นำของท่าน” (คอร์เทสโกหกหน้าด้าน ๆ เพราะกษัตริย์สเปนไม่เคยรู้จักคอร์เทส พวกเขาเดินทางมากันเองต่างหาก) เมื่อได้พบและพูดคุยกับจักรพรรดิมอนเตซูม่า (Emperor Montezuma) คอร์เทสก็ออกคำสั่งให้ลูกทีมสังหารองค์รักษ์ของจักรพรรดิและจับมอนเตซูม่าเอาไว้เป็นตัวประกัน เป็นระยะเวลาหลายเดือนที่มอนเตซูม่ายังคงทำหน้าที่เป็นผู้นำของแอซเท็กโดยมีคอร์เทสชักใยอยู่เบื้องหลัง ระหว่างนั้นคอร์เทสก็ได้ส่งลูกเรือให้เข้าไปแทรกซึมกับชาวนครแอ๊ซเท็กเพื่อทำความคุ้นเคยกับคนในพื้นที่\nแต่แล้ว “อำมาตย์” กลุ่มหนึ่งก็ตัดสินใจปฏิวัติ ตั้งจักรพรรดิองค์ใหม่ และอัปเปหิคอร์เทสและมอนเตซูม่าออกจากเมืองหลวง เรื่องมาไคลแมกซ์เมื่อคอร์เทสได้เข้าไปชักชวนชาวบ้าน ที่ลูกเรือเคยสร้างสัมพันธ์เอาไว้ ให้มาร่วมมือกับคอร์เทสเพื่อทำการปฏิวัติซ้อน ชาวบ้านนับหมื่นให้ความร่วมมือ และช่วยให้คอร์เทสกลับมายึดเมืองหลวงได้อีกนครั้งโดยเบ็ดเสร็จ กว่าชาวบ้านจะรู้ตัวว่าถูกหลอกใช้ก็สายไปเสียแล้ว\nอีก 10 ปีต่อมา ชายชื่อปิซาโร่ก็เดินทางถึงอาณาจักรอินคาในอเมริกาใต้ (เปรูในปัจจุบัน) และใช้วิธีแบบเดียวกับคอร์เทสเป๊ะ ๆ แถมคราวนี้มีลูกเรือไปด้วยเพียง 168 คนเท่านั้! ปิซาโร่อ้างว่าพระราชาแห่งสเปนได้ส่งเขามา เรามาอย่างสันติ และขอเข้าพบผู้นำอาณาจักรอินคา แล้วปิซาโร่ก็ลักพาตัวผู้นำไป ทำให้เมืองระส่ำระสาย และการยึดอาณาจักรอินคาได้สำเร็จ\nภายในเวลาเพียง 100 ปีหลังการมาเยือนของคอร์เทสและปิซาโร่ ชาวพื้นเมืองในทวีปอเมริกาล้มตายไปราว 90% โดยมีสาเหตุหลักมาจากโรคที่ชาวสเปนนำมาจากยุโรป (และเป็นโรคที่คนท้องถิ่นไม่มีภูมิคุ้มกัน) ส่วนคนที่เหลืออยู่ก็ถูกกดขี่ข่มเหงอย่างทารุณ\nการเมืองและวิทยาศาสตร์ ในยุคล่าอาณานิคมนี้ การเมืองและวิทยาศาสตร์ผูกพันกันอย่างแยกไม่ออก ทุกกองทัพที่ถูกส่งไปพิชิตดินแดนอันไกลโพ้นมักจะมีนักวิทยาศาสตร์ติดไปด้วยเสมอ ยกตัวอย่าง เช่นตอนที่นโปเลียนบุกอียิปต์ในปี 1798 ก็มีนักวิชาการถึง 165 คนที่เข้าร่วมไปกับกองทัพด้วย หรือในปี 1831 กองทัพเรือของอังกฤษ ถูกส่งไปสำรวจพื้นที่ชายฝั่งของทวีปอเมริกาใต้ หมู่เกาะฟอล์คแลนด์ และหมู่เกาะกาลาปากอส เหตุผลหลัก ก็เพื่อที่จะเข้าใจภูมิศาสตร์ของพื้นที่เหล่านี้เพื่อเพิ่มความได้เปรียบด้านการทหาร\nกัปตันเรือซึ่งเป็นนักวิทยาศาสตร์มือสมัครเล่นคิดว่าน่าจะดีถ้าจะเอานักธรณีวิทยาไปด้วยซักคน นักธรณีวิทยาคนแล้วคนเล่า ปฏิเสธที่จะเข้าร่วมการเดินทางครั้งนี้ จนกระทั่งกัปตันได้มาเจอเด็กอายุ 22 ปีที่เพิ่งจบจากเคมบริดจ์ที่ชื่อว่าชาลส์ ดาร์วิน (Charles Darwin) และเมื่อดาร์วินรู้ก็ตัดสินใจขึ้นเรือโดยไม่ลังเล ตลอดการสำรวจ กัปตันเรือใช้เวลาไปกับการวาดแผนที่ทางการทหาร ส่วนดาร์วินเอง ก็ใช้เวลาไปกับการเก็บข้อมูล และคิดวิเคราะห์จนออกมาเป็นทฤษฏีวิวัฒนาการอันเลื่องลือ\nภาระของคนขาว การค้นคว้าเพื่อค้นพบนั้น กลายมาเป็นอุดมการณ์ใหม่ที่ชาวยุโรปยึดถือ และใช้ในการสร้างความชอบธรรมในการออกเดินทางไป ดินแดนใหม่ ๆ ที่สำคัญยิ่งกว่านั้น ความรู้ใหม่ๆ ที่ได้จากการสำรวจและค้นพบนั้น สามารถสร้างประโยชน์และ “ความก้าวหน้า” ให้กับคนในพื้นที่ที่ถูกยึดครองด้วย ไม่ว่าจะเป็นยารักษาโรค การศึกษา หรือทางรถไฟ\nนักล่าอาณานิคมจึงบอกตัวเองว่า สิ่งที่พวกเขาทำไม่ใช่การเอารัดเอาเปรียบ แต่เป็นงานการกุศลที่ช่วยให้พวกล้าหลัง มีความเป็นอยู่ที่ดีขึ้น Rudyard Kipling เคยแต่งกลอน “ภาระของคนขาว” (White Man’s burden) เอาไว้ว่า\n Take up the White Man’s burden,\nSend forth the best ye breed\nGo bind your sons to exile,\nto serve your captives’ need;\nTo wait in heavy harness,\nOn fluttered folk and wild.\nYour new-caught, sullen peoples,\nHalf-devil and half-child.\nจงแบกรับภาระของคนขาว\nด้วยคนที่ดีที่สุดของเผ่าพันธุ์เรา\nจงส่งลูกชายไปต่างแดน\nเพื่อดูแลเหล่าเชลย\nล่ามด้วยบังเหียนอันหนักอึ้ง\nไม่เชื่องและวุ่นวาย\nเหล่าเชลยผู้บึ้งตึง\nครึ่งเด็กครึ่งมารร้าย\n   แน่นอนว่ากลอนนี้เขียนขึ้นเพื่อยกการกระทำของคนขาวให้ดูสูงส่งเกินจริง\n ในปี 1764 อังกฤษเข้ายึดเมืองเบงกาลในอินเดีย ผู้ปกครองกลุ่มใหม่ไม่ได้สนใจอะไรมากไปกว่าทำให้ตัวเองร่ำรวยขึ้น พวกเขาใช้นโยบายเศรษฐกิจอันนำไปสู่การอดอาหารครั้งใหญ่ในเบงกาล (The Great Bengal Famine) ที่กินเวลาถึง 4 ปีและทำให้ชาวเบงกาลล้มตายถึง 1 ใน 3 หรือประมาณ 10 ล้านคน ยุคแห่งการล่าอาณานิคมนั้นมีเรื่องราวเกิดขึ้นมากมาย เราจะวางให้ชาวยุโรปเป็นผู้ร้ายก็ได้เพราะพวกเขาสังหารและสร้างความสูญเสียให้กับคนท้องถิ่นอย่างเหลือแสน หรือจะมองชาวยุโรปเป็นพระเอกก็ได้เพราะพวกเขาได้วางระบบสาธารณูปโภคและรากฐานทางการศึกษาที่คนรุ่นหลังยังได้รับประโยชน์จนถึงทุกวันนี้ ประวัติศาสตร์นั้นซับซ้อนเกินกว่าจะชี้ว่าใครคือพระเอกหรือผู้ร้าย ในตอนหน้าเราจะมาพูดถึงจิ๊กซอว์อีกหนึ่ง ตัวที่ขับเคลื่อนการปฏิวัติทางวิทยาศาสตร์และการล่าอาณานิคม จิ๊กซอว์สำคัญตัวนี้มีชื่อว่า \u0026ldquo;ทุนนิยม\u0026rdquo;\n ที่มาบทความ : https://anontawong.com\n ","date":1589065200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589065200,"objectID":"0898d84fec9605a2d1026965a2bbec08","permalink":"https://example.com/book/sapiens/sapiens-15/","publishdate":"2020-05-10T00:00:00+01:00","relpermalink":"/book/sapiens/sapiens-15/","section":"book","summary":"ก่อนปี 1500 กลุ่มประเทศยุโรปตะวันตกอย่างอังกฤษ ฝรั่งเศส สเปน หรือโปรตุเกสนั้นเป็นเพียง “พื้นที่ห่างไกลความเจริญ” ในแถบเมดิเตอเรเนียนเท่านั้น ยุโรปเพิ่งจะเริ่มมีบทบาทในเวทีโลกมากขึ้นในช่วงปี 1500-1750 เมื่อพวกเขาออกทะเลและพิชิต “โลกใหม่” อย่างอเมริกา ออสเตรเลีย และนิวซีแลนด์ แต่ถึงกระนั้น ยุโรปก็ยังถือว่าจิ๊บจ๊อยมากเมื่อเทียบกับประเทศยักษ์ใหญ่ในเอเชีย ในปี 1775 ขนาดเศรษฐกิจของของอินเดียกับจีน สองประเทศรวมกันก็คิดเป็น 2 ใน 3 ของเศรษฐกิจโลกแล้ว ศูนย์กลางทางอำนาจเพิ่งจะถูกปรับเปลี่ยนในช่วงปี 1750-1850 หลังจากที่ยุโรปพิชิตประเทศในเอเชียครั้งแล้วครั้งเล่า พอถึงปี 1900 ยุโรปก็ได้ครอบครองพื้นที่เกือบทั้งโลก ขนาดเศรษฐกิจของยุโรป และสหรัฐรวมกันมีมูลค่าเท่ากับ 50% ของเศรษฐกิจโลก ขณะที่จีนนั้นมีมูลค่าเพียง 5% เท่านั้น\n อะไรคือสิ่งที่ทำให้ยุโรปผงาดขึ้นมาเป็นผู้นำโลกในเวลาแค่ 100 ปี?\n เมื่อยอมรับว่าไม่รู้ ในสองตอนที่ผ่านมา ผมได้พูดถึงการปฏิวัติทางวิทยาศาสตร์ในยุโรป ซึ่งเริ่มจากทัศนคติที่ว่า “เรายังไม่ได้รู้ทุกอย่างที่เราจำเป็นต้องรู้”\nวิธีคิดแบบนี้สำคัญมาก เพราะก่อนหน้านี้มนุษย์ต่างเชื่อว่า พวกเขารู้ทุกอย่างที่จำเป็นต้องรู้แล้วผ่านคำสอนของมหาศาสดาทั้งหลาย แต่เมื่อมนุษย์ยอมรับได้ว่าตัวเองไม่รู้ จึงพร้อมออกเดินทางเพื่อค้นคว้าเพื่อให้ได้มาซึ่งความรู้ใหม่ ๆ และความรู้นั้น ก็ถูกนำมาแปรรูปเป็นเทคโนโลยี และเครื่องมือที่นำมาซึ่งอำนาจที่มากมายยิ่งขึ้น\nแผนที่อันว่างเปล่า มนุษย์นั้นชอบเขียน “แผนที่โลก” มาแต่ไหนแต่ไร แม้ว่าตัวเองไม่เคยได้ออกไปสำรวจดินแดนอื่นๆ มาก่อน คนในแอฟริกา เอเชีย และยุโรป ไม่เคยรู้ถึงการมีอยู่ของทวีปอเมริกา ส่วนคนในอเมริกาก็ไม่เคยรับรู้ถึงการมีอยู่ของแอฟริกา เอเชีย และยุโรป แต่แผนที่โลกสมัยนั้น ก็ถูกเขียนขึ้นราวกับว่าทวีปที่เขาไม่รู้จักนี้ไม่มีอยู่ หรือไม่พื้นที่เหล่านั้น ก็จะเต็มไปด้วยภาพสัตว์ประหลาด “แผนที่โลก” สมัยเก่าจึงไม่มีพื้นที่ว่างเผื่อไว้สำหรับดินแดนที่ยังไม่ถูกค้นพบเลย แต่ในศตวรรษที่ 15 และ 16 คนยุโรปเริ่มวาดแผนที่โลกโดย “เว้นพื้นที่ว่าง” เอาไว้เยอะมาก ซึ่งเป็นสัญญาณที่บ่งบอกว่า คนยุโรปยอมรับแล้วว่าพวกเขายังไม่รู้อะไรอีกมาก และยังมีดินแดนอีกมากมายที่พวกเขาอาจยังไม่เคยไปถึง","tags":null,"title":"ตอนที่ 15 - เมื่อยุโรปครองโลก","type":"docs"},{"authors":null,"categories":null,"content":"   นายอนันต์ตัดสินใจเปิดธนาคารแห่งใหม่ นายเอนกทำอาชีพรับเหมาก่อสร้าง เพิ่งได้เงินจากลูกค้ามาเป็นเงินสด 1 ล้านบาท จึงตัดสินใจเอาเงินมาเปิดบัญชีออมทรัพย์กับธนาคารของนายอนันต์ นางอนงค์อยากจะเปิดร้านเบเกอรี่ จึงไปจ้างนายเอนกมาทำร้าน แต่นางอนงค์ไม่มีเงินทุน จึงไปกู้ธนาคารของนายอนันต์มา 1 ล้านบาท เมื่อถึงเวลาต้องจ่ายเงิน นางอนงค์จึงเขียนเช็คสั่งจ่ายนายเอนก 1 ล้านบาท นายเอนกนำเช็คนั้นมาฝากที่ธนาคารของนายอนันต์อีกครั้ง ตอนนี้ตัวเลขในบัญชีเงินฝากของนายเอนกมีเงิน 2 ล้านบาทแล้ว แต่เงินสดที่อยู่ในธนาคารของนายอนันต์มีเพียง 1 ล้านบาทเท่านั้น\nยังไม่พอ เมื่อก่อสร้างร้านเบเกอรี่ไปซักพักงบก็บานปลาย นายเอนกบอกนางอนงค์ว่าต้องใช้งบเพิ่มอีก 1 ล้านบาท นางอนงค์จึงยอมกัดฟันกู้ธนาคารของนายอนันต์เพิ่มอีก 1 ล้านบาทมาจ่ายให้นายเอนก ซึ่งนายเอนกก็เอาไปเข้าบัญชีตามเคย ตอนนี้นายเอนกมี “เงินในบัญชี” 3 ล้านบาท แต่ “เงินสด” ที่อยู่ในธนาคารของนายอนันต์ก็ยังคงมีเพียง 1 ล้านบาทเท่านั้น เงิน 2 ล้านบาทงอกมาจากไหน? ร้านเบเกอรี่ของนางอนงค์ยังไม่เปิดเลยด้วยซ้ำ\nนิยามทุนนิยม ในโลกของทุนนิยม คำที่เป็นคีย์เวิร์ดคือ “การเจริญเติบโต” (growth) ทุนนิยมเชื่อว่า มนุษย์มีศักยภาพที่จะสร้างความเจริญเติบโตไปได้เรื่อย ๆ เงินส่วนต่าง 2 ล้านบาทนั้น แสดงถึงความเชื่อมั่นของธนาคาร ว่าเบเกอรี่ของนางอนงค์จะสามารถสร้างรายได้มากกว่า 2 ล้านบาทในอนาคต\nการที่นางอนงค์ “นำเงินจากอนาคตมาใช้ในตอนนี้” ก็คือการขอสินเชื่อ (credit) จากธนาคารนั่นเอง ในอเมริกา กฎหมายอนุญาตให้สถาบันการเงินปล่อยสินเชื่อได้เป็นมูลค่าเท่ากับ 10 เท่าของเงินสดที่ธนาคารถืออยู่ นั่นหมายความว่าถ้านายอนันต์เปิดธนาคารในอเมริกา นายอนันต์จะปล่อยกู้ได้ถึง 10 ล้านบาท ทั้ง ๆ ที่ตัวเองมีเงินสดอยู่ในเซฟแค่ 1 ล้านบาทเท่านั้น (นี่คือเหตุผลที่ทำไมธนาคารถึงกลัวนักกลัวหนาเวลาคนแห่ไปถอนเงินสด เพราะถ้าทุกคนถอนหมดบัญชีจริง ๆ ธนาคารจะไม่มีทางมีเงินจ่ายพอแน่นอน)\nจริงๆ สิ่งที่เรียกว่า “สินเชื่อ” นั้นมีมานานแล้ว ตั้งแต่สมัยชาวสุเมเรียนด้วยซ้ำ แต่สินเชื่อในสมัยก่อนนั้น มีมูลค่าเล็กน้อยมากและมีระยะเวลาให้ยืมเพียงสั้น ๆ เหตุผลหลักที่ไม่มีใครปล่อยสินเชื่อเยอะ ๆ หรือนาน ๆ ก็เพราะว่า ก่อนปี 1500 นั้น คนส่วนใหญ่เชื่อว่าเศรษฐกิจจะไม่โตไปกว่านี้แล้ว พูดง่าย ๆ ก็คือคนมองว่าเศรษฐกิจนี้เป็นพายแค่ชิ้นเดียว ที่ต้องแบ่งกันทุกคน ถ้ามีคนได้ก็ต้องมีคนเสีย ถ้านางอนงค์เปิดร้านเบเกอรี่ขึ้นมาแล้วขายดี แสดงว่าร้านเบเกอรี่อีกร้านหนึ่ง ต้องสูญเสียรายได้หรือลูกค้า ทุกอย่างคือ zero-sum game\nคนสมัยเก่าจึงไม่เชื่อเรื่องการเจริญเติบโต ถ้าชนชั้นสูงมีเงินเหลือกินเหลือใช้ เขาก็จะเอาไปบริจาค หรือไม่ก็จะใช้มันไปอย่างสุรุ่ยสุร่าย กับเสื้อผ้าสุดหรูหรือการจัดงานเลี้ยงเต้นรำ ไม่มีใครคิดจะเอาเงินไปลงทุนเพื่อให้เงินงอกเงยแต่อย่างใด\nแต่ทัศนคติของมนุษย์ก็เปลี่ยนไปพร้อมกับการมาถึงของการปฏิวัติวิทยาศาสตร์ การคิดค้นเครื่องมือใหม่ๆ อย่างเครื่องจักรไอน้ำ หรือการค้นพบดินแดนใหม่ๆ อย่างทวีปอเมริกา ทำให้ชาวยุโรปเริ่มเชื่อว่าพายชิ้นนี้สามารถใหญ่ขึ้นได้ (the pie is getting bigger) การที่ร้านเบเกอรี่ของนางอนงค์ขายดีไม่จำเป็นต้องทำให้ร้านเบเกอรี่อื่น ๆ ยอดขายตก ในปี 1776 นายอดัม สมิธ (Adam Smith) ได้เขียนหนังสือ The Wealth of Nations ที่กลายมาเป็นคัมภีร์ขึ้นหิ้งของนักเศรษฐศาสตร์\nในบทที่ 8 สมิธ บอกว่า หากเจ้าของธุรกิจมีกำไรเหลือ เขาก็จะนำกำไรนั้นมาซื้อเครื่องจักร และจ้างคนเพิ่มเพื่อจะทำกำไรให้มากขึ้นอีก ซึ่งก็จะทำให้เขาสามารถซื้อเครื่องจักรและจ้างคนได้มากกว่าเดิม ดังนั้นความมั่งคั่งของคนหนึ่งคนจึงหมายถึงความมั่งคั่งและรุ่งเรืองของสังคม ฟังดูเป็นประโยคที่ธรรมดามากสำหรับพวกเรา แต่ในสมัยนั้นนี่ถือเป็นการปฏิวัติทางความคิดของมนุษย์เลยก็ว่าได้ เพราะเป็นครั้งแรกที่มีคนออกมาบอกว่า การตอบสนองความโลภของคน ๆ หนึ่งจะช่วยให้สังคมดีขึ้นได้ (เจ้าของธุรกิจมีเงินมากขึ้น แต่คนจำนวนมากก็จะมีงานทำและมีรายได้เพิ่มขึ้นเช่นกัน)\nเบอร์หนึ่งในยุโรป ในปี 1484 คริสโตเฟอร์ โคลัมบัส ได้เข้าเฝ้ากษัตริย์ของโปรตุเกส และเสนอแผนว่าจะล่องเรือไปทางตะวันตก เพื่อค้นหาเส้นทางการค้าสายใหม่กับชาติเอเชีย โปรเจ็คนี้มีความเสี่ยงสูงมากเพราะต้องใช้เงินมหาศาลเพื่อซื้อเรือ จ้างคนและซื้อเสบียง และสุดท้ายอาจจะกลับมามือเปล่าก็ได้ กษัตริย์ของโปรตุเกสจึงตอบปฏิเสธไป\nแต่โคลัมบัสก็ไม่ยอมแพ้ เที่ยว pitch งานของเขากับผู้มีเงินทุนในอิตาลี ฝรั่งเศส อังกฤษ แต่ก็คว้าน้ำเหลว จนสุดท้ายเขาก็ขายโปรเจ็คนี้ให้กับกษัตริย์ Ferdinand และราชินี Isabella แห่งสเปนได้สำเร็จ (ตอนนั้นสเปนเพิ่งรวมประเทศ) การค้นพบทวีปอเมริกาในคราวนั้น สร้างรายได้ให้กับสเปนมหาศาลจนสเปนกลายมาเป็นชาติมหาอำนาจของยุโรปในศตวรรษที่ 16\nแต่ในศตวรรษที่ 17 สเปนก็เสียแชมป์ให้กับประเทศเล็ก ๆ อย่างฮอลแลนด์ โดยเหตุผลหลักคือฮอลแลนด์มีระบบการเงินที่มั่นคงกว่า และมีกระบวนการยุติธรรมที่แข็งแกร่งกว่าสเปน (ซึ่งทุกอย่างยังขึ้นอยู่กับกษัตริย์และราชวงศ์) เงินของนักลงทุนจึงไหลไปที่อัมสเตอร์ดัมและทำให้พ่อค้าชาวฮอลแลนด์สามารถส่งเรือไปขนสินค้าจากอเมริกาและเอเชียกลับมาขายได้มากมาย จะบอกว่าจักรวรรดิดัทช์นั้นถูกสร้างโดยพ่อค้าก็คงไม่ผิดนัก\nช่วงปลายศตวรรษที่ 17 การแพ้สงครามนอกประเทศของฮอลแลนด์หลายต่อหลายครั้งทำให้ฮอลแลนด์เสียบัลลังก์เบอร์ 1 ของยุโรปไป (ปี 1664 ฮอลแลนด์ต้องเสียเมืองที่ชื่อว่า New Amsterdam ริมฝั่งแม่น้ำฮัดสันให้กับอังกฤษ ชื่อของเมืองจึงถูกเปลี่ยนเป็น New York ตั้งแต่นั้นมา) ในช่วงนั้นประเทศที่แข่งขึ้นมาเป็นเบอร์หนึ่งของยุโรปคือ ฝรั่งเศสกับอังกฤษ ฝรั่งเศสนั้นได้เปรียบอังกฤษ ในหลาย ๆ ด้านเพราะมีประชากรมากกว่าและมีกองทัพที่ใหญ่กว่า แต่แล้วฝรั่งเศสก็สะดุดขาตัวเอง จากเหตุการณ์อื้อฉาวที่มีชื่อว่าฟองสบู่มิสซิสซิปปี (Mississippi Bubble) ตอนนั้นบริษัทชื่อมิสซิสซิปปี ซึ่งก่อตั้งในฝรั่งเศส และมีสายสัมพันธ์แนบแน่นกับชนชั้นสูง ต้องการจะยึดครองดินแดนหนึ่งในรัฐมิสซิสซิปปีเพื่อตั้งเมืองใหม่ชื่อ New Orleans บริษัทจึงระดมทุน ด้วยการขายหุ้นในตลาดหลักทรัพย์ในกรุงปารีส\nจริง ๆ ที่ดินในนิวออร์ลีนส์แทบไม่มีอะไรเลยนอกจากหนองบึงและจระเข้ แต่ทางบริษัทก็ได้ปล่อยข่าวลือว่า นี่คือดินแดนที่อุดมสมบูรณ์และเต็มไปด้วยโอกาสมากมาย ชนชั้นกลางและเหล่าเศรษฐีใหม่ต่างก็ตื่นเต้นกับข่าวนี้ จึงเข้าไปซื้อหุ้นจนราคาพุ่งจาก 500 เป็น 10,000 เหรียญต่อหุ้นในเวลาเพียงแค่ไม่กี่เดือน แต่พอตลาดเริ่มรู้ตัว ว่าราคาสูงเกินจริง คนก็เริ่มเทขาย ราคาจึงตกลงมาอย่างน่าใจหาย รัฐบาลพยายามเข้ามาช่วยอุ้มด้วยการเข้าไปช้อนหุ้นจนเงินหมดคลัง รัฐมนตรีคลังจึงสั่งให้พิมพ์ธนบัตรเพิ่มเพื่อมาซื้อหุ้นอีก การทำอย่างนี้ทำให้เศรษฐกิจทั้งหมดของฝรั่งเศสอยู่ในฟองสบู่ แถมยังไม่สามารถแก้วิกฤติได้ด้วยเพราะหุ้นของมิสซิสซิปปีตกจาก 10,000 มาเป็น 1,000 เหรียญก่อนที่จะไม่มูลค่าเหลือเลย รัฐบาลฝรั่งเศสจึงถังแตกและมีเพียงกระดาษหุ้นที่ไร้ค่า นี่คือวิกฤติเศรษฐกิจยุโรปที่ใหญ่ที่สุดในศตวรรษนี้\nความผิดพลาดคราวนั้นทำให้ประเทศอื่น ๆ ไม่กล้าให้ฝรั่งเศสยืมเงิน หรือถึงให้ยืมก็เก็บดอกเบี้ยสูงมาก ทุนส่วนใหญ่จึงไหลไปอยู่กับประเทศอังกฤษแทน อังกฤษใช้สถาบันการเงินที่แข็งแกร่งในการสนับสนุนการยึดครองดินแดนใหม่ ไม่ว่าจะเป็นอเมริกาเหนือหรืออินเดีย ซึ่งล้วนแล้วแต่เป็นการยึดครองโดยบริษัท หาใช่โดยรัฐบาล (บริษัทยักษ์ใหญ่ในสมัยนั้นจะขนทหารรับจ้างไปด้วยเวลาต้องการไปยึดเมืองในอเมริกาหรือเอเชีย)\nตลาดเสรี คนที่สนับสนุนตลาดเสรีมักจะมองว่ารัฐบาลควรจะเข้ามาแทรกแซงตลาดทุนให้น้อยที่สุด เพราะรัฐบาล มักออกนโยบายที่ทำให้ตลาดไม่มีประสิทธิภาพ เช่นเก็บภาษีแพงๆ เพื่อนำมาเป็นสวัสดิการสำหรับคนตกงาน (ซึ่งทำให้ฐานเสียงของรัฐบาลดีขึ้นแต่คนกลุ่มหนึ่งก็จะรับเงินโดยที่ไม่ได้สร้างผลผลิตอะไร) สู้เอาเงินที่จะเก็บภาษีมาไว้กับนายทุนดีกว่า เพราะนายทุนจะเอาเงินนั้นไปเปิดโรงงาน และจ้างคนเพิ่มซึ่งย่อมจะทำให้สังคมโดยรวมดีขึ้น แต่การปล่อยให้ตลาดทำงานอย่างเสรีนั้นดีจริงหรือ? เพราะทรัพยากรที่สำคัญที่สุดสำหรับเศรษฐกิจคือ “ความเชื่อมั่น” ซึ่งความเชื่อมั่น อาจถูกสั่นคลอนได้ตลอดจากการต้มตุ๋นหลอกลวง จึงเป็นหน้าที่ของรัฐที่จะปกป้องระบบเศรษฐกิจ ด้วยการออกกฎหมาย และและตรวจสอบไม่ให้เสือสิงห์กระทิงแรดทั้งหลาย เข้ามาเอารัดเอาเปรียบ เมื่อใดก็ตามที่รัฐทำหน้าที่นี้บกพร่อง ความเชื่อมั่นก็จะหดหาย และเศรษฐกิจก็จะโกลาหลเหมือนอย่างตอนที่เกิดฟองสบู่มิสซิสซิปปี หรือวิกฤติ subprime ในอเมริกาในปี 2007\nยังมีอีกเหตุผลสำคัญที่เราไม่ควรปล่อยให้ตลาดเสรีทำงานอย่างอิสระ ก่อนการมาถึงของทุนนิยม “น้ำตาล” เป็นอาหารที่หายากมากในยุโรป มันจะถูกนำเข้าจากตะวันออกกลางในราคาที่แพงลิบลิ่วเพื่อนำมาใช้เป็น “วัตถุดิบลับ” ในการทำอาหารจานพิเศษสำหรับชนชั้นสูง แต่หลังจากทวีปอเมริกาถูกค้นพบ หนึ่งในธุรกิจที่เฟื่องฟูที่สุดคือการทำไร่อ้อย คนยุโรปจึงเข้าถึงน้ำตาลได้ในราคาที่ถูกลงมาก ต้นศตวรรษที่ 17 ไม่มีชาวอังกฤษคนไหนบริโภคน้ำตาลเลย แต่ในศตวรรษที่ 19 ชาวอังกฤษบริโภคน้ำตาลถึงปีละ 8 กิโลกรัม น้ำตาลนั้นมาจากต้นอ้อย แต่การทำไร่อ้อยนั้นเป็นสิ่งที่ไม่มีใครอยากทำ เพราะต้องตากแดดแถมยังมีโอกาสสูงที่จะเป็นโรคมาเลเรียอีกด้วย หากจะยอมจ่ายเงินจ้างใครมาย่อมจะทำให้ต้นทุนสูงเกินไป\nพ่อค้าหัวใสก็เลยพบทางออกด้วยการใช้แรงงานทาส ในช่วงศตวรรษที่ 16-19 ชาวแอฟริกาถึง 10 ล้านคนถูกขายไปเป็นแรงงานทาสในอเมริกา โดย 70% ของคนเหล่านั้นถูกส่งมาทำงานในไร่อ้อย เรารู้กันดีอยู่แล้วว่าทาสเหล่านี้มีชีวิตที่แย่แค่ไหน ต้องถูกกดขี่ข่มเหง ราวกับเขาไม่ใช่มนุษย์ เพียงเพื่อให้คนยุโรปได้จิบชากาแฟที่ใส่น้ำตาล\nการขายแรงงานทาสนี้ไม่ได้ถูกจัดระเบียบโดยรัฐบาลประเทศไหนเลย มันเป็นเรื่องทางการค้าล้วน ๆ บริษัทค้าทาสมากมายขายหุ้นในตลาดหลักทรัพย์ในกรุงลอนดอน ปารีส และอัมเสตอร์ดัม เพื่อนำเงินไปซื้อเรือ หาลูกเรือและทหาร จากนั้นจึงแล่นเรือไปซื้อทาสในแอฟริกา นำทาสไปขายให้กับเจ้าของสวนอ้อยในอเมริกา นำเงินนั้นไปซื้อน้ำตาล เมล็ดกาแฟ โกโก้ ยาสูบ แล้วนำกลับมาขายทำกำไรในยุโรปก่อนจะออกเรือใหม่อีกครั้ง ธุรกิจค้าทาสเป็นธุรกิจที่ทำกำไรดี และผู้ถือหุ้นบริษัทเหล่านี้จะได้ผลตอบแทนเฉลี่ยปีละ 6%\nนาซีและสงครามครูเสดฆ่าคนไปมากมายเพราะความเกลียดชัง แต่ทุนนิยมนั้นฆ่าคนไปมากมายเพราะความโลภและความเมินเฉย การค้าทาสไม่ได้เกิดจากการเหยียดสีผิวหรือความรังเกียจคนแอฟริกา จริง ๆ แล้วเจ้าของไร่อ้อยแทบไม่เคยเจอทาสเหล่านี้ด้วยซ้ำ เพราะเจ้าของไร่อ้อยส่วนใหญ่ไม่ได้อาศัยอยู่ในไร่อ้อย สิ่งเดียวที่เขาสนใจก็คือตัวเลขในบัญชีกำไรขาดทุน ส่วนผู้ถือหุ้นบริษัทค้าทาสก็เป็นชนชั้นกลางคล้าย ๆ กับเราที่เป็นคนจิตใจดี ทำงานสุจริต ชอบฟังเพลง แถมยังใจบุญสุนทานอีกด้วย นี่คือเหตุผลที่เราไม่ควรปล่อยให้ตลาดทำงานได้อย่างเสรีเกินไป เพราะตลาดไม่มีชีวิตจิตใจ สิ่งเดียวที่สำคัญสำหรับมันคือกำไรและ “การเติบโต” โดยไม่สนว่าระหว่างทางจะสร้างความเดือดร้อนให้ผู้คนมากมายขนาดไหน\nแล้วจะเอายังไง? แม้นระบอบทุนนิยมจะมีข้อเสียมากมาย แต่ผู้สนับสนุนทุนนิยมก็มักจะให้เหตุผลแก้ต่างสองข้อ\n ข้อแรกคือ สำหรับสังคมยุคโมเดิร์นมันยังเป็นระบอบเดียวที่เวิร์ค มนุษย์เคยทดลองอีกระบอบหนึ่งคือคอมมิวนิสต์ แต่มันก็สร้างความเสียหายมากเสียจน ไม่มีใครอยากกลับไปใช้ระบอบนั้นอีก เราจึงไม่เหลือทางเลือกอื่นใด นอกจากเรียนรู้ที่จะอยู่กับทุนนิยมให้เป็น\n อีกข้อก็คือ ขอให้รออีกนิดนึง พายชิ้นนี้กำลังใหญ่ขึ้นเรื่อย ๆ และแม้มันจะไม่สามารถทำให้ทุกคน ได้รับประโยชน์อย่างเท่าเทียมกันได้ แต่คนก็เชื่อว่าวันหนึ่งพายชิ้นนี้จะใหญ่พอที่จะตอบโจทย์ขั้นพื้นฐานสำหรับมนุษย์ทุกคน\n  ซึ่งจะว่าไปคำชี้แจงนี้ก็พอฟังขึ้นอยู่ อย่างน้อยก็ในเชิงปริมาณ เพราะเมื่อเทียบกับ 100 ปีที่แล้ว อายุขัยเฉลี่ยของเราเพิ่มขึ้น อัตราการตายของเด็กก็ลดลง ปริมาณอาหารที่เราบริโภคต่อหัว ก็เยอะขึ้นแม้ว่าประชากรโลกจะสูงขึ้นมาหลายเท่าตัวก็ตาม แต่เศรษฐกิจของเราจะโตไปได้นานแค่ไหน? เพราะพายทุกชิ้นจำเป็นต้องใช้วัตถุดิบและพลังงาน มีผู้ทำนายว่าอีกไม่ช้ามนุษย์ ก็จะใช้ทรัพยากรจนหมดโลก แล้วถึงวันนั้นเราจะอยู่กันอย่างไร?\n ที่มาบทความ : https://anontawong.com\n ","date":1589065200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589065200,"objectID":"fcc057efb8cf7898e27b526370769def","permalink":"https://example.com/book/sapiens/sapiens-16/","publishdate":"2020-05-10T00:00:00+01:00","relpermalink":"/book/sapiens/sapiens-16/","section":"book","summary":"นายอนันต์ตัดสินใจเปิดธนาคารแห่งใหม่ นายเอนกทำอาชีพรับเหมาก่อสร้าง เพิ่งได้เงินจากลูกค้ามาเป็นเงินสด 1 ล้านบาท จึงตัดสินใจเอาเงินมาเปิดบัญชีออมทรัพย์กับธนาคารของนายอนันต์ นางอนงค์อยากจะเปิดร้านเบเกอรี่ จึงไปจ้างนายเอนกมาทำร้าน แต่นางอนงค์ไม่มีเงินทุน จึงไปกู้ธนาคารของนายอนันต์มา 1 ล้านบาท เมื่อถึงเวลาต้องจ่ายเงิน นางอนงค์จึงเขียนเช็คสั่งจ่ายนายเอนก 1 ล้านบาท นายเอนกนำเช็คนั้นมาฝากที่ธนาคารของนายอนันต์อีกครั้ง ตอนนี้ตัวเลขในบัญชีเงินฝากของนายเอนกมีเงิน 2 ล้านบาทแล้ว แต่เงินสดที่อยู่ในธนาคารของนายอนันต์มีเพียง 1 ล้านบาทเท่านั้น\nยังไม่พอ เมื่อก่อสร้างร้านเบเกอรี่ไปซักพักงบก็บานปลาย นายเอนกบอกนางอนงค์ว่าต้องใช้งบเพิ่มอีก 1 ล้านบาท นางอนงค์จึงยอมกัดฟันกู้ธนาคารของนายอนันต์เพิ่มอีก 1 ล้านบาทมาจ่ายให้นายเอนก ซึ่งนายเอนกก็เอาไปเข้าบัญชีตามเคย ตอนนี้นายเอนกมี “เงินในบัญชี” 3 ล้านบาท แต่ “เงินสด” ที่อยู่ในธนาคารของนายอนันต์ก็ยังคงมีเพียง 1 ล้านบาทเท่านั้น เงิน 2 ล้านบาทงอกมาจากไหน? ร้านเบเกอรี่ของนางอนงค์ยังไม่เปิดเลยด้วยซ้ำ\nนิยามทุนนิยม ในโลกของทุนนิยม คำที่เป็นคีย์เวิร์ดคือ “การเจริญเติบโต” (growth) ทุนนิยมเชื่อว่า มนุษย์มีศักยภาพที่จะสร้างความเจริญเติบโตไปได้เรื่อย ๆ เงินส่วนต่าง 2 ล้านบาทนั้น แสดงถึงความเชื่อมั่นของธนาคาร ว่าเบเกอรี่ของนางอนงค์จะสามารถสร้างรายได้มากกว่า 2 ล้านบาทในอนาคต\nการที่นางอนงค์ “นำเงินจากอนาคตมาใช้ในตอนนี้” ก็คือการขอสินเชื่อ (credit) จากธนาคารนั่นเอง ในอเมริกา กฎหมายอนุญาตให้สถาบันการเงินปล่อยสินเชื่อได้เป็นมูลค่าเท่ากับ 10 เท่าของเงินสดที่ธนาคารถืออยู่ นั่นหมายความว่าถ้านายอนันต์เปิดธนาคารในอเมริกา นายอนันต์จะปล่อยกู้ได้ถึง 10 ล้านบาท ทั้ง ๆ ที่ตัวเองมีเงินสดอยู่ในเซฟแค่ 1 ล้านบาทเท่านั้น (นี่คือเหตุผลที่ทำไมธนาคารถึงกลัวนักกลัวหนาเวลาคนแห่ไปถอนเงินสด เพราะถ้าทุกคนถอนหมดบัญชีจริง ๆ ธนาคารจะไม่มีทางมีเงินจ่ายพอแน่นอน)","tags":null,"title":"ตอนที่ 16 - สวัสดีทุนนิยม","type":"docs"},{"authors":null,"categories":null,"content":"   เมื่อ 500 ปีที่แล้วเกิดการปฏิวัติทางวิทยาศาสตร์ ทำให้มนุษย์เชื่อว่าความรู้ใหม่ๆ จะสามารถนำไปสร้างเทคโนโลยีและเครื่องมือใหม่ๆ ที่จะช่วยให้ชีวิตดีขึ้นได้ การปฏิวัติครั้งนี้มาพร้อมกับการล่าอาณานิคมและระบอบทุนนิยมที่ขับเคลื่อนให้โลกพัฒนาในเชิงวัตถุอย่างก้าวกระโดด มาตอนนี้เราจะพูดถึงอีกการปฏิวัติหนึ่ง นั่นคือ Industrial Revolution หรือการปฏิวัติอุตสาหรรมที่เกิดขึ้นเมื่อประมาณ 200 ปีที่แล้ว\nแล้วแต่พระอาทิตย์ มนุษย์นั้นรู้จักการใช้พลังงานจากหลากหลายแหล่งมานานมากแล้ว เช่นเผาไม้เพื่อเอาความร้อนมาต้มน้ำ หรือใช้พลังลมในการแล่นเรือ แต่สิ่งหนึ่งที่มนุษย์ไม่เคยทำเป็นคือการแปรรูปพลังงาน มนุษย์ไม่รู้วิธีการเปลี่ยนพลังงานความร้อน ไปทำให้อย่างอื่นเคลื่อนไหวได้ และไม่รู้ว่าจะนำพลังงานที่ได้จากลม มาเปลี่ยนเป็นความร้อนได้อย่างไร\nวิธีแปรรูปพลังงานอย่างเดียวที่มนุษย์รู้จักคือการเปลี่ยนอาหารที่กินเข้าไป ให้กลายเป็นกำลังของกล้ามเนื้อ โดยพลังงานที่อยู่ในอาหาร ก็คือพลังงานจากแสงอาทิตย์ที่พืชสังเคราะห์มาเก็บไว้ก่อนที่มนุษย์หรือสัตว์อื่น ๆ จะนำไปทาน ดังนั้นในประวัติศาสตร์ที่ผ่านมา กิจกรรมต่าง ๆ ของมนุษย์จึงถูกกำกับด้วยวงจรสองอย่าง ได้แก่วงจรการออกดอกออกผลของพืช และวงจรการหมุนรอบดวงอาทิตย์ของโลก ในฤดูหนาวที่แดดไม่ค่อยมี พืชพันธุ์ไม่ออกดอกออกผล ชาวนาก็เก็บเกี่ยวได้เพียงเล็กน้อย ส่วยและภาษีจึงต่ำ ทหารไม่มีเสบียง และพระราชาแคว้นต่าง ๆ จึงเก็บตัวอยู่แต่ในวัง ในฤดูที่พระอาทิตย์ร้อนแรง ผลหมากรากไม้เต็มทุ่งให้ชาวนาได้เก็บเกี่ยว รัฐเก็บส่วยได้มาก ทหารมีกำลังวังชาและเริ่มลับดาบ พระราชาจึงนัดประชุมกับเหล่าอำมาตย์เพื่อวางแผนเปิดศึกกับต่างเมือง\nความลับที่อยู่ในครัว จริง ๆ แล้วควรจะมีแม่บ้านซักคนคิดออกนานแล้วว่า พลังงานความร้อนสามารถนำมาเปลี่ยนเป็นพลังงานจลน์ ที่ทำให้สิ่งของเคลื่อนไหวได้ เพราะมนุษย์เราต้มน้ำมาหลายปีดีดัก และเวลาน้ำเดือดเราก็จะได้ยินเสียงฝากากระทบกับหม้อ แต่กลับไม่มีใครเอะใจคิดจะนำมันไปประยุกต์ใช้กับเรื่องอื่น จุดเปลี่ยนเกิดขึ้นในศตวรรษที่ 18 ที่ประเทศอังกฤษ เมื่อเศรษฐกิจขยายตัว เมืองจึงมีขนาดใหญ่ขึ้นเรื่อย ๆ รัฐจำเป็นต้องถางป่าเพื่อสร้างแหล่งที่อยู่อาศัย เมื่อป่าหายไปอังกฤษจึงเหลือไม้ให้ใช้เป็นฟืนน้อยลงทุกที อังกฤษจึงเริ่มหันมาเผาถ่านหิน (coal) แทน\nแต่เหมืองถ่านหินส่วนใหญ่อยู่ในพื้นที่ที่เป็นหนองน้ำ ถ่านหินชั้นลึกๆ จึงเข้าถึงได้ยากเพราะมีน้ำท่วมปิดอยู่ และปัญหานี้เองที่กระตุ้นให้คนคิดค้น “เครื่องจักรไอน้ำ” (steam engine) ซึ่งต่อมา ได้กลายเป็นพระเอกของการปฏิวัติอุตสาหกรรม เครื่องจักรไอน้ำมีวิธีการทำงานง่าย ๆ คือคุณเผาเชื้อเพลิงอะไรบางอย่าง และนำความร้อนที่ได้นั้นมาต้มน้ำ เมื่อน้ำเดือดก็จะเกิดไอน้ำพวยพุ่งขึ้นมาจนไปดันลูกสูบให้ขยับ นี่คือครั้งแรกที่มนุษย์สามารถแปรรูป “ความร้อน” ให้กลายเป็น “การเคลื่อนไหว” ได้\nเครื่องจักรไอน้ำถูกใช้เพื่อนำมาวิดน้ำออกจากเหมืองถ่านหินอยู่นับสิบปี ก่อนที่คนอังกฤษ จะลองเอามันไปปรับใช้กับเครื่องทอผ้า ซึ่งก็ทำให้อังกฤษก้าวขึ้นมาเป็นศูนย์กลางอุตสาหกรรมสิ่งทอของโลก ในปี 1825 วิศวกรชาวอังกฤษ ลองใช้เครื่องจักรไอน้ำขับเคลื่อนรถไฟที่ขนถ่านหินเต็มขบวน และทำให้มันวิ่งไปตามรางเหล็กได้ถึง 20 กิโลเมตร อีกเพียง 5 ปีต่อมารถไฟเชิงพาณิชย์ขบวนแรกของโลกก็เปิดให้บริการระหว่างเมืองแมนเชสเตอร์และลิเวอร์พูล ในชั่วเวลาเพียงสองทศวรรษ อังกฤษก็มีทางรถไฟยาวนับหมื่นกิโลเมตร\nจากนั้นมามนุษย์ก็หลงใหลการการแปรรูปพลังงานด้วยวิธีอื่น ๆ ก่อนปี 1900 น้ำมันถูกใช้เพียงเอาไว้เคลือบหลังคา หรือเป็นสารหล่อลื่นในเพลาล้อ แต่เมื่อมนุษย์คิดค้นเครื่องยนต์สันดาปภายในได้ (internal combustion engine) น้ำมันก็กลายมาเป็นขุมทรัพย์ ที่ทุกประเทศต่างอยากมีไว้ในครอบครองขนาดที่ยอมทำสงครามเข่นฆ่ากัน\nพลังงานไฟฟ้าก็เป็นอีกหนึ่งตัวอย่างที่ของพลังงานน้องใหม่มาแรง เมื่อ 200 ปีที่แล้ว ไฟฟ้าถูกใช้ในการทดลองทางวิทยาศาสตร์และเอาไว้เล่นมายากลบ้าน ๆ เท่านั้น แต่แล้วนักวิทยาศาสตร์ก็ได้พัฒนามัน จนไฟฟ้ากลายมาเป็นส่วนสำคัญในชีวิตจนกลายเป็นสิ่งที่เราขาดไม่ได้ไปแล้ว\nมหาสมุทรแห่งพลังงาน มีคนเคยทำนายไว้นานแล้วว่า หากมนุษย์ใช้พลังงานอย่างสุรุ่ยสุร่าย พลังงานจะหมดโลก แต่ในช่วงหลายร้อยปีที่ผ่านมา เมื่อใดก็ตามที่แหล่งพลังงานหนึ่งทำท่าจะขาดแคลน มนุษย์ก็จะค้นพบเทคโนโลยีใหม่ๆ ที่ทำให้เรามีพลังงานใช้มากกว่าเดิมเสียอีก เราจึงได้เรียนรู้ว่าพลังงานนั้นมีมากมายไม่จำกัด สิ่งที่จำกัดคือความรู้ของเราในการนำพลังงานนั้นมาใช้ต่างหาก\n พลังงานที่อยู่ในเชื้อเพลิงปิโตรเลียมนั้น ถือว่าจิ๊บจ๊อยมากเมื่อเทียบกับพลังงานจากแสงอาทิตย์ที่โลกได้รับมาฟรี ๆ ปีละ 3,776,800 exajoules\n 1 joule คือพลังงานที่เราใช้ในการยกแอปเปิ้ลให้สูงขึ้น 1 เมตร\n 1 exajoules = 1 ตามด้วยศูนย์ 18 ตัว\n  ในพลังงานเกือบสี่ล้านเอ๊กซาจูลส์ที่มาจากแสงอาทิตย์นี้ ต้นไม้ทั่วโลกจะสังเคราะห์แสงและดูดซับพลังงานไว้ได้ประมาณ 3,000 exajoules และพลังงานที่คนทั้งโลกใช้ต่อปีคือ 500 exajoules หรือเท่ากับพลังงานที่แสงอาทิตย์ส่งมายังโลกภายในเวลา 90 นาทีเท่านั้น เรายังถูกรายล้อมด้วยพลังงานอื่น ๆ อีก เช่นพลังงานนิวเคลียร์และพลังงานแรงโน้มถ่วง (ที่เห็นได้ชัดๆ คือน้ำขึ้นน้ำลงอันเกิดจากแรงโน้มถ่วงที่ดวงจันทร์มีต่อโลก) มนุษย์เราจึงถูกรายล้อมด้วยมหาสมุทรแห่งพลังงาน เหลือเพียงแต่ว่าเราจะค้นพบวิธีดึงพลังงานเหล่านั้นมาใช้ได้รึเปล่า\nจานอลูมิเนียมของนโปเลียน ประโยชน์อีกข้อที่มนุษย์ได้จากการแปรรูปพลังงาน คือมันได้ช่วยให้เราคิดค้นสสารใหม่ๆ เช่นพลาสติก หรือค้นพบธาตุใหม่ๆ อย่างซิลิคอนหรืออลูมิเนียม\nอลูมิเนียมถูกค้นพบในช่วงปี 1820 แต่การสกัดอลูมิเนียมออกมาในสมัยนั้นเป็นเรื่องที่ทำได้ยากมาก เป็นเวลาหลายทศวรรษที่อลูมิเนียมมีราคาแพงยิ่งกว่าทอง ช่วงปี 1860 จักรพรรดินโปเลียนที่ 3 (คนละองค์กับองค์ที่ดังที่สุด) จะจัดเตรียมจานชามอลูมิเนียม ให้เฉพาะแขกซุเปอร์วีไอพีเท่านั้น ส่วนแขกที่สำคัญรองลงมาจะได้กินจากจานทองคำเท่านั้น!\nถ้าคุณลองหยิบกระปุกครีมกันแดดหรือครีมทามือขึ้นมาดูฉลาก คุณจะเห็นว่าส่วนผสมมีแต่ชื่อประหลาด ๆ ทั้งนั้น เกือบทั้งหมดของส่วนผสมเหล่านี้เพิ่งถูกคิดค้นในช่วง 200 ปีที่ผ่านมานี้เอง\nปฏิวัติเกษตรกรรมครั้งที่สอง เวลาได้ยินคำว่าการปฏิวัติอุตสาหกรรม เรามักจะนึกถึงภาพโรงงานที่มีแต่ปล่องควันดำเต็มไปหมด แต่ผู้เขียนบอกว่าการปฏิวัติอุตสาหกรรมนั้น โดยเนื้อแท้แล้วคือการปฏิวัติเกษตรกรรมครั้งที่ 2 นั่นเอง เมื่อมนุษย์คิดค้นเครื่องจักรไอน้ำได้ ผลิตภาพ (productivity) ของมนุษย์ก็พุ่งทะยาน งานที่เคยต้องใช้แรงงานคน ก็ถูกแทนที่ด้วยเครื่องจักร ปุ๋ยเคมีถูกคิดค้นเพื่อเพิ่มผลผลิตต่อไร่ ตู้เย็นและยานพาหนะ ทำให้สามารถเก็บอาหารได้ยาวนาน และส่งอาหารออกไปยังประเทศต่าง ๆ ได้ทั่วโลก ช่วงเวลาเดียวกันนี้เองที่แนวคิดมนุษย์นิยมเริ่มเฟื่องฟู (humanist religions แนวคิดเรื่องสิทธิมนุษยชน ความเท่าเทียม และการยกให้ประโยชน์ต่อมนุษย์เป็นเรื่องสำคัญกว่าสิ่งใด) สัตว์ที่อยู่ในฟาร์มจึงถูกลดค่า จากสิ่งมีชีวิตที่มีหัวใจและเจ็บปวดได้ให้กลายเป็นเพียง “ผลิตภัณฑ์”\nยกตัวอย่างอุตสาหกรรมฟาร์มไข่ ลูกไก่ที่เพิ่งฟักออกมาจะถูกส่งไปตามสายพาน ลูกไก่ตัวเมียจะถูกคัดเก็บไว้ ลูกไก่ตัวผู้หรือลูกไก่ที่ไม่สมประกอบ จะถูกคัดออกส่งไปห้องรมแก๊ส เสร็จแล้วจึงถูกส่งลงเครื่องบด ในแต่ละปีลูกไก่ตัวผู้นับร้อยล้านตัวจะถูกฆ่าในรูปแบบนี้ ในตอนที่แล้วเราพูดถึงการค้าทาสแอฟริกัน ที่เกิดขึ้นไม่ใช่เพราะว่าคนยุโรปเหยียดคนผิวสี มันเป็นเพียงกลไกของตลาด อุตสาหกรรมอาหารก็เช่นกัน สัตว์ในฟาร์มจำนวนมากโดนสังหารไม่ใช่เพราะว่ามนุษย์เกลียดชังสัตว์เหล่านี้ มันเป็นเพียงผลลัพธ์ของการปฏิวัติอุตสาหกรรมและทุนนิยมเท่านั้นเอง\n คนดำและลูกไก่ไม่ได้ถูกทารุณเพราะความชิงชังแต่เพราะความชินชา\n ยุคแห่งการช็อปปิ้ง** สองร้อยปีที่ผ่านมา ผลผลิตของมนุษย์เพิ่มขึ้นอย่างมหาศาล แต่หากจะให้สภาวะนี้คงอยู่ได้ การซื้อและการบริโภคก็ต้องเพิ่มขึ้นเป็นเงาตามตัว และนี่คือที่มาของลัทธิบริโภคนิยมเหรือ Consumerism นั่นเอง\nนี่เป็นเรื่องที่ขัดกับหลักการสมัยก่อนที่พร่ำสอนให้คนรู้จักมัธยัสถ์และอดออม ยิ่งถ้าเราเป็นชนชั้นล่างด้วยแล้ว การบริโภคอะไรตามใจกิเลสถือเป็นเรื่องต้องห้าม เพราะการใช้จ่ายอย่างสุรุ่ยสุร่ายนั้นเป็นเรื่องของชนชั้นสูงเท่านั้น แต่เมื่อยุคบริโภคนิยมเฟื่องฟู ทุกอย่างก็เปลี่ยนไป ทุกคนถูกแนะนำว่าเราจะมีความสุขได้ก็ต่อเมื่อเราจับจ่ายใช้สอย ชีวิตคุณจะดีขึ้นถ้าคุณซื้อผลิตภัณฑ์ตัวนี้ คุณจะฟินสุด ๆ ถ้าคุณได้กินอาหารจานนี้ ทุกอย่างจึงกลับด้านจากสมัยก่อน ในอเมริกา คนจนกลายเป็นคนที่มีปัญหาโรคอ้วนมากกว่าคนรวย เพราะได้กินแต่อาหารขยะราคาถูก พอเป็นโรคอ้วนแล้วก็ต้องไปซื้ออาหารหรือยาลดความอ้วนอีก (นายทุนได้เงินสองเด้งเลย) เม็ดเงินที่คนอเมริกันใช้ไปกับการซื้อผลิตภัณฑ์ลดความอ้วนนั้นมีขนาดใหญ่พอที่จะซื้ออาหารแจกคนอดอยากทั่วโลกเลยทีเดียว\nส่วนคนที่รวยจริง ๆ แทนที่จะใช้จ่ายอย่างสุรุ่ยสุร่ายเหมือนสมัยก่อน กลับเอาเงินที่มีอยู่ไปลงทุน เพื่อให้งอกเงยตามตำราของทุนนิยม ทุนนิยมและบริโภคนิยม นั้นจึงเป็นเหมือนหัวและก้อยของเหรียญเดียวกัน ที่มีบทบัญญัติเพียงสองประการ\n บัญญัติของคนรวยก็คือ “ลงทุน!” ส่วนบัญญัติของคนจนก็คือ “ซื้อ!”  ถ้ามองทุนนิยมและลัทธิบริโภคนิยมเป็นศาสนา ก็ถือได้ว่ามันประสบความสำเร็จมากยิ่งกว่าศาสนาหลัก ๆ ของโลกเสียอีก ศาสนาแต่ก่อนเก่าสอนว่าสวรรค์นั้นรออยู่ แต่เราต้องมีความเมตตา มีความอดทน มีความเสียสละ และระงับกิเลสให้ได้ แต่นี่เป็นเรื่องที่ยากยิ่ง ชาวพุทธส่วนใหญ่จึงไม่ได้เจริญรอยตามพระพุทธเจ้า และชาวคริสต์ส่วนใหญ่ก็ไม่ได้ปฏิบัติตามพระเยซู ทุนนิยมและบริโภคนิยมจึงนับเป็นศาสนาแรกที่ผู้คนทำตามความคาดหวังของระบอบอย่างเคร่งครัด โลกนี้จะเป็นดั่งสรวงสวรรค์ หากคนรวยยังไม่คิดจะหยุดรวย และคนส่วนใหญ่ยังใช้เงินซื้อความสุขอยู่ร่ำไป\n ที่มาบทความ : https://anontawong.com\n ","date":1589065200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589065200,"objectID":"77e1037111967677b4e013f2a88d41f8","permalink":"https://example.com/book/sapiens/sapiens-17/","publishdate":"2020-05-10T00:00:00+01:00","relpermalink":"/book/sapiens/sapiens-17/","section":"book","summary":"เมื่อ 500 ปีที่แล้วเกิดการปฏิวัติทางวิทยาศาสตร์ ทำให้มนุษย์เชื่อว่าความรู้ใหม่ๆ จะสามารถนำไปสร้างเทคโนโลยีและเครื่องมือใหม่ๆ ที่จะช่วยให้ชีวิตดีขึ้นได้ การปฏิวัติครั้งนี้มาพร้อมกับการล่าอาณานิคมและระบอบทุนนิยมที่ขับเคลื่อนให้โลกพัฒนาในเชิงวัตถุอย่างก้าวกระโดด มาตอนนี้เราจะพูดถึงอีกการปฏิวัติหนึ่ง นั่นคือ Industrial Revolution หรือการปฏิวัติอุตสาหรรมที่เกิดขึ้นเมื่อประมาณ 200 ปีที่แล้ว\nแล้วแต่พระอาทิตย์ มนุษย์นั้นรู้จักการใช้พลังงานจากหลากหลายแหล่งมานานมากแล้ว เช่นเผาไม้เพื่อเอาความร้อนมาต้มน้ำ หรือใช้พลังลมในการแล่นเรือ แต่สิ่งหนึ่งที่มนุษย์ไม่เคยทำเป็นคือการแปรรูปพลังงาน มนุษย์ไม่รู้วิธีการเปลี่ยนพลังงานความร้อน ไปทำให้อย่างอื่นเคลื่อนไหวได้ และไม่รู้ว่าจะนำพลังงานที่ได้จากลม มาเปลี่ยนเป็นความร้อนได้อย่างไร\nวิธีแปรรูปพลังงานอย่างเดียวที่มนุษย์รู้จักคือการเปลี่ยนอาหารที่กินเข้าไป ให้กลายเป็นกำลังของกล้ามเนื้อ โดยพลังงานที่อยู่ในอาหาร ก็คือพลังงานจากแสงอาทิตย์ที่พืชสังเคราะห์มาเก็บไว้ก่อนที่มนุษย์หรือสัตว์อื่น ๆ จะนำไปทาน ดังนั้นในประวัติศาสตร์ที่ผ่านมา กิจกรรมต่าง ๆ ของมนุษย์จึงถูกกำกับด้วยวงจรสองอย่าง ได้แก่วงจรการออกดอกออกผลของพืช และวงจรการหมุนรอบดวงอาทิตย์ของโลก ในฤดูหนาวที่แดดไม่ค่อยมี พืชพันธุ์ไม่ออกดอกออกผล ชาวนาก็เก็บเกี่ยวได้เพียงเล็กน้อย ส่วยและภาษีจึงต่ำ ทหารไม่มีเสบียง และพระราชาแคว้นต่าง ๆ จึงเก็บตัวอยู่แต่ในวัง ในฤดูที่พระอาทิตย์ร้อนแรง ผลหมากรากไม้เต็มทุ่งให้ชาวนาได้เก็บเกี่ยว รัฐเก็บส่วยได้มาก ทหารมีกำลังวังชาและเริ่มลับดาบ พระราชาจึงนัดประชุมกับเหล่าอำมาตย์เพื่อวางแผนเปิดศึกกับต่างเมือง\nความลับที่อยู่ในครัว จริง ๆ แล้วควรจะมีแม่บ้านซักคนคิดออกนานแล้วว่า พลังงานความร้อนสามารถนำมาเปลี่ยนเป็นพลังงานจลน์ ที่ทำให้สิ่งของเคลื่อนไหวได้ เพราะมนุษย์เราต้มน้ำมาหลายปีดีดัก และเวลาน้ำเดือดเราก็จะได้ยินเสียงฝากากระทบกับหม้อ แต่กลับไม่มีใครเอะใจคิดจะนำมันไปประยุกต์ใช้กับเรื่องอื่น จุดเปลี่ยนเกิดขึ้นในศตวรรษที่ 18 ที่ประเทศอังกฤษ เมื่อเศรษฐกิจขยายตัว เมืองจึงมีขนาดใหญ่ขึ้นเรื่อย ๆ รัฐจำเป็นต้องถางป่าเพื่อสร้างแหล่งที่อยู่อาศัย เมื่อป่าหายไปอังกฤษจึงเหลือไม้ให้ใช้เป็นฟืนน้อยลงทุกที อังกฤษจึงเริ่มหันมาเผาถ่านหิน (coal) แทน","tags":null,"title":"ตอนที่ 17 - จานอลูมิเนียมของนโปเลียน","type":"docs"},{"authors":null,"categories":null,"content":"   ถ้าเอาคนทั้งโลกมาชั่งน้ำหนักรวมกัน พวกเราจะหนักประมาณ 300 ล้านตัน ถ้าเอาสัตว์เลี้ยงและสัตว์ในฟาร์มทั้งโลกมาชั่งรวมกัน พวกมันจะหนัก 700 ล้านตัน แต่ถ้าเอาสัตว์ป่าทั่วโลกมาชั่งรวมกัน จะหนักเพียง 100 ล้านตันเท่านั้น\n ทั่วโลกมียีราฟอยู่ 80,000 ตัว แต่มีวัวถึง 1.5 พันล้านตัว มีหมาป่า 200,000 ตัว แต่มีหมา 400 ล้านตัว มีลิงชิมแปนซี 250,000 ตัว เทียบกับมนุษย์ 7 พันล้านคน  มนุษย์ได้ขึ้นมาครองโลกอย่างแท้จริง ในบทที่แล้วเราพูดถึงความสามารถของมนุษย์ ที่จะสรรหาวัตถุดิบและแหล่งพลังงานใหม่ ๆ แต่สิ่งหนึ่งเราหลีกเลี่ยงไม่ได้คือ ความเสื่อมโทรมทางธรรมชาติที่มนุษย์ได้ก่อขึ้นไปทั่วหัวระแหง เราชอบพูดกันว่ามนุษย์นั้นทำลายธรรมชาติ แต่จริง ๆ แล้วธรรมชาติไม่อาจถูกทำลายได้ มันแค่เปลี่ยนไปเท่านั้นเอง\nเมื่อ 65 ล้านปีที่แล้ว มีอุกกาบาตตกมายังโลกและทำให้ไดโนเสาร์สูญพันธุ์ ซึ่งจะว่าไปแล้ว มันก็เป็นการเปิดทางให้สิ่งมีชีวิตตัวเล็ก ๆ อย่าง Homo Sapiens ขึ้นมาลืมตาอ้าปากได้ ในวันนี้มนุษย์อาจจะกำลัง ทำให้สัตว์ป่าจำนวนมากสูญพันธุ์ รวมถึงเผ่าพันธุ์ของตัวเองด้วย แต่สัตว์ตระกูลอื่น ๆ อย่างหนูกับแมลงสาบก็ยังอยู่ดีมีสุข หากเกิดสงครามนิวเคลียร์ขึ้น ก็เชื่อได้เลยว่าหนูจำนวนมากจะคลานออกมาจากซากปรักหักพังและขยายเผ่าพันธุ์ได้อยู่ดี\n ใครจะรู้ อีก 65 ล้านปีต่อจากนี้ หนูอาจจะครองโลก และบรรดาหนูอัจฉริยะเหล่านั้นอาจรู้สึกขอบคุณที่เกิดสงครามนิวเคลียร์ เหมือนกับที่มนุษย์รู้สึกขอบคุณที่อุกกาบาตชนโลกและล้างเผ่าพันธุ์ไดโนเสาร์ให้พวกเรา\n นาฬิกาตรงเวลาเรือนแรก ก่อนจะเข้าสู่ยุคอุตสาหกรรมนั้น มนุษย์ไม่เคยต้องสนใจเรื่องเวลา เพราะสิ่งที่สำคัญกว่าคือสภาพอากาศและแสงแดด\nสมัยก่อนช่างทำรองเท้าหนึ่งคนจะทำทุกส่วนของรองเท้า ดังนั้น หากช่างทำรองเท้าคนหนึ่งนอนตื่นสาย ก็ไม่มีผลกระทบอะไรกับช่างทำรองเท้าคนอื่น แต่เมื่อการผลิตรองเท้าถูกเปลี่ยนไปอยู่ในโรงงาน แต่ละคนจะรับหน้าที่ใดหน้าที่หนึ่งในสายพานการผลิต หากมีพนักงานคนไหนมาสาย ย่อมหมายถึงการผลิตที่หยุดชะงัก การมีตารางเวลาจึงสำคัญมาก ทุกคนต้องเข้างานพร้อมกัน กินข้าวเที่ยงพร้อมกัน (แม้จะยังไม่หิว) และเก็บของกลับบ้านเมื่อได้ยินเสียงกระดิ่งหมดเวลา โดยไม่สนว่างานเสร็จหรือไม่\nการปฏิวัติอุตสาหกรรมจึงทำให้ตารางเวลาและสายพานการผลิตเป็นตัวกำหนดกิจกรรมอื่น ๆ ของมนุษย์ ไม่ช้าไม่นาน โรงเรียน โรงพยาบาล และรัฐบาลก็เริ่มมีตารางเวลากับเขาบ้าง แม้กระทั่งสถานที่ ๆ ไม่มีสายพานการผลิต อย่างผับก็ยังต้องให้ความสำคัญกับตารางเวลา เพราะถ้าคนเลิกงานตอน 5 โมงเย็น ผับก็ควรจะเปิดตอน 5 โมง 5 นาทีเป็นอย่างช้า\nสมัยก่อนนั้นยังไม่มีเวลามาตรฐานของประเทศ แต่ละเมืองจึงมีเวลาเป็นของตัวเอง ถ้าตอนนี้เป็นเวลาเที่ยงตรงในลอนดอน ที่ลิเวอร์พูลอาจจะเป็นเวลาเที่ยงยี่สิบ แต่ในเมื่อสมัยนั้นยังไม่มีโทรศัพท์ ไม่มีวิทยุ ไม่มีโทรทัศน์ และไม่มีรถไฟ เวลาที่ต่างกันจึงไม่ได้เป็นปัญหาอะไร\nในปี 1830 ขบวนรถไฟพาณิชย์เที่ยวแรกเริ่มให้บริการระหว่างแมนเชสเตอร์กับลิเวอร์พูล อีก 10 ปีต่อมา ตารางเวลารถไฟฉบับแรกก็ถูกตีพิมพ์ และเวลาของแต่ละเมืองที่ไม่ตรงกันจึงเริ่มสร้างปัญหา ในปี 1847 บริษัทรถไฟต่าง ๆ จึงตกลงกันว่าตารางเวลาการเดินรถทั้งหมดจะอิงกับหอดูดาวกรีนิช (Greenwich Observatory) ในปี 1880 รัฐบาลอังกฤษจึงตัดสินใจบังคับให้ตารางต่าง ๆ ทั้งหมดอ้างอิงกับเวลากรีนิช นี่เป็นครั้งแรกของโลกที่ประเทศท้้งประเทศเลือกใช้เวลาเดียวกันหมด\nครอบครัวล่มสลาย นอกจากการใช้เวลาสากลแล้ว อีกผลกระทบหนึ่งจากการปฏิวัติอุตสาหกรรมคือการลดบทบาทครอบครัวและชุมชน และเพิ่มบทบาทให้กับรัฐและตลาด\nเป็นเวลานับหลายแสนปีที่มนุษย์และบรรพบุรุษอยู่กันเป็นชุมชนเล็กๆ แม้การมาถึงของ Cognitive Revolution หรือ Agricultural Revolution ก็ไม่ได้ทำให้พฤติกรรมนี้เปลี่ยนไป เพราะถึงหมู่บ้านจะใหญ่ขึ้นจนเป็นเมืองหรืออาณาจักร แต่มนุษย์ก็ยังเหนียวแน่น กับญาติพี่น้องที่เป็นหน่อเนื้อเชื้อไขอยู่ดี\nแต่ภายในเวลาเพียง 200 ปี การปฏิวัติอุตสาหกรรมก็ได้เปลี่ยนแปลงวิถีชีวิตแบบนี้ไปตลอดกาล ในสมัยก่อน ครอบครัวของคุณจะดูแลคุณในทุกภาคส่วนของชีวิต ทั้งสวัสดิการ การศึกษา แหล่งเงินทุน ประกันภัย หรือแม้กระทั่งดูแลความปลอดภัยในชีวิตและทรัพย์สิน หากใครคนหนึ่งป่วย ครอบครัวจะคอยช่วยป้อนน้ำป้อนข้าว ถ้าใครแก่ชรา ลูกหลานก็จะดูแล หากใครอยากสร้างบ้าน ครอบครัวก็จะช่วยกันออกแรง ถ้าใครอยากทำธุรกิจ ครอบครัวก็จะช่วยหาเงินมาสนับสนุน ถ้าใครจะแต่งงาน ครอบครัวจะช่วยเลือกคู่ให้ ถ้าใครมีปัญหากับเพื่อนบ้าน ครอบครัวจะเข้ามาช่วยไกล่เกลี่ย แต่ถ้าปัญหาใด ๆ ใหญ่เกินกว่าที่ครอบครัวจะรับมือได้ ชุมชนก็จะเข้ามาให้ความช่วยเหลือด้วยอีกแรง\nพระราชาและรัฐของแต่ละเมืองนั้นมีบทบาทเป็นเพียง Godfather ของเมืองนั้น ๆ หน้าที่หลักของท่านคือ การปกป้องคุ้มครองพสกนิกรไม่ให้คนเมืองอื่นมารังแก แต่รัฐไม่ได้ถูกคาดหวังให้ทำอะไรมากกว่านี้ เพราะการเกษตรสมัยก่อนไม่ได้มีผลผลิตมากมาย ส่วยและภาษีที่รัฐเก็บได้จึงเพียงพอแค่เลี้ยงกองทัพและคนแค่หยิบมือ ไม่อาจนำไปจ้างข้าราชการ ตำรวจ หรือนักสังคมสงเคราะห์ได้ ครอบครัวและชุมชนจึงต้องดูแลกันเอง\nในสมัยจักรวรรดิออตโตมัน รัฐจะปล่อยให้แต่ละบ้านสะสางความยุติธรรมกันเอาเอง ถ้าคนอีกตระกูลหนึ่งมาฆ่าพี่ชายของผม ผมก็สามารถกลับไปฆ่าคนของตระกูลนั้นเพื่อเป็นการล้างแค้นได้โดยรัฐจะไม่เข้ามาขัดขวาง ตราบใดที่ความขัดแย้งนี้ไม่ลุกลามใหญ่โตจนเกินไป ในสมัยราชวงศ์หมิง (ค.ศ.1368-1644) จะมีระบบที่เรียกว่าเป๋าเจี่ย (baojia) ครอบครัว 10 ครอบครัวจะรวมตัวกันเป็น 1 เจี่ย และ 10 เจี่ย คือ 1 เป๋า ถ้าใครคนใดในเป๋าทำผิด สมาชิกอื่นๆ ในเป๋านั้น (โดยเฉพาะสมาชิกอาวุโส) ก็อาจโดนลงโทษไปด้วย และสมาชิกอาวุโสเหล่านี้ ก็มีหน้าที่ประเมินว่าในเป๋าของตัวเองมีรายได้เท่าไหร่ เพื่อเก็บภาษีในจำนวนที่เหมาะสมนำส่งรัฐ ระบบนี้มีประโยชน์อย่างมาก เพราะรัฐไม่จำเป็นต้องเปลืองตังค์จ้างเจ้าหน้าที่รัฐ มาคอยสังเกตการณ์และเก็บส่วยเลย\nข้อเสียอย่างหนึ่งของวิถีชีวิตแบบนี้ก็คือ หากใครสูญเสียครอบครัวหรือถูกขับออกจากครอบครัวก็จะเหมือนคนไร้แขนขา กลายเป็นคนไม่มีบ้าน ไม่มีงานทำ ไม่มีใครกล้ารับเข้าทำงาน ไม่มีใครให้ยืมเงิน ไม่มีใครดูแลยามป่วยไข้ คนที่ตกอยู่ในสถานการณ์นี้จึงต้องเร่งหาครอบครัวใหม่โดยเร็ว\nแต่การปฏิวัติอุตสาหกรรมทำให้มีเงินทุนในตลาดมากขึ้น เมื่อเกิดการเติบโต รัฐก็เก็บภาษีได้มากขึ้น และเพียงพอที่จะนำมาจ้างเจ้าหน้าที่รัฐ รัฐจึงเริ่มใช้อำนาจที่ตัวเองมีในการลดทอนสายสัมพันธ์ในครอบครัวและชุมชนลง การแก้แค้นกันระหว่างครอบครัวจึงถูกแทนที่ด้วยเจ้าหน้าที่ตำรวจและศาลสถิตยุติธรรม ธุรกิจครอบครัว จึงถูกแทนที่ด้วยโรงงานอุตสาหกรรมและแรงขับเคลื่อนของตลาด แต่สิ่งที่สำคัญที่สุดที่ทำลายสายสัมพันธ์ในครอบครัวลงก็คือ ทัศนติ ที่เปลี่ยนไป\nรัฐและตลาดจะบอกกับคนรุ่นใหม่ว่า “คุณคือปัจเจกชน นี่คือชีวิตของคุณคนเดียว ดังนั้นอยากแต่งงานกับใครก็จงแต่งโดยไม่ต้องขออนุญาตครอบครัว อยากทำงานอะไรก็จงทำแม้ว่าครอบครัวจะไม่สนับสนุน อยากอยู่ที่ไหนก็จงอยู่ไป แม้ว่านั่นจะหมายความว่าคุณจะไม่ได้เจอหน้าครอบครัวทุกวัน คุณไม่จำเป็นต้องพึ่งพาครอบครัวเหมือนแต่ก่อนแล้ว จากนี้เราจะดูแลคุณเอง ทั้งอาหาร ที่พัก การศึกษา สุขภาพ สวัสดิการ และการจ้างงาน”\n สรรพากรและศาลจึงปฏิบัติกับเราเป็นปัจเจกชน และไม่ได้คาดหวังให้เราถูกลงโทษหรือถูกเก็บภาษีแทนคนในครอบครัวอีกต่อไป\n ชุมชนในจินตนาการ ชุมชนในจินตนาการหรือ Imagined Communities นั้นมีมานานแล้ว ในแผ่นดินจีนสมัยก่อน พสกนิกรนับล้านต่างเชื่อว่าทุกคนต่างอยู่ในครอบครัวเดียวกันโดยมีองค์จักรพรรดิเป็นพ่อของแผ่นดิน คนมุสลิมก็เชื่อว่ามุสลิมทั้งผองเป็นพี่น้องกัน แต่ความเชื่อเหล่านี้ ก็ยังมีบทบาทเป็นรองเมื่อเทียบกับความเป็นกลุ่มก้อนในชุมชนที่ตัวเองอาศัยอยู่\nในช่วง 200 ปีที่ผ่านมา ชุมชนในจินตนาการที่มีบทบาทมากที่สุดคือ คือรัฐชาติ (nation state) และ กลุ่มผู้บริโภค (consumer tribe) รัฐชาตินั้นอาจมีมานานแล้วก็จริง แต่คนสมัยก่อนไม่ได้ให้ความสำคัญ กับความเป็นชาติขนาดนั้น เพราะครอบครัวมีบทบาทในชีวิตมากกว่าเยอะ รัฐชาติที่เรารู้จักส่วนใหญ่ในปัจจุบัน เพิ่งจะเกิดขึ้นหลังการปฏิวัติอุตสาหกรรมมานี่เอง ตัวอย่างที่เห็นได้ชัดคือในตะวันออกกลาง ที่ประเทศซีเรีย เลบานอน จอร์แดนและอิรักนั้นเกิดจากการขีดเส้นแบ่งอาณาเขตเอาเองของพวกฑูตฝรั่งเศสและอังกฤษซึ่งไม่ได้สนใจประวัติศาสตร์และภูมิศาสตร์ของพื้นที่เลย ในปี 1918 ฑูตเหล่านี้ตัดสินใจเองว่าคนในเคอร์ดิสถาน แบกแดด และ บาซราจะถูกเรียกว่าชาวอิรัก ส่วนคนอีกพื้นที่นึงจะเรียกว่าชาวซีเรีย\nอีกหนึ่งชุมชนในจินตนาการนั้นคือ Consumer Tribe ที่อ้างอิงจากสิ่งที่เราเสพหรือบริโภคร่วมกัน เราจึงเรียกตัวเองว่าแฟนคลับของมาดอนน่า หรือกองเชียร์แมนยู เราทุกคนมองว่าตัวเองเป็นหนึ่งในกลุ่มคนเหล่านี้ เพราะเราซื้อของหรือบริการจากแหล่งเดียวกัน\nสันติภาพอันยืนยง พวกเราส่วนใหญ่อาจยังไม่สำเหนียกว่ายุคที่เราอยู่ตอนนี้มีความสงบสุขแค่ไหน\nในปี 2002 มีคนตาย 57 ล้านคน คนที่ตายในสงครามหรือการฆาตกรรมมี 741,000 แต่คนที่ฆ่าตัวตายมีถึง 873,000 คน ดังนั้นในโลกยุคใหม่คุณมีโอกาสจะตายจากน้ำมือตนเองมากกว่าน้ำมือคนอื่นเสียอีก ยุโรปในช่วงยุคกลาง (ศตวรรษ 5-15) 20-40 คนในประชากร 100,000 คนจะตายเพราะความรุนแรงที่มนุษย์ก่อขึ้น แต่ปัจจุบันตัวเลขนี้เหลือเพียง 1 ใน 100,000 คนเท่านั้น เหตุผลหลักที่ความรุนแรงที่ลดลงนั้นเกิดจากความเข้มแข็งของรัฐที่มีกำลังตำรวจในการบังคับใช้กฎหมายและดูแลบ้านเมืองให้สงบสุข\nอีกเหตุผลหนึ่งที่ความรุนแรงระดับนานาชาติลดลงก็คือการสิ้นสุดของยุคล่าอาณานิคม เมื่อ 70 ปีที่แล้วอังกฤษปกครองพื้นที่ถึง 1\u0026frasl;4 ของโลก แต่ตลอดหลายปีที่ผ่านมาอังกฤษได้ถอนตัวออกจากประเทศที่เคยตกเป็นอาณานิคมโดยมีการเสียเลือดเสียเนื้อน้อยมาก การถอนตัวของจักรวรรดิฝรั่งเศสมีความรุนแรงมากกว่า และคนนับแสนคนในเวียดนามและอัลจีเรียต้องสังเวยชีวิตในช่วงถ่ายเทอำนาจ แต่หลังจากฝรั่งเศสคืนอำนาจอธิปไตยเสร็จเรียบร้อย ประเทศเหล่านี้ก็อยู่กันอย่างสงบสุข\nสหภาพโซเวียตก็เป็นอีกหนึ่งตัวอย่างของการคืนอำนาจให้กับผู้คนในพื้นที่โดยไม่มีการเสียเลือดเสียเนื้อ ทั้งๆ ที่รัฐมีกำลังทหารและอาวุธร้ายแรงอยู่มากมาย แต่ก็ไม่เคยคิดนำมันมาใช้ทำร้ายประชาชน ในวันที่ผู้มีอำนาจเห็นแล้วว่าการปกครองแบบคอมมิวนิสต์ไม่เวิร์ค พวกเขาก็พร้อมลงจากอำนาจโดยดุษณีย์\nระเบิดนิวเคลียร์สันติภาพ นับตั้งแต่ปี 1945 เป็นต้นมา ไม่เคยมีประเทศใดถูกยึดครองหรือล่มสลายอีกเลย แม้จะยังมีสงครามและมีคนตายในสงครามไปนับล้านคน แต่สงครามไม่ใช่เรื่องปกติอีกต่อไป\nสันติภาพไม่ใช่แค่เพียงสภาวะที่ไร้สงคราม แต่เป็นสภาวะที่สงครามยากที่จะเกิดขึ้นด้วย (implausibility of war) ก่อนปี 1900 มีกฎแห่งป่าดงดิบ (Law of the Jungle) ที่กล่าวไว้ว่า หากมีรัฐสองรัฐที่อยู่ติดกัน มันจะมีสถานการณ์ใดสถานการณ์หนึ่งที่จะทำให้สองประเทศนี้สู้รบกันภายใน 1 ปีข้างหน้าได้ ยุโรปในยุคนั้นจึงมีโอกาสเกิดสงครามได้ตลอดเวลา กองทัพ นักการเมือง และประชาชนต่างก็เตรียมพร้อมสำหรับการมาถึงของสงครามอยู่เสมอ\nแต่ในสมัยนี้ โอกาสที่ประเทศที่มีชายแดนติดกันจะประกาศสงครามนั้นเป็นไปได้ยากมาก เราจะนึกไม่ออกเลยว่า จะมีอะไรที่จะทำให้เยอรมันนียกกองทัพรุกรานฝรั่งเศส หรือทำให้ประเทศจีนประกาศศึกกับญี่ปุ่น มีเหตุผลสามสี่ข้อ ที่ทำให้โลกสงบสุขอย่างทุกวันนี้\n อย่างแรกคือระเบิดนิวเคลียร์ จริง ๆ แล้วนายโรเบิร์ต ออพเพนไฮเมอร์และทีมงาน ที่สร้างระเบิดนิวเคลียร์นั้นควรจะได้รางวัลโนเบลสาขาสันติภาพด้วยซ้ำ เพราะพวกเขาได้สร้างเทคโนโลยี ที่ทำให้การเอาชนะกันด้วยอาวุธกลายมาเป็นการฆ่าตัวตายหมู่ (collective suicide) ประเทศมหาอำนาจล้วนแล้วแต่มีอาวุธนิวเคลียร์ การยิงระเบิดนิวเคลียร์ใส่กันย่อมนำไปสู่การสูญเสียมากเกินไป ทุก ๆ ฝ่ายจึงต้องถ้อยทีถ้อยอาศัยกัน\n เหตุผลที่สองก็คือการทำสงครามนั้นไม่ได้ “สร้างกำไร” เหมือนเก่า ในสมัยก่อนประเทศหนึ่งจะรุกรานอีกประเทศหนึ่งเพราะต้องการนำทรัพยากรธรรมชาติของประเทศนั้นมาสร้างความมั่งคั่งให้ตัวเอง แต่สมัยนี้ความมั่งคั่งไม่ได้อยู่ในทรัพยากรธรรมชาติอีกต่อไป\n  ยกตัวอย่างแคลิฟอร์เนีย ที่เคยสร้างเนื้อสร้างตัวจากการเป็นเหมืองทอง แต่ในสมัยนี้กลับกำลังอู้ฟู่จากซิลิคอนและเซลลูลอยด์ – Silicon Valley และ Celluloid ในฮอลลีวู้ด ถ้าวันนี้จีนตัดสินใจส่งกองทัพนับแสนไปรุกรานแคลิฟอร์เนีย จีนย่อมกลับบ้านมือเปล่า ไม่มีเหมืองซิลิคอนอยู่ในแคลิฟอร์เนีย เพราะ “ขุมทอง” ที่แท้จริง อยู่ในหัวของโปรแกรมเมอร์ของกูเกิ้ลและผู้กำกับฮอลลีวู้ด ซึ่งคนเหล่านี้ คงขึ้นเครื่องบินไปอยู่ที่อื่นก่อนที่กองทัพจีนจะมาถึงเสียอีก สังเกตได้ว่าสงครามระดับประเทศ ที่ยังเกิดขึ้นในยุคนี้มักจะเกิดในดินแดนที่ความมั่งคั่งยังขึ้นอยู่กับทรัพยากรธรรมชาติ อย่างเช่นตอนที่อิรักรุกรานคูเวตเพื่อครอบครองแหล่งน้ำมันเป็นต้น\n เหตุผลข้อที่สามคือ ในขณะที่สงครามสร้างกำไรน้อยลง ความสงบสุขนั้นกลับสร้างกำไรได้มากขึ้น เมื่อทุนนิยมเฟื่องฟู การขนส่งและระบบโลจิสติกส์ได้พัฒนาขึ้นมาในระดับที่ทำให้การนำเข้า-ส่งออกสินค้ากลายเป็นแหล่งรายได้สำคัญอันดับต้นๆ ของประเทศ การรักษาความสัมพันธ์อันดีกับประเทศคู่ค้าย่อมส่งผลดีกว่าการทะเลาะกัน ตราบใดที่จีนและอเมริกายังเป็นมิตรต่อกัน จีนย่อมได้ประโยชน์จากการส่งออกสินค้าไปอเมริกาและลงทุนในวอลสตรีทมากกว่าการไปยึดแคลิฟอร์เนียเป็นไหนๆ\n เหตุผลข้อสุดท้ายก็คือความเชื่อของผู้นำที่เปลี่ยนไป ในยุคก่อนเก่า ไม่ว่าจะเป็นขุนนางในราชวงศ์ฮั่น หรือนักบวชในอาณาจักรแอซเทคต่างก็มองว่าสงครามเป็นเรื่องดี ส่วนหากจะมีใครมองว่าสงครามเป็นเรื่องไม่ดี ก็จะเชื่อว่ามันเป็นเรื่องที่เลี่ยงไม่ได้ ดังนั้นจึงต้องใช้มันให้เปิดประโยชน์กับตัวเองให้มากที่สุด\n  แต่ยุคนี้เป็นยุคแรกในประวัติศาสตร์ ที่เหล่าผู้นำประเทศเกือบทั้งหมด มีความเห็นตรงกันว่า สงครามเป็นเรื่องเลวร้าย และหลีกเลี่ยงได้ นี่คือยุคที่ทุกประเทศต้องพึ่งพากันและกัน จึงไม่มีประเทศไหนทำอะไรตามอำเภอใจได้ เมื่อโลกได้หลอมรวมเป็นหนึ่งเดียวกัน จนกลายเป็นจักรวรรดิโลก สันติภาพโลกจึงอาจเป็นสิ่งที่เป็นไปได้เช่นกัน แต่สันติภาพจะคงอยู่อย่างนี้ได้นานเท่าใด? มนุษยชาติอาจกำลังยืนอยู่หน้าประตูสองบาน บานหนึ่งพาเราไปสวรรค์ และบานหนึ่งพาเราไปนรก ยังไม่มีใครตอบได้ว่า สุดท้ายแล้วเราจะเลือกเปิดประตูบานไหน\nที่มาบทความ :https://anontawong.com\n","date":1589065200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589065200,"objectID":"1353155093ab88896188d839aba742ea","permalink":"https://example.com/book/sapiens/sapiens-18/","publishdate":"2020-05-10T00:00:00+01:00","relpermalink":"/book/sapiens/sapiens-18/","section":"book","summary":"ถ้าเอาคนทั้งโลกมาชั่งน้ำหนักรวมกัน พวกเราจะหนักประมาณ 300 ล้านตัน ถ้าเอาสัตว์เลี้ยงและสัตว์ในฟาร์มทั้งโลกมาชั่งรวมกัน พวกมันจะหนัก 700 ล้านตัน แต่ถ้าเอาสัตว์ป่าทั่วโลกมาชั่งรวมกัน จะหนักเพียง 100 ล้านตันเท่านั้น\n ทั่วโลกมียีราฟอยู่ 80,000 ตัว แต่มีวัวถึง 1.5 พันล้านตัว มีหมาป่า 200,000 ตัว แต่มีหมา 400 ล้านตัว มีลิงชิมแปนซี 250,000 ตัว เทียบกับมนุษย์ 7 พันล้านคน  มนุษย์ได้ขึ้นมาครองโลกอย่างแท้จริง ในบทที่แล้วเราพูดถึงความสามารถของมนุษย์ ที่จะสรรหาวัตถุดิบและแหล่งพลังงานใหม่ ๆ แต่สิ่งหนึ่งเราหลีกเลี่ยงไม่ได้คือ ความเสื่อมโทรมทางธรรมชาติที่มนุษย์ได้ก่อขึ้นไปทั่วหัวระแหง เราชอบพูดกันว่ามนุษย์นั้นทำลายธรรมชาติ แต่จริง ๆ แล้วธรรมชาติไม่อาจถูกทำลายได้ มันแค่เปลี่ยนไปเท่านั้นเอง\nเมื่อ 65 ล้านปีที่แล้ว มีอุกกาบาตตกมายังโลกและทำให้ไดโนเสาร์สูญพันธุ์ ซึ่งจะว่าไปแล้ว มันก็เป็นการเปิดทางให้สิ่งมีชีวิตตัวเล็ก ๆ อย่าง Homo Sapiens ขึ้นมาลืมตาอ้าปากได้ ในวันนี้มนุษย์อาจจะกำลัง ทำให้สัตว์ป่าจำนวนมากสูญพันธุ์ รวมถึงเผ่าพันธุ์ของตัวเองด้วย แต่สัตว์ตระกูลอื่น ๆ อย่างหนูกับแมลงสาบก็ยังอยู่ดีมีสุข หากเกิดสงครามนิวเคลียร์ขึ้น ก็เชื่อได้เลยว่าหนูจำนวนมากจะคลานออกมาจากซากปรักหักพังและขยายเผ่าพันธุ์ได้อยู่ดี\n ใครจะรู้ อีก 65 ล้านปีต่อจากนี้ หนูอาจจะครองโลก และบรรดาหนูอัจฉริยะเหล่านั้นอาจรู้สึกขอบคุณที่เกิดสงครามนิวเคลียร์ เหมือนกับที่มนุษย์รู้สึกขอบคุณที่อุกกาบาตชนโลกและล้างเผ่าพันธุ์ไดโนเสาร์ให้พวกเรา","tags":null,"title":"ตอนที่ 18 - ครอบครัวล่มสลาย","type":"docs"},{"authors":null,"categories":null,"content":" 500 ปีที่ผ่านมา การปฏิวัติทางวิทยาศาสตร์ และการปฏิวัติอุตสาหกรรมได้สร้างความก้าวหน้าให้มนุษย์ในอัตราเร่งยิ่งกว่ายุคใด ๆ เรามีเครื่องไม้เครื่องมือมากมาย เรามีแหล่งพลังงานที่ไม่จำกัด (นิวเคลียร์และแสงอาทิตย์) และชีวิตของพวกเราก็เปลี่ยนไปจนแทบจำไม่ได้ แต่ความก้าวหน้าเหล่านั้นมันได้ทำให้เรามีความสุขมากขึ้นรึเปล่า?\nนายนีล อาร์มสตรองที่ทิ้งรอยเท้าไว้บนดวงจันทร์ มีความสุขกว่าหญิงสาวนิรนามที่ทิ้งรอยฝ่ามือไว้ในถ้ำ Chauvet Cave เมื่อ 30,000 ปีที่แล้วหรือไม่?\nหลายคนเชื่อว่า เมื่อมนุษย์เรามีความสามารถมากขึ้น เราก็จะนำความสามารถนั้นมาบรรเทาความทุกข์ร้อน ดังนั้นมนุษย์ควรจะมีความสุขมากขึ้นเรื่อย ๆ แต่แนวคิดนี้ก็ใช่ว่าจะถูกต้องเสมอไป เพราะแม้การพัฒนา จะทำให้สังคมขับเคลื่อนไปข้างหน้า แต่ก็ไม่ได้หมายความว่าคุณภาพชีวิตในระดับปัจเจกจะดีขึ้น เหมือนอย่างที่เราได้เห็นแล้วว่า ชีวิตของชาวนาหลังการปฏิวัติเกษตรกรรมนั้นต้องตรากตรำและเหน็ดเหนื่อยกว่าชีวิตของเหล่าบรรพบุรุษในยุคเข้าป่าเก็บพืชผลมากมายนัก แต่ถ้าจะมองในช่วงไม่กี่ศตวรรษที่ผ่านมา ชีวิตของคนเราก็อาจจะดีขึ้นจริงๆ เพราะเรามีสงครามข้ามชาติน้อยลง ความรู้เรื่องการแพทย์ของเราก็พัฒนาไปมาก อัตราการตายของทารกก็ต่ำ และการล้มตายเพราะความหิวโหยนั้นเป็นเรื่องที่แทบจะไม่เกิดขึ้นอีกแล้ว\nแต่มุมมองอย่างนี้ก็มีช่องโหว่อยู่อย่างน้อยสามประการ\n ประการแรกคือ ข้อดีที่กล่าวมานั้นเพิ่งเกิดขึ้นในช่วงไม่กี่ปีที่ผ่านมานี่เอง มนุษย์เพิ่งได้รับประโยชน์ จากความรู้ด้านยารักษาโรคจริงๆ เมื่อ 150 ปีที่แล้ว อัตราการตายของเด็กทารกเพิ่งลดลงในช่วง 100 ปีที่ผ่านมา ความอดอยากครั้งสุดท้ายก็เพิ่งเกิดขึ้นเมื่อ 50 ปีที่แล้ว เมื่อนโยบายก้าวกระโดด (Great Leap Forward) ของจีนทำให้คนล้มตายไปไปหลายสิบล้าน และสงครามระหว่างนานาประเทศเพิ่งจะยุติหลังการมาของอาวุธนิวเคลียร์เมื่อ 70 ปีที่แล้วเท่านั้นเอง เมื่อเทียบปรากฎการณ์เหล่านี้กับระยะเวลาร่วม 70,000 ปีนับตั้งแต่ Homo Sapiens เดินทางออกจากแอฟริกา จึงถือเป็นการสุ่มตัวอย่างที่เข้าข้างตัวเองไปหน่อย\n ประการที่สอง “ความรุ่งเรือง” ในช่วง 50 ปีที่ผ่านมาอาจเป็นเพียงการจุดระเบิดเวลา ลัทธิบริโภคนิยม ได้ทำให้ธรรมชาติเสื่อมโทรมลงไปมากเสียจนธรรรมชาติอาจมีการปรับตัวครั้งใหญ่ในอนาคตอันใกล้นี้ก็ได้\n ประการสุดท้าย หากจะวัดความสุข เราควรจะวัดความสุขของสัตว์อื่นๆ บนโลกใบนี้ด้วยรึเปล่า? แม้คุณภาพชีวิตของมนุษย์จะดีขึ้น แต่คุณภาพชีวิตของปศุสัตว์อย่างวัว ไก่ และหมู กลับตกต่ำอย่างน่าใจหาย ในช่วง 200 ปีที่ผ่านมา ปศุสัตว์นับหมื่นล้านตัวถูกทารุณกรรมในระดับที่บรรพบุรุษของมันไม่เคยพบเจอ สุดท้ายแล้วอุตสาหกรรมอาหาร อาจเป็นอาชญากรรมที่เลวร้ายที่สุดในประวัติศาสตร์ก็ได้\n  ดัชนีความสุข เนื่องจากความสุขเป็นเรื่องที่รู้ได้เฉพาะตน นักวิจัยจึงวัดความสุขของคนด้วยการแจกแบบสอบถาม ที่มีคำถามอย่าง “ฉันพอใจกับชีวิตของฉันตอนนี้” หรือ “ฉันรู้สึกว่าอนาคตยังมีสิ่งดีๆ รออยู่” แล้วให้แต่ละคนช่วยให้คะแนนว่า เห็นด้วยกับประโยคเหล่านี้มากน้อยแค่ไหน สิ่งที่นักวิจัยค้นพบมีดังนี้\n หนึ่ง คือเงินซื้อความสุขได้ แต่ก็ถึงแค่จุดหนึ่งเท่านั้น ถ้าสาวโรงงานลูกติดเงินเดือน 8000 บาทถูกล็อตเตอรี่ 5 ล้านบาทจนมีเงินชำระหนี้ ส่งค่าเทอมลูก และมีเงินทุนที่จะทำธุรกิจเองได้ ความสุขของเธอในระยะยาวย่อมเพิ่มขึ้นเช่นกัน  แต่สำหรับผู้บริหารระดับสูงที่เงินเดือน 300,000 บาทที่มีทุกอย่างพร้อมอยู่แล้ว แม้จะถูกหวย 10 ล้านบาท ความสุขของเขาจะเพิ่มขึ้นแค่ชั่วคราว อย่างมากก็แค่ขับรถราคาแพงขึ้นหรือย้ายไปอยู่บ้านหลังใหญ่ขึ้น แต่สุดท้ายเขาก็จะเคยชินกับมันอยู่ดี\n สอง คือความเจ็บป่วยจะทำให้ความสุขลดลงเพียงชั่วคราว เว้นเสียแต่ว่าอาการเจ็บป่วยนั้นจะแย่ลงเรื่อยๆ หรือนำมาซึ่งความเจ็บปวดทางร่างกายอยู่ตลอดเวลา คนที่พบว่าตัวเองเป็นเบาหวาน (ซึ่งเป็นโรคเรื้อรัง) อาจจะรู้สึกหงุดหงิดในช่วงแรกที่ต้องปรับเปลี่ยนพฤติกรรม แต่ไม่นานเขาก็จะปรับตัวได้และมีความสุขพอๆ กับคนสุขภาพดี\n สาม นักวิจัยพบว่าความสัมพันธ์กับคนในครอบครัวหรือในชุมชนมีความสำคัญต่อความสุขมากกว่าเงินหรือสุขภาพ คนพิการที่อยู่ในครอบครัวที่อบอุ่นและดูแลเขาเป็นอย่างดีอาจมีความสุขกว่าเศรษฐีพันล้านผู้โดดเดี่ยวก็ได้\n  นั่นอาจหมายความว่า ความสุขที่เพิ่มขึ้นจากการขยายตัวทางเศรษฐกิจในช่วงสองสามร้อยปีที่ผ่านมา อาจถูกคานด้วยความทุกข์อันเกิดจากสภาวะบ้านแตกสาแหรกขาดเมื่อความเหนียวแน่นในครอบครัวถูกทำลายด้วยแรงขับแห่งทุนนิยมที่ทำให้สมาชิกในครอบครัวไม่ได้อยู่ร่วมกัน นายสมศักดิ์ในวันนี้จึงอาจไม่ได้มีความสุขไปกว่าปู่ของปู่ของเขาที่มีชีวิตอยู่เมื่อ 200 ปีที่แล้ว\n สี่ ซึ่งเป็นข้อที่สำคัญที่สุด คือจริง ๆ แล้วความสุขนั้นไม่ได้ขึ้นอยู่กับระดับความรวย ความแข็งแรง หรือแม้กระทั่งชุมชนที่เขาอาศัยอยู่ แต่เป็นความสัมพันธ์ระหว่างสภาพความเป็นจริง กับความคาดหวังของคน ๆ นั้น (correlation between objective conditions and subjective expectations) หากความฝันของผมคือ การได้ขี่มอเตอร์ไซค์ซูซูกิแล้วผมได้มันมาขี่จริงๆ ผมก็มีความสุขแล้ว แต่ถ้าผมขับเบนซ์ผมอาจไม่มีความสุขก็ได้หากจริงๆ แล้วผมอยากขับเฟอรารี่มากกว่า  เมื่อการวัดความสุขไม่ใช่เรื่องภววิสัย (objective) แต่เพียงอย่างเดียว แต่เป็นเรื่องอัตวิสัย (subjective) ด้วย การเปรียบเทียบความสุขของคนสมัยนี้กับคนสมัยก่อน จึงยากขึ้นไปอีก เพราะแม้ชีวิตความเป็นอยู่ของเราจะดีกว่าแต่ก่อนมาก แต่ความคาดหวังของเราก็สูงขึ้นกว่าเดิมด้วยเช่นกัน จะว่าไปแล้วคนสมัยนี้น่าจะมี “ภูมิต้านทานความยากลำบาก” น้อยกว่าคนรุ่นก่อนๆ มากมายนัก ดังนั้นคนรุ่นเราแค่เจอความไม่สะดวกนิดๆ หน่อยๆ ก็พร้อมจะทุกข์ใจได้แล้ว\nถ้าสมการความสุขนั้นมีความคาดหวังเป็นตัวแปรสำคัญ สองเสาหลักของโลกทุนนิยมอย่างสื่อสารมวลชน และโฆษณาก็อาจจะกำลังทำให้คนเรามีความสุขน้อยลงไปทุกที ถ้าคุณเป็นเด็กหนุ่มนมแตกพานที่อาศัยอยู่ในหมู่บ้านเมื่อ 5000 ปีที่แล้ว คุณอาจจะคิดว่าคุณเป็นคนหน้าตาดี เพราะคนอื่นๆ ในหมู่บ้านต่างก็หน้าตาธรรมดา หรือไม่ก็แก่ หรือไม่ก็เด็กเกินไป แต่ถ้าคุณเป็นเด็กหนุ่มนมแตกพานในสมัยนี้ ต่อให้เพื่อนๆ ที่โรงเรียนจะหล่อสู้คุณไม่ได้ คุณก็อาจจะยังรู้สึกว่าตัวเองหน้าตาไม่หล่ออยู่ดี เพราะคุณเอาตัวเองไปเทียบกับดารานักร้องที่เห็นในทีวีและอินสตาแกรม\nความไม่พอใจของผู้คนในประเทศโลกที่ 3 จึงอาจไม่ได้เกิดจากความยากจนหรือการคอรัปชั่นแต่เพียงอย่างเดียว แต่เกิดจากการที่เขาเทียบคุณภาพชีวิตของตัวเอง กับคุณภาพชีวิตของคนในประเทศโลกที่ 1 ด้วย คนชั้นกลางในประเทศอียิปต์ในปี 2011 มีชีวิตที่ดีกว่าแต่สมัยฟาโรห์หรือคลีโอพัตรามากแต่พวกเขาก็ยังลุกขึ้นมาโค่นอำนาจนาย Hosni Mubarak อยู่ดี เพราะว่าพวกเขาไม่ได้เปรียบเทียบตัวเองกับบรรพบุรุษ แต่เปรียบเทียบตัวเองกับชนชั้นกลางในอเมริกา เมื่อคนเราช่างเปรียบเทียบเช่นนี้แล้ว แม้กระทั่งชีวิตที่อมตะก็อาจจะไม่ได้ทำให้โลกนี้มีความสุขมากขึ้นก็ได้\nตลอดประวัติศาสตร์ที่ผ่านมา ไม่ว่าจะยากดีมีจนเท่าไหร่ อย่างน้อยทุกคนก็ยังรู้สึกว่าความตายนั้นเท่าเทียมเสมอ เพราะไม่ว่าคุณจะมีอำนาจหรือร่ำรวยมหาศาลเพียงใด สุดท้ายทุกคนก็ต้องตาย แต่หากวันหนึ่งนักวิทยาศาสตร์คิดค้นวิธีการรักษาโรคได้ทุกชนิด และหาวิธีคงความหนุ่มสาวให้กับมนุษย์ได้ สิ่งที่จะเกิดขึ้นคือความโกรธแค้น ของคนชั้นล่างที่ไม่อาจเข้าถึงเทคโนโลยีเหล่านี้ได้ เพราะมันคงไม่แฟร์สุดๆ ที่มนุษย์บางคนจะได้อยู่ตลอดไปเพียงเพราะเขามีเงิน ส่วนคนจนนั้นถูกปล่อยให้ป่วยหรือแก่ตาย\nและสำหรับชนชั้นสูง ปัญหาก็ใช่ว่าจะจบ เพราะแม้จะไม่แก่และไม่เจ็บป่วย แต่คุณก็อาจจะยังตายจากอุบัติเหตุได้อยู่ดี คุณจะกลายเป็นคนที่ไม่กล้าเสี่ยงทำอะไรเลยเพราะเดิมพันสูงเกินไป และหากมีคนในครอบครัวต้องตายไปจากเหตุการณ์ไม่คาดฝัน ความเจ็บปวดก็ยิ่งทบเท่าทวีคูณ\nความสุขจากสารเคมี นักสังคมศาสตร์อาจวัดความสุขโดยดูจากปัจจัยทางเศรษฐกิจและความสัมพันธ์กับผู้คนรอบข้าง แต่นักชีววิทยาจะดูปัจจัยจากอีกมุมหนึ่ง นั่นคือสิ่งที่เกิดขึ้นในร่างกายและสมอง นักชีววิทยาจะบอกว่า อารมณ์ความรู้สึกของคนเรานั้นถูกกำกับด้วยชีวเคมีในร่างกาย ความสุขของคนเรา จึงไม่ได้เกิดจากปัจจัยภายนอกนอกอย่างเงินเดือนหรือชื่อเสียง แต่เกิดจากกลไกการทำงานของนิวรอน (neurons) ช่องว่างระหว่างเซลล์ประสาท (synapses) และสารชีวเคมีอย่างเซโรโทนิน โดพามีน และออกซิโทซิน (serotonin, dopamine, oxytocin) ต่างหาก\nในเชิงชีววิทยาแล้ว คนเราจึงไม่ได้มีความสุขจากการถูกล็อตเตอรี่หรือได้รับการเลื่อนขั้น ความสุขนั้นเกิดจากเหตุผลเดียวเท่านั้น นั่นคือความรู้สึกดีๆ ที่เกิดขึ้นในร่างกายเรา เวลาที่คนเรากระโดดโลดเต้นเมื่อถูกหวย จริง ๆ แล้วเราเพียงมีปฏิกิริยาตอบสนอง การสูบฉีดของฮอร์โมนในร่างกาย และพายุประจุไฟฟ้าในสมองต่างหาก แต่สภาวะเหล่านี้จะเกิดขึ้นเพียงประเดี๋ยวประด๋าวเท่านั้น ไม่นานฮอร์โมนก็จะหยุดพลุ่งพล่าน และประจุไฟฟ้าก็ย่อมสงบลง\nนักวิจัยบางกลุ่มตั้งสมมติฐานว่า ระดับความสุขของคนเรานั้นถูกกำหนดมาแต่กำเนิด คนบางคนอาจเกิดมาพร้อมชีวเคมี ที่ทำให้เขามีระดับความสุขอยู่ระหว่าง 6-10 คะแนนโดยมีค่าเฉลี่ยอยู่ที่ 8 เต็ม 10 ขณะที่คนบางคนอาจมีระดับความสุขอยู่ระหว่าง 3-7 คะแนนและมีค่าเฉลี่ยอยู่ที่ 5 เต็ม 10 ลองนึกภาพคนที่เรารู้จักก็ได้ คนบางคนหน้าบึ้งตึงตลอดเวลา ต่อให้คนๆ นี้ถูกหวยหรือได้เลื่อนขั้น เขาก็มีความสุขได้แค่ 7 เต็ม 10 เท่านั้น ขณะที่บางคนดูเหมือนจะหน้าเปื้อนยิ้มตลอดเวลา แม้ว่าขายหุ้นขาดทุนเขาก็ดูไม่ได้ทุกข์ร้อนอะไรมาก\nเมื่อระดับความสุขของคนเราถูกกำหนดโดยชีวเคมี ต่อให้เราสมปรารถนาเพียงใด ได้ซื้อรถใหม่ ได้แต่งงาน ได้มีลูก ขีดความสุขอาจเพิ่มขึ้นเพียงแค่ชั่วคราว สุดท้ายระดับของความสุขจะกลับไปที่ค่าเฉลี่ยของเราอยู่ดี แต่ก็ใช่ว่าสิ่งเหล่านี้จะไม่มีความหมายเสียทีเดียว เพราะถ้าตัวคุณมีระดับของความสุขอยู่ระหว่าง 3-7 คะแนน การมีคู่ครองที่ดีก็อาจทำให้คุณมีความสุขอยู่ที่ 6\u0026frasl;10 ไปได้นานๆ แต่หากคุณได้คู่ครองที่ไม่เหมาะสม ระดับความสุขก็อาจจะอยู่ที่ 3\u0026frasl;10 ไปอีกแสนนานเช่นกัน\nถ้าเรายึดทฤษฎีความสุขของนักชีววิทยา นั่นก็แสดงว่าการพัฒนาต่างๆ ที่ผ่านมาของนุษย์ไม่ได้ทำให้เรามีความสุขมากขึ้น เพราะแม้โลกจะเปลี่ยนไปอย่างไร ก็แทบไม่มีผลกับระดับชีวเคมีในตัวของแต่ละคนเลย ถ้าคุณอยากมีความสุขขึ้นจริงๆ ก็ไม่จำเป็นต้องปฏิรูปหรือกระตุ้นเศรษฐกินอะไร แค่ให้กินยากระตุ้นฮอร์โมน หรือกระตุ้นการหลั่งสารอย่าเซโรโทนินก็พอแล้วรึเปล่า\nความหมายของชีวิต แต่ถ้าความสุขเกิดจากเพียง “ความรู้สึกดีๆ ในร่างกาย” แต่เพียงอย่างเดียว ทำไมพ่อแม่ถึงยังอยากจะมีลูก? เพราะการเลี้ยงลูกนั้นต้องเจอแต่ความรู้สึกไม่ดีมากมาย ไม่ว่าจะเป็นการอดหลับอดนอน การเปลี่ยนผ้าอ้อมที่เหม็นฉึ่ง การรับมือเวลาลูกงอแง แต่พอถามคนเป็นพ่อเป็นแม่ ก็มักจะตอบว่าลูกคือหนึ่งในสิ่งที่ทำให้เขามีความสุขที่สุด หรือจริงๆ แล้วความสุขไม่ใช่เพียงสมการง่ายๆ ที่เอาความรู้สึกดีๆ ตั้งและลบด้วยความรู้สึกไม่ดี แต่เป็นการรู้สึกว่าสิ่งที่เราทำอยู่นี้มีคุณค่าและมีความหมาย\nความเชื่อและวิธีคิดจึงมีผลอย่างมากว่าเราจะมองการเลี้ยงลูกอย่างไร ระหว่างการ “เป็นทาสให้กับลูกจอมเผด็จการ” หรือ “การเลี้ยงดูชีวิตใหม่ด้วยความรัก” เหมือนดังที่นิทเช่ นักปรัชญาชื่อดังได้กล่าวไว้ “ถ้าคุณเชื่อมั่นในเหตุผล คุณจะทนรับกับทุกสถานการณ์ได้” (if you have a why, you can bear almost any how) ชีวิตที่ลำบากแต่มีความหมายอาจนำพามาซึ่งความสุขได้ และชีวิตที่แสนสบายแต่ไร้คุณค่าก็อาจจะนำพาซึ่งความทุกข์ได้เช่นกัน\nดังนั้น แม้คนในยุคกลางจะไม่ได้มีสุขสบายเหมือนคนในสมัยนี้ แต่ถ้าเขาเชื่อในเรื่องความสุขนิรันดร์กาลในปรโลก คนๆ นั้นก็อาจจะมีความสุขกว่าคนยุคใหม่ที่ไม่ได้เชื่อว่าชีวิตมีแก่นสารอะไร แค่เกิดมาใช้ชีวิตเพื่อรอวันตาย และรอวันถูกลืมเท่านั้น เราอาจจะรู้สึกว่าคนในยุคกลางที่เชื่อในปรโลกกำลังหลอกตัวเองอยู่รึเปล่า? ซึ่งคำตอบก็คือใช่ และมันก็ไม่ใช่เรื่องผิดอะไร ตราบใดที่ความเชื่อนั้นทำให้ชีวิตเขามีความสุขและทำให้ชีวิตเขามีความหมาย\nเพราะหากมองในเชิงชีววิทยาแล้ว สิ่งมีชีวิตที่เรียกว่ามนุษย์นั้นไม่ได้มีความหมายพิเศษใดๆ เลย ถ้าพรุ่งนี้โลกจะแตกไป จักรวาลก็จะยังคงอยู่ต่อไปโดยไม่ทุกข์ร้อนใดๆ ดังนั้นไม่ว่าคุณจะเป็นนักวิทยาศาสตร์ที่คิดค้นยาใหม่ๆ หรือเป็นทหารที่ปกป้องแผ่นดินแม่ ต่างก็ต้องยึดมั่นกับความเชื่อหรือความหมายอะไรบางอย่าง ไม่ต่างอะไรกับคนยุคกลางที่เชื่อในเรื่องความสุขในปรโลก ฟังแล้วก็เครียดเหมือนกัน สุดท้ายแล้วความสุขขึ้นอยู่กับการหลอกตัวเองว่าชีวิตมีความหมายอย่างนั้นหรือ?\nรู้จักตัวเอง ยุคนี้คือยุคที่ความคิดแนวเสรีนิยม (liberalism) กำลังเฟื่องฟู แนวคิดนี้บอกว่าเราเองเท่านั้น ที่รู้ดีที่สุดว่าอะไรนำความสุขมาให้ เราจึงได้ยินเสียงพร่ำสอนว่าให้ทำไปเลย! (Just do it!) หรือจงตามเสียงของหัวใจ (Follow your passion) แต่แนวคิดนี้ขัดแย้งกับศาสนาหลักๆ หลายศาสนา ที่บอกว่าจักรวาลก็มีกฎเกณฑ์ด้านศีลธรรมอยู่ ดังนั้นเราจึงไม่ควรเอาความรู้สึกของตัวเองเป็นไม้บรรทัด เพราะมนุษย์นั้นมีบาปติดตัวมาแต่กำเนิด จึงอาจตกเป็นทาสของซาตานเมื่อไหร่ก็ได้หากปล่อยตัวปล่อยใจทำตามทุกสิ่งที่ตัวเองต้องการ\nแม้กระทั่งดาร์วินก็ยังพูดถึงทฤษฏี “ยีนเห็นแก่ตัว” (selfish gene) ที่มีสมมติฐานว่า ดีเอนเอจะกำกับให้มนุษย์ทำอะไรก็แล้วแต่เพื่อเพิ่มโอกาสในการสืบสายพันธุ์ แม้ว่ามันอาจเป็นโทษต่อตัวคนๆ นั้นหรือคนอื่นๆ ก็ตามที หลายศาสนาจึงมีแนวทางตรงกันข้ามกับแนวคิดเสรีนิยม โดยเฉพาะศาสนาพุทธที่ศึกษาเรื่องความสุขมากกว่าศาสนาใดในโลกนี้\nพระพุทธเจ้ามีความเห็นตรงกับนักชีววิทยาที่ว่า ความสุขนั้นเกิดจากความรู้สึกในร่างกาย แต่บทสรุปของพระองค์นั้นกลับต่างออกไป ศาสนาพุทธสอนว่าคนทั่วไปจะมองว่าความรู้สึกดีๆ ในร่างกายคือความสุข ส่วนความรู้สึกที่ไม่ดีคือความทุกข์ ดังนั้นคนเราจึงโหยหาความรู้สึกดี และวิ่งหนีความรู้สึกที่ไม่ดี แต่ไม่ว่าจะเป็นความรู้สึกใดก็แล้วแต่ ก็ล้วนเกิดขึ้นชั่วคราวและหมดไปทั้งนั้น การวิ่งตามหาความรู้สึกสุข จึงเป็นเรื่องไม่มีวันจบ เพราะแม้ว่าจะสมหวังแต่ความสุขนั้นก็จะหมดไปในไม่ช้า ทำให้เราต้องวิ่งตามหาความสุขอยู่ร่ำไป\nคนเราจะหมดทุกข์ได้ไม่ใช่เพราะว่ามีแต่ความรู้สึกดีๆ ตลอดเวลา แต่จะหมดทุกข์ก็ต่อเมื่อ เข้าใจถึงความไม่แน่นอนของความรู้สึกเหล่านี้ และการทำวิปัสสนาก็คือเทคนิคที่จะทำให้เข้าใจถึงความจริงข้อนี้ โดยผู้ปฏิบัติจะคอยสังเกตความรู้สึกต่างๆ ที่เกิดขึ้นตามร่างกาย เพื่อให้เห็นถึงการเกิดขึ้นและดับไปถึงความรู้สึกนั้นๆ และเข้าใจว่าการตามหาความรู้สึกเหล่านั้นเป็นเรื่องไร้ความหมาย เมื่อเราหยุดตามหา จิตใจก็จะหยุดดิ้นรน และผู้ปฏิบัติก็จะได้พบกับความสุขความสงบที่แท้จริง\nถ้าสิ่งที่พระพุทธเจ้าสอนนั้นถูกต้อง ความเข้าใจเรื่องความสุขของนักสังคมศาสตร์หรือนักชีววิทยาก็อาจจะคลาดเคลื่อน เพราะความสุขไม่ได้มาจากการได้ในสิ่งที่หวัง หรือการได้มีความรู้สึกดีๆ แต่ขึ้นอยู่กับว่า เราเข้าใจความจริงในตัวเรามากน้อยเพียงใดต่างหาก ซึ่งถ้าเป็นเช่นนั้น เราก็แทบไม่มีหลักฐานอะไรมายืนยันเลยว่า คนเราในยุคนี้มีความสุขกว่ามนุษย์ยุคหินบ้างรึเปล่า\nที่มาบทความ :https://anontawong.com\n","date":1589065200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589065200,"objectID":"38f0f9b52a989bbe8f4ae9f9b176bd17","permalink":"https://example.com/book/sapiens/sapiens-19/","publishdate":"2020-05-10T00:00:00+01:00","relpermalink":"/book/sapiens/sapiens-19/","section":"book","summary":"500 ปีที่ผ่านมา การปฏิวัติทางวิทยาศาสตร์ และการปฏิวัติอุตสาหกรรมได้สร้างความก้าวหน้าให้มนุษย์ในอัตราเร่งยิ่งกว่ายุคใด ๆ เรามีเครื่องไม้เครื่องมือมากมาย เรามีแหล่งพลังงานที่ไม่จำกัด (นิวเคลียร์และแสงอาทิตย์) และชีวิตของพวกเราก็เปลี่ยนไปจนแทบจำไม่ได้ แต่ความก้าวหน้าเหล่านั้นมันได้ทำให้เรามีความสุขมากขึ้นรึเปล่า?\nนายนีล อาร์มสตรองที่ทิ้งรอยเท้าไว้บนดวงจันทร์ มีความสุขกว่าหญิงสาวนิรนามที่ทิ้งรอยฝ่ามือไว้ในถ้ำ Chauvet Cave เมื่อ 30,000 ปีที่แล้วหรือไม่?\nหลายคนเชื่อว่า เมื่อมนุษย์เรามีความสามารถมากขึ้น เราก็จะนำความสามารถนั้นมาบรรเทาความทุกข์ร้อน ดังนั้นมนุษย์ควรจะมีความสุขมากขึ้นเรื่อย ๆ แต่แนวคิดนี้ก็ใช่ว่าจะถูกต้องเสมอไป เพราะแม้การพัฒนา จะทำให้สังคมขับเคลื่อนไปข้างหน้า แต่ก็ไม่ได้หมายความว่าคุณภาพชีวิตในระดับปัจเจกจะดีขึ้น เหมือนอย่างที่เราได้เห็นแล้วว่า ชีวิตของชาวนาหลังการปฏิวัติเกษตรกรรมนั้นต้องตรากตรำและเหน็ดเหนื่อยกว่าชีวิตของเหล่าบรรพบุรุษในยุคเข้าป่าเก็บพืชผลมากมายนัก แต่ถ้าจะมองในช่วงไม่กี่ศตวรรษที่ผ่านมา ชีวิตของคนเราก็อาจจะดีขึ้นจริงๆ เพราะเรามีสงครามข้ามชาติน้อยลง ความรู้เรื่องการแพทย์ของเราก็พัฒนาไปมาก อัตราการตายของทารกก็ต่ำ และการล้มตายเพราะความหิวโหยนั้นเป็นเรื่องที่แทบจะไม่เกิดขึ้นอีกแล้ว\nแต่มุมมองอย่างนี้ก็มีช่องโหว่อยู่อย่างน้อยสามประการ\n ประการแรกคือ ข้อดีที่กล่าวมานั้นเพิ่งเกิดขึ้นในช่วงไม่กี่ปีที่ผ่านมานี่เอง มนุษย์เพิ่งได้รับประโยชน์ จากความรู้ด้านยารักษาโรคจริงๆ เมื่อ 150 ปีที่แล้ว อัตราการตายของเด็กทารกเพิ่งลดลงในช่วง 100 ปีที่ผ่านมา ความอดอยากครั้งสุดท้ายก็เพิ่งเกิดขึ้นเมื่อ 50 ปีที่แล้ว เมื่อนโยบายก้าวกระโดด (Great Leap Forward) ของจีนทำให้คนล้มตายไปไปหลายสิบล้าน และสงครามระหว่างนานาประเทศเพิ่งจะยุติหลังการมาของอาวุธนิวเคลียร์เมื่อ 70 ปีที่แล้วเท่านั้นเอง เมื่อเทียบปรากฎการณ์เหล่านี้กับระยะเวลาร่วม 70,000 ปีนับตั้งแต่ Homo Sapiens เดินทางออกจากแอฟริกา จึงถือเป็นการสุ่มตัวอย่างที่เข้าข้างตัวเองไปหน่อย\n ประการที่สอง “ความรุ่งเรือง” ในช่วง 50 ปีที่ผ่านมาอาจเป็นเพียงการจุดระเบิดเวลา ลัทธิบริโภคนิยม ได้ทำให้ธรรมชาติเสื่อมโทรมลงไปมากเสียจนธรรรมชาติอาจมีการปรับตัวครั้งใหญ่ในอนาคตอันใกล้นี้ก็ได้","tags":null,"title":"ตอนที่ 19 - สุขสมบ่มิสม","type":"docs"},{"authors":null,"categories":null,"content":" ในสมัยก่อน คนที่เชื่อมั่นในศาสนาที่นับถือพระเจ้าองค์เดียว จะเชื่อว่ามนุษย์และสรรพสัตว์ล้วนถูกพระเจ้าสร้างขึ้นมา และเรียกกระบวนการนี้ว่า Intelligent Design หรือการออกแบบอย่างชาญฉลาด แต่หลังจากการปฏิวัติทางวิทยาศาสตร์ คนส่วนใหญ่หันมาเชื่อในทฤษฎีของ Charles Darwin ที่สันนิษฐานว่า นับตั้งแต่สิ่งมีชีวิตเซลล์เดียวได้ถือกำเนิดขึ้นในท้องทะเลของโลกเมื่อ 4 พันล้านปีที่แล้ว กระบวนการ Natural Selection หรือ “การคัดสรรโดยธรรมชาติ” คือแรงผลักดันให้สิ่งมีชีวิตตัวนั้นค่อย ๆ พัฒนาและขยายเผ่าพันธุ์จนกลายมาเป็นพืชพรรณ สรรพสัตว์ และมนุษย์ที่มีองค์ประกอบซับซ้อนอย่างทุกวันนี้\nคนที่เชื่อเรื่อง Natural Selection จะมองว่าการที่ยีราฟคอยาวไม่ใช่เพราะประสงค์ของพระผู้เป็นเจ้า แต่เป็นเพราะว่ายีราฟที่คอยาว จะกินอาหารได้มากกว่า และออกลูกได้มากกว่ายีราฟที่คอสั้น ดังนั้นยีราฟที่คอยาวจึงมีอัตราการรอดชีวิตที่สูงกว่าและสืบพันธุ์มาจนถึงทุกวันนี้ เป็นเวลาถึง 4 พันล้านปี ที่สิ่งมีชีวิตทุกผู้ทุกนามตกอยู่ใต้กระบวนการ Natural Selection แต่ในอีกไม่กี่ปีต่อจากนี้ กระบวนการ Intelligent Design จะกลับมาอินเทรนด์อีกครั้งหนึ่ง เพียงแต่คราวนี้ “ผู้ออกแบบ” จะไม่ใช่พระเจ้าของศาสนาใด แต่เป็นชาว Homo Sapiens นี่เอง\nกระต่ายเรืองแสง ในปี 2000 ศิลปินชาวบราซิลเลียนนาม Eduardo Kac ได้ว่าจ้างนักวิทยาศาสตร์ในฝรั่งเศส ให้ช่วยเอายีนในแมงกะพรุนเรืองแสงสีเขียว มาฉีดใส่ตัวอ่อนกระต่าย ซึ่งพอกระต่ายตัวนี้เกิดมา มันก็กลายเป็นกระต่ายที่เรืองแสงสีเขียวในที่มืดได้ กระต่ายตัวนี้มีชื่อว่า Alba\nAlba ไม่ได้เกิดจาก Natural Selection แน่ ๆ เพราะไม่เคยมีบรรพบุรุษกระต่ายตัวไหนที่เรืองแสงได้ มันจึงอาจเป็นสิ่งมีชีวิตตัวแรกที่เกิดจาก Intelligent Design และเป็นเหมือนหมุดหมายสำคัญ ที่เปิดศักราชใหม่แห่งวิวัฒนาการที่ไม่ได้ตกอยู่ใต้กฎ Natural Selection อีกต่อไป\n ณ ปี 2014 ที่ผู้เขียนเขียนหนังสือเรื่อง Sapiens ขึ้นมานี้ Intelligent Design มีอยู่สามวิธี ได้แก่วิศวกรรมทางชีววิทยา (biological engineering) วิศวกรรมไซบอร์ก (cyborg engineering) และการสร้างสิ่งมีชีวิตอนินทรีย์ (inorganic life)\n แมมมอธจะกลับมา ในปี 1996 นักวิทยาศาสตร์ได้ทำการปลูกกระดูกอ่อนของวัวลงบนหลังของหนู และหน้าตาของมันก็คล้ายหูมนุษย์เลย โดยนักวิทยาศาสตร์เชื่อว่า ความรู้นี้จะทำให้เราสามารถสร้างอวัยวะเทียมเพื่อนำมาใช้ในคนได้\nนักวิทยาศาสตร์ยังสามารถตัดต่อพันธุกรรม (genetic engineering) ได้อีกด้วย แต่เนื่องจากเป็นประเด็นที่อ่อนไหว งานวิจัยด้านนี้ จึงถูกจำกัดเฉพาะสิ่งมีชีวิตเล็ก ๆ อย่างไส้เดือนหรือหนูทดลองเท่านั้น โดยนักพันธุศาสตร์ได้ค้นพบวิธีการตัดต่อยีน ที่ทำให้ไส้เดือนประเภทหนึ่งมีอายุยืนยาวขึ้น 6 เท่า ทำให้หนูบางตัวกลายเป็นหนูอัจริยะที่มีความจำเป็นเลิศ และทำให้หนูนา ซึ่งปกติมีพฤติกรรมสำส่อนให้กลายเป็นสัตว์ผัวเดียวเมียเดียวได้\nนอกจากนี้ นักพันธุกรรมยังกำลังทำสิ่งที่เราเคยเห็นในหนัง Jurassic Park อีกด้วย ไม่ใช่การคืนชีพให้ไดโนเสาร์นะครับ แต่เป็นการคืนชีพให้แมมมอธ เพราะมีการขุดพบศพของแมมมอธที่ถูกแช่แข็งไว้ในไซบีเรียและนักวิทยาศาสตร์ก็กำลังทำการถอดรหัส DNA ของแมมมอธ จากนั้นก็จะนำมันไปให้ช้างอุ้มท้อง ซึ่งถ้าทำสำเร็จเราก็จะมีแมมมอธตัวแรกในรอบ 5,000 ปี\nยังไม่พอ ศาสตราจารย์ George Church แห่งมหาวิทยาลัย Harvard ยังบอกอีกว่า เราน่าจะชุบชีวิตให้มนุษย์นีแอนเดอร์ธาลได้ (Neanderthal) เพราะนักพันธุกรรมได้ถอดรหัส DNA ของนีแอนเดอธาลเสร็จเรียบร้อยแล้ว ถ้าใครพร้อมที่จะสนับสนุนเงินทุน 30 ล้านดอลลาร์ เขาก็พร้อมที่จะทำภารกิจนี้และเชื่อว่าน่าจะมีอาสาสมัครรับอุ้มบุญให้กับนีแอนเดอธาลคนแรกในรอบ 30,000 ปีด้วย\nแต่ไหน ๆ ก็ไหน ๆ แล้ว ทำไมไม่ออกแบบมนุษย์ให้ดีกว่าเดิมด้วยซะเลย? เพราะการถอดรหัส DNA ของมนุษย์นั้นไม่ได้ยากไปกว่าการถอดรหัสหนูเท่าไหร่ (จำนวน DNA ของมนุษย์มีมากกว่าหนูแค่ 13%) ถ้าเราสามารถออกแบบหนูอัจฉริยะและหนูนาที่รักเดียวใจเดียวได้ ทำไมเราไม่ทำให้มนุษย์มีคุณสมบัติเหล่านั้นบ้าง?\nแต่เนื่องจากวิศวพันธุกรรมกับมนุษย์นั้นเป็นเรื่องละเอียดอ่อน และถูกต่อต้านสูงมาก การศึกษาวิจัยในมนุษย์จึงเป็นไปอย่างช้า ๆ แต่สุดท้ายแล้วจะมีใครหยุดมันได้จริงหรือ? สมมติว่ามีนักวิทยาศาสตร์คนหนึ่ง คิดค้นวิธีรักษาโรคอัลไซเมอร์ได้ และวิธีการเดียวกันนี้ยังสามารถทำให้คนธรรมดามีความจำเป็นเลิศได้ จะมีเหตุผลอะไรที่จะห้ามไม่ให้นำเทคโนโลยีนี้ไปใช้กับคนธรรมดา?\nมนุษย์ไซบอร์ก นิยามของไซบอร์ก คือสิ่งมีชีวิตที่มีทั้งส่วนผสมของอินทรีย์และอนินทรีย์ (organic \u0026amp; inorganic parts) จริง ๆ แล้วพวกเราตอนนี้ ก็มีสิ่งที่เป็นอนินทรีย์อยู่บนร่างกายอยู่แล้ว เช่นแว่นตาหรือมือถือ แต่ความก้าวหน้าทางเทคโนโลยี กำลังจะทำให้มนุษย์กลายเป็นไซบอร์กเต็มรูปแบบ เพราะเครื่องมือเหล่านี้จะถูกฝังอยู่เป็นเนื้อเดียวกับร่างกายเราเลย\nยกตัวอย่างบริษัท Retina Implant ในเยอรมันที่สามารถทำให้คนตาบอด “มองเห็น” ได้ด้วยการฝังชิปลงในตาของผู้พิการ เมื่อชิปได้รับภาพมันจะส่งสัญญาณไฟฟ้าไปกระตุ้นเซลล์ประสาทที่เชื่อมไปยังสมองอีกทีหนึ่ง โดยในปัจจุบันเทคโนโลยีตัวนี้ทำให้คนตาบอดสามารถหันหน้าถูกทิศ อ่านตัวหนังสือได้ และยังแยกแยะใบหน้าคนได้อีกด้วย\nนาย Jesse Sullivan ที่สูญเสียแขนไปทั้งสองข้างจากอุบัติเหตุ ได้รับการผ่าตัดฝังแขน bionic (ชีวประดิษฐศาสตร์) ที่เขาสามารถควบคุมได้ด้วยความคิดไม่ต่างอะไรกับคนที่มีแขนปกติ และแม้แขนกลเหล่านี้ จะยังไม่สามารถเคลื่อนไหวได้อย่างอิสระเหมือนแขนมนุษย์ แต่ข้อดีก็คือมันสามารถถูกสร้างให้แข็งแรงกว่าแขนมนุษย์ได้หลายเท่า\nนักวิจัยกำลังศึกษาการทำงานของสมองเพื่อช่วยผู้ป่วยโรค Locked-in syndrome ที่ไม่สามารถขยับอะไรได้เลยนอกจากการกะพริบตา โดยนักวิจัยได้ฝังเครื่องรับสัญญาณไว้ที่หัวสมองเพื่อพยายามจะเปลี่ยนสัญญาณเหล่านี้เป็นคำพูด ซึ่งถ้าทำได้สำเร็จ ก็จะทำให้คนป่วยด้วยโรคนี้สามารถพูอคุยกับโลกภายนอกได้ และเราอาจใช้เทคโนโลยีนี้ในการอ่านความคิดคนได้อีกด้วย\nแต่โปรเจ็คที่น่าสนใจที่สุดคือการเชื่อมสมองเข้ากับคอมพิวเตอร์เพื่อให้มันพูดคุยกันได้โดยตรง จะเกิดอะไรขึ้นหากมนุษย์เชื่อมสมองเข้ากับอินเตอร์เน็ต หรือเชื่อมสมองของตนเองเข้ากับสมองของคนอื่นๆ? ถ้าเราสามารถเข้าถึงความคิดและความทรงจำของคนทั่วโลกได้ราวกับมันเป็นความคิดและความทรงจำของเราเอง จะเกิดอะไรขึ้นกับตัวตนและเพศสภาพของเรา? เราจะมีความรู้สึกนึกคิดอย่างไร? ไซบอร์กที่อยู่ในสภาพนี้คงไม่สามารถเรียกว่ามนุษย์ได้อีกแล้ว แต่เป็นสิ่งมีชีวิตอีกรูปแบบหนึ่งที่แตกต่างจากเราโดยสิ้นเชิง\nชีวิตไร้ขอบเขต อีกความเป็นไปได้หนึ่งในการออกแบบชีวิต คือชีวิตที่เป็นอนินทรีย์ล้วน ๆ (completely inorganic life) จะเกิดอะไรขึ้น ถ้าเราสามารถดาวน์โหลดทุกอย่างในหัวสมองมนุษย์ ลงคอมพิวเตอร์ได้ และคอมพิวเตอร์เครื่องนั้น สามารถคิดและพูดได้เหมือนเราทุกอย่าง?\nและจะเกิดอะไรขึ้น ถ้านักวิทยาศาสตร์สามารถเขียนโค้ดที่ทำให้คอมพิวเตอร์มีความคิดเป็นของตัวเอง มีตัวมีตน และมีความทรงจำของตัวเองได้? The Human Brain Project คือโครงการที่ถูกตั้งขึ้นเมื่อปี 2005 โดยมีเป้าหมายที่จะสร้างคอมพิวเตอร์ที่ทำงานเหมือนสมองมนุษย์ ซึ่งถ้าโครงการนี้สำเร็จ “ชีวิต” ที่เคยถูกจำกัดอยู่แต่ในร่างอินทรีย์ (organic body) อยู่ 4 พันล้านปีจะถูกปลดปล่อยสู่โลก inorganic อันกว้างใหญ่และแปรสภาพไปอยู่ในรูปแบบที่ยากเกินจะหยั่งถึง\nSingularity ครั้งใหม่  การถอดรหัส DNA มนุษย์ครั้งแรกในประวัติศาสตร์นั้นต้องใช้เงินถึง 3 พันล้านดอลลาร์และใช้เวลาถึง 15 ปี แต่ตอนนี้เราสามารถถอดรหัส DNA ของเราเองด้วยการจ่ายเงินแค่ไม่กี่ร้อยดอลลาร์และใช้เวลาเพียง 2 สัปดาห์\n จากนี้ไปการรักษาโรคจึงจะมีความจำเพาะเจาะจงกับตัวคนไข้มากขึ้นเรื่อยๆ คุณหมออาจจะอ่านรหัส DNA แล้วบอกได้เลยว่าคุณมีความเสี่ยงเป็นมะเร็งตับ แต่ไม่มีความเสี่ยงเรื่องโรคหัวใจ หรือยาตัวนี้อาจจะทำให้คนส่วนใหญ่ตายได้ แต่มันเข้ากับร่างกายของคุณพอดี แต่เราจะโดนบริษัทประกันขอให้เราส่ง DNA ให้เขาตรวจสอบก่อนคิดเบี้ยประกันรึเปล่า? และบริษัทที่เราสมัครงานจะขอดู DNA ของเราก่อนตัดสินใจรับเราเข้าทำงานหรือไม่?\nปัญหาเหล่านี้จะดูเล็กไปทันทีเมื่อเทียบกับโปรเจ็ค Gilgamesh ที่ต้องการนำความหนุ่มสาวนิรันดร์มาสู่มนุษย์ รวมถึงการสร้างยอดมนุษย์หรือ superhuman ที่ฉลาดกว่า และแข็งแรงกว่ามนุษย์ธรรมดาหลายเท่า ในช่วงสองร้อยปีที่ผ่านมา มนุษย์เรียกร้องสังคมที่เท่าเทียมกันมาโดยตลอด ซึ่งดูเหมือนเราจะทำได้ดีขึ้นเรื่อย ๆ แต่ตอนนี้เราอาจกำลังก้าวสู่ สังคมที่เหลื่อมล้ำมากกว่ายุคใด ๆ ที่ผ่านมา สมัยก่อนคนรวยมักจะหลอกตัวเองว่าทายาทของตนนั้นเลอเลิศกว่าทายาทของคนจน ทั้ง ๆ ที่จริง ๆ แล้วลูกของชาวนานั้น ก็มีโอกาสที่จะฉลาดได้เท่ากับลูกของพระราชา แต่ในอนาตตอันใกล้นี้ คนรวยที่เข้าถึงเทคโนโลยี จะสามารถให้กำเนิดเด็กที่ฉลาดกว่า หน้าตาดีกว่า และแข็งแรงกว่าอย่างที่ลูกชาวนาไม่มีทางเทียบติด\nนี่ไม่ใช่นิยายวิทยาศาสตร์ นิยายวิทยาศาสตร์ที่เราเคยอ่านจะเป็นภาพของมนุษย์ที่มีรูปร่าง หน้าตา ความคิดเหมือนเรานี่แหละ เพียงแต่มีเครื่องไม้เครื่องมือเท่ ๆ เช่นยานอวกาศความเร็วแสงหรือปืนเลเซอร์ แต่โลกอนาคตที่เรากำลังมุ่งไปจริง ๆ นั้นคือโลกที่เหล่า Homo Sapiens จะถูกดัดแปลงจนไม่อาจเรียกว่าเป็นมนุษย์ได้อีกต่อไป เพราะพวกเขาจะเป็นไซบอร์กที่ไม่แก่ ไม่มีเพศ ไม่ลืม ไม่โกรธและไม่เศร้า แต่จะมีอารมณ์และความรู้สึกที่มนุษย์อย่างเรา ๆ ไม่อาจจินตนาการถึงได้\nนักฟิสิกส์เรียก Big Bang ที่เป็นจุดกำเนิดจักรวาลว่า Singularity หรือเอกภาวะ มันเป็นจุดที่กฎต่าง ๆ ในธรรมชาติยังไม่ปรากฎ ซึ่งรวมถึงเวลาด้วย การถามว่า “ก่อน” จะมี Big Bang นั้นมีอะไรจึงเป็นคำถามที่ไร้ความหมาย\nมนุษยชาติอาจกำลังมุ่งสู่ Singularity ครั้งใหม่ ณ จุดที่สมองและตัวตนของมนุษย์ทุกคน เชื่อมต่อกันเป็นหนึ่งเดียว คอนเซ็ปต์ต่าง ๆ ที่เราใช้อธิบายสิ่งต่างๆ ไม่ว่าจะเป็น “ตัวผม” หรือ “ตัวคุณ” “ผู้หญิง” หรือ “ผู้ชาย” “รัก” หรือ “เกลียด” จะไม่มีความหมายอีกต่อไป\nเมื่อมนุษย์กลายเป็นพระเจ้า เมื่อ 70,000 ปีที่แล้ว Homo Sapiens เป็นเพียงเผ่าพันธุ์เล็กๆ เผ่าพันธุ์หนึ่งที่อยู่ไปวันๆ ในทวีปแอฟริกา แต่หลังจากนั้นเพียงไม่นาน เผ่าพันธุ์นี้ก็ได้ก้าวขึ้นมาเป็นสิ่งมีชีวิตที่ครองโลก เราสร้างเมือง สร้างอาณาจักร และทำการค้าขายไปทั่วโลก แต่เราได้ทำให้โลกใบนี้ดีขึ้นหรือเปล่า?\nความเป็นอยู่ของมนุษย์อาจดีกว่าแต่ก่อนก็จริง เพราะการอดตายและสงครามลดลง และโรคภัยหลายหลากก็มีหนทางรักษา แต่สัตว์จำนวนมหาศาลยังถูกเบียดเบียน และถูกทารุณอย่างที่บรรพบุรุษของมันไม่เคยเจอมาก่อน ที่สำคัญ แม้ว่าเราจะมีความสามารถมากกว่าเดิมหลายเท่า แต่เราก็ไม่แน่ใจว่าเราต้องการอะไรกันแน่ เรามีพลัง และอำนาจมากกว่ายุคใด แต่เราก็ไม่รู้ว่าจะเอาพลังนั้นไปทำอะไร เราได้สถาปนาตัวเองเป็นพระเจ้าที่ไม่ต้องเกรงใจใครหรือเคารพอะไรเลย\nเราจึงเบียดเบียนสรรพสัตว์เพียงเพื่อให้ได้มาซึ่งความสำราญและความสะดวกสบายแต่เราก็ไม่เคยพอใจจริง ๆ เสียที\n จะมีสิ่งใดที่อันตรายไปกว่าพระเจ้าขี้หงุดหงิดที่ไม่รู้ว่าตัวเองต้องการอะไร?\n  \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; จบบริบูรณ์ \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;    ที่มาบทความ : https://anontawong.com\n ","date":1589065200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589065200,"objectID":"b897ff35ef34f3afd063d410337f9be4","permalink":"https://example.com/book/sapiens/sapiens-20/","publishdate":"2020-05-10T00:00:00+01:00","relpermalink":"/book/sapiens/sapiens-20/","section":"book","summary":"ในสมัยก่อน คนที่เชื่อมั่นในศาสนาที่นับถือพระเจ้าองค์เดียว จะเชื่อว่ามนุษย์และสรรพสัตว์ล้วนถูกพระเจ้าสร้างขึ้นมา และเรียกกระบวนการนี้ว่า Intelligent Design หรือการออกแบบอย่างชาญฉลาด แต่หลังจากการปฏิวัติทางวิทยาศาสตร์ คนส่วนใหญ่หันมาเชื่อในทฤษฎีของ Charles Darwin ที่สันนิษฐานว่า นับตั้งแต่สิ่งมีชีวิตเซลล์เดียวได้ถือกำเนิดขึ้นในท้องทะเลของโลกเมื่อ 4 พันล้านปีที่แล้ว กระบวนการ Natural Selection หรือ “การคัดสรรโดยธรรมชาติ” คือแรงผลักดันให้สิ่งมีชีวิตตัวนั้นค่อย ๆ พัฒนาและขยายเผ่าพันธุ์จนกลายมาเป็นพืชพรรณ สรรพสัตว์ และมนุษย์ที่มีองค์ประกอบซับซ้อนอย่างทุกวันนี้\nคนที่เชื่อเรื่อง Natural Selection จะมองว่าการที่ยีราฟคอยาวไม่ใช่เพราะประสงค์ของพระผู้เป็นเจ้า แต่เป็นเพราะว่ายีราฟที่คอยาว จะกินอาหารได้มากกว่า และออกลูกได้มากกว่ายีราฟที่คอสั้น ดังนั้นยีราฟที่คอยาวจึงมีอัตราการรอดชีวิตที่สูงกว่าและสืบพันธุ์มาจนถึงทุกวันนี้ เป็นเวลาถึง 4 พันล้านปี ที่สิ่งมีชีวิตทุกผู้ทุกนามตกอยู่ใต้กระบวนการ Natural Selection แต่ในอีกไม่กี่ปีต่อจากนี้ กระบวนการ Intelligent Design จะกลับมาอินเทรนด์อีกครั้งหนึ่ง เพียงแต่คราวนี้ “ผู้ออกแบบ” จะไม่ใช่พระเจ้าของศาสนาใด แต่เป็นชาว Homo Sapiens นี่เอง\nกระต่ายเรืองแสง ในปี 2000 ศิลปินชาวบราซิลเลียนนาม Eduardo Kac ได้ว่าจ้างนักวิทยาศาสตร์ในฝรั่งเศส ให้ช่วยเอายีนในแมงกะพรุนเรืองแสงสีเขียว มาฉีดใส่ตัวอ่อนกระต่าย ซึ่งพอกระต่ายตัวนี้เกิดมา มันก็กลายเป็นกระต่ายที่เรืองแสงสีเขียวในที่มืดได้ กระต่ายตัวนี้มีชื่อว่า Alba\nAlba ไม่ได้เกิดจาก Natural Selection แน่ ๆ เพราะไม่เคยมีบรรพบุรุษกระต่ายตัวไหนที่เรืองแสงได้ มันจึงอาจเป็นสิ่งมีชีวิตตัวแรกที่เกิดจาก Intelligent Design และเป็นเหมือนหมุดหมายสำคัญ ที่เปิดศักราชใหม่แห่งวิวัฒนาการที่ไม่ได้ตกอยู่ใต้กฎ Natural Selection อีกต่อไป","tags":null,"title":"ตอนที่ 20 - อวสาน Sapiens","type":"docs"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using academia\u0026rsquo;s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further talk details can easily be added to this page using Markdown and $\\rm \\LaTeX$ math code.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"8ebbbdeba622fbc24dab29b4efa6b173","permalink":"https://example.com/talk/coding/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/coding/","section":"talk","summary":"An example talk using academia's Markdown slides feature.","tags":[],"title":"Coding and Analyzing Qualitative Data","type":"talk"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using academia\u0026rsquo;s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further talk details can easily be added to this page using Markdown and $\\rm \\LaTeX$ math code.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"a3975af5f5dadc9b2c7bbc4e48bb0e6e","permalink":"https://example.com/talk/qualitative/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/qualitative/","section":"talk","summary":"An example talk using academia's Markdown slides feature.","tags":[],"title":"Qualitative Research Summer Intensive","type":"talk"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using academia\u0026rsquo;s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further talk details can easily be added to this page using Markdown and $\\rm \\LaTeX$ math code.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"f917008f74aa8012979052dcf8dbf864","permalink":"https://example.com/talk/synthesizing/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/synthesizing/","section":"talk","summary":"An example talk using academia's Markdown slides feature.","tags":[],"title":"Synthesizing Qualitative Data","type":"talk"},{"authors":["Little Dragon"],"categories":["Tutorials","Python"],"content":" Welcome Hi! If you want to learn how to work with files in Python, then this article is for you. Working with files is an important skill that every Python developer should learn, so let\u0026rsquo;s get started.\nIn this article, you will learn:\n How to open a file. How to read a file. How to create a file. How to modify a file. How to close a file. How to open files for multiple operations. How to work with file object methods. How to delete files. How to work with context managers and why they are useful. How to handle exceptions that could be raised when you work with files. and more!  Let\u0026rsquo;s begin! 🔅\nWorking with Files: Basic Syntax One of the most important functions that you will need to use as you work with files in Python is **open()**, a built-in function that opens a file and allows your program to use it and work with it.\nThis is the basic syntax:\n💡 Tip: These are the two most commonly used arguments to call this function. There are six additional optional arguments. To learn more about them, please read this article in the documentation.\nFirst Parameter: File The first parameter of the open() function is **file**, the absolute or relative path to the file that you are trying to work with.\nWe usually use a relative path, which indicates where the file is located relative to the location of the script (Python file) that is calling the open() function.\nFor example, the path in this function call:\nopen(\u0026quot;names.txt\u0026quot;) # The relative path is \u0026quot;names.txt\u0026quot;  Only contains the name of the file. This can be used when the file that you are trying to open is in the same directory or folder as the Python script, like this:\nBut if the file is within a nested folder, like this:\nThe names.txt file is in the \u0026ldquo;data\u0026rdquo; folder\nThen we need to use a specific path to tell the function that the file is within another folder.\nIn this example, this would be the path:\nopen(\u0026quot;data/names.txt\u0026quot;)  Notice that we are writing data/ first (the name of the folder followed by a /) and then names.txt (the name of the file with the extension).\n💡 Tip: The three letters .txt that follow the dot in names.txt is the \u0026ldquo;extension\u0026rdquo; of the file, or its type. In this case, .txt indicates that it\u0026rsquo;s a text file.\nSecond Parameter: Mode The second parameter of the open() function is the **mode**, a string with one character. That single character basically tells Python what you are planning to do with the file in your program.\nModes available are:\n Read (\u0026quot;r\u0026quot;). Append (\u0026quot;a\u0026quot;) Write (\u0026quot;w\u0026quot;) Create (\u0026quot;x\u0026quot;)  You can also choose to open the file in:\n Text mode (\u0026quot;t\u0026quot;) Binary mode (\u0026quot;b\u0026quot;)  To use text or binary mode, you would need to add these characters to the main mode. For example: \u0026quot;wb\u0026quot; means writing in binary mode.\n💡 Tip: The default modes are read (\u0026quot;r\u0026quot;) and text (\u0026quot;t\u0026quot;), which means \u0026ldquo;open for reading text\u0026rdquo; (\u0026quot;rt\u0026quot;), so you don\u0026rsquo;t need to specify them in **open()** if you want to use them because they are assigned by default. You can simply write open(\u0026lt;file\u0026gt;).\nWhy Modes?\nIt really makes sense for Python to grant only certain permissions based what you are planning to do with the file, right? Why should Python allow your program to do more than necessary? This is basically why modes exist.\nThink about it — allowing a program to do more than necessary can problematic. For example, if you only need to read the content of a file, it can be dangerous to allow your program to modify it unexpectedly, which could potentially introduce bugs.\nHow to Read a File Now that you know more about the arguments that the **open()** function takes, let\u0026rsquo;s see how you can open a file and store it in a variable to use it in your program.\nThis is the basic syntax:\nWe are simply assigning the value returned to a variable. For example:\nnames_file = open(\u0026quot;data/names.txt\u0026quot;, \u0026quot;r\u0026quot;)  I know you might be asking: what type of value is returned by **open()**?\nWell, a file object.\nLet\u0026rsquo;s talk a little bit about them.\nFile Objects According to the Python Documentation, a file object is:\n An object exposing a file-oriented API (with methods such as read() or write()) to an underlying resource.\n This is basically telling us that a file object is an object that lets us work and interact with existing files in our Python program.\nFile objects have attributes, such as:\n name: the name of the file. closed: True if the file is closed. False otherwise. mode: the mode used to open the file.  For example:\nf = open(\u0026quot;data/names.txt\u0026quot;, \u0026quot;a\u0026quot;) print(f.mode) # Output: \u0026quot;a\u0026quot;  Now let\u0026rsquo;s see how you can access the content of a file through a file object.\nMethods to Read a File For us to be able to work file objects, we need to have a way to \u0026ldquo;interact\u0026rdquo; with them in our program and that is exactly what methods do. Let\u0026rsquo;s see some of them.\nRead() The first method that you need to learn about is read(), which returns the entire content of the file as a string.\nHere we have an example:\nf = open(\u0026quot;data/names.txt\u0026quot;) print(f.read())  The output is:\nNora Gino Timmy William  You can use the type() function to confirm that the value returned by f.read() is a string:\nprint(type(f.read())) # Output \u0026lt;class 'str'\u0026gt;  Yes, it\u0026rsquo;s a string!\nIn this case, the entire file was printed because we did not specify a maximum number of bytes, but we can do this as well.\nHere we have an example:\nf = open(\u0026quot;data/names.txt\u0026quot;) print(f.read(3))  The value returned is limited to this number of bytes:\nNor  📌 Important: You need to close a file after the task has been completed to free the resources associated to the file. To do this, you need to call the **close()** method, like this:\nReadline() vs. Readlines() You can read a file line by line with these two methods. They are slightly different, so let\u0026rsquo;s see them in detail.\n**readline()** reads one line of the file until it reaches the end of that line. A trailing newline character (\\n) is kept in the string.\n💡 Tip: Optionally, you can pass the size, the maximum number of characters that you want to include in the resulting string.\nFor example:\nf = open(\u0026quot;data/names.txt\u0026quot;) print(f.readline()) f.close()  The output is:\nNora  This is the first line of the file.\nIn contrast, **readlines()** returns a list with all the lines of the file as individual elements (strings). This is the syntax:\nFor example:\nf = open(\u0026quot;data/names.txt\u0026quot;) print(f.readlines()) f.close()  The output is:\n['Nora\\n', 'Gino\\n', 'Timmy\\n', 'William']  Notice that there is a \\n (newline character) at the end of each string, except the last one.\n💡 Tip: You can get the same list with list(f).\nYou can work with this list in your program by assigning it to a variable or using it in a loop:\nf = open(\u0026quot;data/names.txt\u0026quot;) for line in f.readlines(): # Do something with each line f.close()  We can also iterate over f directly (the file object) in a loop:\nf = open(\u0026quot;data/names.txt\u0026quot;, \u0026quot;r\u0026quot;) for line in f: # Do something with each line f.close()  Those are the main methods used to read file objects. Now let\u0026rsquo;s see how you can create files.\nHow to Create a File If you need to create a file \u0026ldquo;dynamically\u0026rdquo; using Python, you can do it with the \u0026quot;x\u0026quot; mode.\nLet\u0026rsquo;s see how. This is the basic syntax:\nHere\u0026rsquo;s an example. This is my current working directory:\nIf I run this line of code:\nf = open(\u0026quot;new_file.txt\u0026quot;, \u0026quot;x\u0026quot;)  A new file with that name is created:\nWith this mode, you can create a file and then write to it dynamically using methods that you will learn in just a few moments.\n💡 Tip: The file will be initially empty until you modify it.\nA curious thing is that if you try to run this line again and a file with that name already exists, you will see this error:\nTraceback (most recent call last): File \u0026quot;\u0026lt;path\u0026gt;\u0026quot;, line 8, in \u0026lt;module\u0026gt; f = open(\u0026quot;new_file.txt\u0026quot;, \u0026quot;x\u0026quot;) FileExistsError: [Errno 17] File exists: 'new_file.txt'  According to the Python Documentation, this exception (runtime error) is:\n Raised when trying to create a file or directory which already exists.\n Now that you know how to create a file, let\u0026rsquo;s see how you can modify it.\nHow to Modify a File To modify (write to) a file, you need to use the **write()** method. You have two ways to do it (append or write) based on the mode that you choose to open it with. Let\u0026rsquo;s see them in detail.\nAppend \u0026ldquo;Appending\u0026rdquo; means adding something to the end of another thing. The \u0026quot;a\u0026quot; mode allows you to open a file to append some content to it.\nFor example, if we have this file:\nAnd we want to add a new line to it, we can open it using the **\u0026quot;a\u0026quot;** mode (append) and then, call the **write()** method, passing the content that we want to append as argument.\nThis is the basic syntax to call the **write()** method:\nHere\u0026rsquo;s an example:\nf = open(\u0026quot;data/names.txt\u0026quot;, \u0026quot;a\u0026quot;) f.write(\u0026quot;\\nNew Line\u0026quot;) f.close()  💡 Tip: Notice that I\u0026rsquo;m adding \\n before the line to indicate that I want the new line to appear as a separate line, not as a continuation of the existing line.\nThis is the file now, after running the script:\n💡 Tip: The new line might not be displayed in the file until f.close() runs.\nWrite Sometimes, you may want to delete the content of a file and replace it entirely with new content. You can do this with the **write()** method if you open the file with the **\u0026quot;w\u0026quot;** mode.\nHere we have this text file:\nIf I run this script:\nf = open(\u0026quot;data/names.txt\u0026quot;, \u0026quot;w\u0026quot;) f.write(\u0026quot;New Content\u0026quot;) f.close()  This is the result:\nAs you can see, opening a file with the **\u0026quot;w\u0026quot;** mode and then writing to it replaces the existing content.\n💡 Tip: The **write()** method returns the number of characters written.\nIf you want to write several lines at once, you can use the **writelines()** method, which takes a list of strings. Each string represents a line to be added to the file.\nHere\u0026rsquo;s an example. This is the initial file:\nIf we run this script:\nf = open(\u0026quot;data/names.txt\u0026quot;, \u0026quot;a\u0026quot;) f.writelines([\u0026quot;\\nline1\u0026quot;, \u0026quot;\\nline2\u0026quot;, \u0026quot;\\nline3\u0026quot;]) f.close()  The lines are added to the end of the file:\nOpen File For Multiple Operations Now you know how to create, read, and write to a file, but what if you want to do more than one thing in the same program? Let\u0026rsquo;s see what happens if we try to do this with the modes that you have learned so far:\nIf you open a file in \u0026quot;r\u0026quot; mode (read), and then try to write to it:\nf = open(\u0026quot;data/names.txt\u0026quot;) f.write(\u0026quot;New Content\u0026quot;) # Trying to write f.close()  You will get this error:\nTraceback (most recent call last): File \u0026quot;\u0026lt;path\u0026gt;\u0026quot;, line 9, in \u0026lt;module\u0026gt; f.write(\u0026quot;New Content\u0026quot;) io.UnsupportedOperation: not writable  Similarly, if you open a file in \u0026quot;w\u0026quot; mode (write), and then try to read it:\nf = open(\u0026quot;data/names.txt\u0026quot;, \u0026quot;w\u0026quot;) print(f.readlines()) # Trying to read f.write(\u0026quot;New Content\u0026quot;) f.close()  You will see this error:\nTraceback (most recent call last): File \u0026quot;\u0026lt;path\u0026gt;\u0026quot;, line 14, in \u0026lt;module\u0026gt; print(f.readlines()) io.UnsupportedOperation: not readable  The same will occur with the \u0026quot;a\u0026quot; (append) mode.\nHow can we solve this? To be able to read a file and perform another operation in the same program, you need to add the \u0026quot;+\u0026quot; symbol to the mode, like this:\nf = open(\u0026quot;data/names.txt\u0026quot;, \u0026quot;w+\u0026quot;) # Read + Write  f = open(\u0026quot;data/names.txt\u0026quot;, \u0026quot;a+\u0026quot;) # Read + Append  f = open(\u0026quot;data/names.txt\u0026quot;, \u0026quot;r+\u0026quot;) # Read + Write  Very useful, right? This is probably what you will use in your programs, but be sure to include only the modes that you need to avoid potential bugs.\nSometimes files are no longer needed. Let\u0026rsquo;s see how you can delete files using Python.\nHow to Delete Files To remove a file using Python, you need to import a module called **os** which contains functions that interact with your operating system.\n💡 Tip: A module is a Python file with related variables, functions, and classes.\nParticularly, you need the **remove()** function. This function takes the path to the file as argument and deletes the file automatically.\nLet\u0026rsquo;s see an example. We want to remove the file called sample_file.txt.\nTo do it, we write this code:\nimport os os.remove(\u0026quot;sample_file.txt\u0026quot;)   The first line: import os is called an \u0026ldquo;import statement\u0026rdquo;. This statement is written at the top of your file and it gives you access to the functions defined in the os module. The second line: os.remove(\u0026quot;sample_file.txt\u0026quot;) removes the file specified.  💡 Tip: you can use an absolute or a relative path.\nNow that you know how to delete files, let\u0026rsquo;s see an interesting tool\u0026hellip; Context Managers!\nMeet Context Managers Context Managers are Python constructs that will make your life much easier. By using them, you don\u0026rsquo;t need to remember to close a file at the end of your program and you have access to the file in the particular part of the program that you choose.\nSyntax This is an example of a context manager used to work with files:\n💡 Tip: The body of the context manager has to be indented, just like we indent loops, functions, and classes. If the code is not indented, it will not be considered part of the context manager.\nWhen the body of the context manager has been completed, the file closes automatically.\nwith open(\u0026quot;\u0026lt;path\u0026gt;\u0026quot;, \u0026quot;\u0026lt;mode\u0026gt;\u0026quot;) as \u0026lt;var\u0026gt;: # Working with the file... # The file is closed here!  Example Here\u0026rsquo;s an example:\nwith open(\u0026quot;data/names.txt\u0026quot;, \u0026quot;r+\u0026quot;) as f: print(f.readlines())  This context manager opens the names.txt file for read/write operations and assigns that file object to the variable f. This variable is used in the body of the context manager to refer to the file object.\nTrying to Read it Again After the body has been completed, the file is automatically closed, so it can\u0026rsquo;t be read without opening it again. But wait! We have a line that tries to read it again, right here below:\nwith open(\u0026quot;data/names.txt\u0026quot;, \u0026quot;r+\u0026quot;) as f: print(f.readlines()) print(f.readlines()) # Trying to read the file again, outside of the context manager  Let\u0026rsquo;s see what happens:\nTraceback (most recent call last): File \u0026quot;\u0026lt;path\u0026gt;\u0026quot;, line 21, in \u0026lt;module\u0026gt; print(f.readlines()) ValueError: I/O operation on closed file.  This error is thrown because we are trying to read a closed file. Awesome, right? The context manager does all the heavy work for us, it is readable, and concise.\nHow to Handle Exceptions When Working With Files When you\u0026rsquo;re working with files, errors can occur. Sometimes you may not have the necessary permissions to modify or access a file, or a file might not even exist. As a programmer, you need to foresee these circumstances and handle them in your program to avoid sudden crashes that could definitely affect the user experience.\nLet\u0026rsquo;s see some of the most common exceptions (runtime errors) that you might find when you work with files:\nFileNotFoundError According to the Python Documentation, this exception is:\n Raised when a file or directory is requested but doesn’t exist.\n For example, if the file that you\u0026rsquo;re trying to open doesn\u0026rsquo;t exist in your current working directory:\nf = open(\u0026quot;names.txt\u0026quot;)  You will see this error:\nTraceback (most recent call last): File \u0026quot;\u0026lt;path\u0026gt;\u0026quot;, line 8, in \u0026lt;module\u0026gt; f = open(\u0026quot;names.txt\u0026quot;) FileNotFoundError: [Errno 2] No such file or directory: 'names.txt'  Let\u0026rsquo;s break this error down this line by line:\n File \u0026quot;\u0026lt;path\u0026gt;\u0026quot;, line 8, in \u0026lt;module\u0026gt;. This line tells you that the error was raised when the code on the file located in \u0026lt;path\u0026gt; was running. Specifically, when line 8 was executed in \u0026lt;module\u0026gt;. f = open(\u0026quot;names.txt\u0026quot;). This is the line that caused the error. FileNotFoundError: [Errno 2] No such file or directory: 'names.txt' . This line says that a FileNotFoundError exception was raised because the file or directory names.txt doesn\u0026rsquo;t exist.  💡 Tip: Python is very descriptive with the error messages, right? This is a huge advantage during the process of debugging.\nPermissionError This is another common exception when working with files. According to the Python Documentation, this exception is:\n Raised when trying to run an operation without the adequate access rights - for example filesystem permissions.\n This exception is raised when you are trying to read or modify a file that don\u0026rsquo;t have permission to access. If you try to do so, you will see this error:\nTraceback (most recent call last): File \u0026quot;\u0026lt;path\u0026gt;\u0026quot;, line 8, in \u0026lt;module\u0026gt; f = open(\u0026quot;\u0026lt;file_path\u0026gt;\u0026quot;) PermissionError: [Errno 13] Permission denied: 'data'  IsADirectoryError According to the Python Documentation, this exception is:\n Raised when a file operation is requested on a directory.\n This particular exception is raised when you try to open or work on a directory instead of a file, so be really careful with the path that you pass as argument.\nHow to Handle Exceptions To handle these exceptions, you can use a try/except statement. With this statement, you can \u0026ldquo;tell\u0026rdquo; your program what to do in case something unexpected happens.\nThis is the basic syntax:\ntry: # Try to run this code except \u0026lt;type_of_exception\u0026gt;: # If an exception of this type is raised, stop the process and jump to this block  Here you can see an example with FileNotFoundError:\ntry: f = open(\u0026quot;names.txt\u0026quot;) except FileNotFoundError: print(\u0026quot;The file doesn't exist\u0026quot;)  This basically says:\n Try to open the file names.txt. If a FileNotFoundError is thrown, don\u0026rsquo;t crash! Simply print a descriptive statement for the user.  💡 Tip: You can choose how to handle the situation by writing the appropriate code in the except block. Perhaps you could create a new file if it doesn\u0026rsquo;t exist already.\nTo close the file automatically after the task (regardless of whether an exception was raised or not in the try block) you can add the finally block.\ntry: # Try to run this code except \u0026lt;exception\u0026gt;: # If this exception is raised, stop the process immediately and jump to this block finally: # Do this after running the code, even if an exception was raised  This is an example:\ntry: f = open(\u0026quot;names.txt\u0026quot;) except FileNotFoundError: print(\u0026quot;The file doesn't exist\u0026quot;) finally: f.close()  There are many ways to customize the try/except/finally statement and you can even add an else block to run a block of code only if no exceptions were raised in the try block.\n💡 Tip: To learn more about exception handling in Python, you may like to read my article: \u0026ldquo;How to Handle Exceptions in Python: A Detailed Visual Introduction\u0026rdquo;.\nIn Summary  You can create, read, write, and delete files using Python. File objects have their own set of methods that you can use to work with them in your program. Context Managers help you work with files and manage them by closing them automatically when a task has been completed. Exception handling is key in Python. Common exceptions when you are working with files include FileNotFoundError, PermissionError and IsADirectoryError. They can be handled using try/except/else/finally.   Reference : freeCodeCamp\n ","date":1588809600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588809600,"objectID":"7671806b3cc530f1453aea6313ba3d32","permalink":"https://example.com/post/python/tutorials/file-handling-functions/","publishdate":"2020-05-07T00:00:00Z","relpermalink":"/post/python/tutorials/file-handling-functions/","section":"post","summary":"If you want to learn how to work with files in Python, then this article is for you. Working with files is an important skill that every Python developer should learn, so let's get started.","tags":["freeCodeCamp","File Handling"],"title":"File Handling Functions Explained.","type":"post"},{"authors":["Little Dragon"],"categories":["Articles","Python"],"content":" If you have an interest in Data Science, Web Development, Robotics, or IoT you must learn Python. Python has become the fastest-growing programming language due to its heavy usage and wide range of applications.\nFor a beginner or a person from a non-tech background, learning Python is a good choice. The syntax is like talking and writing plain English. For example, consider this syntax which shows its resemblance to the English language.\nprint(\u0026quot;Hello folks\u0026quot;)  We will use Python3 in this tutorial as it is widely used. Most of Python\u0026rsquo;s frameworks and libraries support this version.\n Note: Any version above 3.5.2 supports most of the libraries and frameworks.\n Index:  Introduction Installation Python shell Comment Print Indentation Variables Operators Conditional Statements For Loops While loops User Input Typecasting Dictionaries Lists Tuples Sets Functions and Arguments Args keyword Arguments Default Arguments kwargs Scope Return Statement Lambda Expression List comprehension OOPS concepts Classes Methods Objects Constructor Instance attribute Class attributes Self Inheritance Super Multiple Inheritance Polymorphism Encapsulation Decorators Exceptions Package Import JSON Handling  Note: The beginning of this guide is geared towards beginners. If you have intermediate experience in Python, feel free to skip ahead using the links above.\nIntroduction: As per Github\u0026rsquo;s octoverse, Python is the second most used language by developers in 2019.\nOctoverse graph of how languages have evolved\nBefore learning any language, it\u0026rsquo;s helpful to know how that language came into existence. Well, Python was developed by Guido van Rossum, a Dutch programmer, and was released in 1991.\nPython is an Interpreted language. It uses the CPython Interpreter to compile the Python code to byte code. For a beginner, you don\u0026rsquo;t need to know much about CPython, but you must be aware of how Python works internally.\nThe philosophy behind Python is that code must be readable. It achieves this with the help of indentation. It supports many programming paradigms like Functional and Object Oriented programming. You will understand more about these as you read through the article.\nThe basic question that most beginners have in mind is what a language can do. Here are some of the use-cases of Python:\n Server-side development ( Django, Flask ) Data Science ( Pytorch, Tensor-flow ) Data analysis / Visualisation ( Matplotlib ) Scripting ( Beautiful Soup ) Embedded development   Note: I do not endorse any of the above-mentioned libraries or frameworks in particular. They are popular and broadly used in their respective domains.\n Installation The first step of learning any programming language is installing it. Python comes bundled with most operating systems nowadays. Use the following command in your terminal to check if Python is available:\npython3 --version  You\u0026rsquo;ll see the following output:\nPython 3.7.0  Note that your version of Python might be different. If you have Python installed and the version is above 3.5.2 then you can skip this section.\nFor those who don\u0026rsquo;t have Python installed, follow the steps below:\n Windows User Mac User Linux User  Windows User:  Go to Python\u0026rsquo;s official website. Click on the download button ( Download Python 3.8.2 ) [ Note: The version may differ based on when you are reading this article ] Go to the path where the package is downloaded and double-click the installer. Check the box indicating to \u0026ldquo;Add Python 3.x to PATH\u0026rdquo; and then click on \u0026ldquo;Install Now\u0026rdquo;. Once done you\u0026rsquo;ll get a prompt that \u0026ldquo;Setup was successful\u0026rdquo;. Check again if python is configured properly using the above command. To confirm if Python is installed and configured properly, use the command python3 --version.  Mac User:  First install xcode from the app store. If you want to install Xcode using the terminal then use the following command:\nxcode-select --install  After that, we will use the brew package manager to install Python. To install and configure brew, use the following command:\n/bin/bash -c \u0026quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\u0026quot;  Once brew setup is done, use the following command to update any outdated packages:\nbrew update  Use the following command to install Python:\nbrew install python3  To confirm if Python is installed and configured properly, use the command python3 --version.\n  Linux User:  To install Python using apt, use the following command:\nsudo apt install python3  To install the Python using yum, use the following command:\nsudo yum install python3  To confirm if Python is installed and configured properly, use the command python3 --version.\n  Python shell: The shell is one of the most useful tools you\u0026rsquo;ll come across. The Python shell gives us the power to quickly test any concept before integrating it into our application.\nGo to the terminal or command line prompt. Enter python3 command and you\u0026rsquo;ll get the following output:\n➜ python3.7 Python 3.7.0 (v3.7.0:1bf9cc5093, Jun 26 2018, 23:26:24) [Clang 6.0 (clang-600.0.57)] on darwin Type \u0026quot;help\u0026quot;, \u0026quot;copyright\u0026quot;, \u0026quot;credits\u0026quot; or \u0026quot;license\u0026quot; for more information. \u0026gt;\u0026gt;\u0026gt;  In this tutorial, we will learn some concepts with the help of the python3 shell which you can see above. From now on, whenever I mention go to the Python shell, it means that you have to use the python3 command.\nTo learn the remaining concepts we will create a file called \u0026ldquo;testing\u0026rdquo; with the extension .py. To run this file we will use the following command:\npython3 testing.py  Let\u0026rsquo;s go to the Python shell. Type 10 + 12 after the \u0026gt;\u0026gt;\u0026gt; mark. You\u0026rsquo;ll get the output 22:\n\u0026gt;\u0026gt;\u0026gt; 10 + 12 22  Commenting: Comments make it easy to write code as they help us (and others) understand why a particular piece of code was written. Another awesome thing about comments is that they help improve the readability of the code.\n# Stay Safe  When you add the above syntax, the Python interpreter understands that it is a comment. Everything after # is not executed.\nYou may be wondering why you should use comments. Imagine you are a developer and you have been assigned to a huge project. The project has more than a thousand lines of code. To understand how everything works you\u0026rsquo;ll need to go line by line and read through all the code.\nWhat\u0026rsquo;s a better solution than that? Ah-ha! Comments. Comments help us understand why a particular piece of code was written and what it returns or does. Consider it as documentation for every piece of code.\nPrint: Other than debugging tools from the editor, the thing which helps developers solve problems most often is a print statement. The print statement is one of the most underrated pieces of syntax in all of programming.\nSo how does it help in debugging an issue? Well, consider that you have a module and you want to check the flow of execution to understand or debug it. There are two options. Either you can use a debugger or add a print statement.\nIt\u0026rsquo;s not always possible to use a debugger. For example, if you are using the Python shell, then a debugger is not available. In such a scenario, print helps us. Another scenario is when your application is running. You can add a print statement that will display in the logs of your application and monitor them in runtime.\nPython provides a inbuilt print method with the following syntax:\nprint(\u0026quot;Stay safe...\u0026quot;)  Indentation: Another interesting part of this language is indentation. Why? Well, the answer is simple: It makes the code readable and well-formatted. It is compulsory in Python to follow the rules of indentation. If proper indentation is not followed you\u0026rsquo;ll get the following error:\nIndentationError: unexpected indent  See, even the errors in Python are so readable and easy to understand. At the start, you may be annoyed by the compulsion of indentation. But with the time you\u0026rsquo;ll understand that indentation is a developer\u0026rsquo;s friend.\nVariables: As the name implies, a variable is something that can change. A variable is a way of referring to a memory location used by a computer program.\nWell in most programming languages you need to assign the type to a variable. But in Python, you don’t need to. For example, to declare an integer in C, the following syntax is used: int num = 5;. In Python it\u0026rsquo;s num = 5 .\nGo to the Python shell and perform the operation step by step:\n Integer: Numerical values that can be positive, negative, or zero without a decimal point.\n\u0026gt;\u0026gt;\u0026gt; num = 5 \u0026gt;\u0026gt;\u0026gt; print(num) 5 \u0026gt;\u0026gt;\u0026gt; type(num) \u0026lt;class 'int'\u0026gt;   As you can see here we have declared a num variable and assigned 5 as a value. Python\u0026rsquo;s inbuilt type method can be used to check the type of variable. When we check the type of num we see the output \u0026lt;class 'int'\u0026gt;. For now, just focus on the int in that output. int represents an integer.\n Float: Similar an integer but with one slight difference – floats are a numerical value with a decimal place.\n\u0026gt;\u0026gt;\u0026gt; num = 5.0 \u0026gt;\u0026gt;\u0026gt; print(num) 5.0 \u0026gt;\u0026gt;\u0026gt; type(num) \u0026lt;class 'float'\u0026gt;   Here we have assigned a number with a single decimal to the num. When we check the type of num we can see it is float.\n String: A formation of characters or integers. They can be represented using double or single quotes.\n\u0026gt;\u0026gt;\u0026gt; greet = \u0026quot;Hello user\u0026quot; \u0026gt;\u0026gt;\u0026gt; print(greet) Hello user \u0026gt;\u0026gt;\u0026gt; type(greet) \u0026lt;class 'str'\u0026gt;   Here we have assigned a string to greet. The type of greet is a string as you can see from the output.\n Boolean: A binary operator with a True or False value.\n\u0026gt;\u0026gt;\u0026gt; is_available = True \u0026gt;\u0026gt;\u0026gt; print(is_available) True \u0026gt;\u0026gt;\u0026gt; type(is_available) \u0026lt;class 'bool'\u0026gt;   Here we have assigned a True value to is_available. The type of this variable is boolean. You can only assign True or False. Remember T and F should be capital or it will give an error as follows:\n\u0026gt;\u0026gt;\u0026gt; is_available = true Traceback (most recent call last): File \u0026quot;\u0026lt;stdin\u0026gt;\u0026quot;, line 1, in \u0026lt;module\u0026gt; NameError: name 'true' is not defined   NoneType: This is used when we don\u0026rsquo;t have the value of the variable.\n\u0026gt;\u0026gt;\u0026gt; num = None \u0026gt;\u0026gt;\u0026gt; print(num) None \u0026gt;\u0026gt;\u0026gt; type(num) \u0026lt;class 'NoneType'\u0026gt;   Operators: Take a look at the image below to see all the arithmetic operators available in Python:\nOperators table\nLet\u0026rsquo;s go over the operators one by one.\nArithmetic operators These include addition, subtraction, deletion, exponentiation, modulus, and floor division. Also the shorthand syntax for some operators.\nFirst, we will declare two variables, a and b.\n\u0026gt;\u0026gt;\u0026gt; a = 6 # Assignment \u0026gt;\u0026gt;\u0026gt; b = 2  Let\u0026rsquo;s try our basic arithmetic operations:\n\u0026gt;\u0026gt;\u0026gt; a + b # Addition 8 \u0026gt;\u0026gt;\u0026gt; a - b # Subtraction 4 \u0026gt;\u0026gt;\u0026gt; a * b # Multiplication 12 \u0026gt;\u0026gt;\u0026gt; a / b # Division 3.0 \u0026gt;\u0026gt;\u0026gt; a ** b # Exponentiation 36  To test for other arithmetic operations let\u0026rsquo;s change the value of a and b.\n\u0026gt;\u0026gt;\u0026gt; a = 7 \u0026gt;\u0026gt;\u0026gt; b = 3 \u0026gt;\u0026gt;\u0026gt; a % b # Modulus 1 \u0026gt;\u0026gt;\u0026gt; a // b # Floor division 2  Shorthand arithmetic operations are also available in Python. Refer back to the image above to test them out. To print the output of the shorthand operations use the print statement.\nComparison operators These include equal to, greater than, and less than.\n\u0026gt;\u0026gt;\u0026gt; a = 5 # Assign \u0026gt;\u0026gt;\u0026gt; b = 2 # Assign \u0026gt;\u0026gt;\u0026gt; a \u0026gt; b # Greater than True \u0026gt;\u0026gt;\u0026gt; a \u0026lt; b # less then False \u0026gt;\u0026gt;\u0026gt; a == b # Equal to False \u0026gt;\u0026gt;\u0026gt; a \u0026gt;= 5 # Greater than or equal to True \u0026gt;\u0026gt;\u0026gt; b \u0026lt;= 1 # Less than or equal to False  Logical operators These operators include not, and, \u0026amp; or.\n\u0026gt;\u0026gt;\u0026gt; a = 10 \u0026gt;\u0026gt;\u0026gt; b = 2 \u0026gt;\u0026gt;\u0026gt; a == 2 and b == 10 # and False \u0026gt;\u0026gt;\u0026gt; a == 10 or b == 10 # or True \u0026gt;\u0026gt;\u0026gt; not(a == 10) # not False \u0026gt;\u0026gt;\u0026gt; not(a == 2) True  Conditional Statements: As the name suggests, conditional statements are used to evaluate if a condition is true or false.\nMany times when you are developing an application you need to check a certain condition and do different things depending on the outcome. In such scenarios conditional statements are useful. If, elif and else are the conditional statements used in Python.\nWe can compare variables, check if the variable has any value or if it\u0026rsquo;s a boolean, then check if it\u0026rsquo;s true or false. Go to the Python shell and perform the operation step by step:\nCondition Number 1: We have an integer and 3 conditions here. The first one is the if condition. It checks if the number is equal to 10.\nThe second one is the elif condition. Here we are checking if the number is less than 10.\nThe last condition is else. This condition executes when none of the above conditions match.\n\u0026gt;\u0026gt;\u0026gt; number = 5 \u0026gt;\u0026gt;\u0026gt; if number == 10: ... print(\u0026quot;Number is 10\u0026quot;) ... elif number \u0026lt; 10: ... print(\u0026quot;Number is less than 10\u0026quot;) ... else: ... print(\u0026quot;Number is more than 10\u0026quot;) ...  Output:\nNumber is less than 10  Note: It is not compulsory to check that two conditions are equal in the if condition. You can do it in the elif also.\nCondition Number 2: We have a boolean and 2 conditions here. Have you noticed how we are checking if the condition is true? If is_available, then print \u0026ldquo;Yes it is available\u0026rdquo;, else print \u0026ldquo;Not available\u0026rdquo;.\n\u0026gt;\u0026gt;\u0026gt; is_available = True \u0026gt;\u0026gt;\u0026gt; if is_available: ... print(\u0026quot;Yes it is available\u0026quot;) ... else: ... print(\u0026quot;Not available\u0026quot;) ...  Output:\nYes it is available  Condition Number 3: Here we have reversed condition number 2 with the help of the not operator.\n\u0026gt;\u0026gt;\u0026gt; is_available = True \u0026gt;\u0026gt;\u0026gt; if not is_available: ... print(\u0026quot;Not available\u0026quot;) ... else: ... print(\u0026quot;Yes it is available\u0026quot;) ...  Output:\nYes it is available  Condition Number 4: Here we are declaring the data as None and checking if the data is available or not.\n\u0026gt;\u0026gt;\u0026gt; data = None \u0026gt;\u0026gt;\u0026gt; if data: ... print(\u0026quot;data is not none\u0026quot;) ... else: ... print(\u0026quot;data is none\u0026quot;) ...  Output:\ndata is none  Condition Number 5: You can also use an inline if in Python. The syntax to achieve this is the following:\n\u0026gt;\u0026gt;\u0026gt; num_a = 10 \u0026gt;\u0026gt;\u0026gt; num_b = 5 \u0026gt;\u0026gt;\u0026gt; if num_a \u0026gt; num_b: print(\u0026quot;num_a is greater than num_b\u0026quot;) ...  Output:\nnum_a is greater than num_b  Condition Number 6: You can also use an inline if else in Python. The syntax to achieve this is the following:\nexpression_if_true if condition else expression_if_false  Example:\n\u0026gt;\u0026gt;\u0026gt; num = 5 \u0026gt;\u0026gt;\u0026gt; print(\u0026quot;Number is five\u0026quot;) if num == 5 else print(\u0026quot;Number is not five\u0026quot;)  Output:\nNumber is five  Conditional Number 7: You can also use nested if-else statements. The syntax to achieve this is the following:\n\u0026gt;\u0026gt;\u0026gt; num = 25 \u0026gt;\u0026gt;\u0026gt; if num \u0026gt; 10: ... print(\u0026quot;Number is greater than 10\u0026quot;) ... if num \u0026gt; 20: ... print(\u0026quot;Number is greater than 20\u0026quot;) ... if num \u0026gt; 30: ... print(\u0026quot;Number is greater than 30\u0026quot;) ... else: ... print(\u0026quot;Number is smaller than 10\u0026quot;) ...  Output:\nNumber is greater than 10 Number is greater than 20  Condition Number 8: You can also use the and operator in a conditional statement. It states if condition1 and condition2 both are true then execute it.\n\u0026gt;\u0026gt;\u0026gt; num = 10 \u0026gt;\u0026gt;\u0026gt; if num \u0026gt; 5 and num \u0026lt; 15: ... print(num) ... else: ... print(\u0026quot;Number may be small than 5 or larger than 15\u0026quot;) ...  Output:\n10  As our number is between 5 and 15 we get the output of 10.\nCondition Number 9: You can also use the or operator in a conditional statement. It states that if either condition1 or condition2 is true then execute it.\n\u0026gt;\u0026gt;\u0026gt; num = 10 \u0026gt;\u0026gt;\u0026gt; if num \u0026gt; 5 or num \u0026lt; 7: ... print(num) ...  Output:\n10  Are you confused because the value of num is 10 and our second condition states that num is less than 7? So why do we get the output as 10? It\u0026rsquo;s because of the or condition. As one of the conditions matches, it will execute it.\nFor Loops: Another useful method in any programming language is an iterator. If you have to implement something multiple times, what will you do?\nprint(\u0026quot;Hello\u0026quot;) print(\u0026quot;Hello\u0026quot;) print(\u0026quot;Hello\u0026quot;)  Well, that\u0026rsquo;s one way to do it. But imagine you have to do it a hundred or a thousand times. Well, that\u0026rsquo;s a lot of print statements we have to write. There\u0026rsquo;s a better way called iterators or loops. We can either use a for or while loop.\nHere we are using the range method. It specifies the range until which the loop should be repeated. By default, the starting point is 0.\n\u0026gt;\u0026gt;\u0026gt; for i in range(3): ... print(\u0026quot;Hello\u0026quot;) ...  Output:\nHello Hello Hello  You can also specify the range in this way range(1,3).\n\u0026gt;\u0026gt;\u0026gt; for i in range(1,3): ... print(\u0026quot;Hello\u0026quot;) ...  Output:\nHello Hello  \u0026ldquo;Hello\u0026rdquo; is only printed two times as we have specified the range here. Think of the range as Number on right - Number on left.\nWell, you can also add an else statement in the for loop.\n\u0026gt;\u0026gt;\u0026gt; for i in range(3): ... print(\u0026quot;Hello\u0026quot;) ... else: ... print(\u0026quot;Finished\u0026quot;)  Output:\nHello Hello Hello Finished  See our loop iterated 3 times ( 3 - 0 ) and once that is done it executed the else statement.\nWe can also nest a for loop inside another for loop.\n\u0026gt;\u0026gt;\u0026gt; for i in range(3): ... for j in range(2): ... print(\u0026quot;Inner loop\u0026quot;) ... print(\u0026quot;Outer loop\u0026quot;) ...  Output:\nInner loop Inner loop Outer loop Inner loop Inner loop Outer loop Inner loop Inner loop Outer loop  As you can see the inner loop print statement executed two times. After that outer loop print statement executed. Again the inner loop executed two times. So what is happening here? If you are confused then consider this to solve it:\n Our Interpreter comes and sees that there is a for loop. It goes down again and checks there is another for loop. So now it will execute the inner for loop two times and exit. Once it\u0026rsquo;s finished it knows that outer for loop has instructed it to repeat two more times. It starts again and sees the inner for loop and repeats.  Well, you can also choose to pass a certain for loop condition. What does pass mean here? Well whenever that for loop will occur and the Interpreter sees the pass statement it won\u0026rsquo;t execute it and will move to the next line.\n\u0026gt;\u0026gt;\u0026gt; for i in range(3): ... pass ...  You will not get any output on the shell.\nWhile loops: Another loop or iterator available in Python is the while loop. We can achieve some of the same results with the help of a while loop as we achieved with the for loop.\n\u0026gt;\u0026gt;\u0026gt; i = 0 \u0026gt;\u0026gt;\u0026gt; while i \u0026lt; 5: ... print(\u0026quot;Number\u0026quot;, i) ... i += 1 ...  Output:\nNumber 0 Number 1 Number 2 Number 3 Number 4  Remember whenever you use a while loop it\u0026rsquo;s important that you add an increment statement or a statement that will end the while loop at some point. If not then the while loop will execute forever.\nAnother option is to add a break statement in a while loop. This will break the loop.\n\u0026gt;\u0026gt;\u0026gt; i = 0 \u0026gt;\u0026gt;\u0026gt; while i \u0026lt; 5: ... if i == 4: ... break ... print(\u0026quot;Number\u0026quot;, i) ... i += 1 ...  Output:\nNumber 0 Number 1 Number 2 Number 3  Here we are breaking the while loop if we find the value of i to be 4.\nAnother option is to add an else statement in while loop. The statement will be executed after the while loop is completed.\n\u0026gt;\u0026gt;\u0026gt; i = 0 \u0026gt;\u0026gt;\u0026gt; while i \u0026lt; 5: ... print(\u0026quot;Number\u0026quot;, i) ... i += 1 ... else: ... print(\u0026quot;Number is greater than 4\u0026quot;) ...  Output:\nNumber 0 Number 1 Number 2 Number 3 Number 4 Number is greater than 4  The continue statement can be used to skip the current execution and to proceed to the next.\n\u0026gt;\u0026gt;\u0026gt; i = 0 \u0026gt;\u0026gt;\u0026gt; while i \u0026lt; 6: ... i += 1 ... if i == 2: ... continue ... print(\u0026quot;number\u0026quot;, i) ...  Output:\nnumber 1 number 3 number 4 number 5 number 6  User Input: Imagine you are building a command-line application. Now you have to take the user input and act accordingly. To do that you can use Python\u0026rsquo;s inbuilt input method.\nThe syntax to achieve this is as follows:\nvariable = input(\u0026quot;.....\u0026quot;)  Example:\n\u0026gt;\u0026gt;\u0026gt; name = input(\u0026quot;Enter your name: \u0026quot;) Enter your name: Sharvin  When you use the input method and press enter, you\u0026rsquo;ll be prompted with the text that you enter in the input method. Let\u0026rsquo;s check if our assignment is working or not:\n\u0026gt;\u0026gt;\u0026gt; print(name) Sharvin  There it is! It is working perfectly. Here Sharvin is of the type string.\n\u0026gt;\u0026gt;\u0026gt; type(name) \u0026lt;class 'str'\u0026gt;  Let\u0026rsquo;s try one more example where we will assign an integer rather than a string and check the type.\n\u0026gt;\u0026gt;\u0026gt; date = input(\u0026quot;Today's date: \u0026quot;) Today's date: 12 \u0026gt;\u0026gt;\u0026gt; type(date) \u0026lt;class 'str'\u0026gt;  Are you confused? We entered an integer 12 and it\u0026rsquo;s still giving us its type as a string. It\u0026rsquo;s not a bug. It\u0026rsquo;s how input is intended to work. To convert the string to integer we will use typecasting.\nTypecasting: We saw that the input method returns a string for the integer also. Now if we want to compare this output with another integer then we need a way to convert it back to an integer.\n\u0026gt;\u0026gt;\u0026gt; date_to_int = int(date) \u0026gt;\u0026gt;\u0026gt; type(date_to_int) \u0026lt;class 'int'\u0026gt;  Here we took the date that we have declared above in the User input section and converted it into the integer using the Python\u0026rsquo;s inbuilt int method. This is called typecasting.\nBasically you can do the following conversion with the help of typecasting:\n integer to string: str() string to integer: int() integer to float: float()   Note: Conversion from float to integer is also possible.\n \u0026gt;\u0026gt;\u0026gt; type(date) \u0026lt;class 'str'\u0026gt; # Converting from string to float \u0026gt;\u0026gt;\u0026gt; date_to_float = float(date) \u0026gt;\u0026gt;\u0026gt; type(date_to_float) \u0026lt;class 'float'\u0026gt; # Converting from float to string \u0026gt;\u0026gt;\u0026gt; date_to_string = str(date_to_float) \u0026gt;\u0026gt;\u0026gt; type(date_to_string) \u0026lt;class 'str'\u0026gt; # Converting from float to integer \u0026gt;\u0026gt;\u0026gt; date_to_int = int(date_to_float) \u0026gt;\u0026gt;\u0026gt; type(date_to_int) \u0026lt;class 'int'\u0026gt;  Dictionaries: Imagine you want to store some user details. So how can you store these details? Yes, we can use variable to store them as follows:\n\u0026gt;\u0026gt;\u0026gt; fname = \u0026quot;Sharvin\u0026quot; \u0026gt;\u0026gt;\u0026gt; lname = \u0026quot;Shah\u0026quot; \u0026gt;\u0026gt;\u0026gt; profession = \u0026quot;Developer\u0026quot;  To access this value we can do the following:\n\u0026gt;\u0026gt;\u0026gt; print(fname) Sharvin  But is this an elegant and optimized way to access it? The answer is no. To make it more friendly, let\u0026rsquo;s store the data in a key-value dictionary.\nWhat is a dictionary? A dictionary is a collection that is unordered and mutable ( i.e. it can be updated ).\nFollowing is the format of the dictionary:\ndata = { \u0026quot;key\u0026quot; : \u0026quot;value\u0026quot; }  Let\u0026rsquo;s understand the dictionary further by an example:\n\u0026gt;\u0026gt;\u0026gt; user_details = { ... \u0026quot;fname\u0026quot;: \u0026quot;Sharvin\u0026quot;, ... \u0026quot;lname\u0026quot;: \u0026quot;Shah\u0026quot;, ... \u0026quot;profession\u0026quot;: \u0026quot;Developer\u0026quot; ... }  How to access a value in a dictionary We can access the value inside a dictionary in two ways. We will take a look at both and then debug them to find out which is better.\nMethod 1: To access the value of fname key from user_details dictionary we can use the following syntax:\n\u0026gt;\u0026gt;\u0026gt; user_details[\u0026quot;fname\u0026quot;] 'Sharvin'  Method 2: We can also access the value of fname key from user_details dictionary using get.\n\u0026gt;\u0026gt;\u0026gt; user_details.get(\u0026quot;fname\u0026quot;) 'Sharvin'  I know method 1 looks easier to understand. The problem with it occurs when we try to access the data that is not available in our dictionary.\n\u0026gt;\u0026gt;\u0026gt; user_details[\u0026quot;age\u0026quot;] Traceback (most recent call last): File \u0026quot;\u0026lt;stdin\u0026gt;\u0026quot;, line 1, in \u0026lt;module\u0026gt; KeyError: 'age'  We get a KeyError which indicates that the key is not available. Let\u0026rsquo;s try the same scenario with method 2.\n\u0026gt;\u0026gt;\u0026gt; user_details.get(\u0026quot;age\u0026quot;)  We do not get anything printed in our console. Let\u0026rsquo;s debug it further to know why this happened. Assign a variable age to our get operation and we will print it in our console.\n\u0026gt;\u0026gt;\u0026gt; age = user_details.get(\u0026quot;age\u0026quot;) \u0026gt;\u0026gt;\u0026gt; print(age) None  So when get doesn\u0026rsquo;t find the key it sets the value to None. Because of this, we do not get any error. Now you may be wondering which one is right. Most of the time using method 2 makes more sense, but for some strict checking conditions, we need to use method 1.\nHow to check if a key exists You may be wondering how to check if the dictionary has a particular key or not in it. Python provides the built-in method keys() to solve this issue.\n\u0026gt;\u0026gt;\u0026gt; if \u0026quot;age\u0026quot; in user_details.keys(): ... print(\u0026quot;Yes it is present\u0026quot;) ... else: ... print(\u0026quot;Not present\u0026quot;) ...  We will get the following output:\nNot present  What if we want to check if the dictionary is empty or not? To understand this let\u0026rsquo;s declare an empty dictionary as follows:\n\u0026gt;\u0026gt;\u0026gt; user_details = {}  When we use if-else on a dictionary directly it either returns true if data is present or false if empty.\n\u0026gt;\u0026gt;\u0026gt; if user_details: ... print(\u0026quot;Not empty\u0026quot;) ... else: ... print(\u0026quot;Empty\u0026quot;) ...  Output:\nEmpty  We can also use Python\u0026rsquo;s inbuilt method bool to check if the dictionary is empty or not. Remember bool returns False if the dictionary is empty and True if it is filled.\n\u0026gt;\u0026gt;\u0026gt; bool(user_details) False \u0026gt;\u0026gt;\u0026gt; user_details = { ... \u0026quot;fname\u0026quot; : \u0026quot;Sharvin\u0026quot; ... } \u0026gt;\u0026gt;\u0026gt; bool(user_details) True  How to update the value of an existing key So now we know how to get a particular key and find if it exists – but how do you update it in the dictionary?\nDeclare a dictionary as follows:\n\u0026gt;\u0026gt;\u0026gt; user_details = { ... \u0026quot;fname\u0026quot;:\u0026quot;Sharvin\u0026quot;, ... \u0026quot;lname\u0026quot;: \u0026quot;Shah\u0026quot;, ... \u0026quot;profession\u0026quot;: \u0026quot;Developer\u0026quot; ... }  To update the value use the following syntax:\n\u0026gt;\u0026gt;\u0026gt; user_details[\u0026quot;profession\u0026quot;] = \u0026quot;Software Developer\u0026quot; \u0026gt;\u0026gt;\u0026gt; print(user_details) {'fname': 'Sharvin', 'lname': 'Shah', 'profession': 'Software Developer'}  Updating a value of key in dictionary is same as assigning a value to the variable.\nHow to add a key-value pair The next question is how to add a new value to the dictionary? Let\u0026rsquo;s add an age key with a value of 100.\n\u0026gt;\u0026gt;\u0026gt; user_details[\u0026quot;age\u0026quot;] = \u0026quot;100\u0026quot; \u0026gt;\u0026gt;\u0026gt; print(user_details) {'fname': 'Sharvin', 'lname': 'Shah', 'profession': 'Software Developer', 'age': '100'}  As you can see a new key-value is added in our dictionary.\nHow to remove a key-value pair To remove a key-value from the dictionary, Python provides an inbuilt method called pop.\n\u0026gt;\u0026gt;\u0026gt; user_details.pop(\u0026quot;age\u0026quot;) '100' \u0026gt;\u0026gt;\u0026gt; print(user_details) {'fname': 'Sharvin', 'lname': 'Shah', 'profession': 'Software Developer'}  This removes the age key-value pair from the user_details dictionary. We can also use a del operator to delete the value.\n\u0026gt;\u0026gt;\u0026gt; del user_details[\u0026quot;age\u0026quot;] \u0026gt;\u0026gt;\u0026gt; print(user_details) {'fname': 'Sharvin', 'lname': 'Shah', 'profession': 'Software Developer'}  The del method can also be used to delete complete dictionary. Use the following syntax to delete complete dictionary del user_details.\nHow to copy a dictionary A dictionary cannot be copied in a traditional way. For example, you cannot copy value of dictA to dictB as follows:\ndictA = dictB  To copy the values you need to use the copy method.\n\u0026gt;\u0026gt;\u0026gt; dictB = user_details.copy() \u0026gt;\u0026gt;\u0026gt; print(dictB) {'fname': 'Sharvin', 'lname': 'Shah', 'profession': 'Software Developer'}  Lists: Imagine you have a bunch of data that is not labeled. In other words, each piece of data doesn\u0026rsquo;t have a key that defines it. So how will you store it? Lists to the rescue. They are defined as follows:\ndata = [ 1, 5, \u0026quot;xyz\u0026quot;, True ]  A list is a collection of random, ordered, and mutable data (i.e., it can be updated).\nHow to access list elements Let\u0026rsquo;s try to access the first element:\n\u0026gt;\u0026gt;\u0026gt; data[1] 5  Wait what happened here? We are trying to access the first element but we are getting the second element. Why?\nIndexing of the list begins from zero. So what do I mean by this? The indexing of the position of the elements begins from zero. The syntax to access an element is as follows:\nlist[position_in_list]  To access the first element we need to access it as follows:\n\u0026gt;\u0026gt;\u0026gt; data[0] 1  You can also specify a range to access the element between those positions.\n\u0026gt;\u0026gt;\u0026gt; data[2:4] ['xyz', True]  Here, the first value represents the start while the last value represents the position until which we want the value.\nHow to add an item to a list To add an item in the list we need to use the append method provided by python.\n\u0026gt;\u0026gt;\u0026gt; data.append(\u0026quot;Hello\u0026quot;) \u0026gt;\u0026gt;\u0026gt; data [1, 5, 'abc', True, 'Hello']  How to change the value of an item To change the value of an item, use the following syntax:\n\u0026gt;\u0026gt;\u0026gt; data[2] = \u0026quot;abc\u0026quot; \u0026gt;\u0026gt;\u0026gt; data [1, 5, 'abc', True]  How to remove an item from a list To remove an item from a list we can use the Python\u0026rsquo;s inbuilt remove method.\n\u0026gt;\u0026gt;\u0026gt; data.remove(\u0026quot;Hello\u0026quot;) \u0026gt;\u0026gt;\u0026gt; data [1, 5, 'abc', True]  How to loop through a list We can also loop through the list to find a certain element and operate on it.\n\u0026gt;\u0026gt;\u0026gt; for i in data: ... print(i) ...  Output:\n1 5 abc True  How to check if an item exists or not To check if a particular item exists or not in list we can use if loop as follows:\n\u0026gt;\u0026gt;\u0026gt; if 'abc' in data: ... print(\u0026quot;yess..\u0026quot;) ... yess..  How to copy list data To copy list data from one list to another we need to use copy method.\n\u0026gt;\u0026gt;\u0026gt; List2 = data.copy() \u0026gt;\u0026gt;\u0026gt; List2 [1, 5, 'abc', True]  How to check the length of a list We can also check the length of list using Python\u0026rsquo;s inbuilt len method.\n\u0026gt;\u0026gt;\u0026gt; len(data) 4  How to join two lists To join two list we can use the + operator.\n\u0026gt;\u0026gt;\u0026gt; list1 = [1, 4, 6, \u0026quot;hello\u0026quot;] \u0026gt;\u0026gt;\u0026gt; list2 = [2, 8, \u0026quot;bye\u0026quot;] \u0026gt;\u0026gt;\u0026gt; list1 + list2 [1, 4, 6, 'hello', 2, 8, 'bye']  What happens if we try to access a element position which is not available in the list? We get a list index out of range error in such a condition.\n\u0026gt;\u0026gt;\u0026gt; list1[6] Traceback (most recent call last): File \u0026quot;\u0026lt;stdin\u0026gt;\u0026quot;, line 1, in \u0026lt;module\u0026gt; IndexError: list index out of range  Tuples: The tuple is a data type which is ordered and immutable (i.e. data cannot be changed).\nLet\u0026rsquo;s create a tuple:\n\u0026gt;\u0026gt;\u0026gt; data = ( 1, 3 , 5, \u0026quot;bye\u0026quot;) \u0026gt;\u0026gt;\u0026gt; data (1, 3, 5, 'bye')  How to access a tuple element We can access elements in the tuple the same way as we access them in a list:\n\u0026gt;\u0026gt;\u0026gt; data[3] 'bye'  We can access the index range as follows:\n\u0026gt;\u0026gt;\u0026gt; data[2:4] (5, 'bye')  How to change a tuple\u0026rsquo;s value If you are thinking wait – how can we change the value of tuple, then you are right my friend. We cannot change the value of tuple as it is immutable. We get the following error if we try to change the value of a tuple:\n\u0026gt;\u0026gt;\u0026gt; data[1] = 8 Traceback (most recent call last): File \u0026quot;\u0026lt;stdin\u0026gt;\u0026quot;, line 1, in \u0026lt;module\u0026gt; TypeError: 'tuple' object does not support item assignment  There\u0026rsquo;s a workaround available to change the value of a tuple:\n\u0026gt;\u0026gt;\u0026gt; data = ( 1, 3 , 5, \u0026quot;bye\u0026quot;) \u0026gt;\u0026gt;\u0026gt; data_two = list(data) # Convert data to list \u0026gt;\u0026gt;\u0026gt; data_two[1] = 8 # Update value as list is mutable \u0026gt;\u0026gt;\u0026gt; data = tuple(data_two) # Convert again to tuple \u0026gt;\u0026gt;\u0026gt; data (1, 8, 5, 'bye')  All other methods that we have seen in the list are applicable for the tuple also.\n[ Note: Once a tuple is created a new value cannot be added in it. ].\nSets: Sets are another data type in Python which are unordered and unindexed. Sets are declared as follows:\n\u0026gt;\u0026gt;\u0026gt; data = { \u0026quot;hello\u0026quot;, \u0026quot;bye\u0026quot;, 10, 15 } \u0026gt;\u0026gt;\u0026gt; data {10, 15, 'hello', 'bye'}  How to access a value As sets are unindexed we cannot directly access the value in a set. Thus to access the value in the set you need to use a for loop.\n\u0026gt;\u0026gt;\u0026gt; for i in data: ... print(i) ... 10 15 hello bye  How to change a value Once the set is created, values cannot be changed.\nHow to add an item To add an item to the set python provides an inbuilt method called add.\n\u0026gt;\u0026gt;\u0026gt; data.add(\u0026quot;test\u0026quot;) \u0026gt;\u0026gt;\u0026gt; data {10, 'bye', 'hello', 15, 'test'}  How to check length To check the length of the set we use the len method.\n\u0026gt;\u0026gt;\u0026gt; len(data) 5  How to remove an item To remove an item use the remove method:\n\u0026gt;\u0026gt;\u0026gt; data.remove(\u0026quot;test\u0026quot;) \u0026gt;\u0026gt;\u0026gt; data {10, 'bye', 'hello', 15}  Functions and Arguments: Functions are a handy way to declare an operation that we want to perform. With the help of functions, you can separate logic according to the operation.\nFunctions are a block of code that helps us in the reusability of the repetitive logic. Functions can be both inbuilt and user-defined.\nTo declare a function we use the def keyword. Following is the syntax of the functions:\n\u0026gt;\u0026gt;\u0026gt; def hello_world(): ... print(\u0026quot;Hello world\u0026quot;) ...  Here we are declaring a function which, when called, prints a \u0026ldquo;Hello world\u0026rdquo; statement. To call a function we use the following syntax:\n\u0026gt;\u0026gt;\u0026gt; hello_world()  We will get the following output:\nHello world  Remember that the () brackets in a function call means to execute it. Remove those round brackets and try the call again.\n\u0026gt;\u0026gt;\u0026gt; hello_world  You\u0026rsquo;ll get the following output:\n\u0026lt;function hello_world at 0x1083eb510\u0026gt;  When we remove the round brackets from the function call then it gives us a function reference. Here above as you can see the reference of function hello_world points to this memory address 0x1083eb510.\nConsider you have to perform an addition operation. You can do it by declaring a and b and then performing the addition.\n\u0026gt;\u0026gt;\u0026gt; a = 5 \u0026gt;\u0026gt;\u0026gt; b = 10 \u0026gt;\u0026gt;\u0026gt; a + b 15  This is one way to go. But now consider that the value of a and b have changed and you need to do it again.\n\u0026gt;\u0026gt;\u0026gt; a = 5 \u0026gt;\u0026gt;\u0026gt; b = 10 \u0026gt;\u0026gt;\u0026gt; a + b 15 \u0026gt;\u0026gt;\u0026gt; a = 2 \u0026gt;\u0026gt;\u0026gt; b = 11 \u0026gt;\u0026gt;\u0026gt; a + b 13  This still looks doable. Now imagine we need to add a set of two numbers a hundred times. The numbers within the set are different for every calculation. That\u0026rsquo;s a lot to do. Don\u0026rsquo;t worry – we have a function at our disposal to solve this issue.\n\u0026gt;\u0026gt;\u0026gt; def add(a,b): ... print(a+b) ...  Here we are adding a and b as a compulsory argument to the add function. To call this function we will use the following syntax:\n\u0026gt;\u0026gt;\u0026gt; add(10,5)  Output:\n15  See how easy it is to define a function and use it? So what happens if we don\u0026rsquo;t pass an argument?\n\u0026gt;\u0026gt;\u0026gt; add() Traceback (most recent call last): File \u0026quot;\u0026lt;stdin\u0026gt;\u0026quot;, line 1, in \u0026lt;module\u0026gt; TypeError: add() missing 2 required positional arguments: 'a' and 'b'  Python throws a TypeError and informs us that the function requires two arguments.\nCan you guess what will happen if we pass a third argument?\n\u0026gt;\u0026gt;\u0026gt; add(10,5,1) Traceback (most recent call last): File \u0026quot;\u0026lt;stdin\u0026gt;\u0026quot;, line 1, in \u0026lt;module\u0026gt; TypeError: add() takes 2 positional arguments but 3 were given  Well, Python will inform us that we have passed 3 arguments but there are only 2 positional arguments.\nSo what can we do when we don\u0026rsquo;t know how many arguments a function can take? To solve this issue we use args and kwargs.\nArgs: When you don\u0026rsquo;t know how many arguments will be passed to the function, use args and kwargs (kwargs are discussed below).\nTo pass n number of arguments to a function we use args. We add a * in front of the argument.\n Remember when you attach a * in front, you will be receiving a tuple of arguments.\n \u0026gt;\u0026gt;\u0026gt; def add(*num): ... print(num) ...  Here *num is an instance of args. Now when we call the function add we can pass in n number of arguments and it won\u0026rsquo;t throw a TypeError.\n\u0026gt;\u0026gt;\u0026gt; add(1,2,3) (1, 2, 3) \u0026gt;\u0026gt;\u0026gt; add(1,2,3,4) (1, 2, 3, 4)  Now to perform the addition operation we will use the Python\u0026rsquo;s builtin function sum\n\u0026gt;\u0026gt;\u0026gt; def add(*num): ... print(sum(num)) ...  Now when we call the add function we will get the following output:\n\u0026gt;\u0026gt;\u0026gt; add(1,2,3) # Function call 6 \u0026gt;\u0026gt;\u0026gt; add(1,2,3,4) # Function call 10  Keyword Arguments: There are times when we don\u0026rsquo;t know the order of the arguments that will be passed to our function when it\u0026rsquo;s called. In such a scenario we use keyword arguments because you can pass them in any order in your call and our function will know the value. Take a look at this example:\n\u0026gt;\u0026gt;\u0026gt; def user_details(username, age): ... print(\u0026quot;Username is\u0026quot;, username) ... print(\u0026quot;Age is\u0026quot;, age) ...  Let\u0026rsquo;s call this function as follows:\n\u0026gt;\u0026gt;\u0026gt; user_details(\u0026quot;Sharvin\u0026quot;, 100)  We will get the following output:\nUsername is Sharvin Age is 100  Well this looks correct, but imagine if we called our function in this way:\n\u0026gt;\u0026gt;\u0026gt; user_details(100, \u0026quot;Sharvin\u0026quot;)  We will get the following output:\nUsername is 100 Age is Sharvin  This does not look right. What happened is username took the value of 100 while age took the value of \u0026ldquo;Sharvin\u0026rdquo;. In scenarios like this where we don\u0026rsquo;t know the order of arguments we can use keyword arguments when calling the function:\n\u0026gt;\u0026gt;\u0026gt; user_details(age=100, username=\u0026quot;Sharvin\u0026quot;)  Output:\nUsername is Sharvin Age is 100  Default Argument: Suppose there is a condition where we are not sure if a particular argument will get a value or not when the function is called. In such a scenario we can use Default arguments as follows:\n\u0026gt;\u0026gt;\u0026gt; def user_details(username, age = None): ... print(\u0026quot;Username is\u0026quot;, username) ... print(\u0026quot;Age is\u0026quot;, age) ...  Here we are assigning a None to our age argument. If we don\u0026rsquo;t pass a second argument while calling the function it will take None as a default value.\nLet\u0026rsquo;s call the function:\n\u0026gt;\u0026gt;\u0026gt; user_details(\u0026quot;Sharvin\u0026quot;)  Output:\nUsername is Sharvin Age is None  If we pass in the second argument it will override None and use it as the value.\n\u0026gt;\u0026gt;\u0026gt; user_details(\u0026quot;Sharvin\u0026quot;, 200) Username is Sharvin Age is 200  But what will happen if we assign the first argument in our function as default and the second as a compulsory argument? Go to the Python shell and try this out:\n\u0026gt;\u0026gt;\u0026gt; def user_details(username=None, age): ... print(\u0026quot;Username is\u0026quot;, username) ... print(\u0026quot;Age is\u0026quot;, age) ...  You\u0026rsquo;ll get the following error:\nFile \u0026quot;\u0026lt;stdin\u0026gt;\u0026quot;, line 1 SyntaxError: non-default argument follows default argument   Remember: All compulsory arguments must be declared first and then the default argument must be declared.\n kwargs: There can be a situation where you don\u0026rsquo;t know how many keyword arguments will be passed into the function. In such a scenario we can use Kwargs.\nTo use kwargs we put ** in front of the argument.\n Remember: When you attach a ** in front, you will be receiving a dictionary of arguments.\n Let\u0026rsquo;s understand this by example. We will declare a function which accepts username as it\u0026rsquo;s argument with ** in front of it.\n\u0026gt;\u0026gt;\u0026gt; def user(**username): ... print(username) ...  When we call the user function as follows we will receive a dictionary.\n\u0026gt;\u0026gt;\u0026gt; user(username1=\u0026quot;xyz\u0026quot;,username2=\u0026quot;abc\u0026quot;)  Output:\n{'username1': 'xyz', 'username2': 'abc'}  So what\u0026rsquo;s happening here? It looks the same as args, right?\nNo, it\u0026rsquo;s not. In args, you cannot access a particular value by its name as it is in the form of a tuple. Here we get the data in the form of a dictionary so we can easily access the value.\nConsider this example:\n\u0026gt;\u0026gt;\u0026gt; def user(**user_details): ... print(user_details['username']) ...  Let\u0026rsquo;s call our function:\n\u0026gt;\u0026gt;\u0026gt; user(username=\u0026quot;Sharvin\u0026quot;,age=\u0026quot;1000\u0026quot;)  And you\u0026rsquo;ll get the following output:\nSharvin  Scope: A scope defines where a variable or function is available. There are two types of scope in Python: Global and Local.\nGlobal Scope A variable or function created in the main body of Python code is called a global variable or function and is part of the global scope. For example:\n\u0026gt;\u0026gt;\u0026gt; greet = \u0026quot;Hello world\u0026quot; \u0026gt;\u0026gt;\u0026gt; def testing(): ... print(greet) ... \u0026gt;\u0026gt;\u0026gt; testing() Hello world  Here the variable greet is available globally because it is declared in the body of the program.\nLocal Scope A variable or function created inside a function is called a local variable or function and is part of the local scope:\n\u0026gt;\u0026gt;\u0026gt; def testing(): ... greet = \u0026quot;Hello world\u0026quot; ... print(greet) ... \u0026gt;\u0026gt;\u0026gt; testing() Hello world  Here greet is created inside the testing function and is only available there. Let\u0026rsquo;s try to access it in our main body and see what happens:\n\u0026gt;\u0026gt;\u0026gt; print(greet) Traceback (most recent call last): File \u0026quot;\u0026lt;stdin\u0026gt;\u0026quot;, line 1, in \u0026lt;module\u0026gt; NameError: name 'greet' is not defined  Remember: Restart the Python console by pressing ctrl + d and starting the shell again by using the python3 command before testing the code above. The first example has you declare the greet variable in the global scope meaning it will still be available in memory when you run the second example.\nAs greet is not available globally we get the error that it is not defined.\nReturn Statement: Until now our functions are pretty simple. They are receiving data, processing it, and printing them. But in the real world, you need a function to return output so that it can be used in different operations.\nTo achieve this, return statements are used. Remember, return statements are only part of functions and methods. The syntax for the return statement is quite easy.\n\u0026gt;\u0026gt;\u0026gt; def add(a, b): ... return a + b ... \u0026gt;\u0026gt;\u0026gt; add(1,3) 4  Instead of printing our addition, we are returning the output. The value of the returned output can also be stored in a variable.\n\u0026gt;\u0026gt;\u0026gt; sum = add(5,10) \u0026gt;\u0026gt;\u0026gt; print(sum) 15  Lambda Expression: Consider a situation where you don\u0026rsquo;t want to perform much computation in a function. In such a situation writing a full-fledged function doesn\u0026rsquo;t make sense. To solve this we use a lambda expression or lambda function.\nSo what is a lambda expression? It is an anonymous function and they are restricted to a single expression. The lambda expression can take n number of arguments.\nThe syntax for lambda expression is:\nvariable = lambda arguments: operation  Let\u0026rsquo;s understand it more by example:\n\u0026gt;\u0026gt;\u0026gt; sum = lambda a: a + 10  Here we have declared a variable sum which we are using to call the lambda function. a represents the argument that is passed to that function.\nLet\u0026rsquo;s call our function:\n\u0026gt;\u0026gt;\u0026gt; x(5) 15  List comprehension: Consider a situation where you want a list of squares. Normally you\u0026rsquo;ll declare a squares list and then in a for loop you\u0026rsquo;ll square out the numbers.\n\u0026gt;\u0026gt;\u0026gt; squares = [] \u0026gt;\u0026gt;\u0026gt; for x in range(10): ... squares.append(x**2) ... \u0026gt;\u0026gt;\u0026gt; squares [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]  Well this is doable, but we can achieve this in a single line with the help of list comprehension.\nThere are two ways to achieve this. Let\u0026rsquo;s understand both of them.\n\u0026gt;\u0026gt;\u0026gt; squares = list(map(lambda x: x**2, range(10))) \u0026gt;\u0026gt;\u0026gt; squares [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]  Here we are using list constructor to build a list and inside that lambda function which squares out the number. Another way to achieve the same result is as follows:\n\u0026gt;\u0026gt;\u0026gt; squares = list(x**2 for x in range(10)) \u0026gt;\u0026gt;\u0026gt; squares [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]  I prefer this way because it is easier to more concise and easier to understand.\nWhat about when we have a condition where we want a set of two numbers that are the same? Well, we need to write two for loops and one if loop.\nLet\u0026rsquo;s see how that will look:\n\u0026gt;\u0026gt;\u0026gt; num_list = [] \u0026gt;\u0026gt;\u0026gt; for i in range(10): ... for j in range(10): ... if i == j: ... num_list.append((i,j)) ... \u0026gt;\u0026gt;\u0026gt; num_list [(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9)]  That\u0026rsquo;s a lot of work. And in terms of readability it\u0026rsquo;s hard to understand.\nLet\u0026rsquo;s use list comprehension to achieve the same result.\n\u0026gt;\u0026gt;\u0026gt; num_list = list((i,j) for i in range(10) for j in range(10) if i == j) \u0026gt;\u0026gt;\u0026gt; num_list [(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9)]  See how easy it is to get the same output in a single expression? Well, that\u0026rsquo;s the power of list comprehension.\nOOP concepts: Python is a multi-paradigm programming language. It means Python can use different approaches to solve a problem. One of the paradigms is procedural or functional programming. It structures the code like a recipe – a set of steps in the form of functions and code blocks.\nAnother approach to solving the problem is by creating classes and objects. This is known as object-oriented oriented programming. An object is a collection of data (variables) and methods that act on those data. And classes are a blueprint for each object.\nThe important thing to understand in object-oriented programming is that objects are at the center of the paradigm – they not only represent the data but also the structure of the program.\nYou can choose the paradigm that best suits the problem at hand, mix different paradigms in one program, and/or switch from one paradigm to another as your program evolves.\nAdvantages of object oriented programming  Inheritance: This is one of the most useful concepts in OOP. It specifies that the child object will have all the properties and behavior of the parent object. Thus Inheritance allows us to define a class that inherits all the methods and properties from another class. Polymorphism: To understand polymorphism let’s divide the word into two parts. The first part \u0026ldquo;poly\u0026rdquo; means many and \u0026ldquo;morph\u0026rdquo; means to form or shape. Thus polymorphism means one task can be performed in many different ways.\nFor example, you have a class animal, and all animals speak. But they speak differently. Here, the “speak” behavior is polymorphic and depends on the animal. So, the abstract “animal” concept does not actually “speak”, but specific animals (like dogs and cats) have a concrete implementation of the action “speak”.\nPolymorphism means the same function name or method name being used for different types.\n Encapsulation: In object-oriented programming you can restrict access to methods and variables – we can make the methods and variables private. This can prevent the data from being modified by accident and is known as encapsulation.\n  First, we will understand classes, objects, and constructors. Then after that, we will look into the above properties again. If you already know about classes, objects, and constructors, feel free to skip ahead.\nClasses: There are primitive data structures available in Python, for example, numbers, strings, and lists. These can all be used for simple representations like name, place, cost, and so on.\nBut what if we have more complex data? If there is a pattern in the repetition of the properties of that data, what can we do?\nSuppose we have 100 different animals. Every animal has a name, age, legs, etc. What if we want to add other properties to each animal, or one more animal gets added to that list? To manage such a complex scenario we need classes.\nAccording to the official Python documentation:\n Classes provide a means of bundling data and functionality together. Creating a new class creates a new type of object, allowing new instances of that type to be made.\n Each class instance can have attributes attached to it for maintaining its state. Class instances can also have methods (defined by its class) for modifying its state.\nSyntax of class:\nclass ClassName: \u0026lt;expression-1\u0026gt; . . . \u0026lt;expression-N\u0026gt;  We use class keyword to define a class. We will define a class Car.\nclass Car: pass  Methods: Methods look the same as functions. The only difference is that methods are dependent on an object. A function can be invoked by name while methods need to be invoked by using their class reference. They are defined inside the class.\nIn our example, let\u0026rsquo;s create two methods. One is an engine and another is a wheel. These two methods define the parts available in our car.\nThe below program will give us a better idea of classes:\n\u0026gt;\u0026gt;\u0026gt; class Car: ... def engine(self): ... print(\u0026quot;Engine\u0026quot;) ... \u0026gt;\u0026gt;\u0026gt; Car().engine() Engine  Here we are calling the engine method by using the Car() reference.\nTo summarize, the class provides a blueprint of what should be defined but it does not provide any real content. The Car class above defines the engine but it will not state what a specific car’s engine is. It is specified by the object.\nObjects: The object is an instance of the class. Let’s consider the above example of a car. Here Car is our class and toyota is the object of the car. We can create multiple copies of the object. Every object must be defined using the class.\nThe syntax for creating an object is:\ntoyota = Car()  Let’s consider our Car example to understand objects a bit better:\nclass Car: def engine(self): print(\u0026quot;Engine\u0026quot;) def wheel(self): print(\u0026quot;Wheel\u0026quot;) toyota = Car()  The above toyota = Car() is a class object. Class objects support two kinds of operations: attribute references and instantiation.\nClass instantiation uses function notation. The instantiation operation (“calling” a class object) creates an empty object.\nNow we can call different methods from our class Car using the object toyota that we have created. let’s call the method engine and wheel.\nOpen your editor and create a file named mycar.py. In that file copy the code below:\nclass Car: def engine(self): print(\u0026quot;Engine\u0026quot;) def wheel(self): print(\u0026quot;Wheel\u0026quot;) if __name__ == \u0026quot;__main__\u0026quot;: toyota = Car() toyota.engine() toyota.wheel()  Save the above code. Now let\u0026rsquo;s take a closer look at our program.\nHere we are creating a toyota object with the help of Car class. The toyota.engine() is a method object. What exactly happens when a method object is called?\nIn the call toyota.engine() doesn\u0026rsquo;t take any argument but if you see the method declaration we can see that it takes a self argument.\nYou may be confused about why it is not throwing an error. Well whenever we use a method object, the call toyota.engine() is converted to Car.engine(toyota). We will understand more about the self in the upcoming section.\nRun the program using the following command.\npython mycar.py  You\u0026rsquo;ll get the following output:\nEngine Wheel  Constructor: The __init__ method is the constructor method in Python. The constructor method is used to initialize the data.\nGo to the Python shell and enter this example:\n\u0026gt;\u0026gt;\u0026gt; class Car(): ... def __init__(self): ... print(\u0026quot;Hello I am the constructor method.\u0026quot;) ...  When we will call our class we will get the following output:\n\u0026gt;\u0026gt;\u0026gt; toyota = Car() Hello I am the constructor method.  Note: You will never have to call the init() method – it gets called automatically when you create a class instance.\nInstance attributes: All the classes have objects and all the objects have attributes. Attributes are the properties. We use __init__() method to specify an object’s initial attribute.\nLet’s consider our car example:\nclass Car(): def __init__(self, model): self.model = model #instance attribute  In our example, each Car() has a specific model. Thus instance attributes are unique data to each instance.\nClass attributes: We saw that instance attributes are specific to each object but class attributes are the same for all the instances. Let us look at the example of the car with the help of class attributes.\nclass Car(): no_of_wheels = 4 #class attribute  So each car can have different models but all the cars will have only 4 wheels.\nSelf: Now let’s understand what self means and how we use it in object-oriented programming. self represents the instance of a class. By using the self keyword we can access the data initialized in the constructor and methods of a class.\nLet\u0026rsquo;s look at an example of how self can be used. Let’s create a method named brand under our class Car.\nInside that __init__ method, we will pass a model by passing our car’s model name when we are instantiating our object. This name can be accessed anywhere in the class, for example self.model in our case.\nGo to the file named mycar.py and replace old code with this code:\nclass Car(): def __init__(self, model): self.model = model def brand(self): print(\u0026quot;The brand is\u0026quot;, self.model) if __name__ == \u0026quot;__main__\u0026quot;: car = Car(\u0026quot;Bmw\u0026quot;) car.brand()  Now when we run our above program using the following command:\npython mycar.py  We will get the following output:\nThe brand is Bmw  Note: self is a convention and not a real Python keyword. self is an argument in a method and we can use another name in place of it. But it is recommended to use self because it increases the readability of your code.\nInheritance: Inheritance refers to when a class inherits the property of another class.\nThe class from which properties are inherited is called the base class. The class which inherits the property of another class is called the derived class.\nInheritance can be defined as a parent and child relationship. The child inherits the properties of the parent. Thus making the child a derived class while parent is a base class. Here the term property refers to attributes and methods.\nThe syntax for a derived class definition looks like this:\nclass DerivedClassName(BaseClassName): \u0026lt;statement-1\u0026gt; . . . \u0026lt;statement-N\u0026gt;  It’s important to note that child classes override or extend the attributes and behaviors of parent class methods. This is to say that child classes inherit all of the the attributes and behaviors of their parents – but they\u0026rsquo;re also able to specify different behavior to follow.\nThe most basic type of class is an object, which generally all other classes inherit as their parent. Let’s modify our previous example to understand how inheritance works.\nWe will create a base class named vehicle:\nclass Vehicle: def __init__(self, name): self.name = name def getName(self): return self.name  We have created a class Vehicle and instantiated a constructor with self.name which we are using in getName method. Whenever this method will be called, it will return the name that has been passed when an object is instantiated for that class.\nNow let’s create a child class Car:\nclass Vehicle: def __init__(self, name): self.name = name def getName(self): return self.name class Car(Vehicle): pass  Car is a child class of Vehicle. It inherits all the method and attributes of parent class.\nNow let’s use methods and attribute from the Vehicle class in our child class Car.\nclass Vehicle: def __init__(self, name, color='silver'): self.name = name self.color = color def get_name(self): return self.name def get_color(self): return self.color class Car(Vehicle): pass audi = Car(\u0026quot;Audi r8\u0026quot;) print(\u0026quot;The name of our car is\u0026quot;, audi.get_name(), \u0026quot;and color is\u0026quot;, audi.get_color())  Let\u0026rsquo;s understand what we have done here.\nWe have declared a class named Vehicle with a constructor that takes name as an argument while color has a default argument.\nWe have two methods inside it. get_name returns name while get_color returns the color. We have instantiated an object and passed the car name.\nOne thing you\u0026rsquo;ll notice here that we are using base class methods in our child class declaration.\nRun the above program using the following command:\npython mycar.py  Output:\nThe name of our car is Audi r8 and color is silver  We can also override a parent method or attribute. In the above example, we have defined our vehicle color has silver. But what if the color of our car is black?\nNow for every child class, we can’t make changes in the parent class. There comes the overriding functionality.\nclass Vehicle: def __init__(self, name, color='silver'): self.name = name self.color = color def get_name(self): return self.name def get_color(self): return self.color class Car(Vehicle): def get_color(self): self.color = 'black' return self.color audi = Car(\u0026quot;Audi r8\u0026quot;) print(\u0026quot;The name of our car is\u0026quot;, audi.get_name(), \u0026quot;and color is\u0026quot;, audi.get_color()  As you can see in the above program, I have not instantiated a constructor. The reason behind this is that our child class Car is only using attributes from the Vehicle class and it is already inheriting them. So in such a scenario, there is no need to re-instantiate these attributes.\nNow when we run the above program we will get the following output:\nThe name of our car is Audi r8 and color is black  Super: super() returns a temporary object of the superclass that then allows us to call that superclass’s methods.\nCalling the previously built methods with super() saves us from needing to rewrite those methods in our subclass, and allows us to swap out superclasses with minimal code changes. Thus super extends the functionality of the inherited method.\nLet’s extend our car example using super(). We will instantiate a constructor with brand_name and color in the parent class, Vehicle. Now we will call this constructor from our child class (Car) using super. We will create a get_description method which is returning self.model from Car class and self.brand_name, self.color from the Vehicle class.\nclass Vehicle: def __init__(self, brand_name, color): self.brand_name = brand_name self.color = color def get_brand_name(self): return self.brand_name class Car(Vehicle): def __init__(self, brand_name, model, color): super().__init__(brand_name, color) self.model = model def get_description(self): return \u0026quot;Car Name: \u0026quot; + self.get_brand_name() + self.model + \u0026quot; Color:\u0026quot; + self.color c = Car(\u0026quot;Audi \u0026quot;, \u0026quot;r8\u0026quot;, \u0026quot; Red\u0026quot;) print(\u0026quot;Car description:\u0026quot;, c.get_description()) print(\u0026quot;Brand name:\u0026quot;, c.get_brand_name())  When we run the above program we get following output:\nCar description: Car Name: Audi r8 Color: Red Brand name: Audi  Multiple Inheritance: When a class inherits the method and attributes from multiple parent class then it is called multiple inheritance. This allows us to use the property from multiple base classes or parent classes in a derived or child class.\nThe general syntax of multiple Inheritance is as follows:\nclass DerivedClassName(Base1, Base2, Base3): \u0026lt;statement-1\u0026gt; . . . \u0026lt;statement-N\u0026gt;  Let’s extend our vehicle example using the multiple inheritance property. Here in this example, we will create 3 classes i.e. Vehicle, Cost and Car\nThe classes Vehicle and Cost will be the Parent class. A Vehicle class represents the general property while the Cost class represents its pricing.\nAs Car has a general property and cost will have two parent classes. Thus we will inherit multiple parent classes.\nclass Vehicle: def __init__(self, brand_name): self.brand_name = brand_name def get_brand_name(self): return self.brand_name class Cost:\tdef __init__(self, cost): self.cost = cost def get_cost(self): return self.cost class Car(Vehicle, Cost):\tdef __init__(self, brand_name, model, cost): self.model = model Vehicle.__init__(self, brand_name) Cost.__init__(self, cost) def get_description(self): return self.get_brand_name() + self.model + \u0026quot; is the car \u0026quot; + \u0026quot;and it's cost is \u0026quot; + self.get_cost() c = Car(\u0026quot;Audi \u0026quot;, \u0026quot;r8\u0026quot;, \u0026quot;2 cr\u0026quot;) print(\u0026quot;Car description:\u0026quot;, c.get_description())  Here you will find one thing in the above program that is different from all the other programs in this tutorial. I have used Vehicle.__init__(self, brand_name) in the constructor of Car class. This is one way of calling attributes from the parent class. Another was is super which I have explained above.\nWhen we run the above program we will get the following output:\nCar description: Audi r8 is the car and it's cost is 2 cr  Though it can be used effectively, multiple inheritance should be done with care so that our programs do not become ambiguous and difficult for other programmers to understand.\nPolymorphism: The word polymorphism means having many forms. In programming, polymorphism means same function name (but different signatures) being uses for different types.\nLet’s extend our car program using polymorphism. We will create two classes, Car and Bike. Both the classes have common method or function, but they are printing different data. The program is pretty self-explanatory:\nclass Car: def company(self): print(\u0026quot;Car belongs to Audi company.\u0026quot;) def model(self): print(\u0026quot;The Model is R8.\u0026quot;) def color(self): print(\u0026quot;The color is silver.\u0026quot;) class Bike: def company(self): print(\u0026quot;Bike belongs to pulsar company.\u0026quot;) def model(self): print(\u0026quot;The Model is dominar.\u0026quot;) def color(self): print(\u0026quot;The color is black.\u0026quot;) def func(obj): obj.company() obj.model() obj.color() car = Car() bike = Bike() func(car) func(bike)  When we run the above code we will get the following output:\nCar belongs to Audi company. The Model is R8. The color is silver. Bike belongs to pulsar company. The Model is dominar. The color is black.  Encapsulation: In most object-oriented programming, we can restrict access to methods and variables. This can prevent the data from being modified by accident and is known as encapsulation.\nLet’s use encapsulation in our car example. Now imagine we have a super-secret engine. In the first example, we will hide our engine using a private variable. In the second example, we will hide our engine using a private method.\nExample 1:\nclass Car: def __init__(self): self.brand_name = 'Audi ' self.model = 'r8' self.__engine = '5.2 L V10' def get_description(self): return self.brand_name + self.model + \u0026quot; is the car\u0026quot; c = Car() print(c.get_description) print(c.__engine)  In this example self.__engine is a private attribute. When we run this program we will get the following output.\nAudi r8 is the car AttributeError: 'Car' object has no attribute '__engine'  We get an error that Car object doesn\u0026rsquo;t have _engine because it is a private object.\nExample 2:\nWe can also define a private method by adding __ in front of the method name. Following is the example of how we can define a private method.\nclass Car: def __init__(self): self.brand_name = 'Audi ' self.model = 'r8' def __engine(self): return '5.2 L V10' def get_description(self): return self.brand_name + self.model + \u0026quot; is the car\u0026quot; c = Car() print(c.get_description()) print(c.__engine())  In this example def __engine(self) is a private method. When we run this program we will get the following output.\nAudi r8 is the car AttributeError: 'Car' object has no attribute '__engine'  Now suppose we want to access the private attribute or method we can do it in the following way:\nclass Car: def __init__(self): self.brand_name = 'Audi ' self.model = 'r8' self.__engine_name = '5.2 L V10' def __engine(self): return '5.2 L V10' def get_description(self): return self.brand_name + self.model + \u0026quot; is the car\u0026quot; c = Car() print(c.get_description()) print(\u0026quot;Accessing Private Method: \u0026quot;, c._Car__engine()) print(\u0026quot;Accessing Private variable: \u0026quot;, c._Car__engine_name)  The output of the following program is:\nAudi r8 is the car Accessing Private Method: 5.2 L V10 Accessing Private variable: 5.2 L V10  Encapsulation gives you more control over the degree of coupling in your code. It allows a class to change its implementation without affecting other parts of the code.\nDecorator: Imagine you have to extend the functionality of multiple functions. How will you do that?\nWell, one way is you can make functional calls and in that function, you can handle it. Making changes in 30 to 40 function calls and remembering where to place the call is a messy task. But the more elegant way provided by Python is with decorators.\nWhat is a decorator? A decorator is a function that takes a function and extends its functionality without modifying it explicitly. Well, I understand if you are still confused about what decorators are. Don\u0026rsquo;t worry – we have a tool named example to explain it.\nLet\u0026rsquo;s try an example to understand the decorator. There are two ways to write a decorator.\nMethod 1 We declare a decorator function and in the arguments of the function we expect the function to be passed as an argument. Inside that, we write a wrapper function where operations are carried out and it is returned.\n\u0026gt;\u0026gt;\u0026gt; def my_decorator(func): ... def wrapper(): ... print(\u0026quot;Line Number 1\u0026quot;) ... func() ... print(\u0026quot;Line Number 3\u0026quot;) ... return wrapper ... \u0026gt;\u0026gt;\u0026gt; def say_hello(): ... print(\u0026quot;Hello I am line Number 2\u0026quot;) ...  To call the function we assign the decorator with say_hello as an argument.\n\u0026gt;\u0026gt;\u0026gt; say_hello = my_decorator(say_hello)  We can also check the reference using say_hello. We will get the output that tells us it has been wrapped by the my_decorator function.\n\u0026lt;function my_decorator.\u0026lt;locals\u0026gt;.wrapper at 0x10dc84598\u0026gt;  Let\u0026rsquo;s call our say_hello function:\n\u0026gt;\u0026gt;\u0026gt; say_hello() Line Number 1 Hello I am line Number 2 Line Number 3  See the magic the line \u0026ldquo;Hello I am line Number 2\u0026rdquo; gets printed in between Line Number 1 and 3 because the function call gets executed there.\nMethod 1 is clunky, and because of that many people prefer a different approach.\nMethod 2 Here our decorator declaration remains same but we change how the call is assigned to that decorator. Whichever function requires that decorator wraps itself with @decorator_name.\n\u0026gt;\u0026gt;\u0026gt; def my_decorator(func): ... def wrapper(): ... print(\u0026quot;Line Number 1\u0026quot;) ... func() ... print(\u0026quot;Line Number 3\u0026quot;) ... return wrapper ... \u0026gt;\u0026gt;\u0026gt; @my_decorator ... def say_hello(): ... print(\u0026quot;Hello I am line Number 2\u0026quot;) ... \u0026gt;\u0026gt;\u0026gt; say_hello()  Output is the same:\nLine Number 1 Hello I am line Number 2 Line Number 3  A decorator is a powerful tool and it is used in the following development scenarios of an application:\n Setup logger Setup configuration Setup Error catching Extending common functionality for all function and classes  Exceptions: When we were learning various syntax we came across various errors. Those errors occurred because of the syntax. But in a real-world application, errors (or commonly known as bugs) not only occur due to syntax issues but also because of network errors or some other cause.\nTo handle these issues we use Try - Except. In try block, we write the expression that we want to be executed, while in except block we catch the error. The Try-Except block looks as follows:\ntry: expression except: catch error  Let\u0026rsquo;s understand this by an example:\n\u0026gt;\u0026gt;\u0026gt; try: ... print(value) ... except: ... print(\u0026quot;Something went wrong\u0026quot;) ...  Here we are trying to print the value variable but it is not defined. So we get the following output:\nSomething went wrong  You may be thinking that the line \u0026ldquo;something went wrong\u0026rdquo; is not that helpful. So how can we know what went wrong here?\nWe can print the exception and use it to find out what went wrong. Let\u0026rsquo;s test this in our example:\n\u0026gt;\u0026gt;\u0026gt; try: ... print(value) ... except Exception as e: ... print(e) ...  And the result is:\nname 'value' is not defined  Whoa! That\u0026rsquo;s magic. It is notifying me that \u0026lsquo;value\u0026rsquo; is not defined.\nPython also provides a tool named raise. Suppose you don\u0026rsquo;t want a certain condition to occur and if it occurs you want to raise it. In such condition you can use raise. Consider the example below:\n\u0026gt;\u0026gt;\u0026gt; i = 5 \u0026gt;\u0026gt;\u0026gt; if i \u0026lt; 6: ... raise Exception(\u0026quot;Number below 6 are not allowed\u0026quot;) ...  The output we get is as follows:\nTraceback (most recent call last): File \u0026quot;\u0026lt;stdin\u0026gt;\u0026quot;, line 2, in \u0026lt;module\u0026gt; Exception: Number below 6 are not allowed  There are many sub-types of Exceptions, so I recommend that you go through the Python Documentation to understand them.\nPackage Import: You have learned the basics of Python and now you are all ready to build awesome applications. But hold on – we are still missing some important topics.\nWithout package import, you will be forced to write everything in one single file. Imagine what a mess it will be.\nCreate two files named main.py and hello.py. Remember both file needs to be in the same directory.\nUnder hello.py copy paste the following code:\ndef say_hello(): print(\u0026quot;Hello world\u0026quot;)  Under main.py copy paste the following code:\nimport hello if __name__ == \u0026quot;__main__\u0026quot;: hello.say_hello()  In hello.py we have declared a say_hello() function which prints \u0026ldquo;Hello world\u0026rdquo;. In main.py you\u0026rsquo;ll see an import statement. We are importing the hello module and calling the say_hello() function from that module.\nRun our program using the following command:\n➜ python main.py  Output:\nHello world  Now let\u0026rsquo;s understand how to import a module which is in another directory.\nLet\u0026rsquo;s create a directory named \u0026ldquo;data\u0026rdquo; and move our hello.py inside that directory.\nGo to the main.py and change the previous import statement.\nfrom data import hello if __name__ == \u0026quot;__main__\u0026quot;: hello.say_hello()  There are two ways to import from a directory.\n Method 1: from data import hello Method 2: import data.hello  I prefer method 1 because of its readability. You can choose whichever method looks better to you.\nLet\u0026rsquo;s run our application using the following command:\n➜ python main.py  And an error occurs. Wait why did this happen? We did everything right. Let\u0026rsquo;s go through the error:\nTraceback (most recent call last): File \u0026quot;main.py\u0026quot;, line 1, in \u0026lt;module\u0026gt; from data import hello ImportError: No module named data  Well Python is telling us that it doesn\u0026rsquo;t recognize a module named data. To solve this issue create a __init__.py inside data directory. Leave the file blank and run the program again and you\u0026rsquo;ll get the following output:\nHello world  Well python by default does not treat a directory as a module. To inform Python to treat a directory as a module, __init__.py is required.\nJSON Handling: If you have worked previously with web development or app development you may be aware that all the API calls take place in JSON format. While JSON looks similar to a dictionary in Python, remember that it\u0026rsquo;s very different.\nTo handle JSON, Python provides an inbuilt json package. To use this package we need to import it as follows:\nimport json  This library provides two methods which help us in handling the JSON. Let\u0026rsquo;s understand them one by one.\nJSON loads: If you have a JSON string and want to convert it back to a dictionary you need to use the loads method. Go to the Python shell and copy-paste the following code:\n\u0026gt;\u0026gt;\u0026gt; import json \u0026gt;\u0026gt;\u0026gt; json_string = '{ \u0026quot;user_name\u0026quot;:\u0026quot;Sharvin\u0026quot;, \u0026quot;age\u0026quot;:1000}' #JSON String \u0026gt;\u0026gt;\u0026gt; type(json_string) \u0026lt;class 'str'\u0026gt; \u0026gt;\u0026gt;\u0026gt; data = json.loads(json_string) \u0026gt;\u0026gt;\u0026gt; type(data) \u0026lt;class 'dict'\u0026gt; \u0026gt;\u0026gt;\u0026gt; data {'user_name': 'Sharvin', 'age': 1000}  JSON dumps: Now let\u0026rsquo;s convert our data back to the JSON string format using the dumps method.\n\u0026gt;\u0026gt;\u0026gt; jsonString = json.dumps(data) \u0026gt;\u0026gt;\u0026gt; type(jsonString) \u0026lt;class 'str'\u0026gt; \u0026gt;\u0026gt;\u0026gt; jsonString '{\u0026quot;user_name\u0026quot;: \u0026quot;Sharvin\u0026quot;, \u0026quot;age\u0026quot;: 1000}'  To learn more about JSON Manipulation, go through the Python Documentation.\nThat\u0026rsquo;s it! And we\u0026rsquo;re done! I hope you now understand the basics of Python. Congratulations! That\u0026rsquo;s a huge achievement.\nFeedback is welcomed. Also if you want to learn about any other topic you can tweet the topic name on Twitter and include my Twitter handle. [ @sharvinshah26 ]\n Feel free to connect with me on Twitter and Github.\n**Reference : freeCodeCamp\n ","date":1588291200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588291200,"objectID":"e4d8144d3064a2a7e271bef5000b7ec1","permalink":"https://example.com/post/python/tutorials/beginner_to_pro/","publishdate":"2020-05-01T00:00:00Z","relpermalink":"/post/python/tutorials/beginner_to_pro/","section":"post","summary":"If you have an interest in Data Science, Web Development, Robotics, or IoT you must learn Python. Python has become the fastest-growing programming language due to its heavy usage and wide range of applications.","tags":["Beginner","freeCodeCamp","List"],"title":"How to Go From Beginner to Pro","type":"post"},{"authors":["Little Dragon"],"categories":["Tutorials","Python"],"content":" Regular expressions are essentially a highly specialized programming language embedded inside Python that empowers you to specify the rules for the set of possible strings that you want to match.\nIn Python you need the re module for regular expressions usage. The grammar overview is on the bottom of this page.\nRelated course:\nPython Programming Bootcamp: Go from zero to hero\nThe Match function The match function is defined as:\nre.match(pattern, string)  The parameters are:.\n   Parameters Description     pattern a regular expression   string the input string    If you want to match a string to a numberic sequence of exactly five, you can use this code:\n#!/usr/bin/python import re input = raw_input(\u0026quot;Enter an input string:\u0026quot;) m = re.match('\\d{5}\\Z',input) if m: print(\u0026quot;True\u0026quot;) else: print(\u0026quot;False\u0026quot;)  Example outputs:\nEmail validation regex We can use the same function to validate email address. The grammar rules are seen in re.compile and in the grammar table.\nString\tMatch 12345\tTrue 12358\tTrue 55555\tTrue 123\tFalse 123K5\tFalse 5555555\tFalse  #!/usr/bin/python import re input = raw_input(\u0026quot;Enter an input string:\u0026quot;) m = re.match('[^@]+@[^@]+\\.[^@]+',input) if m: print(\u0026quot;True\u0026quot;) else: print(\u0026quot;False\u0026quot;)  The Search Function The search function is defined as:\nre.search(pattern, string)  The parameters are:\nParameter Description.\npattern a regular expression, defines the string to be searched string the search space\nTo search if an e-mail address is in a string:\n#!/usr/bin/python import re input = \u0026quot;Contact me by test@example.com or at the office.\u0026quot; m = re.search('[^@]+@[^@]+\\.[^@]+',input) if m: print(\u0026quot;String found.\u0026quot;) else: print(\u0026quot;Nothing found.\u0026quot;)  Regular Expression Examples A few examples of regular expressions:\nRegular Expression Grammar    Example Regex     IP address (([2][5][0-5].)   Email [^@]+@[^@]+.[^@]+   Date MM/DD/YY (\\d+/\\d+/\\d+)   Integer (positive) (?\u0026lt;![-.])\\b[0-9]+\\b(?!.[0-9])   Integer [+-]?(?\u0026lt;!.)\\b[0-9]+\\b(?!.[0-9])   Float (?\u0026lt;=\u0026gt;)\\d+.\\d+   Hexadecimal \\s–([0-9a-fA-F]+)(?:–)?\\s    Overview of the regex grammar:\n   Regex Description     \\d Matches any decimal digit; this is equivalent to the class [0-9]   \\D Matches any non-digit character; this is equivalent to the class [^0-9].   \\s Matches any whitespace character; this is equivalent to the class [ \\t\\n\\r\\f\\v].   \\S Matches any non-whitespace character; this is equivalent to the class [^ \\t\\n\\r\\f\\v].   \\w Matches any alphanumeric character; this is equivalent to the class [a-zA-Z0-9_].   \\W Matches any non-alphanumeric character; this is equivalent to the class [^a-zA-Z0-9_].   \\Z Matches only at end of string   [..] Match single character in brackets   [^..] Match any single character not in brackets   . Match any character except newline   $ Match the end of the string   * Match 0 or more repetitions   + 1 or more repetitions   {m} Exactly m copies of the previous RE should be matched.   `    ? 0 or 1 repetitions of the preceding RE   [a-z] Any lowercase character   [A-Z] Any uppercase character   [a-zA-Z] Any character   [0-9] Any digit     Reference : pythonspot.com\n ","date":1586908800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1586908800,"objectID":"cefbf9145d7bed3cb0eb1a7ae2a78bdc","permalink":"https://example.com/post/python/tutorials/regular-expressions/","publishdate":"2020-04-15T00:00:00Z","relpermalink":"/post/python/tutorials/regular-expressions/","section":"post","summary":"Regular expressions are essentially a highly specialized programming language embedded inside Python that empowers you to specify the rules for the set of possible strings that you want to match.","tags":["Regular Expressions"],"title":"Regular Expressions","type":"post"},{"authors":["Little Dragon"],"categories":["Articles","Python"],"content":" Python has become one of the fastest-growing programming languages over the past few years.\nNot only it is widely used, it is also an awesome language to tackle if you want to get into the world of programming.\nThis Python Guide for Beginners allows you to learn the core of the language in a matter of hours instead of weeks.\nQuick info: You can download a PDF version of this Python Guide for Beginners.\nReady to dive in?\nTable of contents  Introduction to Python Installing Python 3 Running Code Syntax Comments Variables Types Typecasting User Input Operators Conditionals Lists Tuples Sets Dictionaries while Loops for Loops Functions Scope List Comprehensions Lambda Functions Modules if name == \u0026lsquo;main\u0026lsquo; Files Classes and Objects Inheritance Exceptions Conclusion  Introduction to Python Python was created in 1990 by Guido van Rossum in Holland.\nOne of the objectives of the language was to be accessible to non-programmers.\nPython was also designed to be a second language for programmers to learn due to its low learning curve and ease of use.\nPython runs on Mac, Linux, Windows, and many other platforms.\nPython is:\n Interpreted: it can execute at runtime, and changes in a program are instantly perceptible. To be very technical, Python has a compiler. The difference when compared to Java or C++ is how transparent and automatic it is. With Python, we don\u0026rsquo;t have to worry about the compilation step as it\u0026rsquo;s done in real-time. The tradeoff is that interpreted languages are usually slower than compiled ones.\n Semantically Dynamic: you don\u0026rsquo;t have to specify types for variables and there is nothing that makes you do it.\n Object-Oriented: everything in Python is an object. But you can choose to write code in an object-oriented, procedural, or even functional way.\n High level: you don\u0026rsquo;t have to deal with low-level machine details.\n  Python has been growing a lot recently partly because of its many uses in the following areas:\n System scripting: it\u0026rsquo;s a great tool to automate everyday repetitive tasks.\n Data Analysis: it is a great language to experiment with and has tons of libraries and tools to handle data, create models, visualize results and even deploy solutions. This is used in areas like Finance, E-commerce, and Research.\n Web Development: frameworks like Django and Flask allow the development of web applications, API\u0026rsquo;s, and websites.\n Machine Learning: Tensorflow and Pytorch are some of the libraries that allow scientists and the industry to develop and deploy Artificial Intelligence solutions in Image Recognition, Health, Self-driving cars, and many other fields.\n  You can easily organize your code in modules and reuse them or share them with others.\nFinally, we have to keep in mind that Python had breaking changes between versions 2 and 3. And since Python 2 support ended in 2020, this article is solely based on Python 3.\nSo let\u0026rsquo;s get started.\nInstalling Python 3 If you use a Mac or Linux you already have Python installed. But Windows doesn\u0026rsquo;t come with Python installed by default.\nYou also might have Python 2, and we are going to use Python 3. So you should check to see if you have Python 3 first.\nType the following in your terminal.\npython3 -V  Notice the uppercase V.\nIf your result is something similar to \u0026lsquo;Python 3.x.y\u0026rsquo;, for instance, Python 3.8.1, then you are ready to go.\nIf not, follow the next instructions according to your Operating System.\nInstalling Python 3 on Windows Go to https://www.python.org/downloads/.\nDownload the latest version.\nAfter the download, double-click the installer.\nOn the first screen, check the box indicating to \u0026ldquo;Add Python 3.x to PATH\u0026rdquo; and then click on \u0026ldquo;Install Now\u0026rdquo;.\nWait for the installation process to finish until the next screen with the message \u0026ldquo;Setup was successful\u0026rdquo;.\nClick on \u0026ldquo;Close\u0026rdquo;.\nInstalling Python 3 on Mac Install XCode from the App Store.\nInstall the command line tools by running the following in your terminal.\nxcode-select --install  I recommend using Homebrew. Go to https://brew.sh/ and follow the instructions on the first page to install it.\nAfter installing Homebrew, run the following brew commands to install Python 3.\nbrew update brew install python3  Homebrew already adds Python 3 to the PATH, so you don\u0026rsquo;t have to do anything else.\nInstalling Python 3 on Linux To install using apt, available in Ubuntu and Debian, enter the following:\nsudo apt install python3  To install using yum, available in RedHat and CentOS, enter the following:\nsudo yum install python3  Running Code You can run Python code directly in the terminal as commands or you can save the code in a file with the .py extension and run the Python file.\nTerminal Running commands directly in the terminal is recommended when you want to run something simple.\nOpen the command line and type python3\nrenan@mypc:~$ python3  You should see something like this in your terminal indicating the version (in my case, Python 3.6.9), the operating system (I\u0026rsquo;m using Linux), and some basic commands to help you.\nThe \u0026gt;\u0026gt;\u0026gt; tells us we are in the Python console.\nPython 3.6.9 (default, Nov 7 2019, 10:44:02) [GCC 8.3.0] on linux Type \u0026quot;help\u0026quot;, \u0026quot;copyright\u0026quot;, \u0026quot;credits\u0026quot; or \u0026quot;license\u0026quot; for more information. \u0026gt;\u0026gt;\u0026gt;  Let\u0026rsquo;s test it by running our first program to perform basic math and add two numbers.\n\u0026gt;\u0026gt;\u0026gt; 2 + 2  The output is:\n4  To exit the Python console simply type exit().\n\u0026gt;\u0026gt;\u0026gt; exit()  Running .py files If you have a complex program, with many lines of code, the Python console isn\u0026rsquo;t the best option.\nThe alternative is simply to open a text editor, type the code, and save the file with a .py extension.\nLet\u0026rsquo;s do that, create a file called second_program.py with the following content.\nprint('Second Program')  The print() function prints a message on the screen.\nThe message goes inside the parentheses with either single quotes or double quotes, both work the same.\nTo run the program, on your terminal do the following:\nrenan@mypc:~$ python3 second_program.py  The output is:\nSecond Program  Syntax Python is known for its clean syntax.\nThe language avoids using unnecessary characters to indicate some specificity.\nSemicolons Python doesn\u0026rsquo;t use semicolons to finish lines. A new line is enough to tell the interpreter that a new command is beginning.\nThe print() method will display something.\nIn this example, we have two commands that will display the messages inside the single quotes.\nprint('First command') print('Second command')  Output:\nFirst command Second command  But the following is wrong due to the semicolons in the end:\nprint('First command'); print('Second command');  Indentation Many languages use curly-brackets to define scope.\nPython\u0026rsquo;s interpreter uses only indentation to define when a scope ends and another one starts.\nThis means you have to be aware of white spaces at the beginning of each line \u0026ndash; they have meaning and might break your code if misplaced.\nThis definition of a function works:\ndef my_function(): print('First command')  This doesn\u0026rsquo;t work because the indentation of the second line is missing and will throw an error:\ndef my_function(): print('First command')  Case sensitivity and variables Python is case sensitive. So the variables name and Name are not the same thing and store different values.\nname = 'Renan' Name = 'Moura'  As you can see, variables are easily created by just assigning values to them using the = symbol.\nThis means name stores \u0026lsquo;Renan\u0026rsquo; and Name stores \u0026lsquo;Moura\u0026rsquo;.\nComments Finally, to comment something in your code, use the hash mark #.\nThe commented part does not influence the program flow.\n# this function prints something def my_function(): print('First command')  This was just an overview. The details of each of these will become clearer in the next chapters with examples and broader explanations.\nComments The purpose of comments is to explain what is happening in the code.\nComments are written along with your code but do not influence your program flow.\nWhen you work by yourself, maybe comments don\u0026rsquo;t feel like something you should write. After all, at the moment, you know the whys of every single line of code.\nBut what if new people come on board your project after a year and the project has 3 modules, each with 10,000 lines of code?\nThink about people who don\u0026rsquo;t know a thing about your app and who are suddenly having to maintain it, fix it, or add new features.\nRemember, there is no single solution for a given problem. Your way of solving things is yours and yours only. If you ask 10 people to solve the same problem, they will come up with 10 different solutions.\nIf you want others to fully understand your reasoning, good code design is mandatory, but comments are an integral part of any codebase.\nHow to Write Comments in Python The syntax of comments in Python is rather easy: just use the hash mark # symbol in front of the text you want to be a comment.\n#This is a comment and it won't influence my program flow  You can use a comment to explain what some piece of code does.\n#calculates the sum of any given two numbers a + b  Multiline Comments Maybe you want to comment on something very complex or describe how some process works in your code.\nIn these cases, you can use multiline comments.\nTo do that, just use a single hash mark # for each line.\n#Everything after the hash mark # is a comment #This is a comment and it won't influence my program flow #Calculates the cost of the project given variables a and b #a is the time in months it will take until the project is finished #b is how much money it will cost per month a + b * 10  Variables In any program, you need to store and manipulate data to create a flow or some specific logic.\nThat\u0026rsquo;s what variables are for.\nYou can have a variable to store a name, another one to store the age of a person, or even use a more complex type to store all of this at once like a dictionary.\nCreating, also known as Declaring Declaring a variable is a basic and straightforward operation in Python\nJust pick a name and attribute a value to it using the = symbol.\nname='Bob' age=32  You can use the print() function to show the value of a variable.\nprint(name) print(age)  Bob 32  Notice that in Python there is no special word to declare a variable.\nThe moment you assign a value, the variable is created in memory.\nPython also has dynamic typing, which means you don\u0026rsquo;t have to tell it if your variable is a text or a number, for instance.\nThe interpreter infers the typing based on the value assigned.\nIf you need it, you can also re-declare a variable just by changing its value.\n#declaring name as a string name='Bob' #re-declaring name as an int name = 32  Keep in my mind, though, that this is not recommended since variables must have meaning and context.\nIf I have a variable called name I don\u0026rsquo;t expect it to have a number stored in it.\nNaming Conventions Let\u0026rsquo;s continue from the last section when I talked about meaning and context.\nDon\u0026rsquo;t use random variable names like x or y.\nSay you want to store the time of a party, just call it party_time.\nOh, did you notice the underscore _?\nBy convention, if you want to use a variable name that is composed of two or more words, you separate them by underscores. This is called Snake Case.\nAnother option would be using CamelCase as in partyTime. This is very common in other languages, but not the convention in Python as stated before.\nVariables are case sensitive, so party_time and Party_time are not the same. Also, keep in mind that the convention tells us to always use lower case.\nRemember, use names that you can recall inside your program easily. Bad naming can cost you a lot of time and cause annoying bugs.\nIn summary, variable names:\n Are Case sensitive: time and TIME are not the same Have to start with an underscore _ or a letter (DO NOT start with a number) Are allowed to have only numbers, letters and underscores. No special characters like: #, $, \u0026amp;, @, etc.  This, for instance, is not allowed: party#time, 10partytime.\nTypes To store data in Python you need to use a variable. And every variable has its type depending on the value of the data stored.\nPython has dynamic typing, which means you don\u0026rsquo;t have to explicitly declare the type of your variable \u0026ndash; but if you want to, you can.\nLists, Tuples, Sets, and Dictionaries are all data types and have dedicated sections later on with more details, but we\u0026rsquo;ll look at them briefly here.\nThis way I can show you the most important aspects and operations of each one in their own section while keeping this section more concise and focused on giving you a broad view of the main data types in Python.\nDetermining the Type First of all, let\u0026rsquo;s learn how to determine the data type.\nJust use the type() function and pass the variable of your choice as an argument, like the example below.\nprint(type(my_variable))  Boolean The boolean type is one of the most basic types of programming.\nA boolean type variable can only represent either True or False.\nmy_bool = True print(type(my_bool)) my_bool = bool(1024) print(type(my_bool))  \u0026lt;class 'bool'\u0026gt; \u0026lt;class 'bool'\u0026gt;  Numbers There are three types of numeric types: int, float, and complex.\nInteger my_int = 32 print(type(my_int)) my_int = int(32) print(type(my_int))  \u0026lt;class 'int'\u0026gt; \u0026lt;class 'int'\u0026gt;  Float my_float = 32.85 print(type(my_float)) my_float = float(32.85) print(type(my_float))  \u0026lt;class 'float'\u0026gt; \u0026lt;class 'float'\u0026gt;  Complex my_complex_number = 32+4j print(type(my_complex_number)) my_complex_number = complex(32+4j) print(type(my_complex_number))  \u0026lt;class 'complex'\u0026gt; \u0026lt;class 'complex'\u0026gt;  String The text type is one of the most commons types out there and is often called string or, in Python, just str.\nmy_city = \u0026quot;New York\u0026quot; print(type(my_city)) #Single quotes have exactly #the same use as double quotes my_city = 'New York' print(type(my_city)) #Setting the variable type explicitly my_city = str(\u0026quot;New York\u0026quot;) print(type(my_city))  \u0026lt;class 'str'\u0026gt; \u0026lt;class 'str'\u0026gt; \u0026lt;class 'str'\u0026gt;  You can use the + operator to concatenate strings.\nConcatenation is when you have two or more strings and you want to join them into one.\nword1 = 'New ' word2 = 'York' print(word1 + word2)  New York  The string type has many built-in methods that let us manipulate them. I will demonstrate how some of these methods work.\nThe len() function returns the length of a string.\nprint(len('New York'))  8  The replace() method replaces a part of the string with another. As an example, let\u0026rsquo;s replace \u0026lsquo;New\u0026rsquo; for \u0026lsquo;Old\u0026rsquo;.\nprint('New York'.replace('New', 'Old'))  Old York  The upper() method will return all characters as uppercase.\nprint('New York'.upper())  NEW YORK  The lower() method does the opposite, and returns all characters as lowercase.\nprint('New York'.lower())  new york  Lists A list has its items ordered and you can add the same item as many times as you want. An important detail is that lists are mutable.\nMutability means you can change a list after its creation by adding items, removing them, or even just changing their values. These operations will be demonstrated later in the section dedicated to Lists.\nmy_list = [\u0026quot;bmw\u0026quot;, \u0026quot;ferrari\u0026quot;, \u0026quot;maclaren\u0026quot;] print(type(my_list)) my_list = list((\u0026quot;bmw\u0026quot;, \u0026quot;ferrari\u0026quot;, \u0026quot;maclaren\u0026quot;)) print(type(my_list))  \u0026lt;class 'list'\u0026gt; \u0026lt;class 'list'\u0026gt;  Tuples A tuple is just like a list: ordered, and allows repetition of items.\nThere is just one difference: a tuple is immutable.\nImmutability means you can\u0026rsquo;t change a tuple after its creation. If you try to add an item or update one, for instance, the Python intepreter will show you an error. I will show that these errors occur later in the section dedicated to Tuples.\nmy_tuple = (\u0026quot;bmw\u0026quot;, \u0026quot;ferrari\u0026quot;, \u0026quot;maclaren\u0026quot;) print(type(my_tuple)) my_tuple = tuple((\u0026quot;bmw\u0026quot;, \u0026quot;ferrari\u0026quot;, \u0026quot;maclaren\u0026quot;)) print(type(my_tuple))  \u0026lt;class 'tuple'\u0026gt; \u0026lt;class 'tuple'\u0026gt;  Sets Sets don\u0026rsquo;t guarantee the order of the items and are not indexed.\nA key point when using sets: they don\u0026rsquo;t allow repetition of an item.\nmy_set = {\u0026quot;bmw\u0026quot;, \u0026quot;ferrari\u0026quot;, \u0026quot;maclaren\u0026quot;} print(type(my_set)) my_set = set((\u0026quot;bmw\u0026quot;, \u0026quot;ferrari\u0026quot;, \u0026quot;maclaren\u0026quot;)) print(type(my_set))  \u0026lt;class 'set'\u0026gt; \u0026lt;class 'set'\u0026gt;  Dictionaries A dictionary doesn\u0026rsquo;t guarantee the order of the elements and is mutable.\nOne important characteristic in dictionaries is that you can set your own access keys for each element.\nmy_dict = {\u0026quot;country\u0026quot; : \u0026quot;France\u0026quot;, \u0026quot;worldcups\u0026quot; : 2} print(type(my_dict)) my_dict = dict(country=\u0026quot;France\u0026quot;, worldcups=2) print(type(my_dict))  \u0026lt;class 'dict'\u0026gt; \u0026lt;class 'dict'\u0026gt;  Typecasting Typecasting allows you to convert between different types.\nThis way you can have an int turned into a str, or a float turned into an int, for instance.\nExplicit conversion To cast a variable to a string just use the str() function.\n# this is just a regular explicit intialization my_str = str('32') print(my_str) # int to str my_str = str(32) print(my_str) # float to str my_str = str(32.0) print(my_str)  32 32 32.0  To cast a variable to an integer just use the int() function.\n# this is just a regular explicit intialization my_int = int(32) print(my_int) # float to int: rounds down to 3 my_int = int(3.2) print(my_int) # str to int my_int = int('32') print(my_int)  32 3 32  To cast a variable to a float just use the float() function.\n# this is an explicit intialization my_float = float(3.2) print(my_float) # int to float my_float = float(32) print(my_float) # str to float my_float = float('32') print(my_float)  3.2 32.0 32.0  What I did above is called an explicit type conversion.\nIn some cases you don\u0026rsquo;t need to do the conversion explicitly, since Python can do it by itself.\nImplicit conversion The example below shows implicit conversion when adding an int and a float.\nNotice that my_sum is float. Python uses float to avoid data loss since the int type can not represent the decimal digits.\nmy_int = 32 my_float = 3.2 my_sum = my_int + my_float print(my_sum) print(type(my_sum))  35.2 \u0026lt;class 'float'\u0026gt;  On the other hand, in this example, when you add an int and a str, Python will not be able to make the implicit conversion, and the explicit type conversion is necessary.\nmy_int = 32 my_str = '32' # explicit conversion works my_sum = my_int + int(my_str) print(my_sum) #implicit conversion throws an error my_sum = my_int + my_str  64 Traceback (most recent call last): File \u0026quot;\u0026lt;stdin\u0026gt;\u0026quot;, line 1, in \u0026lt;module\u0026gt; TypeError: unsupported operand type(s) for +: 'int' and 'str'  The same error is thrown when trying to add float and str types without making an explicit conversion.\nmy_float = 3.2 my_str = '32' # explicit conversion works my_sum = my_float + float(my_str) print(my_sum) #implicit conversion throws an error my_sum = my_float + my_str  35.2 Traceback (most recent call last): File \u0026quot;\u0026lt;stdin\u0026gt;\u0026quot;, line 1, in \u0026lt;module\u0026gt; TypeError: unsupported operand type(s) for +: 'float' and 'str'  User Input If you need to interact with a user when running your program in the command line (for example, to ask for a piece of information), you can use the input() function.\ncountry = input(\u0026quot;What is your country? \u0026quot;) #user enters 'Brazil' print(country)  Brazil  The captured value is always string. Just remember that you might need to convert it using typecasting.\nage = input(\u0026quot;How old are you? \u0026quot;) #user enters '29' print(age) print(type(age)) age = int(age) print(type(age))  The output for each print() is:\n29 \u0026lt;class 'str'\u0026gt; \u0026lt;class 'int'\u0026gt;  Notice the age 29 is captured as string and then converted explicitly to int.\nOperators In a programming language, operators are special symbols that you can apply to your variables and values in order to perform operations such as arithmetic/mathematical and comparison.\nPython has lots of operators that you can apply to your variables and I will demonstrate the most used ones.\nArithmetic Operators Arithmetic operators are the most common type of operators and also the most recognizable ones.\nThey allow you to perform simple mathematical operations.\nThey are:\n +: Addition -: Subtraction *: Multiplication /: Division **: Exponentiation //: Floor Division, rounds down the result of a division %: Modulus, gives you the remainder of a division  Let\u0026rsquo;s see a program that shows how each of them is used.\nprint('Addition:', 5 + 2) print('Subtraction:', 5 - 2) print('Multiplication:', 5 * 2) print('Division:', 5 / 2) print('Floor Division:', 5 // 2) print('Exponentiation:', 5 ** 2) print('Modulus:', 5 % 2)  Addition: 7 Subtraction: 3 Multiplication: 10 Division: 2.5 Floor Division: 2 Exponentiation: 25 Modulus: 1  Concatenation Concatenation is when you have two or more strings and you want to join them into one.\nThis useful when you have information in multiple variables and want to combine them.\nFor instance, in this next example I combine two variables that contain my first name and my last name respectively to have my full name.\nThe + operator is also used to concatenate.\nfirst_name = 'Renan ' last_name = 'Moura' print(first_name + last_name)  Renan Moura  Since concatenation is applied to strings, to concatenate strings with other types, you have to do an explicit typecast using str().\nI have to typecast the int value 30 to string with str() to concatenate it with the rest of the string.\nage = 'I have ' + str(30) + ' years old' print(age)  I have 30 years old  Comparison Operators Use comparison operators to compare two values.\nThese operators return either True or False.\nThey are:\n ==: Equal !=: Not equal \u0026gt;: Greater than \u0026lt;: Less than \u0026gt;=: Greater than or equal to \u0026lt;=: Less than or equal to  Let\u0026rsquo;s see a program that shows how each of them is used.\nprint('Equal:', 5 == 2) print('Not equal:', 5 != 2) print('Greater than:', 5 \u0026gt; 2) print('Less than:', 5 \u0026lt; 2) print('Greater than or equal to:', 5 \u0026gt;= 2) print('Less than or equal to:', 5 \u0026lt;= 2)  Equal: False Not equal: True Greater than: True Less than: False Greater than or equal to: True Less than or equal to: False  Assignment Operators As the name implies, these operators are used to assign values to variables.\nx = 7 in the first example is a direct assignment storing the number 7 in the variable x.\nThe assignment operation takes the value on the right and assigns it to the variable on the left.\nThe other operators are simple shorthands for the Arithmetic Operators.\nIn the second example x starts with 7 and x += 2 is just another way to write x = x + 2. This means the previous value of x is added by 2 and reassigned to x that is now equal to 9.\n =: simple assignment\nx = 7 print(x)  7  +=: addition and assignment\nx = 7 x += 2 print(x)  9  -=: subtraction and assignment\nx = 7 x -= 2 print(x)  5  *=: multiplication and assignment\nx = 7 x *= 2 print(x)  14  /=: division and assignment\nx = 7 x /= 2 print(x)  3.5  %=: modulus and assignment\nx = 7 x %= 2 print(x)  1  //=: floor division and assignment\nx = 7 x //= 2 print(x)  3  **=: exponentiation and assignment\nx = 7 x **= 2 print(x)  49   Logical Operators Logical operators are used to combine statements applying boolean algebra.\nThey are:\n and: True only when both statements are true or: False only when both x and y are false not: The not operator simply inverts the input, True becomes False and vice versa.  Let\u0026rsquo;s see a program that shows how each one is used.\nx = 5 y = 2 print(x == 5 and y \u0026gt; 3) print(x == 5 or y \u0026gt; 3) print(not (x == 5))  False True False  Membership Operators These operators provide an easy way to check if a certain object is present in a sequence: string, list, tuple, set, and dictionary.\nThey are:\n in: returns True if the object is present not in: returns True if the object is not present  Let\u0026rsquo;s see a program that shows how each one is used.\nnumber_list = [1, 2, 4, 5, 6] print( 1 in number_list) print( 5 not in number_list) print( 3 not in number_list)  True False True  Conditionals Conditionals are one of the cornerstones of any programming language.\nThey allow you to control the program flow according to specific conditions you can check.\nThe if statement The way you implement a conditional is through the if statement.\nThe general form of an if statement is:\nif expression: statement  The expression contains some logic that returns a boolean, and the statement is executed only if the return is True.\nA simple example:\nbob_age = 32 sarah_age = 29 if bob_age \u0026gt; sarah_age: print('Bob is older than Sarah')  Bob is older than Sarah  We have two variables indicating the ages of Bob and Sarah. The condition in plain English says \u0026ldquo;if Bob\u0026rsquo;s age is greater than Sarah\u0026rsquo;s age, then print the phrase \u0026lsquo;Bob is older than Sarah\u0026rsquo;\u0026rdquo;.\nSince the condition returns True, the phrase will be printed on the console.\nThe if else and elif statements In our last example, the program only does something if the condition returns True.\nBut we also want it to do something if it returns False or even check a second or third condition if the first one wasn\u0026rsquo;t met.\nIn this example, we swapped Bob\u0026rsquo;s and Sarah\u0026rsquo;s age. The first condition will return False since Sarah is older now, and then the program will print the phrase after the else instead.\nbob_age = 29 sarah_age = 32 if bob_age \u0026gt; sarah_age: print('Bob is older than Sarah') else: print('Bob is younger than Sarah')  Bob is younger than Sarah  Now, consider the example below with the elif.\nbob_age = 32 sarah_age = 32 if bob_age \u0026gt; sarah_age: print('Bob is older than Sarah') elif bob_age == sarah_age: print('Bob and Sarah have the same age') else: print('Bob is younger than Sarah')  Bob and Sarah have the same age  The purpose of the elif is to provide a new condition to be checked before the else is executed.\nOnce again we changed their ages and now both are 32 years old.\nAs such, the condition in the elif is met. Since both have the same age the program will print \u0026ldquo;Bob and Sarah have the same age\u0026rdquo;.\nNotice you can have as many elifs as you want, just put them in sequence.\nbob_age = 32 sarah_age = 32 if bob_age \u0026gt; sarah_age: print('Bob is older than Sarah') elif bob_age \u0026lt; sarah_age: print('Bob is younger than Sarah') elif bob_age == sarah_age: print('Bob and Sarah have the same age') else: print('This one is never executed')  Bob and Sarah have the same age  In this example, the else is never executed because all the possibilities are covered in the previous conditions and thus could be removed.\nNested conditionals You might need to check more than one conditional for something to happen.\nIn this case, you can nest your if statements.\nFor instance, the second phrase \u0026ldquo;Bob is the oldest\u0026rdquo; is printed only if both ifs pass.\nbob_age = 32 sarah_age = 28 mary_age = 25 if bob_age \u0026gt; sarah_age: print('Bob is older than Sarah') if bob_age \u0026gt; mary_age: print('Bob is the oldest')  Bob is older than Sarah Bob is the oldest  Or, depending on the logic, make it simpler with Boolean Algebra.\nThis way, your code is smaller, more readable and easier to maintain.\nbob_age = 32 sarah_age = 28 mary_age = 25 if bob_age \u0026gt; sarah_age and bob_age \u0026gt; mary_age: print('Bob is the oldest')  Bob is the oldest  Ternary Operators The ternary operator is a one-line if statement.\nIt\u0026rsquo;s very handy for simple conditions.\nThis is how it looks:\n\u0026lt;expression\u0026gt; if \u0026lt;condition\u0026gt; else \u0026lt;expression\u0026gt;  Consider the following Python code:\na = 25 b = 50 x = 0 y = 1 result = x if a \u0026gt; b else y print(result)  1  Here we use four variables, a and b are for the condition, while x and y represent the expressions.\na and b are the values we are checking against each other to evaluate some condition. In this case, we are checking if a is greater than b.\nIf the expression holds true, i.e., a is greater than b, then the value of x will be attributed to result which will be equal to 0.\nHowever, if a is less than b, then we have the value of y assigned to result, and result will hold the value 1.\nSince a is less than b, 25 \u0026lt; 50, result will have 1 as final value from y.\nThe easy way to remember how the condition is evaluated is to read it in plain English.\nOur example would read: result will be x if a is greater than b otherwise y.\nLists As promised in the Types section, this section and the next three about Tuples, Sets, and Dictionaries will have more in depth explanations of each of them since they are very important and broadly used structures in Python to organize and deal with data.\nA list has its items ordered and you can add the same item as many times as you want.\nAn important detail is that lists are mutable.\nMutability means you can change a list after its creation by adding items, removing them, or even just changing their values.\nInitialization Empty List people = []  List with initial values people = ['Bob', 'Mary']  Adding in a List To add an item in the end of a list, use append().\npeople = ['Bob', 'Mary'] people.append('Sarah') print(people)  ['Bob', 'Mary', 'Sarah']  To specify the position for the new item, use the insert() method.\npeople = ['Bob', 'Mary'] people.insert(0, 'Sarah') print(people)  ['Sarah', 'Bob', 'Mary']  Updating in a List Specify the position of the item to update and set the new value\npeople = ['Bob', 'Mary'] people[1] = 'Sarah' print(people)  ['Bob', 'Sarah']  Deleting in a List Use the remove() method to delete the item given as an argument.\npeople = ['Bob', 'Mary'] people.remove('Bob') print(people)  ['Mary']  To delete everybody, use the clear() method:\npeople = ['Bob', 'Mary'] people.clear()  Retrieving in a List Use the index to reference the item.\nRemember that the index starts at 0.\nSo to access the second item use the index 1.\npeople = ['Bob', 'Mary'] print(people[1])  Mary  Check if a given item already exists in a List people = ['Bob', 'Mary'] if 'Bob' in people: print('Bob exists!') else: print('There is no Bob!')  Tuples A tuple is similar to a list: it\u0026rsquo;s ordered, and allows repetition of items.\nThere is just one difference: a tuple is immutable.\nImmutability, if you remember, means you can\u0026rsquo;t change a tuple after its creation. If you try to add an item or update one, for instance, the Python interpreter will show you an error.\nInitialization Empty Tuple people = ()  Tuple with initial values people = ('Bob', 'Mary')  Adding in a Tuple Tuples are immutable. This means that if you try to add an item, you will see an error.\npeople = ('Bob', 'Mary') people[2] = 'Sarah'  Traceback (most recent call last): File \u0026quot;\u0026lt;stdin\u0026gt;\u0026quot;, line 1, in \u0026lt;module\u0026gt; TypeError: 'tuple' object does not support item assignment  Updating in a Tuple Updating an item will also return an error.\nBut there is a trick: you can convert into a list, change the item, and then convert it back to a tuple.\npeople = ('Bob', 'Mary') people_list = list(people) people_list[1] = 'Sarah' people = tuple(people_list) print(people)  ('Bob', 'Sarah')  Deleting in a Tuple For the same reason you can\u0026rsquo;t add an item, you also can\u0026rsquo;t delete an item, since they are immutable.\nRetrieving in a Tuple Use the index to reference the item.\npeople = ('Bob', 'Mary') print(people[1])  Mary  Check if a given item already exists in a Tuple people = ('Bob', 'Mary') if 'Bob' in people: print('Bob exists!') else: print('There is no Bob!')  Sets Sets don\u0026rsquo;t guarantee the order of items and are not indexed.\nA key point when using sets: they don\u0026rsquo;t allow repetition of an item.\nInitialization Empty Set people = set()  Set with initial values people = {'Bob', 'Mary'}  Adding in a Set Use the add() method to add one item.\npeople.add('Sarah')  Use the update() method to add multiple items at once.\npeople.update(['Carol', 'Susan'])  Remember, Sets do not allow repetition, so if you add \u0026lsquo;Mary\u0026rsquo; again, nothing changes.\npeople = {'Bob', 'Mary'} people.add('Mary') print(people)  {'Bob', 'Mary'}  Updating in a Set Items in a set are not mutable. You have to either add or delete an item.\nDeleting in a Set To remove Bob from the dictionary:\npeople = {'Bob', 'Mary'} people.remove('Bob') print(people)  {'Mary'}  To delete everybody:\npeople.clear()  Check if a given item already exists in a set people = {'Bob', 'Mary'} if 'Bob' in people: print('Bob exists!') else: print('There is no Bob!')  Dictionaries The dictionary doesn\u0026rsquo;t guarantee the order of the elements and it is mutable.\nOne important characteristic of dictionaries is that you can set your customized access keys for each element.\nInitialization of a Dictionary Empty Dictionary people = {}  Dictionary with initial values people = {'Bob':30, 'Mary':25}  Adding in a Dictionary If the key doesn\u0026rsquo;t exist yet, it is appended to the dictionary.\npeople['Sarah']=32  Updating a Dictionary If the key already exists, the value is just updated.\n#Bob's age is 28 now people['Bob']=28  Notice that the code is pretty much the same.\nDeleting in a Dictionary To remove Bob from the dictionary:\npeople.pop('Bob')  To delete everybody:\npeople.clear()  Retrieving in a Dictionary bob_age = people['Bob'] print(bob_age)  30  Check if a given key already exists in a Dictionary if 'Bob' in people: print('Bob exists!') else: print('There is no Bob!')  while Loops Loops are used when you need to repeat a block of code a certain number of times or apply the same logic over each item in a collection.\nThere are two types of loops: for and while.\nYou will learn about for loops in the next section.\nBasic Syntax The basic syntax of a while loop is as below.\nwhile condition: statement  The loop will continue while the condition is True.\nThe square of a number is The example below takes each value of number and calculates its squared value.\nnumber = 1 while number \u0026lt;= 5: print(number, 'squared is', number**2) number = number + 1  1 squared is 1 2 squared is 4 3 squared is 9 4 squared is 16 5 squared is 25  You can use any variable name, but I chose number because it makes sense in the context. A common generic choice would be simply i.\nThe loop will go on until number (initialized with 1) is less than or equal to 5.\nNotice that after the print() command, the variable number is incremented by 1 to take the next value.\nIf you don\u0026rsquo;t do the incrementation you will have an infinite loop since number will never reach a value greater than 5. This is a very important detail!\nelse block When the condition returns False, the else block will be called.\nnumber = 1 while number \u0026lt;= 5: print(number, 'squared is', number**2) number = number + 1 else: print('No numbers left!')  1 squared is 1 2 squared is 4 3 squared is 9 4 squared is 16 5 squared is 25 No numbers left!  Notice the phrase \u0026lsquo;No numbers left!\u0026rsquo; is printed after the loop ends, that is after the condition number \u0026lt;= 5 evaluates to False.\nHow to break out of a while loop in Python Simply use the break keyword, and the loop will stop its execution.\nnumber = 1 while number \u0026lt;= 5: print(number, 'squared is', number**2) number = number + 1 if number == 4: break  1 squared is 1 2 squared is 4 3 squared is 9  The loop runs normally, and when number reaches 4 the if statement evaluates to True and the break command is called. This finishes the loop before the squared value of the numbers 4 and 5 are calculated.\nHow to skip an item in a while loop The continue will do that for you.\nI had to invert the order of the if statement and the print() to show how it works properly.\nnumber = 0 while number \u0026lt; 5: number = number + 1 if number == 4: continue print(number, 'squared is', number**2)  1 squared is 1 2 squared is 4 3 squared is 9 5 squared is 25  The program always checks if 4 is the current value of number. If it is, the square of 4 won\u0026rsquo;t be calculated and the continue will skip to the next iteration when the value of number is 5.\n*\nfor Loops for loops are similar to while loops in the sense that they are used to repeat blocks of code.\nThe most important difference is that you can easily iterate over sequential types.\nBasic Syntax The basic syntax of a for loop is as below.\nfor item in collection: statement  Loop over a list To loop over a list or any other collection, just proceed as shown in the example below.\ncars = ['BMW', 'Ferrari', 'McLaren'] for car in cars: print(car)  BMW Ferrari McLaren  The list of cars contains three items. The for loop will iterate over the list and store each item in the car variable, and then execute a statement, in this case print(car), to print each car in the console.\nrange() function The range function is widely used in for loops because it gives you a simple way to list numbers.\nThis code will loop through the numbers 0 to 5 and print each of them.\nfor number in range(5): print(number)  0 1 2 3 4  In contrast, without the range() function, we would do something like this.\nnumbers = [0, 1, 2, 3, 4] for number in numbers: print(number)  0 1 2 3 4  You can also define a start and stop using range().\nHere we are starting in 5 and a stoping in 10. The number you set to stop is not included.\nfor number in range(5, 10): print(number)  5 6 7 8 9  Finally, it is also possible to set a step.\nHere we starting in 10 and incrementing by 2 until 20, since 20 is the stop, it is not included.\nfor number in range(10, 20, 2): print(number)  10 12 14 16 18  else block When the items in the list are over, the else block will be called.\ncars = ['BMW', 'Ferrari', 'McLaren'] for car in cars: print(car) else: print('No cars left!')  BMW Ferrari McLaren No cars left!  How to break out of a for loop in Python Simply use the break keyword, and the loop will stop its execution.\ncars = ['BMW', 'Ferrari', 'McLaren'] for car in cars: print(car) if car == 'Ferrari': break  BMW Ferrari  The loop will iterate through the list and print each car.\nIn this case, after the loop reaches \u0026lsquo;Ferrari\u0026rsquo;, the break is called and \u0026lsquo;McLaren\u0026rsquo; won\u0026rsquo;t be printed.\nHow to skip an item in a for loop In this section, we\u0026rsquo;ll learn how continue can do this for you.\nI had to invert the order of the if statement and the continue to show how it works properly.\nNotice that I always check if \u0026lsquo;Ferrari\u0026rsquo; is the current item. If it is, \u0026lsquo;Ferrari\u0026rsquo; won\u0026rsquo;t be printed, and the continue will skip to the next item \u0026lsquo;McLaren\u0026rsquo;.\ncars = ['BMW', 'Ferrari', 'McLaren'] for car in cars: if car == 'Ferrari': continue print(car)  BMW McLaren  Loop over a Loop: Nested Loops Sometimes you have more complex collections, like a list of lists.\nTo iterate over these lists, you need nested for loops.\nIn this case, I have three lists: one of BMW models, another on Ferrari models, and finally one with McLaren models.\nThe first loop iterates over each brand\u0026rsquo;s list, and the second will iterate over the models of each brand.\ncar_models = [ ['BMW I8', 'BMW X3', 'BMW X1'], ['Ferrari 812', 'Ferrari F8', 'Ferrari GTC4'], ['McLaren 570S', 'McLaren 570GT', 'McLaren 720S'] ] for brand in car_models: for model in brand: print(model)  BMW I8 BMW X3 BMW X1 Ferrari 812 Ferrari F8 Ferrari GTC4 McLaren 570S McLaren 570GT McLaren 720S  Loop over other Data Structures The same logic that applies for loops over a list can be extended to the other data structures: tuple, set, and dictionary.\nI will briefly demonstrate how to make a basic loop over each one of them.\nLoop over a Tuple people = ('Bob', 'Mary') for person in people: print(person)  Bob Mary  Loop over a Set people = {'Bob', 'Mary'} for person in people: print(person)  Bob Mary  Loop over a Dictionary To print the keys:\npeople = {'Bob':30, 'Mary':25} for person in people: print(person)  Bob Mary  To print the values:\npeople = {'Bob':30, 'Mary':25} for person in people: print(people[person])  30 25  Functions As the code grows the complexity also grows. And functions help organize the code.\nFunctions are a handy way to create blocks of code that you can reuse.\nDefinition and Calling In Python use the def keyword to define a function.\nGive it a name and use parentheses to inform 0 or more arguments.\nIn the line after the declaration starts, remember to indent the block of code.\nHere is an example of a function called print_first_function() that only prints a phrase \u0026lsquo;My first function!\u0026rsquo;.\nTo call the function just use its name as defined.\ndef print_first_function(): print('My first function!') print_first_function()  My first function!  return a value Use the return keyword to return a value from the function.\nIn this example the function second_function() returns the string \u0026lsquo;My second function!\u0026rsquo;.\nNotice that print() is a built-in function and our function is called from inside it.\nThe string returned by second_function() is passed as an argument to the print() function.\ndef second_function(): return 'My second function!' print(second_function())  My second function!  return multiple values Functions can also return multiple values at once.\nreturn_numbers() returns two values simultaneously.\ndef return_numbers(): return 10, 2 print(return_numbers())  (10, 2)  Arguments You can define parameters between the parentheses.\nWhen calling a function with parameters you have to pass arguments according to the parameters defined.\nThe past examples had no parameters, so there was no need for arguments. The parentheses remained empty when the functions were called.\nOne Argument To specify one parameter, just define it inside the parentheses.\nIn this example, the function my_number expects one number as argument defined by the parameter num.\nThe value of the argument is then accessible inside the function to be used.\ndef my_number(num): return 'My number is: ' + str(num) print(my_number(10))  My number is: 10  Two or more Arguments To define more parameters, just use a comma to separate them.\nHere we have a function that adds two numbers called add. It expects two arguments defined by first_num and second_num.\nThe arguments are added by the + operator and the result is then returned by the return.\ndef add(first_num, second_num): return first_num + second_num print(add(10,2))  12  This example is very similar to the last one. The only difference is that we have 3 parameters instead of 2.\ndef add(first_num, second_num, third_num): return first_num + second_num + third_num print(add(10,2,3))  15  This logic of defining parameters and passing arguments is the same for any number of parameters.\nIt is important to point out that the arguments have to be passed in the same order that the parameters are defined.\nDefault value. You can set a default value for a parameter if no argument is given using the = operator and a value of choice.\nIn this function, if no argument is given, the number 30 is assumed as the expected value by default.\ndef my_number(my_number = 30): return 'My number is: ' + str(my_number) print(my_number(10)) print(my_number())  My number is: 10 My number is: 30  Keyword or Named Arguments When calling a function, the order of the arguments have to match the order of the parameters.\nThe alternative is if you use keyword or named arguments.\nSet the arguments to their respective parameters directly using the name of the parameters and the = operators.\nThis example flips the arguments, but the function works as expected because I tell it which value goes to which parameter by name.\ndef my_numbers(first_number, second_number): return 'The numbers are: ' + str(first_number) + ' and ' + str(second_number) print(my_numbers(second_number=30, first_number=10))  The numbers are: 10 and 30  Any number of arguments: *args If you don\u0026rsquo;t want to specify the number of parameters, just use the * before the parameter name. Then the function will take as many arguments as necessary.\nThe parameter name could be anything like *numbers, but there is a convention in Python to use *args for this definition of a variable number of arguments.\ndef my_numbers(*args): for arg in args: print(number) my_numbers(10,2,3)  10 2 3  Any number of Keyword/Named arguments: **kwargs Similar to *args, we can use **kwargs to pass as many keyword arguments as we want, as long as we use **.\nAgain, the name could be anything like **numbers, but **kwargs is a convention.\ndef my_numbers(**kwargs): for key, value in kwargs.items(): print(key) print(value) my_numbers(first_number=30, second_number=10)  first_number 30 second_number 10  Other types as arguments The past examples used mainly numbers, but you can pass any type as argument and they will be treated as such inside the function.\nThis example takes strings as arguments.\ndef my_sport(sport): print('I like ' + sport) my_sport('football') my_sport('swimming')  I like football I like swimming  This function takes a list as argument.\ndef my_numbers(numbers): for number in numbers: print(number) my_numbers([30, 10, 64, 92, 105])  30 10 64 92 105  Scope The place where a variable is created defines its availability to be accessed and manipulated by the rest of the code. This is known as scope.\nThere are two types of scope: local and global.\nGlobal Scope A global scope allows you to use the variable anywhere in your program.\nIf your variable is outside a function, it has global scope by default.\nname = 'Bob' def print_name(): print('My name is ' + name) print_name()  My name is Bob  Notice that the function could use the variable name and print My name is Bob.\nLocal Scope When you declare a variable inside a function, it only exists inside that function and can\u0026rsquo;t be accessed from the outside.\ndef print_name(): name = \u0026quot;Bob\u0026quot; print('My name is ' + name) print_name()  My name is Bob  The variable name was declared inside the function, so the output is the same as before.\nBut this will throw an error:\ndef print_name(): name = 'Bob' print('My name is ' + name) print(name)  The output of the code above is:\nTraceback (most recent call last): File \u0026quot;\u0026lt;stdin\u0026gt;\u0026quot;, line 1, in \u0026lt;module\u0026gt; NameError: name 'name' is not defined  I tried to print the variable name from outside the function, but the scope of the variable was local and could not be found in a global scope.\nMixing Scopes If you use the same name for variables inside and outside a function, the function will use the one inside its scope.\nSo when you call print_name(), the name='Bob' is used to print the phrase.\nOn the other hand, when calling print() outside the function scope, name=\u0026quot;Sarah\u0026quot; is used because of its global scope.\nname = \u0026quot;Sarah\u0026quot; def print_name(): name = 'Bob' print('My name is ' + name) print_name() print(name)  The output of the code above is:\nMy name is Bob Sarah  List Comprehensions Sometimes we want to perform some very simple operations over the items of a list.\nList comprehensions give us a succinct way to work on lists as an alternative to other methods of iteration, such as for loops.\nBasic syntax To use a list comprehension to replace a regular for loop, we can make:\n[expression for item in list]  Which is the same as doing:\nfor item in list: expression  If we want some conditional to apply the expression, we have:\n[expression for item in list if conditional ]  Which is the same as doing:\nfor item in list: if conditional: expression  Example 1: calculating the cube of a number Regular way\nnumbers = [1, 2, 3, 4, 5] new_list = [] for n in numbers: new_list.append(n**3) print(new_list)  [1, 8, 27, 64, 125]  Using list comprehensions\nnumbers = [1, 2, 3, 4, 5] new_list = [] new_list = [n**3 for n in numbers] print(new_list)   [1, 8, 27, 64, 125]  Example 2: calculating the cube of a number only if it is greater than 3 Using the conditional, we can filter only the values we want the expression to be applied to.\nRegular way\nnumbers = [1, 2, 3, 4, 5] new_list = [] for n in numbers: if(n \u0026gt; 3): new_list.append(n**3) print(new_list)  [64, 125]  Using list comprehensions\nnumbers = [1, 2, 3, 4, 5] new_list = [] new_list = [n**3 for n in numbers if n \u0026gt; 3] print(new_list)  [64, 125]  Example 3: calling functions with list comprehensions We can also call functions using the list comprehension syntax:\nnumbers = [1, 2, 3, 4, 5] new_list = [] def cube(number): return number**3 new_list = [cube(n) for n in numbers if n \u0026gt; 3] print(new_list)  [64, 125]  Lambda Functions A Python lambda function can only have one expression and can\u0026rsquo;t have multiple lines.\nIt is supposed to make it easier to create some small logic in one line instead of a whole function as is usually done.\nLambda functions are also anonymous, which means there is no need to name them.\nBasic Syntax The basic syntax is very simple: just use the lambda keyword, define the parameters needed, and use \u0026ldquo;:\u0026rdquo; to separate the parameters from the expression.\nThe general forms is:\nlambda arguments : expression  One parameter example Look at this example using only one parameter\ncubic = lambda number : number**3 print(cubic(2))  8  Multiple parameter example If you want, you can also have multiple parameters.\nexponential = lambda multiplier, number, exponent : multiplier * number**exponent print(exponential(2, 2, 3))  16  Calling the Lambda Function directly You don\u0026rsquo;t need to use a variable as we did before. Instead you can make use of parenthesis around the lambda function and another pair of parenthesis around the arguments.\nThe declaration of the function and the execution will happen in the same line.\n(lambda multiplier, number, exponent : multiplier * number**exponent)(2, 2, 3)  16  Examples using lambda functions with other built-in functions Map The Map function applies the expression to each item in a list.\nLet\u0026rsquo;s calculate the cubic of each number in the list.\nnumbers = [2, 5, 10] cubics = list(map(lambda number : number**3, numbers)) print(cubics)  [8, 125, 1000]  Filter The Filter function will filter the list based on the expression.\nLet\u0026rsquo;s filter to have only the numbers greater than 5.\nnumbers = [2, 5, 10] filtered_list = list(filter(lambda number : number \u0026gt; 5, numbers)) print(filtered_list)  [10]  Modules After some time your code starts to get more complex with lots of functions and variables.\nTo make it easier to organize the code we use Modules.\nA well-designed Module also has the advantage of being reusable, so you write code once and reuse it everywhere.\nYou can write a module with all the mathematical operations and other people can use it.\nAnd, if you need, you can use someone else\u0026rsquo;s modules to simplify your code, speeding up your project.\nIn other programming languages, these are also referred to as libraries.\nUsing a Module To use a module we use the import keyword.\nAs the name implies we have to tell our program what module to import.\nAfter that, we can use any function available in that module.\nLet\u0026rsquo;s see an example using the math module.\nFirst, let\u0026rsquo;s see how to have access to a constant, Euler\u0026rsquo;s number.\nimport math math.e  2.718281828459045  In this second example, we are going to use a function that calculates the square root of a number.\nIt is also possible to use the as keyword to create an alias.\nimport math as m m.sqrt(121) m.sqrt(729)  11 27  Finally, using the from keyword, we can specify exactly what to import instead of the whole module and use the function directly without the module\u0026rsquo;s name.\nThis example uses the floor() function that returns the largest integer less than or equal to a given number.\nfrom math import floor floor(9.8923)  9  Creating a Module Now that we know how to use modules, let\u0026rsquo;s see how to create one.\nIt is going to be a module with the basic math operations add, subtract, multiply, divide and it is gonna be called basic_operations.\nCreate the basic_operations.py file with the four functions.\ndef add(first_num, second_num): return first_num + second_num def subtract(first_num, second_num): return first_num - second_num def multiply(first_num, second_num): return first_num * second_num def divide(first_num, second_num): return first_num / second_num  Then, just import the basic_operations module and use the functions.\nimport basic_operations basic_operations.add(10,2) basic_operations.subtract(10,2) basic_operations.multiply(10,2) basic_operations.divide(10,2)  12 8 20 5.0  if __name__ == '__main__' You are in the process of building a module with the basic math operations add, subtract, multiply, and divide called basic_operations saved in the basic_operations.py file.\nTo guarantee everything is fine, you can run some tests.\ndef add(first_num, second_num): return first_num + second_num def subtract(first_num, second_num): return first_num - second_num def multiply(first_num, second_num): return first_num * second_num def divide(first_num, second_num): return first_num / second_num print(add(10, 2)) print(subtract(10,2)) print(multiply(10,2)) print(divide(10,2))  After running the code:\nrenan@pro-home:~$ python3 basic_operations.py  The output is:\n12 8 20 5.0  The output for those tests are what we expected.\nOur code is right and ready to share.\nLet\u0026rsquo;s import the new module run it in the Python console.\nPython 3.6.9 (default, Nov 7 2019, 10:44:02) [GCC 8.3.0] on linux Type \u0026quot;help\u0026quot;, \u0026quot;copyright\u0026quot;, \u0026quot;credits\u0026quot; or \u0026quot;license\u0026quot; for more information. \u0026gt;\u0026gt;\u0026gt; import basic_operations 12 8 20 5.0 \u0026gt;\u0026gt;\u0026gt;  When the module is imported our tests are displayed on the screen even though we didn\u0026rsquo;t do anything besides importing basic_operations.\nTo fix that we use if __name__ == '__main__' in the basic_operations.py file like this:\ndef add(first_num, second_num): return first_num + second_num def subtract(first_num, second_num): return first_num - second_num def multiply(first_num, second_num): return first_num * second_num def divide(first_num, second_num): return first_num / second_num if __name__ == '__main__': print(add(10, 2)) print(subtract(10,2)) print(multiply(10,2)) print(divide(10,2))  Running the code directly on the terminal will continue to display the tests. But when you import it like a module, the tests won\u0026rsquo;t show and you can use the functions the way you intended.\nPython 3.6.9 (default, Nov 7 2019, 10:44:02) [GCC 8.3.0] on linux Type \u0026quot;help\u0026quot;, \u0026quot;copyright\u0026quot;, \u0026quot;credits\u0026quot; or \u0026quot;license\u0026quot; for more information. \u0026gt;\u0026gt;\u0026gt; import basic_operations \u0026gt;\u0026gt;\u0026gt; basic_operations.multiply(10,2) 20 \u0026gt;\u0026gt;\u0026gt;  Now that you know how to use the if __name__ == '__main__', let\u0026rsquo;s understand how it works.\nThe condition tells when the interpreter is treating the code as a module or as a program itself being executed directly.\nPython has this native variable called __name__.\nThis variable represents the name of the module which is the name of the .py file.\nCreate a file my_program.py with the following and execute it.\nprint(__name__)  The output will be:\n__main__  This tells us that when a program is executed directly, the variable __name__ is defined as __main__.\nBut when it is imported as a module, the value of __name__ is the name of the module.\nPython 3.6.9 (default, Nov 7 2019, 10:44:02) [GCC 8.3.0] on linux Type \u0026quot;help\u0026quot;, \u0026quot;copyright\u0026quot;, \u0026quot;credits\u0026quot; or \u0026quot;license\u0026quot; for more information. \u0026gt;\u0026gt;\u0026gt; import my_program my_program \u0026gt;\u0026gt;\u0026gt;  This is how the Python interpreter differentiates the behavior of an imported module and a program executed directly on the terminal.\nFiles Creating, deleting, reading, and many other functions applied to files are an integral part of many programs.\nAs such, it is very important to know how to organize and deal with files directly from your code.\nLet\u0026rsquo;s see how to handle files in Python.\nFile create First things first, create!\nWe are going to use the open() function.\nThis function opens a file and returns its corresponding object.\nThe first argument is the name of the file we are handling, the second refers to the operation we are using.\nThe code below creates the file \u0026ldquo;people.txt\u0026rdquo;, the x argument is used when we just want to create the file. If a file with the same name already exists, it will throw an exception.\npeople_file = open(\u0026quot;people.txt\u0026quot;, \u0026quot;x\u0026quot;)  You can also use the w mode to create a file. Unlike the x mode, it will not throw an exception since this mode indicates the writing mode. We are opening a file to write data into it and, if the file doesn\u0026rsquo;t exist, it is created.\npeople_file = open(\u0026quot;people.txt\u0026quot;, \u0026quot;w\u0026quot;)  The last one is the a mode which stands for append. As the name implies, you can append more data to the file, while the w mode simply overwrites any existing data.\nWhen appending, if the file doesn\u0026rsquo;t exist, it also creates it.\npeople_file = open(\u0026quot;people.txt\u0026quot;, \u0026quot;a\u0026quot;)  File write To write data into a file, you simply open a file with the w mode.\nThen, to add data, you use the object return by the open() function. In this case, the object is called people_file. Then you call the write() function passing the data as argument.\npeople_file = open(\u0026quot;people.txt\u0026quot;, \u0026quot;w\u0026quot;) people_file.write(\u0026quot;Bob\\n\u0026quot;) people_file.write(\u0026quot;Mary\\n\u0026quot;) people_file.write(\u0026quot;Sarah\\n\u0026quot;) people_file.close()  We use \\n at the end to break the line, otherwise the content in the file will stay in the same line as \u0026ldquo;BobMarySarah\u0026rdquo;.\nOne more detail is to close() the file. This is not only a good practice, but also ensures that your changes were applied to the file.\nRemember that when using w mode, the data that already existed in the file will be overwritten by the new data. To add new data without losing what was already there, we have to use the append mode.\nFile append The a mode appends new data to the file, keeping the existing one.\nIn this example, after the first writing with w mode, we are using the a mode to append. The result is that each name will appear twice in the file \u0026ldquo;people.txt\u0026rdquo;.\n#first write people_file = open(\u0026quot;people.txt\u0026quot;, \u0026quot;w\u0026quot;) people_file.write(\u0026quot;Bob\\n\u0026quot;) people_file.write(\u0026quot;Mary\\n\u0026quot;) people_file.write(\u0026quot;Sarah\\n\u0026quot;) people_file.close() #appending more data #keeping the existing data people_file = open(\u0026quot;people.txt\u0026quot;, \u0026quot;a\u0026quot;) people_file.write(\u0026quot;Bob\\n\u0026quot;) people_file.write(\u0026quot;Mary\\n\u0026quot;) people_file.write(\u0026quot;Sarah\\n\u0026quot;) people_file.close()  File read Reading the file is also very straightforward: just use the r mode like so.\nIf you read the \u0026ldquo;people.txt\u0026rdquo; file created in the last example, you should see 6 names in your output.\npeople_file = open(\u0026quot;people.txt\u0026quot;, \u0026quot;r\u0026quot;) print(people_file.read())  Bob Mary Sarah Bob Mary Sarah  The read() function reads the whole file at once. If you use the readline() function, you can read the file line by line.\npeople_file = open(\u0026quot;people.txt\u0026quot;, \u0026quot;r\u0026quot;) print(people_file.readline()) print(people_file.readline()) print(people_file.readline())  Bob Mary Sarah  You can also loop to read the lines like the example below.\npeople_file = open(\u0026quot;people.txt\u0026quot;, \u0026quot;r\u0026quot;) for person in people_file: print(person)  Bob Mary Sarah Bob Mary Sarah  Delete a File To delete a file, you also need the os module.\nUse the remove() method.\nimport os os.remove('my_file.txt')  Check if a File Exists Use the os.path.exists() method to check the existence of a file.\nimport os if os.path.exists('my_file.txt'): os.remove('my_file.txt') else: print('There is no such file!')  Copy a File For this one, I like to use the copyfile() method from the shutil module.\nfrom shutil import copyfile copyfile('my_file.txt','another_file.txt')  There are a few options to copy a file, but copyfile() is the fastest one.\nRename and Move a File If you need to move or rename a file you can use the move() method from the shutil module.\nfrom shutil import move move('my_file.txt','another_file.txt')  Classes and Objects Classes and Objects are the fundamental concepts of Object-Oriented Programming.\nIn Python, everything is an object!\nA variable (object) is just an instance of its type (class).\nThat\u0026rsquo;s why when you check the type of a variable you can see the class keyword right next to its type (class).\nThis code snippet shows that my_city is an object and it is an instance of the class str.\nmy_city = \u0026quot;New York\u0026quot; print(type(my_city))  \u0026lt;class 'str'\u0026gt;  Differentiate Class x Object The class gives you a standard way to create objects. A class is like a base project.\nSay you are an engineer working for Boeing.\nYour new mission is to build the new product for the company, a new model called 747-Space. This aircraft flies higher altitudes than other commercial models.\nBoeing needs to build dozens of those to sell to airlines all over the world, and the aircrafts have to be all the same.\nTo guarantee that the aircrafts (objects) follow the same standards, you need to have a project (class) that can be replicable.\nThe class is a project, a blueprint for an object.\nThis way you make the project once, and reuse it many times.\nIn our code example before, consider that every string has the same behavior and the same attributes. So it only makes sense for strings to have a class str to define them.\nAttributes and Methods Objects have some behavior which is is given by attributes and methods.\nIn simple terms, in the context of an object, attributes are variables and methods are functions attached to an object.\nFor example, a string has many built-in methods that we can use.\nThey work like functions, you just need to separate them from the objects using a ..\nIn this code snippet, I\u0026rsquo;m calling the replace() method from the string variable my_city which is an object, and an instance of the class str.\nThe replace() method replaces a part of the string for another and returns a new string with the change. The original string remains the same.\nLet\u0026rsquo;s replace \u0026lsquo;New\u0026rsquo; for \u0026lsquo;Old\u0026rsquo; in \u0026lsquo;New York\u0026rsquo;.\nmy_city = 'New York' print(my_city.replace('New', 'Old')) print(my_city)  Old York New York  Creating a Class We have used many objects (instances of classes) like strings, integers, lists, and dictionaries. All of them are instances of predefined classes in Python.\nTo create our own classes we use the class keyword.\nBy convention, the name of the class matches the name of the .py file and the module by consequence. It is also a good practice to organize the code.\nCreate a file vehicle.py with the following class Vehicle.\nclass Vehicle: def __init__(self, year, model, plate_number, current_speed = 0): self.year = year self.model = model self.plate_number = plate_number self.current_speed = current_speed def move(self): self.current_speed += 1 def accelerate(self, value): self.current_speed += value def stop(self): self.current_speed = 0 def vehicle_details(self): return self.model + ', ' + str(self.year) + ', ' + self.plate_number  Let\u0026rsquo;s break down the class to explain it in parts.\nThe class keyword is used to specify the name of the class Vehicle.\nThe __init__ function is a built-in function that all classes have. It is called when an object is created and is often used to initialize the attributes, assigning values to them, similar to what is done to variables.\nThe first parameter self in the __init__ function is a reference to the object (instance) itself. We call it self by convention and it has to be the first parameter in every instance method, as you can see in the other method definitions def move(self), def accelerate(self, value), def stop(self), and def vehicle_details(self).\nVehicle has 5 attributes (including self): year, model, plate_number, and current_speed.\nInside the __init__, each one of them is initialized with the parameters given when the object is instantiated.\nNotice that current_speed is initialized with 0 by default, meaning that if no value is given, current_speed will be equal to 0 when the object is first instantiated.\nFinally, we have three methods to manipulate our vehicle regarding its speed: def move(self), def accelerate(self, value), and def stop(self).\nAnd one method to give back information about the vehicle: def vehicle_details(self).\nThe implementation inside the methods work the same way as in functions. You can also have a return to give you back some value at the end of the method as demonstrated by def vehicle_details(self).\nUsing the Class To use the class in your terminal, import the Vehicle class from the vehicle module.\nCreate an instance called my_car, initializing year with 2009, model with \u0026lsquo;F8\u0026rsquo;, plate_number with \u0026lsquo;ABC1234\u0026rsquo;, and current_speed with 100.\nThe self parameter is not taken into consideration when calling methods. The Python interpreter infers its value as being the current object/instance automatically, so we just have to pass the other arguments when instantiating and calling methods.\nNow use the methods to move() the car which increases its current_speed by 1, accelerate(10) which increases its current_speed by the value given in the argument, and stop() which sets the current_speed to 0.\nRemember to print the value of current_speed at every command to see the changes.\nTo finish the test, call vehicle_details() to print the information about our vehicle.\n\u0026gt;\u0026gt;\u0026gt; from vehicle import Vehicle \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; my_car = Vehicle(2009, 'F8', 'ABC1234', 100) \u0026gt;\u0026gt;\u0026gt; print(my_car.current_speed) 100 \u0026gt;\u0026gt;\u0026gt; my_car.move() \u0026gt;\u0026gt;\u0026gt; print(my_car.current_speed) 101 \u0026gt;\u0026gt;\u0026gt; my_car.accelerate(10) \u0026gt;\u0026gt;\u0026gt; print(my_car.current_speed) 111 \u0026gt;\u0026gt;\u0026gt; my_car.stop() \u0026gt;\u0026gt;\u0026gt; print(my_car.current_speed) 0 \u0026gt;\u0026gt;\u0026gt; print(my_car.vehicle_details()) F8, 2009, ABC1234  If we don\u0026rsquo;t set the initial value for current_speed, it will be zero by default as stated before and demonstrated in the next example.\n\u0026gt;\u0026gt;\u0026gt; from vehicle import Vehicle \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; my_car = Vehicle(2009, 'F8', 'ABC1234') \u0026gt;\u0026gt;\u0026gt; print(my_car.current_speed) 0 \u0026gt;\u0026gt;\u0026gt; my_car.move() \u0026gt;\u0026gt;\u0026gt; print(my_car.current_speed) 1 \u0026gt;\u0026gt;\u0026gt; my_car.accelerate(10) \u0026gt;\u0026gt;\u0026gt; print(my_car.current_speed) 11 \u0026gt;\u0026gt;\u0026gt; my_car.stop() \u0026gt;\u0026gt;\u0026gt; print(my_car.current_speed) 0 \u0026gt;\u0026gt;\u0026gt; print(my_car.vehicle_details()) F8, 2009, ABC1234  Inheritance Let\u0026rsquo;s define a generic Vehicle class and save it inside the vehicle.py file.\nclass Vehicle: def __init__(self, year, model, plate_number, current_speed): self.year = year self.model = model self.plate_number = plate_number self.current_speed = current_speed def move(self): self.current_speed += 1 def accelerate(self, value): self.current_speed += value def stop(self): self.current_speed = 0 def vehicle_details(self): return self.model + ', ' + str(self.year) + ', ' + self.plate_number  A vehicle has attributes year, model, plate_number, and current_speed.\nThe definition of vehicle in the Vehicle is very generic and might not be suitable for trucks, for instance, because it should include a cargo attribute.\nOn the other hand, a cargo attribute does not make much sense for small vehicles like motorcycles.\nTo solve this we can use inheritance.\nWhen a class (child) inherits another class (parent), all the attributes and methods from the parent class are inherited by the child class.\nParent and Child In our case, we want a new Truck class to inherit everything from the Vehicle class. Then we want it to add its own specific attribute current_cargo to control the addition and removal of cargo from the truck.\nThe Truck class is called a child class that inherits from its parent class Vehicle.\nA parent class is also called a superclass while a child class is also known as a subclass.\nCreate the class Truck and save it inside the truck.py file.\nfrom vehicle import Vehicle class Truck(Vehicle): def __init__(self, year, model, plate_number, current_speed, current_cargo): super().__init__(year, model, plate_number, current_speed) self.current_cargo = current_cargo def add_cargo(self, cargo): self.current_cargo += cargo def remove_cargo(self, cargo): self.current_cargo -= cargo  Let\u0026rsquo;s break down the class to explain it in parts.\nThe class Vehicle inside the parentheses when defining the class Truck indicates that the parent Vehicle is being inherited by its child Truck.\nThe __init__ method has self as its first parameter, as usual.\nThe parameters year, model, plate_number, and current_speed are there to match the ones in the Vehicle class.\nWe added a new parameter current_cargo suited for the Truck class.\nIn the first line of the __init__ method of the Truck class we have to call the __init__ method of the Vehicle class.\nTo do that we use super() to make a reference to the supperclass Vehicle, so when super().__init__(year, model, plate_number, current_speed) is called we avoid repetition of our code.\nAfter that, we can assign the value of current_cargo normally.\nFinally, we have two methods to deal with the current_cargo: def add_cargo(self, cargo):, and def remove_cargo(self, cargo):.\nRemember that Truck inherits attributes and methods from Vehicle, so we also have an implicit access to the methods that manipulate the speed: def move(self), def accelerate(self, value), and def stop(self).\nUsing the Truck class To use the class in your terminal, import the Truck class from the truck module.\nCreate an instance called my_truck, initializing year with 2015, model with \u0026lsquo;V8\u0026rsquo;, plate_number with \u0026lsquo;XYZ1234\u0026rsquo;, current_speed with 0, and current_cargo with 0.\nUse add_cargo(10) to increase current_cargo by 10, remove_cargo(4), to decrease current_cargo by 4.\nRemember to print the value of current_cargo at every command to see the changes.\nBy inheritance, we can use the methods from the Vehicle class to move() the truck which increases its current_speed by 1, accelerate(10) which increases its current_speed by the value given in the argument, and stop() which sets the current_speed to 0.\nRemember to print the value of current_speed at every interaction to see the changes.\nTo finish the test, call vehicle_details() inherited from the Vehicle class to print the information about our truck.\n\u0026gt;\u0026gt;\u0026gt; from truck import Truck \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; my_truck = Truck(2015, 'V8', 'XYZ1234', 0, 0) \u0026gt;\u0026gt;\u0026gt; print(my_truck.current_cargo) 0 \u0026gt;\u0026gt;\u0026gt; my_truck.add_cargo(10) \u0026gt;\u0026gt;\u0026gt; print(my_truck.current_cargo) 10 \u0026gt;\u0026gt;\u0026gt; my_truck.remove_cargo(4) \u0026gt;\u0026gt;\u0026gt; print(my_truck.current_cargo) 6 \u0026gt;\u0026gt;\u0026gt; print(my_truck.current_speed) 0 \u0026gt;\u0026gt;\u0026gt; my_truck.accelerate(10) \u0026gt;\u0026gt;\u0026gt; print(my_truck.current_speed) 10 \u0026gt;\u0026gt;\u0026gt; my_truck.stop() \u0026gt;\u0026gt;\u0026gt; print(my_truck.current_speed) 0 \u0026gt;\u0026gt;\u0026gt; print(my_truck.vehicle_details()) V8, 2015, XYZ1234  Exceptions Errors are a part of every programmer\u0026rsquo;s life, and knowing how to deal with them is a skill on its own.\nThe way Python deals with errors is called \u0026lsquo;Exception Handling\u0026rsquo;.\nIf some piece of code runs into an error, the Python interpreter will raise an exception.\nTypes of Exceptions Let\u0026rsquo;s try to raise some exceptions on purpose and see the errors they produce.\n TypeError  First, try to add a string and an integer\n'I am a string' + 32  Traceback (most recent call last): File \u0026quot;\u0026lt;stdin\u0026gt;\u0026quot;, line 1, in \u0026lt;module\u0026gt; TypeError: must be str, not int   IndexError  Now, try to access an index that doesn\u0026rsquo;t exist in a list.\nA common mistake is to forget that sequences are 0-indexed, meaning the first item has index 0, not 1.\nIn this example, the list car_brands ends at index 2.\ncar_brands = ['ford', 'ferrari', 'bmw'] print(car_brands[3])  Traceback (most recent call last): File \u0026quot;\u0026lt;stdin\u0026gt;\u0026quot;, line 1, in \u0026lt;module\u0026gt; IndexError: list index out of range   NameError  If we try to print a variable that doesn\u0026rsquo;t exist:\nprint(my_variable)  Traceback (most recent call last): File \u0026quot;\u0026lt;stdin\u0026gt;\u0026quot;, line 1, in \u0026lt;module\u0026gt; NameError: name 'my_variable' is not defined   ZeroDivisionError  Math doesn\u0026rsquo;t allow division by zero, so trying to do so will raise an error, as expected.\n32/0  Traceback (most recent call last): File \u0026quot;\u0026lt;stdin\u0026gt;\u0026quot;, line 1, in \u0026lt;module\u0026gt; ZeroDivisionError: division by zero  This was just a sample of the kinds of exceptions you might see during your daily routine and what can cause each of them.\nException Handling Now we know how to cause errors that will crash our code and show us some message saying something is wrong.\nTo handle these exceptions just make use of the try/except statement.\ntry: 32/0 except: print('Dividing by zero!')  Dividing by zero!  The example above shows the use of the try statement.\nPut the block of code that may cause an exception inside the try scope. If everything runs alright, the except block is not invoked. But if an exception is raised, the block of code inside the except is executed.\nThis way the program doesn\u0026rsquo;t crash and if you have some code after the exception, it will keep running if you want it to.\nSpecific Exception Handling In the last example the except block was generic, meaning it was catching anything.\nGood practice it to specify the type of exception we are trying to catch, which helps a lot when debugging the code later.\nIf you know a block of code can throw an IndexError, specify it in the except:\ntry: car_brands = ['ford', 'ferrari', 'bmw'] print(car_brands[3]) except IndexError: print('There is no such index!')  There is no such index!  You can use a tuple to specify as many exception types as you want in a single except:\ntry: print('My code!') except(IndexError, ZeroDivisionError, TypeError): print('My Excepetion!')  else It is possible to add an else command at the end of the try/except. It runs only if there are no exceptions.\nmy_variable = 'My variable' try: print(my_variable) except NameError: print('NameError caught!') else: print('No NameError')  My variable No NameError  Raising Exceptions The raise command allows you to manually raise an exception.\nThis is particularly useful if you want to catch an exception and do something with it \u0026ndash; like logging the error in some personalized way like redirecting it to a log aggregator, or ending the execution of the code since the error should not allow the progress of the program.\ntry: raise IndexError('This index is not allowed') except: print('Doing something with the exception!') raise  Doing something with the exception! Traceback (most recent call last): File \u0026quot;\u0026lt;stdin\u0026gt;\u0026quot;, line 2, in \u0026lt;module\u0026gt; IndexError: This index is not allowed  finally The finally block is executed independently of exceptions being raised or not.\nThey are usually there to allow the program to clean up resources like files, memory, network connections, etc.\ntry: print(my_variable) except NameError: print('Except block') finally: print('Finally block')  Except block Finally block  Conclusion That\u0026rsquo;s it!\nCongratulations on reaching the end.\nI want to thank you for reading this article.\nIf you want to learn more, checkout my blog renanmf.com.\nRemember to download a PDF version of this Python Guide for Beginners.\nYou can also find me on Twitter: @renanmouraf.\n Reference : freeCodeCamp\n ","date":1586908800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1586908800,"objectID":"fb61f4834543f2fad9891c027d08ed12","permalink":"https://example.com/post/python/tutorials/beginner_handbook/","publishdate":"2020-04-15T00:00:00Z","relpermalink":"/post/python/tutorials/beginner_handbook/","section":"post","summary":"The Ultimate Python Beginner's Handbook - Python has become one of the fastest-growing programming languages over the past few years.","tags":["Beginner","freeCodeCamp","List"],"title":"The Ultimate Python Beginner's Handbook","type":"post"},{"authors":["Little Dragon"],"categories":["Example","Python","Series"],"content":" การทำ Web Scraping เพื่อเก็บข้อมูลที่มีอยู่ใน Internet มาทำการวิเคราะห์ เพราะสำหรับการวิเคราะห์ข้อมูล ซึ่งเป็นงานของ Data Scientist แล้ว สิ่งที่สำคัญที่สุดก็คงจะเป็น ข้อมูล นั่นแหละครับ\nนอกจากนี้ บริษัทใหญ่ ๆ หลาย ๆ แห่ง ก็ยังใช้ประโยชน์จากการทำ Web Scraping ในการเก็บรวบรวมความคิดเห็นของ social เพื่อเอามาวิเคราะห์ปรับปรุงผลิตภัณฑ์ของตัวเองได้อีกด้วย เช่น เก็บ complains ต่าง ๆ เกี่ยวกับผลิตภัณฑ์ในแต่ละชนิด หรือแม้กระทั่งการทำ sentiment analysis ด้วย technique NLP เพื่อดูว่า ความรู้สึก ของลูกค้าหลังการใช้บริการเป็นอย่างไร จาก comment หรือ post ต่าง ๆ ในโลกออนไลน์แบบ real-time\nในบทความนี้ก็เลยอยากจะเล่า flow ของการดูดข้อมูลแบบง่าย ๆ ซึ่งเหมาะสำหรับท่านที่พอจะเขียน Python ได้บ้างจนถึงชำนาญ และสนใจศึกษาเกี่ยวกับการทำ Web Scraping ครับ โดยในตัวอย่างนี้จะใช้เว็บ Wikipedia ซึ่งสามารถ scrape ได้ง่าย เหมาะกับผู้เริ่มต้นครับ\nโดยในบทความนี้จะนำเสนอเพียงแค่ basic เพื่อให้ผู้อ่านได้เห็นภาพรวมกว้าง ๆ ก่อน และจะกลับมาอธิบายลงลึกในแต่ละส่วนแยกกันไปในบทความถัด ๆ ไปอีกทีครับ\nGet Started! ก่อนอื่นจะขอแนะนำเครื่องมือที่ต้องใช้ก่อน จากนั้นก็จะแนะนำ flow ของการ scrape แบบง่าย ๆ พร้อมกับตัวอย่างโค้ดให้นำไปทดลองกันได้ง่าย ๆ ครับ\nสึ่งที่ต้องเตรียม\u0026hellip; 1. Python แน่นอนว่าถ้าจะเขียน Python script ก็ต้องมีโปรแกรมสำหรับ run script ก่อน ซึ่งตรงนี้สำหรับท่านที่ยังไม่มี Python ในเครื่อง ก็สามารถ install ได้จาก link นี้ โดยแนะนำให้ใช้ version ตั้งแต่ 3.6 ขึ้นไปครับ\nแต่ถ้าหากไม่สะดวก install ลงในเครื่องที่ใช้อยู่ก็สามารถ execute Python script online ได้โดยใช้บริการ Google Colab Notebook ของ Google ซึ่งสามารถแก้ไข และ execute Python script ทีละ block ได้ ผ่าน web browser จึงไม่จำเป็นต้อง install หรือ download อะไรลงในเครื่องทั้งสิ้นครับ\nโดยโค้ดทั้งหมดที่ใช้ในบทความนี้จะแชร์ผ่าน Google Colab ด้วยเช่นกัน เนื่องจาก Data Scientist ส่วนใหญ่น่าจะคุ้นเคยกับ interface ลักษณะนี้ดี\n\nภาพ Google Colab Notebook\n2. modules สำหรับการ scrape Python modules ที่จำเป็นต้องใช้ในบทความนี้ ได้แก่ requests, และ lxml โดยสามารถ install ผ่านโปรแกรม pip ของ Python ได้จากคำสั่งต่อไปนี้\npip install requests lxml  สำหรับท่านที่ใช้โค้ดบน Google Colab จะมี modules เหล่านี้ installed ไว้อยู่แล้ว ดังนั้นจึงไม่ต้องทำอะไรเพิ่มเติมครับ\nเริ่มกันเถอะ! code สำหรับบทความนี้จะแชร์ไว้ใน Google Colab ตาม link นี้ นะครับ\nถ้าสะดวกสามารถเปิดโค้ดตามและทดลองแก้ไขและรันดูไปพร้อม ๆ กับที่อ่านบทความได้เลยนะครับ\nโดยการคลิกแทบ File ด้านบนของ Colab แล้วเลือก Save a copy in Drive... ก็จะสามารถแก้ไขได้ และ save ลง Google Drive ให้อัตโนมัติครับ\nผู้อ่านสามารถรันโค้ดบน Colab ได้โดยการคลิกเลือกแต่ละ block แล้วกด Ctrl+Enter\nPython Web Scraping สมมุติว่า เราต้องการจะดูดข้อมูลจาก https://th.wikipedia.org/wiki/รายชื่อเทศบาลตำบลในประเทศไทย เพื่อเก็บรายชื่อของเทศบาลตำบลทั้งหมดในประเทศไทย ก็อาจจะแบ่งได้เป็น 2 ขั้นตอน คือ Scrape และ Extract\n\nWikipedia Page ที่จะทำการ scrape\n1. Scrape ขั้นตอนแรกก็คือต้องเอาข้อมูลจากหน้าเว็บแบบดิบ ๆ เนี่ย ออกมาให้ได้ก่อน ซึ่งในเว็บอื่น ๆ ทั่ว ๆ ไป ก็จะมีความซับซ้อนหลาย ๆ อย่างที่ทำให้ไม่สามารถดึงออกมาได้ง่าย ๆ ซึ่งจะนำเสนอเทคนิคต่าง ๆ ที่ใช้รับมือแต่ละ cases ในบทความถัด ๆ ไปนะครับ\nแต่เนื่องจากในส่วนนี้เราใช้ Web Wikipedia เป็นตัวอย่าง ซึ่งไม่ได้มีการป้องการ scrape หรือกลไกที่ซับซ้อนอะไรมาก เพราะงั้นสามารถส่ง GET request ไปที่ URL โดยตรงตามโค้ดด้านล่างได้เลยครับ\nimport requests url = 'https://th.wikipedia.org/wiki/รายชื่อเทศบาลตำบลในประเทศไทย' resp = requests.get(url) print(resp) # Output: \u0026lt;Response [200]\u0026gt;  จากโค้ดด้านบนเราจะได้ object ของ Response มาเก็บไว้ในตัวแปร resp\nโดยเราสามารถเรียกดู content ของ response ที่ได้กลับมาได้โดยใช้ resp.content หรือ resp.text แตกต่างกันเล็กน้อย คือ .content จะให้ค่า content ที่เป็น bytes ออกมา ส่วน .text จะ decode ข้อมูล bytes ออกเป็น string ให้ จึงสามารถแสดงตัวอักษรภาษาต่าง ๆ ให้ดูได้ เช่นภาษาไทย\nprint(resp.text[:5_000])  คำสั่งด้านบนจะเรียกดูข้อมูลจำนวน 5,000 ตัวอักษรแรก (limit ไว้เพื่อไม่ให้มันรกเฉย ๆ)\nจะเห็นว่าเราได้โค้ด HTML ของหน้า page นั้น ๆ มาทั้งหมด\nนั่นคือตอนนี้เราดึงข้อมูลดิบของหน้าเว็บนั้นมาอยู่ใน Python เรียบร้อยแล้ว\n2. Extract ต่อไปเราจะนำข้อมูลดิบที่ได้มา มากรองให้เหลือแค่ข้อมูลที่เราอยากได้เท่านั้น นั่นก็คือชื่อเทศบาลตำบล\nโดยทั่วไปในการ extract ข้อมูล วิธีการที่จะใช้นั้นก็ขึ้นอยู่กับหน้าตาของข้อมูล เช่น เป็น HTML, เป็น JSON, หรือเป็น plain text ซึ่ง modules ใน Python ที่จะนำมาใช้กับข้อมูลแต่ละประเภทก็มีหลายอย่าง เช่น lxml, json, beautifulsoup, หรือ re\nในกรณีนี้ เนื่องจากข้อมูลดิบเราเป็น HTML ผู้เขียนจึงใช้ lxml เนื่องจาก lxml มีฟังก์ชันที่ใช้แปลงข้อมูล HTML ให้กลายเป็น tree ซึ่งช่วยให้เราสามารถ extract แต่ละ element ใน HTML ได้ง่าย (เป็นความเห็นส่วนตัวนะครับ บางท่านอาจจะถนัดใช้ beautifulsoup มากกว่า ซึ่งอาจจะเขียนถึงในบทความถัด ๆ ไป)\nimport lxml.etree content = resp.content tree = lxml.etree.fromstring(content, parser=lxml.etree.HTMLParser()) print(tree) # Output: \u0026lt;Element html at 0x7f34c830e948\u0026gt;  note: เราต้องระบุ parser ให้เป็น HTMLParser เนื่องจากจริง ๆ แล้ว lxml สามารถใช้กับข้อมูลประเภทอื่นนอกจาก HTML ได้ด้วย\nพอเราแปลงข้อมูลเป็น tree แล้ว ต่อไปเราก็จะสามารถระบุตำแหน่งของ element ที่เก็บข้อมูลที่เราต้องการได้โดยใช้ XPath\nอธิบายแบบคร่าว ๆ XPath ก็คล้าย ๆ กับ path ของ folder ต่าง ๆ ในเครื่องคอมพิวเตอร์ ที่เอาไว้ระบุตำแหน่งไฟล์หรือ folder ที่เราต้องการ โดยเริ่มจาก root (C:/) แล้วก็ไปยัง folder ต่าง ๆ ตามลำดับ เช่น C:/Users/CopyPasteEng/Downloads แต่ XPath ในที่นี้จะใช้ระบุตำแหน่งของ HTML element บนโค้ด code แทน\nตัวอย่าง XPath เช่น //div[@id=\u0026quot;mw-content-text\u0026quot;]/div/p/text() อันนี้จะแปลว่า\n1. ให้เข้าไปหา element ประเภท div ที่มี id เป็น \u0026quot;mw-content-text\u0026quot; 2. จากนั้นเข้าต่อไปที่ child element ที่เป็นประเภท div 3. แล้วก็เข้าต่อไปที่ element ประเภท p 4. แล้วเอา content ที่เป็น text ทั้งหมดออกมา  note: div[...] คือการใส่เงื่อนไขในการเลือก div นั้น ๆ เข้าไป ในกรณีด้านบน เงื่อนไขก็คือ attribute id ต้องเท่ากับ mw-content-text\nทีนี้คำถามต่อมาก็คือจะเอา XPath ที่บอกตำแหน่งของข้อมูลที่เราต้องการมาได้อย่างไร\nคำตอบก็คือต้องดูจาก code ของ page ครับ ไม่มีทางอื่น 555\nซึ่งเครื่องมือหนึ่งที่สามารถช่วยให้แกะโค้ดของ web ต่าง ๆ ได้ง่าย ๆ และฟรี ก็คือ Code Inspector บน Google Chrome ครับ สามารถเปิดขึ้นมาได้โดยคลิกขวาที่หน้าเว็บแล้วเลือก Inspect หรือกด F12\nกลับมาที่เว็บตัวอย่างของเราครับ XPath ของชื่อเทศบาลตำบลทั้งหมดที่เราต้องการก็คือ //*[@id=\u0026quot;mw-content-text\u0026quot;]/div/table[2 \u0026lt;= position()]/tbody/tr/td[2 \u0026lt;= position() and position() \u0026lt;= 3]//a//text()* เราจึงสามารถที่จะ extract ข้อมูลออกจาก tree ได้ด้วยคำสั่งต่อไปนี้ ก็จะได้ชื่อของเทศบาลตำบลในประเทศไทยจาก Wikipedia มาเก็บเป็น list เอาไว้ได้ตามต้องการครับ\nxpath = '//*[@id=\u0026quot;mw-content-text\u0026quot;]/div/table[2 \u0026lt;= position()]/tbody/tr/td[2 \u0026lt;= position() and position() \u0026lt;= 3]//a//text()' tambon_list = tree.xpath(xpath) print(tambon_list) # Output: ['เทศบาลตำบลบ้านดู่', 'เทศบาลตำบลเวียงชัย', ...  *ขออนุญาตแก้ XPath ในตัวอย่างนี้เป็นแบบที่ยาวขึ้น เพื่อให้อธิบายได้ง่ายในบทความ part 2 นะครับ\nเพื่อให้บทความกระชับ ผู้จัดทำได้ละรายละเอียดบางส่วนเอาไว้\nเพราะจริง ๆ แล้ว ทั้งในส่วนของการ scrape และ extract ก็มีรายละเอียดอีกมาก และมีเทคนิคที่อาจจะต้องใช้มากมายซึ่งแตกต่างกันตามแต่ละ website เช่น XPath ที่อยู่ใน code นี่ได้มาได้ยังไง? จะทำอย่างไรกับบาง website ที่มีกลไกที่ป้องกันการ scraping หรือบาง website ที่มี format ขอข้อมูลเป็นลักษณะอื่น\nเพื่อให้ผู้อ่านได้รับข้อมูลครบถ้วน ในบทความนี้จึงนำเสนอเพียงแค่ basic ให้ผู้อ่านได้เห็นภาพรวมกว้าง ๆ ก่อน และคิดว่าจะกลับมาอธิบายลงลึกในแต่ละส่วนแยกกันไปอีกทีครับ\nSummary คิดว่าจากบทความนี้ ผู้อ่านน่าจะได้เห็นภาพของการ scrape แบบง่าย ๆ ไปแล้วสำหรับการเริ่มต้น ในบทความถัดไปเราก็จะสามารถไปดูเคสที่ซับซ้อนกันต่อได้ครับ\nอย่างที่ได้กล่าวไปข้างต้นครับ ว่าในการวิเคราะห์ข้อมูลเพื่อทำนายเหตุการณ์ต่าง ๆ ให้ถูกต้องและแม่นยำสิ่งที่สำคัญที่สุดคือ ข้อมูล ที่อัพเดตตลอดเวลา\nซึ่งเราอาจจะมอง Internet เป็นเหมือนแหล่งข้อมูลฟรี ที่เราสามารถ scrape มายังไงก็ได้ แต่ควรคำนึงถึงเรื่องของกฎหมายและความเหมาะสมด้วยครับ สิ่งสำคัญก็คือต้องไม่ทำให้ใครเดือดร้อน\nและสำหรับท่านที่สนใจอยากทราบรายละเอียดของแต่ละขั้นตอนอย่างละเอียด ก็สามารถติดตามได้ในบทความที่จะลงต่อ ๆ ไปนะครับ\nหรือถ้ามีเรื่องไหนที่สนใจเพิ่มเติมสามารถ comment เอาไว้ได้นะครับ\nFB Page: Copy Paste Engineer\n- ขอบคุณที่อ่านครับ -\npart อื่น ๆ ใน series\n- part 1: การดูดข้อมูลเบื้องต้น ด้วย Python\n- part 2: Chrome\u0026rsquo;s Code Inspector\n- part 3: เทคนิคการ extract ข้อมูลด้วย XPath\n- part 4: ทำไมถึง scrape บางเว็บไม่ได้??? 7 เทคนิคง่าย ๆ ให้ scrape เว็บส่วนใหญ่ได้ลื่นปรื๊ด\n Reference : https://dev.to/copypasteengineer/\n ","date":1585440000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585440000,"objectID":"1da6b017dd35d4beab0fb20b545c021b","permalink":"https://example.com/post/python/example/python-web-scraping-part-1/","publishdate":"2020-03-29T00:00:00Z","relpermalink":"/post/python/example/python-web-scraping-part-1/","section":"post","summary":"เพื่อเก็บข้อมูลที่มีอยู่ใน Internet มาทำการวิเคราะห์ เพราะสำหรับการวิเคราะห์ข้อมูล","tags":["Web Scraping"],"title":"Python Web Scraping Part I","type":"post"},{"authors":["Little Dragon"],"categories":["Tutorials","Python"],"content":" 👋 Welcome If you want to learn how to work with .append() and .extend() and understand their differences, then you have come to the right place. They are powerful list methods that you will definitely use in your Python projects.\nIn this article, you will learn:\n How and when to use the .append() method. How and when to use the .extend() method. Their main differences.  Let\u0026rsquo;s begin 🔅\n🔸 Append Let\u0026rsquo;s see how the .append() method works behind the scenes.\nUse Cases You should use this method when you want to add a single item to the end of a list.\n💡 Tips: You can add items of any data type since lists can have elements of different data types.\nSyntax and Arguments To call the .append() method, you will need to use this syntax:\nFrom Left to Right:\n The list that will be modified. This is usually a variable that references a list. A dot, followed by the name of the method .append(). Within parentheses, the item that will be added to the end of the list.  💡 Tips: The dot is very important. This is called \u0026ldquo;dot notation\u0026rdquo;. The dot basically says \u0026ldquo;call this method on this particular list\u0026rdquo;, so the effect of the method will be applied to the list that is located before the dot.\nExamples Here\u0026rsquo;s an example of how to use .append():\n# Define the list \u0026gt;\u0026gt;\u0026gt; nums = [1, 2, 3, 4] # Add the integer 5 to the end of the existing list \u0026gt;\u0026gt;\u0026gt; nums.append(5) # See the updated value of the list \u0026gt;\u0026gt;\u0026gt; nums [1, 2, 3, 4, 5]  💡 Tips: When you use .append() the original list is modified. The method does not create a copy of the list – it mutates the original list in memory.\nLet\u0026rsquo;s pretend that we are conducting a research and that we want to analyze the data collected using Python. We need to add a new measurement to the existing list of values.\nHow do we do it? We use the .append() method!\nYou can see it right here:\n# Existing list \u0026gt;\u0026gt;\u0026gt; nums = [5.6, 7.44, 6.75, 4.56, 2.3] # Add the float (decimal number) to the end of the existing list \u0026gt;\u0026gt;\u0026gt; nums.append(7.34) # See the updated value of the list \u0026gt;\u0026gt;\u0026gt; nums [5.6, 7.44, 6.75, 4.56, 2.3, 7.34]  Equivalent to\u0026hellip; If you are familiar with string, list, or tuple slicing, what .append() really does behind the scenes is equivalent to:\na[len(a):] = [x]  With this example, you can see that they are equivalent.\nUsing .append():\n\u0026gt;\u0026gt;\u0026gt; nums = [5.6, 7.44, 6.75, 4.56, 2.3] \u0026gt;\u0026gt;\u0026gt; nums.append(4.52) \u0026gt;\u0026gt;\u0026gt; nums [5.6, 7.44, 6.75, 4.56, 2.3, 4.52]  Using list slicing:\n\u0026gt;\u0026gt;\u0026gt; nums = [5.6, 7.44, 6.75, 4.56, 2.3] \u0026gt;\u0026gt;\u0026gt; nums[len(nums):] = [4.52] \u0026gt;\u0026gt;\u0026gt; nums [5.6, 7.44, 6.75, 4.56, 2.3, 4.52]  Appending a Sequence Now, what do you think about this example? What do you think will be output?\n\u0026gt;\u0026gt;\u0026gt; nums = [5.6, 7.44, 6.75, 4.56, 2.3] \u0026gt;\u0026gt;\u0026gt; nums.append([5.67, 7.67, 3.44]) \u0026gt;\u0026gt;\u0026gt; nums # OUTPUT?  Are you ready? This will be the output:\n[5.6, 7.44, 6.75, 4.56, 2.3, [5.67, 7.67, 3.44]]  You might be asking, why was the full list added as a single item? It\u0026rsquo;s because the .append() method adds the entire item to the end of the list. If the item is a sequence such as a list, dictionary, or tuple, the entire sequence will be added as a single item of the existing list.\nHere we have another example (below). In this case, the item is a tuple and it is added as a single item of the list, not as individual items:\n\u0026gt;\u0026gt;\u0026gt; names = [\u0026quot;Lulu\u0026quot;, \u0026quot;Nora\u0026quot;, \u0026quot;Gino\u0026quot;, \u0026quot;Bryan\u0026quot;] \u0026gt;\u0026gt;\u0026gt; names.append((\u0026quot;Emily\u0026quot;, \u0026quot;John\u0026quot;)) \u0026gt;\u0026gt;\u0026gt; names ['Lulu', 'Nora', 'Gino', 'Bryan', ('Emily', 'John')]  🔸 Extend Now let\u0026rsquo;s dive into the functionality of the .extend() method.\nUse Cases You should use this method if you need to append several items to a list as individual items.\nLet me illustrate the importance of this method with a familiar friend that you just learned: the .append() method. Based on what you\u0026rsquo;ve learned so far, if we wanted to add several individual items to a list using .append(), we would need to use .append() several times, like this:\n# List that we want to modify \u0026gt;\u0026gt;\u0026gt; nums = [5.6, 7.44, 6.75, 4.56, 2.3] # Appending the items \u0026gt;\u0026gt;\u0026gt; nums.append(2.3) \u0026gt;\u0026gt;\u0026gt; nums.append(9.6) \u0026gt;\u0026gt;\u0026gt; nums.append(4.564) \u0026gt;\u0026gt;\u0026gt; nums.append(7.56) # Updated list \u0026gt;\u0026gt;\u0026gt; nums [5.6, 7.44, 6.75, 4.56, 2.3, 2.3, 9.6, 4.564, 7.56]  I\u0026rsquo;m sure that you are probably thinking that this would not be very efficient, right? What if I need to add thousands or millions of values? I cannot write thousands or millions of lines for this simple task. That would take forever!\nSo let\u0026rsquo;s see an alternative. We can store the values that we want to add in a separate list and then use a for loop to call .append() as many times as needed:\n# List that we want to modify \u0026gt;\u0026gt;\u0026gt; nums = [5.6, 7.44, 6.75, 4.56, 2.3] # Values that we want to add \u0026gt;\u0026gt;\u0026gt; new_values = [2.3, 9.6, 4.564, 7.56] # For loop that is going to append the value \u0026gt;\u0026gt;\u0026gt; for num in new_values: nums.append(num) # Updated value of the list \u0026gt;\u0026gt;\u0026gt; nums [5.6, 7.44, 6.75, 4.56, 2.3, 2.3, 9.6, 4.564, 7.56]  This is more efficient, right? We are only writing a few lines. But there is an even more efficient, readable, and compact way to achieve the same purpose: .extend()!\n\u0026gt;\u0026gt;\u0026gt; nums = [5.6, 7.44, 6.75, 4.56, 2.3] \u0026gt;\u0026gt;\u0026gt; new_values = [2.3, 9.6, 4.564, 7.56] # This is where the magic occurs! No more for loops \u0026gt;\u0026gt;\u0026gt; nums.extend(new_values) # The list was updated with individual values \u0026gt;\u0026gt;\u0026gt; nums [5.6, 7.44, 6.75, 4.56, 2.3, 2.3, 9.6, 4.564, 7.56]  Let\u0026rsquo;s see how this method works behind the scenes.\nSyntax and Arguments To call the .extend() method, you will need to use this syntax:\nFrom Left to Right:\n The list that will be modified. This is usually a variable that refers to the list. A dot . (So far, everything is exactly the same as before). The name of the method extend. (Now things start to change\u0026hellip;). Within parentheses, an iterable (list, tuple, dictionary, set, or string) that contains the items that will be added as individual elements of the list.  💡 Tips: According to the Python documentation, an iterable is defined as \u0026ldquo;an object capable of returning its members one at a time\u0026rdquo;. Iterables can be used in a for loop and because they return their elements one at a time, we can \u0026ldquo;do something\u0026rdquo; with each one of them, one per iteration.\nBehind the Scenes Let\u0026rsquo;s see how .extend() works behind the scenes. Here we have an example:\n# List that will be modified \u0026gt;\u0026gt;\u0026gt; a = [1, 2, 3, 4] # Sequence of values that we want to add to the list a \u0026gt;\u0026gt;\u0026gt; b = [5, 6, 7] # Calling .extend() \u0026gt;\u0026gt;\u0026gt; a.extend(b) # See the updated list. Now the list a has the values 5, 6, and 7 \u0026gt;\u0026gt;\u0026gt; a [1, 2, 3, 4, 5, 6, 7]  You can think of .extend() as a method that appends the individual elements of the iterable in the same order as they appear.\nIn this case, we have a list a = [1, 2, 3, 4] as illustrated in the diagram below. We also have a list b = [5, 6, 7] that contains the sequence of values that we want to add. The method takes each element of b and appends it to list a in the same order.\nStep 1. First element is appended.\nStep 2. Second element appended.\nStep 3. Third element appended\nAfter this process is completed, we have the updated list a and we can work with the values as individual elements of a.\n💡 Tips: The list b used to extend list a remains intact after this process. You can work with it after the call to .extend(). Here is the proof:\n\u0026gt;\u0026gt;\u0026gt; a = [1, 2, 3, 4] \u0026gt;\u0026gt;\u0026gt; b = [5, 6, 7] \u0026gt;\u0026gt;\u0026gt; a.extend(b) \u0026gt;\u0026gt;\u0026gt; a [1, 2, 3, 4, 5, 6, 7] # List b is intact! \u0026gt;\u0026gt;\u0026gt; b [5, 6, 7]  Examples You may be curious to know how the .extend() method works when you pass different types of iterables. Let\u0026rsquo;s see how in the following examples:\nFor tuples:\nThe process works exactly the same if you pass a tuple. The individual elements of the tuple are appended one by one in the order that they appear.\n# List that will be extended \u0026gt;\u0026gt;\u0026gt; a = [1, 2, 3, 4] # Values that will be added (the iterable is a tuple!) \u0026gt;\u0026gt;\u0026gt; b = (1, 2, 3, 4) # Method call \u0026gt;\u0026gt;\u0026gt; a.extend(b) # The value of the list a was updated \u0026gt;\u0026gt;\u0026gt; a [1, 2, 3, 4, 1, 2, 3, 4]  For sets:\nThe same occurs if you pass a set. The elements of the set are appended one by one.\n# List that will be extended \u0026gt;\u0026gt;\u0026gt; a = [1, 2, 3, 4] # Values that will be appended (the iterable is a set!) \u0026gt;\u0026gt;\u0026gt; c = {5, 6, 7} # Method call \u0026gt;\u0026gt;\u0026gt; a.extend(c) # The value of a was updated \u0026gt;\u0026gt;\u0026gt; a [1, 2, 3, 4, 5, 6, 7]  For strings:\nStrings work a little bit different with the .extend() method. Each character of the string is considered an \u0026ldquo;item\u0026rdquo;, so the characters are appended one by one in the order that they appear in the string.\n# List that will be extended \u0026gt;\u0026gt;\u0026gt; a = [\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;] # String that will be used to extend the list \u0026gt;\u0026gt;\u0026gt; b = \u0026quot;Hello, World!\u0026quot; # Method call \u0026gt;\u0026gt;\u0026gt; a.extend(b) # The value of a was updated \u0026gt;\u0026gt;\u0026gt; a ['a', 'b', 'c', 'H', 'e', 'l', 'l', 'o', ',', ' ', 'W', 'o', 'r', 'l', 'd', '!']  For dictionaries:\nDictionaries have a particular behavior when you pass them as arguments to .extend(). In this case, the keys of the dictionary are appended one by one. The values of the corresponding key-value pairs are not appended.\nIn this example (below), the keys are \u0026ldquo;d\u0026rdquo;, \u0026ldquo;e\u0026rdquo;, and \u0026ldquo;f\u0026rdquo;. These values are appended to the list a.\n# List that will be extended \u0026gt;\u0026gt;\u0026gt; a = [\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;] # Dictionary that will be used to extend the list \u0026gt;\u0026gt;\u0026gt; b = {\u0026quot;d\u0026quot;: 5, \u0026quot;e\u0026quot;: 6, \u0026quot;f\u0026quot;: 7} # Method call \u0026gt;\u0026gt;\u0026gt; a.extend(b) # The value of a was updated \u0026gt;\u0026gt;\u0026gt; a ['a', 'b', 'c', 'd', 'e', 'f']  Equivalent to\u0026hellip; What .extend() does is equivalent to a[len(a):] = iterable. Here we have an example to illustrate that they are equivalent:\nUsing .extend():\n# List that will be extended \u0026gt;\u0026gt;\u0026gt; a = [1, 2, 3, 4] # Values that will be appended \u0026gt;\u0026gt;\u0026gt; b = (6, 7, 8) # Method call \u0026gt;\u0026gt;\u0026gt; a.extend(b) # The list was updated \u0026gt;\u0026gt;\u0026gt; a [1, 2, 3, 4, 6, 7, 8]  Using list slicing:\n# List that will be extended \u0026gt;\u0026gt;\u0026gt; a = [1, 2, 3, 4] # Values that will be appended \u0026gt;\u0026gt;\u0026gt; b = (6, 7, 8) # Assignment statement. Assign the iterable b as the final portion of the list a \u0026gt;\u0026gt;\u0026gt; a[len(a):] = b # The value of a was updated \u0026gt;\u0026gt;\u0026gt; a [1, 2, 3, 4, 6, 7, 8]  The result is the same, but using .extend() is much more readable and compact, right? Python truly offers amazing tools to improve our workflow.\n🔸 Summary of their Differences Now that you know how to work with .append() and .extend(), let\u0026rsquo;s see a summary of their key differences:\n Effect: .append() adds a single element to the end of the list while .extend() can add multiple individual elements to the end of the list. Argument: .append() takes a single element as argument while .extend() takes an iterable as argument (list, tuple, dictionaries, sets, strings).  I really hope that you liked my article and found it helpful. Now you can work with .append() and .extend() in your Python projects. Check out my online courses. Follow me on Twitter. 👍\nReference : freeCodeCamp\n","date":1584835200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1584835200,"objectID":"3efba4e4ada89ec029357965f4dbd528","permalink":"https://example.com/post/python/tutorials/list_append/","publishdate":"2020-03-22T00:00:00Z","relpermalink":"/post/python/tutorials/list_append/","section":"post","summary":"Python List Append VS Python List Extend – The Difference Explained with Array Method Examples","tags":["Beginner","freeCodeCamp","List"],"title":"Python List Append VS Python List Extend","type":"post"},{"authors":["Little Dragon"],"categories":["Tutorials","Python"],"content":" Lists in Python are similar to arrays in JavaScript. They are one of the built in data types in Python used to store collections of data.\nBasic usage How to create a list An empty list is created using a pair of square brackets:\n\u0026gt;\u0026gt;\u0026gt; empty_list = [] \u0026gt;\u0026gt;\u0026gt; type(empty_list) \u0026lt;class 'list'\u0026gt; \u0026gt;\u0026gt;\u0026gt; len(empty_list) 0  A list can be created with elements by enclosing a comma separated list of elements with square brackets. Lists allow for the elements to be of different types (heterogeneous) but are most commonly of a single type (homogeneous):\n\u0026gt;\u0026gt;\u0026gt; homogeneous_list = [1, 1, 2, 3, 5, 8] \u0026gt;\u0026gt;\u0026gt; type(homogeneous_list) \u0026lt;class 'list'\u0026gt; \u0026gt;\u0026gt;\u0026gt; print(homogeneous_list) [1, 1, 2, 3, 5, 8] \u0026gt;\u0026gt;\u0026gt; len(homogeneous_list) 6 \u0026gt;\u0026gt;\u0026gt; heterogeneous_list = [1, \u0026quot;Hello Campers!\u0026quot;] \u0026gt;\u0026gt;\u0026gt; print(heterogeneous_list) [1, \u0026quot;Hello Campers!\u0026quot;] \u0026gt;\u0026gt;\u0026gt; len(heterogeneous_list) 2  The list constructor can also be used to create a list:\n\u0026gt;\u0026gt;\u0026gt; empty_list = list() # Creates an empty list \u0026gt;\u0026gt;\u0026gt; print(empty_list) [] \u0026gt;\u0026gt;\u0026gt; list_from_iterable = list(\u0026quot;Hello campers!\u0026quot;) # Creates a list from an iterable. \u0026gt;\u0026gt;\u0026gt; print(list_from_iterable) ['H', 'e', 'l', 'l', 'o', ' ', 'c', 'a', 'm', 'p', 'e', 'r', 's', '!']  You can also use List Comprehension to create lists, which we\u0026rsquo;ll cover later in the article.\nAccess elements in a list \u0026gt;\u0026gt;\u0026gt; my_list = [1, 2, 9, 16, 25] \u0026gt;\u0026gt;\u0026gt; print(my_list) [1, 2, 9, 16, 25]  Zero indexed\n\u0026gt;\u0026gt;\u0026gt; my_list[0] 1 \u0026gt;\u0026gt;\u0026gt; my_list[1] 2 \u0026gt;\u0026gt;\u0026gt; my_list[2] 9  Wrap around indexing\n\u0026gt;\u0026gt;\u0026gt; my_list[-1] 25 \u0026gt;\u0026gt;\u0026gt; my_list[-2] 16  Unpacking lists for python-3\n\u0026gt;\u0026gt;\u0026gt; print(*my_list) 1 2 9 16 25  Lists are mutable lists are mutable containers. Mutable containers are containers that allow changes to which objects are contained by the container.\nElements from a list may be extracted and re-arranged using another list as index.\n\u0026gt;\u0026gt;\u0026gt; my_list = [1, 2, 9, 16, 25, 34, 53, 21] \u0026gt;\u0026gt;\u0026gt; my_index = [5, 2, 0] \u0026gt;\u0026gt;\u0026gt; my_new_list = [my_list[i] for i in my_index] \u0026gt;\u0026gt;\u0026gt; print(my_new_list) [34, 9, 1]  List methods len() The len() method returns the length of an object, whether that be a list, a string, tuple, or dictionary.\nlen() takes one argument, which can be a sequence (such as a string, bytes, tuple, list, or range) or collection (such as a dictionary, set, or frozen set).\nlist1 = [123, 'xyz', 'zara'] # list print(len(list1)) # prints 3 as there are 3 elements in the list1 str1 = 'basketball' # string print(len(str1)) # prints 10 as the str1 is made of 10 characters tuple1 = (2, 3, 4, 5) # tuple print(len(tuple1)) # prints 4 as there are 4 elements in the tuple1 dict1 = {'name': 'John', 'age': 4, 'score': 45} # dictionary print(len(dict1)) # prints 3 as there are 3 key and value pairs in the dict1  index() index() returns the the first occurrence/index of the element in the list given as an argument to the function.\nnumbers = [1, 2, 2, 3, 9, 5, 6, 10] words = [\u0026quot;I\u0026quot;, \u0026quot;love\u0026quot;, \u0026quot;Python\u0026quot;, \u0026quot;I\u0026quot;, \u0026quot;love\u0026quot;] print(numbers.index(9)) # 4 print(numbers.index(2)) # 1 print(words.index(\u0026quot;I\u0026quot;)) # 0 print(words.index(\u0026quot;am\u0026quot;)) # returns a ValueError as 'am' is not in the `words` list  Here the first output is very obvious, but the second and third might seem confusing at first. But remember index() returns the first occurrence of the element and hence in this case 1 and 0 are the indices where 2 and \u0026quot;I\u0026quot; occur first in the lists respectively.\nAlso, if an element is not found in the list, a ValueError is returned as in the case of indexing \u0026quot;am\u0026quot; in the words list.\nOptional arguments\nYou can also use optional arguments to limit your search to a particular sub-sequence of the list:\nwords = [\u0026quot;I\u0026quot;, \u0026quot;am\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;I\u0026quot;, \u0026quot;am\u0026quot;, \u0026quot;Pythonista\u0026quot;] print(words.index(\u0026quot;am\u0026quot;, 2, 5)) # 4  Although the element is searched between the indices 2 (inclusive) and 5 (not inclusive), the returned index is computed relative to the beginning of the full list rather than the start argument.\npop() The pop() method removes and returns the last element from a list.\nThere is an optional parameter which is the index of the element to be removed from the list. If no index is specified, pop() removes and returns the last item in the list.\nIf the index passed to the pop() method is not in the range, it throws the IndexError: pop index out of range exception.\ncities = ['New York', 'Dallas', 'San Antonio', 'Houston', 'San Francisco']; print \u0026quot;City popped is: \u0026quot;, cities.pop() # City popped is: San Francisco print \u0026quot;City at index 2 is : \u0026quot;, cities.pop(2) # City at index 2 is: San Antonio  Basic stack functionality\nThe pop() method is often used in conjunction with append() to implement basic stack functionality in a Python application:\nstack = [] for i in range(5): stack.append(i) while len(stack): print(stack.pop())  List Comprehension List Comprehension is a way of looping through a list to produce a new list based on some conditions. It can be confusing at first but once you are acclimated to the syntax it is very powerful and quick.\nThe first step in learning how to use list comprehension is to look at the traditional way of looping through a list. The following is a simple example that returns a new list of even numbers.\n# Example list for demonstration some_list = [1, 2, 5, 7, 8, 10] # Empty list that will be populate with a loop even_list = [] for number in some_list: if number % 2 == 0: even_list.append(number) # even_list now equals [2, 8, 10]  First a list is created with some numbers. You then create an empty list that will hold your results from the loop. In the loop you check to see if each number is divisible by 2 and if so you add it the the even_list. This took 5 lines of code not including comments and white space which isn’t much in this example.\nNow for the list comprehension example.\n# Example list for demonstration some_list = [1, 2, 5, 7, 8, 10] # List Comprehension even_list = [number for number in some_list if number % 2 == 0] # even_list now equals [2, 8, 10]  Another example, with the same two steps: The following will create a list of numbers that correspond to the numbers in my_starting_list multiplied by 7.\nmy_starting_list = [1, 2, 3, 4, 5, 6, 7, 8] my_new_list = [] for item in my_starting_list: my_new_list.append(item * 7)  When this code is run, the final value of my_new_list is: [7, 14, 21, 28, 35, 42, 49, 56]\nA developer using list comprehension could achieve the same result using the following list comprehension, which results in the same my_new_list.\nmy_starting_list = [1, 2, 3, 4, 5, 6, 7, 8] my_new_list = [item * 7 for item in my_starting_list]  A simple formula to write in a list comprehension way is:\nmy_list = [{operation with input n} for n in {python iterable}]\nReplace {operation with input n} with however you want to change the item returned from the iterable. The above example uses n * 7 but the operation can be as simple or as complex as necessary.\nReplace {python iterable} with any iterable. Sequence types will be most common. A list was used in the above example, but tuples and ranges are also common.\nList comprehension adds an element from an existing list to a new list if some condition is met. It is neater, but is also much faster in most cases. In some cases, list comprehension may hinder readability, so the developer must weigh their options when choosing to use list comprehension.\nExamples of list comprehension with conditionals\nThe flow of control in list comprehensions can be controlled using conditionals. For example:\nonly_even_list = [i for i in range(13) if i%2==0]  This is equivalent to the following loop:\nonly_even_list = list() for i in range(13): if i%2 == 0: only_even_list.append(i)  List comprehension can also contain nested if conditions. Consider the following loop:\ndivisible = list() for i in range(50): if i%2 == 0: if i%3 == 0: divisible.append(i)  Using list comprehension this can be written as:\ndivisible = [i for i in range(50) if i%2==0 if i%3==0]  If-Else statement can also be used along with list comprehension.\nlist_1 = [i if i%2==0 else i*-1 for i in range(10)]  More Information:  The Best Python Code Examples   Reference : freeCodeCamp\n ","date":1580428800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580428800,"objectID":"2668354068a93f062738a88d11dc08b8","permalink":"https://example.com/post/python/tutorials/python-lists-explained/","publishdate":"2020-01-31T00:00:00Z","relpermalink":"/post/python/tutorials/python-lists-explained/","section":"post","summary":"Lists in Python are similar to arrays in JavaScript. They are one of the built in data types in Python used to store collections of data.","tags":["Beginner","freeCodeCamp","List"],"title":"Python Lists Explained","type":"post"},{"authors":["Little Dragon"],"categories":["Tutorials","Python"],"content":" Virtual environments can be described as isolated installation directories. This isolation allows you to localized the installation of your project’s dependencies, without forcing you to install them system-wide.\nImagine you have two applications, App1 and App2. Both use the package Pak, but require different versions. If you install Pak version 2.3 for App1, you would not be able to run App2 because it requires version 3.1.\nThis is where virtual environments come in handy.\nBenefits:\n You can have multiple environments, with multiple sets of packages, without conflicts among them. This way, different projects’ requirements can be satisfied at the same time. You can easily release your project with its own dependent modules.  Here are two ways you can create Python virtual environments.\nVirtualenv [virtualenv](https://virtualenv.pypa.io/en/stable/) is a tool used to create isolated Python environments. It creates a folder which contains all the necessary executables to use the packages that a Python project would need.\nYou can install it with pip:\npip install virtualenv  Verify the installation with the following command:\nvirtualenv --version  Create an Environment To create a virtual environment use:\nvirtualenv --no-site-packages my-env  This creates a folder in the current directory with the name of the environment (my-env/). This folder contains the directories for installing modules and Python executables.\nYou can also specify the Python version you want to work with. Just use the argument --python=/path/to/python/version. For instance, python2.7:\nvirtualenv --python=/usr/bin/python2.7 my-env  List Environments You can list the available environments with:\nlsvirtualenv  Activate an Environment Before you can start using the environment you need to activate it:\nsource my-env/bin/activate  This ensures that only packages under my-env/ are used.\nYou will notice that the name of the environment is shown on the left of the prompt. This way you can see which is the active environment.\nInstall Packages You can install packages one by one, or by setting a requirements.txt file for your project.\npip install some-package pip install -r requirements.txt  If you want to create a requirements.txt file from the already installed packages, run the following command:\npip freeze \u0026gt; requirements.txt  The file will contain the list of all the packages installed in the current environment, and their respective versions. This will help you release your project with its own dependent modules.\nDeactivate an Environment If you are done working with the virtual environment you can deactivate it with:\ndeactivate  This puts you back to the system’s default Python interpreter with all its installed libraries.\nDelete an Environment Simply delete the environment folder.\nConda Conda is a package, dependency and environment management for many languages, including Python.\nTo install Conda, follow these instructions.\nCreate an Environment To create a virtual environment use:\nconda create --name my-env  Conda will create the corresponding folder inside the Conda installation directory.\nYou can also specify which version of Python you want to work with:\nconda create --name my-env python=3.6  List Environments You can list all the available environments with:\nconda info --envs  Activate an Environment Before you can start using the environment you need to activate it:\nsource activate my-env  Install Packages The same as with virtualenv.\nDeactivate an Environment If you are done working with the virtual environment you can deactivate it with:\nsource deactivate  Remove an Environment If you want to remove an environment from Conda use:\nconda remove --name my-env   Reference : freeCodeCamp\n ","date":1580428800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580428800,"objectID":"440dd2ce7c6646a9c31d7b903557b6ab","permalink":"https://example.com/post/python/tutorials/virtual-environments/","publishdate":"2020-01-31T00:00:00Z","relpermalink":"/post/python/tutorials/virtual-environments/","section":"post","summary":"Virtual environments can be described as isolated installation directories. This isolation allows you to localized the installation of your project’s dependencies, without forcing you to install them system-wide.","tags":["Beginner","freeCodeCamp","Virtual Environments"],"title":"Python Virtual Environments Explained with Examples","type":"post"},{"authors":["Little Dragon"],"categories":["Tutorials","Python"],"content":" String Find Method There are two options for finding a substring within a string in Python, find() and rfind().\nEach will return the position that the substring is found at. The difference between the two is that find() returns the lowest position, and rfind() returns the highest position.\nOptional start and end arguments can be provided to limit the search for the substring to within portions of the string.\nExample:\n\u0026gt;\u0026gt;\u0026gt; string = \u0026quot;Don't you call me a mindless philosopher, you overweight glob of grease!\u0026quot; \u0026gt;\u0026gt;\u0026gt; string.find('you') 6 \u0026gt;\u0026gt;\u0026gt; string.rfind('you') 42  If the substring is not found, -1 is returned.\n\u0026gt;\u0026gt;\u0026gt; string = \u0026quot;Don't you call me a mindless philosopher, you overweight glob of grease!\u0026quot; \u0026gt;\u0026gt;\u0026gt; string.find('you', 43) # find 'you' in string anywhere from position 43 to the end of the string -1  More Information:\nString methods documentation.\nString Join Method The str.join(iterable) method is used to join all elements in an iterable with a specified string str. If the iterable contains any non-string values, it raises a TypeError exception.\niterable: All iterables of string. Could a list of strings, tuple of string or even a plain string.\nExamples Join a ist of strings with \u0026quot;:\u0026quot;\nprint \u0026quot;:\u0026quot;.join([\u0026quot;freeCodeCamp\u0026quot;, \u0026quot;is\u0026quot;, \u0026quot;fun\u0026quot;])  Output\nfreeCodeCamp:is:fun  Join a tuple of strings with \u0026quot; and \u0026quot;\nprint \u0026quot; and \u0026quot;.join([\u0026quot;A\u0026quot;, \u0026quot;B\u0026quot;, \u0026quot;C\u0026quot;])  Output\nA and B and C  Insert a \u0026quot; \u0026quot; after every character in a string\nprint \u0026quot; \u0026quot;.join(\u0026quot;freeCodeCamp\u0026quot;)  Output:\nf r e e C o d e C a m p  Joining with empty string.\nlist1 = ['p','r','o','g','r','a','m'] print(\u0026quot;\u0026quot;.join(list1))  Output:\nprogram  Joining with sets.\ntest = {'2', '1', '3'} s = ', ' print(s.join(test))  Output:\n2, 3, 1  More Information: Python Documentation on String Join\nString Replace Method The str.replace(old, new, max) method is used to replace the substring old with the string new for a total of max times. This method returns a new copy of the string with the replacement. The original string str is unchanged.\nExamples  Replace all occurrences of \u0026quot;is\u0026quot; with \u0026quot;WAS\u0026quot;\nstring = \u0026quot;This is nice. This is good.\u0026quot; newString = string.replace(\u0026quot;is\u0026quot;,\u0026quot;WAS\u0026quot;) print(newString)   Output\nThWAS WAS nice. ThWAS WAS good.   Replace the first 2 occurrences of \u0026quot;is\u0026quot; with \u0026quot;WAS\u0026quot;\nstring = \u0026quot;This is nice. This is good.\u0026quot; newString = string.replace(\u0026quot;is\u0026quot;,\u0026quot;WAS\u0026quot;, 2) print(newString)   Output\nThWAS WAS nice. This is good.  More Information: Read more about string replacement in the Python docs\nString Strip Method There are three options for stripping characters from a string in Python, lstrip(), rstrip() and strip().\nEach will return a copy of the string with characters removed, at from the beginning, the end or both beginning and end. If no arguments are given the default is to strip whitespace characters.\nExample:\n\u0026gt;\u0026gt;\u0026gt; string = ' Hello, World! ' \u0026gt;\u0026gt;\u0026gt; strip_beginning = string.lstrip() \u0026gt;\u0026gt;\u0026gt; strip_beginning 'Hello, World! ' \u0026gt;\u0026gt;\u0026gt; strip_end = string.rstrip() \u0026gt;\u0026gt;\u0026gt; strip_end ' Hello, World!' \u0026gt;\u0026gt;\u0026gt; strip_both = string.strip() \u0026gt;\u0026gt;\u0026gt; strip_both 'Hello, World!'  An optional argument can be provided as a string containing all characters you wish to strip.\n\u0026gt;\u0026gt;\u0026gt; url = 'www.example.com/' \u0026gt;\u0026gt;\u0026gt; url.strip('w./') 'example.com'  However, do notice that only the first . got stripped from the string. This is because the strip function only strips the argument characters that lie at the left or rightmost. Since w comes before the first . they get stripped together, whereas ‘com’ is present in the right end before the . after stripping /.\nString Split Method The split() function is commonly used for string splitting in Python.\nThe split() method Template: string.split(separator, maxsplit)\nseparator: The delimiter string. You split the string based on this character. For eg. it could be ” ”, ”:”, ”;” etc\nmaxsplit: The number of times to split the string based on the separator. If not specified or -1, the string is split based on all occurrences of the separator\nThis method returns a list of substrings delimited by the separator\nExamples Split string on space: ” ”\nstring = \u0026quot;freeCodeCamp is fun.\u0026quot; print(string.split(\u0026quot; \u0026quot;))  Output:\n['freeCodeCamp', 'is', 'fun.']  Split string on comma: ”,”\nstring = \u0026quot;freeCodeCamp,is fun, and informative\u0026quot; print(string.split(\u0026quot;,\u0026quot;))  Output:\n['freeCodeCamp', 'is fun', ' and informative']  No separator specified\nstring = \u0026quot;freeCodeCamp is fun and informative\u0026quot; print(string.split())  Output:\n['freeCodeCamp', 'is', 'fun', 'and', 'informative']  Note: If no separator is specified, then the string is stripped of *all* whitespace\nstring = \u0026quot;freeCodeCamp is fun and informative\u0026quot; print(string.split())  Output:\n['freeCodeCamp', 'is', 'fun', 'and', 'informative']  Split string using maxsplit. Here we split the string on ” ” twice:\nstring = \u0026quot;freeCodeCamp is fun and informative\u0026quot; print(string.split(\u0026quot; \u0026quot;, 2))  Output:\n['freeCodeCamp', 'is', 'fun and informative']  More Information Check out the Python docs on string splitting\n Reference : freeCodeCamp\n ","date":1580342400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580342400,"objectID":"2353e3ff1295da7c701c32b10ad2609f","permalink":"https://example.com/post/python/tutorials/string-strip-method/","publishdate":"2020-01-30T00:00:00Z","relpermalink":"/post/python/tutorials/string-strip-method/","section":"post","summary":"There are two options for finding a substring within a string in Python.","tags":["String"],"title":"Python String Methods Explained with Examples.","type":"post"},{"authors":["Little Dragon"],"categories":["Tutorials","Python"],"content":" Introduction to Functions in Python A function allows you to define a reusable block of code that can be executed many times within your program.\nFunctions allow you to create more modular and DRY solutions to complex problems.\nWhile Python already provides many built-in functions such as print() and len(), you can also define your own functions to use within your projects.\nOne of the great advantages of using functions in your code is that it reduces the overall number of lines of code in your project.\nSyntax In Python, a function definition has the following features:\n The keyword def a function name paranthesis’()’, and within paranthesis input parameters,although the input parameters are optional. a colon ’:’ some block of code to execute a return statement (optional)\n# a function with no parameters or returned values def sayHello(): print(\u0026quot;Hello!\u0026quot;) sayHello() # calls the function, 'Hello!' is printed to the console # a function with a parameter def helloWithName(name): print(\u0026quot;Hello \u0026quot; + name + \u0026quot;!\u0026quot;) helloWithName(\u0026quot;Ada\u0026quot;) # calls the function, 'Hello Ada!' is printed to the console # a function with multiple parameters with a return statement def multiply(val1, val2): return val1 * val2 multiply(3, 5) # prints 15 to the console   Functions are blocks of code that can be reused simply by calling the function. This enables simple, elegant code reuse without explicitly re-writing sections of code. This makes code both more readable, makes for easier debugging, and limits typing errors.\nFunctions in Python are created using the def keyword, followed by a function name and function parameters inside parentheses.\nA function always returns a value,The return keyword is used by the function to return a value, if you don’t want to return any value, the default value None will returned.\nThe function name is used to call the function, passing the needed parameters inside parentheses.\n# this is a basic sum function def sum(a, b): return a + b result = sum(1, 2) # result = 3  You can define default values for the parameters, that way Python will interpretate that the value of that parameter is the default one if none is given.\ndef sum(a, b=3): return a + b result = sum(1) # result = 4  You can pass the parameters in the order you want, using the name of the parameter.\nresult = sum(b=2, a=2) # result = 4  However, it is not possible to pass a keyword argument before a non-keyword one\nresult = sum(3, b=2) #result = 5 result2 = sum(b=2, 3) #Will raise SyntaxError  Functions are also Objects, so you can assign them to a variable, and use that variable like a function.\ns = sum result = s(1, 2) # result = 3  Notes If a function definition includes parameters, you must provide the same number of parameters when you call the function.\nprint(multiply(3)) # TypeError: multiply() takes exactly 2 arguments (0 given) print(multiply('a', 5)) # 'aaaaa' printed to the console print(multiply('a', 'b')) # TypeError: Python can't multiply two strings  The block of code that the function will run includes all statements indented within the function.\ndef myFunc(): print('this will print') print('so will this') x = 7 # the assignment of x is not a part of the function since it is not indented  Variables defined within a function only exist within the scope of that function.\ndef double(num): x = num * 2 return x print(x) # error - x is not defined print(double(4)) # prints 8  Python interprets the function block only when the function is called and not when the function is defined.So even if the function definition block contains some sort of error, the python interpreter will point that out only when the function is called.\nNow let\u0026rsquo;s look at some specific functions with examples.\nmax() function max() is a built-in function in Python 3. It returns the largest item in an iterable or the largest of two or more arguments.\nArguments This function takes two or more numbers or any kind of iterable as an argument. While giving an iterable as an argument we must make sure that all the elements in the iterable are of the same type. This means that we cannot pass a list which has both string and integer values stored in it. Syntax: max(iterable, *iterables[,key, default]) max(arg1, arg2, *args[, key])\nValid Arguments:\nmax(2, 3) max([1, 2, 3]) max('a', 'b', 'c')  Invalid Arguments:\nmax(2, 'a') max([1, 2, 3, 'a']) max([])  Return Value The largest item in the iterable is returned. If two or more positional arguments are provided, the largest of the positional arguments is returned. If the iterable is empty and default is not provided, a ValueError is raised.\nCode Sample print(max(2, 3)) # Returns 3 as 3 is the largest of the two values print(max(2, 3, 23)) # Returns 23 as 23 is the largest of all the values list1 = [1, 2, 4, 5, 54] print(max(list1)) # Returns 54 as 54 is the largest value in the list list2 = ['a', 'b', 'c' ] print(max(list2)) # Returns 'c' as 'c' is the largest in the list because c has ascii value larger then 'a' ,'b'. list3 = [1, 2, 'abc', 'xyz'] print(max(list3)) # Gives TypeError as values in the list are of different type #Fix the TypeError mentioned above first before moving on to next step list4 = [] print(max(list4)) # Gives ValueError as the argument is empty  Run Code\nOfficial Docs\nmin() function min() is a built-in function in Python 3. It returns the smallest item in an iterable or the smallest of two or more arguments.\nArguments This function takes two or more numbers or any kind of iterable as an argument. While giving an iterable as an argument we must make sure that all the elements in the iterable are of the same type. This means that we cannot pass a list which has both string and integer values stored in it.\nValid Arguments:\nmin(2, 3) min([1, 2, 3]) min('a', 'b', 'c')  Invalid Arguments:\nmin(2, 'a') min([1, 2, 3, 'a']) min([])  Return Value The smallest item in the iterable is returned. If two or more positional arguments are provided, the smallest of the positional arguments\nis returned. If the iterable is empty and default is not provided, a ValueError is raised.\nCode Sample print(min(2, 3)) # Returns 2 as 2 is the smallest of the two values print(min(2, 3, -1)) # Returns -1 as -1 is the smallest of the two values list1 = [1, 2, 4, 5, -54] print(min(list1)) # Returns -54 as -54 is the smallest value in the list list2 = ['a', 'b', 'c' ] print(min(list2)) # Returns 'a' as 'a' is the smallest in the list in alphabetical order list3 = [1, 2, 'abc', 'xyz'] print(min(list3)) # Gives TypeError as values in the list are of different type #Fix the TypeError mentioned above first before moving on to next step list4 = [] print(min(list4)) # Gives ValueError as the argument is empty  Run Code\nOfficial Docs\ndivmod() is a built-in function in Python 3, which returns the quotient and remainder when dividing the number a by the number b. It takes two numbers as arguments a \u0026amp; b. The argument can’t be a complex number.\nArgument It takes two arguments a \u0026amp; b - an integer, or a decimal number.It can’t be a complex number.\nReturn Value The return value will be the pair of positive numbers consisting of quotient and remainder obtained by dividing a by b. In case of mixed operand types, rules for binary arithmetic operators will be applied.\nFor *Integer number arguments*, return value will be same as (a // b, a % b).\nFor *Decimal number arguments*, return value will be same as (q, a % b), where q is usually *math.floor(a / b)* but may be 1 less than that.\nCode Sample print(divmod(5,2)) # prints (2,1) print(divmod(13.5,2.5)) # prints (5.0, 1.0) q,r = divmod(13.5,2.5) # Assigns q=quotient \u0026amp; r= remainder print(q) # prints 5.0 because math.floor(13.5/2.5) = 5.0 print(r) # prints 1.0 because (13.5 % 2.5) = 1.0  REPL It!\nOfficial Docs\nHex(x) function hex(x) is a built-in function in Python 3 to convert an integer number to a lowercase hexadecimal string prefixed with “0x”.\nArgument This function takes one argument, x, that should be of integer type.\nReturn This function returns a lowercase hexadecimal string prefixed with “0x”.\nExample print(hex(16)) # prints 0x10 print(hex(-298)) # prints -0x12a print(hex(543)) # prints 0x21f  Run Code\nOfficial Documentation\nlen() function len() is a built-in function in Python 3. This method returns the length (the number of items) of an object. It takes one argument x.\nArguments It takes one argument, x. This argument may be a sequence (such as a string, bytes, tuple, list, or range) or a collection (such as a dictionary, set, or frozen set).\nReturn Value This function returns the number of elements in the argument which is passed to the len() function.\nCode Sample list1 = [123, 'xyz', 'zara'] # list print(len(list1)) # prints 3 as there are 3 elements in the list1 str1 = 'basketball' # string print(len(str1)) # prints 10 as the str1 is made of 10 characters tuple1 = (2, 3, 4, 5) # tuple print(len(tuple1)) # prints 4 as there are 4 elements in the tuple1 dict1 = {'name': 'John', 'age': 4, 'score': 45} # dictionary print(len(dict1)) # prints 3 as there are 3 key and value pairs in the dict1  Run Code\nOfficial Docs\nOrd function ord() is a built-in function in Python 3, to convert the string representing one Unicode character into integer representing the Unicode code of the character.\nExamples: \u0026gt;\u0026gt;\u0026gt; ord('d') 100 \u0026gt;\u0026gt;\u0026gt; ord('1') 49  chr function chr() is a built-in function in Python 3, to convert the integer representing the Unicode code into a string representing a corresponding character.\nExamples: \u0026gt;\u0026gt;\u0026gt; chr(49) '1'  One thing is to be noted that, if the integer value passed to chr() is out of range then, a ValueError will be raised.\n\u0026gt;\u0026gt;\u0026gt; chr(-10) 'Traceback (most recent call last): File \u0026quot;\u0026lt;pyshell#24\u0026gt;\u0026quot;, line 1, in \u0026lt;module\u0026gt; chr(-1) ValueError: chr() arg not in range(0x110000)'  input() functions Many a time, in a program we need some input from the user. Taking inputs from the user makes the program feel interactive. In Python 3, to take input from the user we have a function input(). If the input function is called, the program flow will be stopped until the user has given an input and has ended the input with the return key. Let’s see some examples:\nWhen we just want to take the input:\ninp = input()\nRun Code\nTo give a prompt with a message:\nprompt_with_message = input(’‘)\nRun Code\n When we want to take an integer input:\nnumber = int(input('Please enter a number: '))   Run Code\nIf you enter a non integer value then Python will throw an error ValueError. *So whenever you use this, please make sure that you catch it too.* Otherwise, your program will stop unexpectedly after the prompt.\nnumber = int(input('Please enter a number: ')) # Please enter a number: as # Enter a string and it will throw this error # ValueError: invalid literal for int() with base 10 'as'   When we want a string input:\nstring = str(input('Please enter a string: '))   Run Code\nThough, inputs are stored by default as a string. Using the str() function makes it clear to the code-reader that the input is going to be a ‘string’. It is a good practice to mention what type of input will be taken beforehand.\nOfficial Docs\nHow to call a function in Python A function definition statement does not execute the function. Executing (calling) a function is done by using the name of the function followed by parenthesis enclosing required arguments (if any).\n\u0026gt;\u0026gt;\u0026gt; def say_hello(): ... print('Hello') ... \u0026gt;\u0026gt;\u0026gt; say_hello() Hello  The execution of a function introduces a new symbol table used for the local variables of the function. More precisely, all variable assignments in a function store the value in the local symbol table; whereas variable references first look in the local symbol table, then in the local symbol tables of enclosing functions, then in the global symbol table, and finally in the table of built-in names. Thus, global variables cannot be directly assigned a value within a function (unless named in a global statement), although they may be referenced.\n\u0026gt;\u0026gt;\u0026gt; a = 1 \u0026gt;\u0026gt;\u0026gt; b = 10 \u0026gt;\u0026gt;\u0026gt; def fn(): ... print(a) # local a is not assigned, no enclosing function, global a referenced. ... b = 20 # local b is assigned in the local symbol table for the function. ... print(b) # local b is referenced. ... \u0026gt;\u0026gt;\u0026gt; fn() 1 20 \u0026gt;\u0026gt;\u0026gt; b # global b is not changed by the function call. 10  The actual parameters (arguments) to a function call are introduced in the local symbol table of the called function when it is called; thus, arguments are passed using call by value (where the value is always an object reference, not the value of the object). When a function calls another function, a new local symbol table is created for that call.\n\u0026gt;\u0026gt;\u0026gt; def greet(s): ... s = \u0026quot;Hello \u0026quot; + s # s in local symbol table is reassigned. ... print(s) ... \u0026gt;\u0026gt;\u0026gt; person = \u0026quot;Bob\u0026quot; \u0026gt;\u0026gt;\u0026gt; greet(person) Hello Bob \u0026gt;\u0026gt;\u0026gt; person # person used to call remains bound to original object, 'Bob'. 'Bob'  The arguments used to call a function cannot be reassigned by the function, but arguments that reference mutable objects can have their values changed:\n\u0026gt;\u0026gt;\u0026gt; def fn(arg): ... arg.append(1) ... \u0026gt;\u0026gt;\u0026gt; a = [1, 2, 3] \u0026gt;\u0026gt;\u0026gt; fn(a) \u0026gt;\u0026gt;\u0026gt; a [1, 2, 3, 1]   Reference : freeCodeCamp\n ","date":1580169600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580169600,"objectID":"8bb929f496ba5a4efee80c6df92336ec","permalink":"https://example.com/post/python/tutorials/python-function-guide/","publishdate":"2020-01-28T00:00:00Z","relpermalink":"/post/python/tutorials/python-function-guide/","section":"post","summary":"A function allows you to define a reusable block of code that can be executed many times within your program.","tags":["freeCodeCamp","Function"],"title":"Python Function Guide","type":"post"},{"authors":["Little Dragon"],"categories":["Tutorials","Python"],"content":" Lambda Expressions Lambda Expressions are ideally used when we need to do something simple and are more interested in getting the job done quickly rather than formally naming the function. Lambda expressions are also known as anonymous functions.\nLambda Expressions in Python are a short way to declare small and anonymous functions (it is not necessary to provide a name for lambda functions).\nLambda functions behave just like regular functions declared with the def keyword. They come in handy when you want to define a small function in a concise way. They can contain only one expression, so they are not best suited for functions with control-flow statements.\nSyntax of a Lambda Function lambda arguments: expression\nLambda functions can have any number of arguments but only one expression.\nExample code # Lambda function to calculate square of a number square = lambda x: x ** 2 print(square(3)) # Output: 9 # Traditional function to calculate square of a number def square1(num): return num ** 2 print(square(5)) # Output: 25  In the above lambda example, lambda x: x ** 2 yields an anonymous function object which can be associated with any name. So, we associated the function object with square. So from now on we can call the square object like any traditional function, for example square(10)\nExamples of lambda functions Beginner lambda_func = lambda x: x**2 # Function that takes an integer and returns its square lambda_func(3) # Returns 9  Intermediate lambda_func = lambda x: True if x**2 \u0026gt;= 10 else False lambda_func(3) # Returns False lambda_func(4) # Returns True  Complex my_dict = {\u0026quot;A\u0026quot;: 1, \u0026quot;B\u0026quot;: 2, \u0026quot;C\u0026quot;: 3} sorted(my_dict, key=lambda x: my_dict[x]%3) # Returns ['C', 'A', 'B']  Use-case Let’s say you want to filter out odd numbers from a list. You could use a for loop:\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] filtered = [] for num in my_list: if num % 2 != 0: filtered.append(num) print(filtered) # Python 2: print filtered # [1, 3, 5, 7, 9]  Or you could write this as a one liner with list-comprehensions:\nfiltered = [x for x in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] if x % 2 != 0]  But you might be tempted to use the built-in filter function. Why? The first example is a bit too verbose and the one-liner can be harder to understand. But filter offers the best of both words. What is more, the built-in functions are usually faster.\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] filtered = filter(lambda x: x % 2 != 0, my_list) list(filtered) # [1, 3, 5, 7, 9]  NOTE: in Python 3 built in functions return generator objects, so you have to call list. In Python 2, on the other hand, they return a list, tupleor string.\nSo what happened? You told filter to take each element in my_list and apply the lambda expressions. The values that return False are filtered out.\nMore Information:  Official Docs   Reference : freeCodeCamp\n ","date":1578096000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1578096000,"objectID":"cf7efe430dedc413956f5b45a8ace716","permalink":"https://example.com/post/python/tutorials/lambda-expressions/","publishdate":"2020-01-04T00:00:00Z","relpermalink":"/post/python/tutorials/lambda-expressions/","section":"post","summary":"Lambda Expressions are ideally used when we need to do something simple and are more interested in getting the job done quickly rather than formally naming the function. Lambda expressions are also known as anonymous functions.","tags":["Lambda Expressions"],"title":"Lambda Expressions in Python.","type":"post"},{"authors":["Little Dragon"],"categories":["Tutorials","Python"],"content":" Source\nI bet you all have encountered regular expressions at some points. They are very powerful tools that are universally supported in many platforms, including programming languages like Python, R, Java, SQL, Scala.\nAs a data scientist/developer, having a solid understanding of Regex can help you perform various data munging and text mining tasks very easily. Personally, I use them for lots of random stuffs, mostly when I have to work with text data or do Natural Language Processing projects.\nRegular expressions can seem intimidating at first, but they are very rewarding once you grasp the basics and apply them to your work properly.\nWhat is Regular Expression (RegEx)? A regular expression or regex is a text string that defines a search pattern.\n\u0026quot;\\w+\u0026quot; # this is a regex  Typically, these patterns are used for four main tasks:\n Find text within a larger body of text Validate that a string conforms to a desired format Replace or insert text Split strings  Let’s take a quick look at some common regex patterns before we apply them to our codes.\nCommon Patterns Earlier, we have this regex example:\n\\w+  “w” here means word. “+” means one or more. The backlash character “\\” is the escape character for regular expressions. This regex matches word characters, including ASCII letter, digit, or underscore. Now, suppose we want to match the first word we can find in a string. First, we import the re module.\nimport re  Then we define a pattern, and use the function re.match() to match the first word it finds:\n# define a regex pattern word_regex = '\\w+'re.match(word_regex, 'hello world!') _# this matches the first word it finds _\u0026gt;\u0026gt;\u0026gt;\u0026lt;re.Match object; span=(0, 2), match='hi'\u0026gt;  Some common patterns:\n w matches word characters d matches digits, while D matches non-digit characters s matches whitespace characters, while S matches non-whitespace characters . (dot) matches any letter or symbol (wildcard) [a-z] matches lowercase group. The bracket [] matches characters in it Use () to define a group Use [] to define explicit character ranges  Now as you already have some regex patterns in hand, let’s move on to some important functions.\nThe match() function This function matches pattern to string. It returns a match object on success, None on failure. The match function is defined as:\nre.match('\\w+', 'hello world!') \u0026gt;\u0026gt;\u0026gt;\u0026lt;re.Match object; span=(0, 5), match='hello'\u0026gt; The match function is defined as:  The findall() function This function returns a list of all instances of the pattern in the string. Matches are returned in the order left-to-right of the original string.\nre.findall('[A-Z]\\w+', 'hello World!') \u0026gt;\u0026gt;\u0026gt;['World']  The search() function\nThe search() function scans through string, looking for instances of the pattern in the string. It returns a match object on success, None on failure. This function is like the match() function, but it goes through the whole string. See search() vs match() for more details.\nre.search('ef', 'abcdef') \u0026gt;\u0026gt;\u0026gt;\u0026lt;re.Match object; span=(4, 6), match='ef'\u0026gt;  The split() function\nThis function splits string by the occurrences of pattern.\nre.split('\\s+', 'hello world this is andre') \u0026gt;\u0026gt;\u0026gt;['hello', 'world', 'this', 'is', 'andre']  Random Thoughts Who else loves Regex?\nI love regular expressions. However, it is important to remember that while regex are very powerful tools, it is extraordinarily easy to overuse them. A few things to note:\n Start small. Use them responsibly. Break it down into smaller regexes if needed. You would not want to end up with one huge multiple-line regex. It decreases visibility of your codes and is just not worth it. Comment your regex! No one wants to waste time staring at your 20-line monster regex trying to figure out what it means.  Conclusion In this article, you have learned the main concept of regex, common patterns, and how to apply regex using re functions. Regex is a small computer language of their own, and it requires practice too. Here are my favorite resources to get you started:\n https://www.rexegg.com/regex-quickstart.html: your go-to regex cheatsheet https://www.regular-expressions.info: another comprehensive regex tutorial site https://regexr.com: an online tool to learn, build, and test your regex https://pythex.org: a Python regular expression editor. A quick way to test regular expressions as you write them https://docs.python.org/3/library/re.html: official Python docs on regex  This is my first post on Towards Data Science. Leave comments if you have any suggestions for how to improve this post. Follow me up at Medium or connect with me on LinkedIn for more quality content!\n Reference : towardsdatascience.com\n ","date":1562457600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1562457600,"objectID":"3f46d46d8f2a11c08255dae8f6be5215","permalink":"https://example.com/post/python/tutorials/regular-expressions-explained/","publishdate":"2019-07-07T00:00:00Z","relpermalink":"/post/python/tutorials/regular-expressions-explained/","section":"post","summary":"A gentle introduction to Regular Expressions. Learn about main concepts, common patterns, and functions with examples.","tags":["Regular Expressions"],"title":"Regular Expressions Explained","type":"post"},{"authors":["Little Dragon"],"categories":["Tutorials","CSS"],"content":" -\nI wrote this article to help you quickly learn CSS and get familiar with the advanced CSS topics.\nCSS is often quickly dismissed as an easy thing to learn by developers, or one thing you just pick up when you need to quickly style a page or app. Due to this reason, it’s often learned on-the-fly, or we learn things in isolation right when we have to use them. This can be a huge source of frustration when we find that the tool does not simply do what we want.\nThis article will help you get up to speed with CSS and get an overview of the main modern features you can use to style your pages and apps.\nI hope to help you get comfortable with CSS and get you quickly up to speed with using this awesome tool that lets you create stunning designs on the Web.\nClick here to get a PDF / ePub / Mobi version of this post to read offline\nCSS, a shorthand for Cascading Style Sheets, is one of the main building blocks of the Web. Its history goes back to the 90’s, and along with HTML it has changed a lot since its humble beginnings.\nAs I’ve been creating websites since before CSS existed, I have seen its evolution.\nCSS is an amazing tool, and in the last few years it has grown a lot, introducing many fantastic features like CSS Grid, Flexbox and CSS Custom Properties.\nThis handbook is aimed at a vast audience.\nFirst, the beginner. I explain CSS from zero in a succinct but comprehensive way, so you can use this book to learn CSS from the basics.\nThen, the professional. CSS is often considered like a secondary thing to learn, especially by JavaScript developers. They know CSS is not a real programming language, they are programmers and therefore they should not bother learning CSS the right way. I wrote this book for you, too.\nNext, the person that knows CSS from a few years but hasn’t had the opportunity to learn the new things in it. We’ll talk extensively about the new features of CSS, the ones that are going to build the web of the next decade.\nCSS has improved a lot in the past few years and it’s evolving fast.\nEven if you don’t write CSS for a living, knowing how CSS works can help save you some headaches when you need to understand it from time to time, for example while tweaking a web page.\nThank you for getting this ebook. My goal with it is to give you a quick yet comprehensive overview of CSS.\nFlavio\nYou can reach me via email at flavio@flaviocopes.com, on Twitter @flaviocopes.\nMy website is flaviocopes.com.\nTable of Contents  INTRODUCTION TO CSS A BRIEF HISTORY OF CSS ADDING CSS TO AN HTML PAGE SELECTORS CASCADE SPECIFICITY INHERITANCE IMPORT ATTRIBUTE SELECTORS PSEUDO-CLASSES PSEUDO-ELEMENTS COLORS UNITS URL CALC BACKGROUNDS COMMENTS CUSTOM PROPERTIES FONTS TYPOGRAPHY BOX MODEL BORDER PADDING MARGIN BOX SIZING DISPLAY POSITIONING FLOATING AND CLEARING Z-INDEX CSS GRID FLEXBOX TABLES CENTERING LISTS MEDIA QUERIES AND RESPONSIVE DESIGN FEATURE QUERIES FILTERS TRANSFORMS TRANSITIONS ANIMATIONS NORMALIZING CSS ERROR HANDLING VENDOR PREFIXES CSS FOR PRINT WRAPPING UP  INTRODUCTION TO CSS CSS (an abbreviation of Cascading Style Sheets) is the language that we use to style an HTML file, and tell the browser how should it render the elements on the page.\n In this book I talk exclusively about styling HTML documents, although CSS can be used to style other things too.\n A CSS file contains several CSS rules.\nEach rule is composed by 2 parts:\n the selector the declaration block  The selector is a string that identifies one or more elements on the page, following a special syntax that we’ll soon talk about extensively.\nThe declaration block contains one or more declarations, in turn composed by a property and valuepair.\nThose are all the things we have in CSS.\nCarefully organising properties, associating them values, and attaching those to specific elements of the page using a selector is the whole argument of this ebook.\nHow does CSS look like A CSS rule set has one part called selector, and the other part called declaration. The declaration contains various rules, each composed by a property, and a value.\nIn this example, p is the selector, and applies one rule which sets the value 20px to the font-size property:\np { font-size: 20px; }  Multiple rules are stacked one after the other:\np { font-size: 20px; } a { color: blue; }  A selector can target one or more items:\np, a { font-size: 20px; }  and it can target HTML tags, like above, or HTML elements that contain a certain class attribute with .my-class, or HTML elements that have a specific id attribute with #my-id.\nMore advanced selectors allow you to choose items whose attribute matches a specific value, or also items which respond to pseudo-classes (more on that later)\nSemicolons Every CSS rule terminates with a semicolon. Semicolons are not optional, except after the last rule. But I suggest to always use them for consistency and to avoid errors if you add another property and forget to add the semicolon on the previous line.\nFormatting and indentation There is no fixed rule for formatting. This CSS is valid:\np { font-size: 20px ; } a{color:blue;}  but a pain to see. Stick to some conventions, like the ones you see in the examples above: stick selectors and the closing brackets to the left, indent 2 spaces for each rule, have the opening bracket on the same line of the selector, separated by one space.\nCorrect and consistent use of spacing and indentation is a visual aid in understanding your code.\nA BRIEF HISTORY OF CSS Before moving on, I want to give you a brief recap of the history of CSS.\nCSS was grown out of the necessity of styling web pages. Before CSS was introduced, people wanted a way to style their web pages, which looked all very similar and “academic” back in the day. You couldn’t do much in terms of personalisation.\nHTML 3.2 introduced the option of defining colors inline as HTML element attributes, and presentational tags like center and font, but that escalated quickly into a far from ideal situation.\nCSS let us move everything presentation-related from the HTML to the CSS, so that HTML could get back being the format that defines the structure of the document, rather than how things should look in the browser.\nCSS is continuously evolving, and CSS you used 5 years ago might just be outdated, as new idiomatic CSS techniques emerged and browsers changed.\nIt’s hard to imagine the times when CSS was born and how different the web was.\nAt the time, we had several competing browsers, the main ones being Internet Explorer or Netscape Navigator.\nPages were styled by using HTML, with special presentational tags like bold and special attributes, most of which are now deprecated.\nThis meant you had a limited amount of customisation opportunities.\nThe bulk of the styling decisions were left to the browser.\nAlso, you built a site specifically for one of them, because each one introduced different non-standard tags to give more power and opportunities.\nSoon people realised the need for a way to style pages, in a way that would work across all browsers.\nAfter the initial idea proposed in 1994, CSS got its first release in 1996, when the CSS Level 1 (“CSS 1”) recommendation was published.\nCSS Level 2 (“CSS 2”) got published in 1998.\nSince then, work began on CSS Level 3. The CSS Working Group decided to split every feature and work on it separately, in modules.\nBrowsers weren’t especially fast at implementing CSS. We had to wait until 2002 to have the first browser implement the full CSS specification: IE for Mac, as nicely described in this CSS Tricks post: https://css-tricks.com/look-back-history-css/\nInternet Explorer implemented the box model incorrectly right from the start, which led to years of pain trying to have the same style applied consistently across browsers. We had to use various tricks and hacks to make browsers render things as we wanted.\nToday things are much, much better. We can just use the CSS standards without thinking about quirks, most of the time, and CSS has never been more powerful.\nWe don’t have official release numbers for CSS any more now, but the CSS Working Group releases a “snapshot” of the modules that are currently considered stable and ready to be included in browsers. This is the latest snapshot, from 2018: https://www.w3.org/TR/css-2018/\nCSS Level 2 is still the base for the CSS we write today, and we have many more features built on top of it.\nADDING CSS TO AN HTML PAGE CSS is attached to an HTML page in different ways.\n1: Using the link tag The link tag is the way to include a CSS file. This is the preferred way to use CSS as it\u0026rsquo;s intended to be used: one CSS file is included by all the pages of your site, and changing one line on that file affects the presentation of all the pages in the site.\nTo use this method, you add a link tag with the href attribute pointing to the CSS file you want to include. You add it inside the head tag of the site (not inside the body tag):\n\u0026lt;link rel=\u0026quot;stylesheet\u0026quot; type=\u0026quot;text/css\u0026quot; href=\u0026quot;myfile.css\u0026quot;\u0026gt;  The rel and type attributes are required too, as they tell the browser which kind of file we are linking to.\n2: using the style tag Instead of using the link tag to point to separate stylesheet containing our CSS, we can add the CSS directly inside a style tag. This is the syntax:\n\u0026lt;style\u0026gt; ...our CSS... \u0026lt;/style\u0026gt;  Using this method we can avoid creating a separate CSS file. I find this is a good way to experiment before “formalising” CSS to a separate file, or to add a special line of CSS just to a file.\n3: inline styles Inline styles are the third way to add CSS to a page. We can add a style attribute to any HTML tag, and add CSS into it.\n\u0026lt;div style=\u0026quot;\u0026quot;\u0026gt;...\u0026lt;/div\u0026gt;  Example:\n\u0026lt;div style=\u0026quot;background-color: yellow\u0026quot;\u0026gt;...\u0026lt;/div\u0026gt;  SELECTORS A selector allows us to associate one or more declarations to one or more elements on the page.\nBasic selectors Suppose we have a p element on the page, and we want to display the words into it using the yellow color.\nWe can target that element using this selector p, which targets all the element using the p tag in the page. A simple CSS rule to achieve what we want is:\np { color: yellow; }  Every HTML tag has a corresponding selector, for example: div, span, img.\nIf a selector matches multiple elements, all the elements in the page will be affected by the change.\nHTML elements have 2 attributes which are very commonly used within CSS to associate styling to a specific element on the page: class and id.\nThere is one big difference between those two: inside an HTML document you can repeat the same class value across multiple elements, but you can only use an id once. As a corollary, using classes you can select an element with 2 or more specific class names, something not possible using ids.\nClasses are identified using the . symbol, while ids using the # symbol.\nExample using a class:\n\u0026lt;p class=\u0026quot;dog-name\u0026quot;\u0026gt; Roger \u0026lt;/p\u0026gt; .dog-name { color: yellow; }  Example using an id:\n\u0026lt;p id=\u0026quot;dog-name\u0026quot;\u0026gt; Roger \u0026lt;/p\u0026gt; #dog-name { color: yellow; }  Combining selectors So far we’ve seen how to target an element, a class or an id. Let’s introduce more powerful selectors.\nTargeting an element with a class or id You can target a specific element that has a class, or id, attached.\nExample using a class:\n\u0026lt;p class=\u0026quot;dog-name\u0026quot;\u0026gt; Roger \u0026lt;/p\u0026gt; p.dog-name { color: yellow; }  Example using an id:\n\u0026lt;p id=\u0026quot;dog-name\u0026quot;\u0026gt; Roger \u0026lt;/p\u0026gt; p#dog-name { color: yellow; }  Why would you want to do that, if the class or id already provides a way to target that element? You might have to do that to have more specificity. We’ll see what that means later.\nTargeting multiple classes You can target an element with a specific class using .class-name, as you saw previously. You can target an element with 2 (or more) classes by combining the class names separated with a dot, without spaces.\nExample:\n\u0026lt;p class=\u0026quot;dog-name roger\u0026quot;\u0026gt; Roger \u0026lt;/p\u0026gt; .dog-name.roger { color: yellow; }  Combining classes and ids In the same way, you can combine a class and an id.\nExample:\n\u0026lt;p class=\u0026quot;dog-name\u0026quot; id=\u0026quot;roger\u0026quot;\u0026gt; Roger \u0026lt;/p\u0026gt; .dog-name#roger { color: yellow; }  Grouping selectors You can combine selectors to apply the same declarations to multiple selectors. To do so, you separate them with a comma.\nExample:\n\u0026lt;p\u0026gt; My dog name is: \u0026lt;/p\u0026gt; \u0026lt;span class=\u0026quot;dog-name\u0026quot;\u0026gt; Roger \u0026lt;/span\u0026gt; p, .dog-name { color: yellow; }  You can add spaces in those declarations to make them more clear:\np, .dog-name { color: yellow; }  Follow the document tree with selectors We’ve seen how to target an element in the page by using a tag name, a class or an id.\nYou can create a more specific selector by combining multiple items to follow the document tree structure. For example, if you have a span tag nested inside a p tag, you can target that one without applying the style to a span tag not included in a p tag:\n\u0026lt;span\u0026gt; Hello! \u0026lt;/span\u0026gt; \u0026lt;p\u0026gt; My dog name is: \u0026lt;span class=\u0026quot;dog-name\u0026quot;\u0026gt; Roger \u0026lt;/span\u0026gt; \u0026lt;/p\u0026gt; p span { color: yellow; }  See how we used a space between the two tokens p and span.\nThis works even if the element on the right is multiple levels deep.\nTo make the dependency strict on the first level, you can use the \u0026gt; symbol between the two tokens:\np \u0026gt; span { color: yellow; }  In this case, if a span is not a first children of the p element, it\u0026rsquo;s not going to have the new color applied.\nDirect children will have the style applied:\n\u0026lt;p\u0026gt; \u0026lt;span\u0026gt; This is yellow \u0026lt;/span\u0026gt; \u0026lt;strong\u0026gt; \u0026lt;span\u0026gt; This is not yellow \u0026lt;/span\u0026gt; \u0026lt;/strong\u0026gt; \u0026lt;/p\u0026gt;  Adjacent sibling selectors let us style an element only if preceded by a specific element. We do so using the + operator:\nExample:\np + span { color: yellow; }  This will assign the color yellow to all span elements preceded by a p element:\n\u0026lt;p\u0026gt;This is a paragraph\u0026lt;/p\u0026gt; \u0026lt;span\u0026gt;This is a yellow span\u0026lt;/span\u0026gt;  We have a lot more selectors we can use:\n attribute selectors pseudo class selectors pseudo element selectors  We’ll find all about them in the next sections.\nCASCADE Cascade is a fundamental concept of CSS. After all, it’s in the name itself, the first C of CSS — Cascading Style Sheets — it must be an important thing.\nWhat does it mean?\nCascade is the process, or algorithm, that determines the properties applied to each element on the page. Trying to converge from a list of CSS rules that are defined in various places.\nIt does so taking in consideration:\n specificity importance inheritance order in the file  It also takes care of resolving conflicts.\nTwo or more competing CSS rules for the same property applied to the same element need to be elaborated according to the CSS spec, to determine which one needs to be applied.\nEven if you just have one CSS file loaded by your page, there is other CSS that is going to be part of the process. We have the browser (user agent) CSS. Browsers come with a default set of rules, all different between browsers.\nThen your CSS comes into play.\nThen the browser applies any user stylesheet, which might also be applied by browser extensions.\nAll those rules come into play while rendering the page.\nWe’ll now see the concepts of specificity and inheritance.\nSPECIFICITY What happens when an element is targeted by multiple rules, with different selectors, that affect the same property?\nFor example, let’s talk about this element:\n\u0026lt;p class=\u0026quot;dog-name\u0026quot;\u0026gt; Roger \u0026lt;/p\u0026gt;  We can have\n.dog-name { color: yellow; }  and another rule that targets p, which sets the color to another value:\np { color: red; }  And another rule that targets p.dog-name. Which rule is going to take precedence over the others, and why?\nEnter specificity. The more specific rule will win. If two or more rules have the same specificity, the one that appears last wins.\nSometimes what is more specific in practice is a bit confusing to beginners. I would say it’s also confusing to experts that do not look at those rules that frequently, or simply overlook them.\nHow to calculate specificity Specificity is calculated using a convention.\nWe have 4 slots, and each one of them starts at 0: 0 0 0 0 0. The slot at the left is the most important, and the rightmost one is the least important.\nLike it works for numbers in the decimal system: 1 0 0 0 is higher than 0 1 0 0.\nSlot 1 The first slot, the rightmost one, is the least important.\nWe increase this value when we have an element selector. An element is a tag name. If you have more than one element selector in the rule, you increment accordingly the value stored in this slot.\nExamples:\np {} /* 0 0 0 1 */ span {} /* 0 0 0 1 */ p span {} /* 0 0 0 2 */ p \u0026gt; span {} /* 0 0 0 2 */ div p \u0026gt; span {} /* 0 0 0 3 */  Slot 2 The second slot is incremented by 3 things:\n class selectors pseudo-class selectors attribute selectors  Every time a rule meets one of those, we increment the value of the second column from the right.\nExamples:\n.name {} /* 0 0 1 0 */ .users .name {} /* 0 0 2 0 */ [href$='.pdf'] {} /* 0 0 1 0 */ :hover {} /* 0 0 1 0 */  Of course slot 2 selectors can be combined with slot 1 selectors:\ndiv .name {} /* 0 0 1 1 */ a[href$='.pdf'] {} /* 0 0 1 1 */ .pictures img:hover {} /* 0 0 2 1 */  One nice trick with classes is that you can repeat the same class and increase the specificity. For example:\n.name {} /* 0 0 1 0 */ .name.name {} /* 0 0 2 0 */ .name.name.name {} /* 0 0 3 0 */  Slot 3 Slot 3 holds the most important thing that can affect your CSS specificity in a CSS file: the id.\nEvery element can have an id attribute assigned, and we can use that in our stylesheet to target the element.\nExamples:\n#name {} /* 0 1 0 0 */ .user #name {} /* 0 1 1 0 */ #name span {} /* 0 1 0 1 */  Slot 4 Slot 4 is affected by inline styles. Any inline style will have precedence over any rule defined in an external CSS file, or inside the style tag in the page header.\nExample:\n\u0026lt;p style=\u0026quot;color: red\u0026quot;\u0026gt;Test\u0026lt;/p\u0026gt; /* 1 0 0 0 */  Even if any other rule in the CSS defines the color, this inline style rule is going to be applied. Except for one case — if !important is used, which fills the slot 5.\nImportance Specificity does not matter if a rule ends with !important:\np { font-size: 20px!important; }  That rule will take precedence over any rule with more specificity\nAdding !important in a CSS rule is going to make that rule more important than any other rule, according to the specificity rules. The only way another rule can take precedence is to have !important as well, and have higher specificity in the other less important slots.\nTips In general you should use the amount of specificity you need, but not more. In this way, you can craft other selectors to overwrite the rules set by preceding rules without going mad.\n!important is a highly debated tool that CSS offers us. Many CSS experts advocate against using it. I find myself using it especially when trying out some style and a CSS rule has so much specificity that I need to use !important to make the browser apply my new CSS.\nBut generally, !important should have no place in your CSS files.\nUsing the id attribute to style CSS is also debated a lot, since it has a very high specificity. A good alternative is to use classes instead, which have less specificity, and so they are easier to work with, and they are more powerful (you can have multiple classes for an element, and a class can be reused multiple times).\nTools to calculate the specificity You can use the site https://specificity.keegan.st/ to perform the specificity calculation for you automatically.\nIt’s useful especially if you are trying to figure things out, as it can be a nice feedback tool.\nINHERITANCE When you set some properties on a selector in CSS, they are inherited by all the children of that selector.\nI said some, because not all properties show this behaviour.\nThis happens because some properties make sense to be inherited. This helps us write CSS much more concisely, since we don’t have to explicitly set that property again on every single child.\nSome other properties make more sense to not be inherited.\nThink about fonts: you don’t need to apply the font-family to every single tag of your page. You set the body tag font, and every child inherits it, along with other properties.\nThe background-color property, on the other hand, makes little sense to be inherited.\nProperties that inherit Here is a list of the properties that do inherit. The list is non-comprehensive, but those rules are just the most popular ones you’ll likely use:\n border-collapse border-spacing caption-side color cursor direction empty-cells font-family font-size font-style font-variant font-weight font-size-adjust font-stretch font letter-spacing line-height list-style-image list-style-position list-style-type list-style orphans quotes tab-size text-align text-align-last text-decoration-color text-indent text-justify text-shadow text-transform visibility white-space widows word-break word-spacing  I got it from this nice Sitepoint article on CSS inheritance.\nForcing properties to inherit What if you have a property that’s not inherited by default, and you want it to, in a child?\nIn the children, you set the property value to the special keyword inherit.\nExample:\nbody { background-color: yellow; } p { background-color: inherit; }  Forcing properties to NOT inherit On the contrary, you might have a property inherited and you want to avoid so.\nYou can use the revert keyword to revert it. In this case, the value is reverted to the original value the browser gave it in its default stylesheet.\nIn practice this is rarely used, and most of the times you’ll just set another value for the property to overwrite that inherited value.\nOther special values In addition to the inherit and revert special keywords we just saw, you can also set any property to:\n initial: use the default browser stylesheet if available. If not, and if the property inherits by default, inherit the value. Otherwise do nothing. unset: if the property inherits by default, inherit. Otherwise do nothing.  IMPORT From any CSS file you can import another CSS file using the @import directive.\nHere is how you use it:\n@import url(myfile.css)  url() can manage absolute or relative URLs.\nOne important thing you need to know is that @import directives must be put before any other CSS in the file, or they will be ignored.\nYou can use media descriptors to only load a CSS file on the specific media:\n@import url(myfile.css) all; @import url(myfile-screen.css) screen; @import url(myfile-print.css) print;  ATTRIBUTE SELECTORS We already introduced several of the basic CSS selectors: using element selectors, class, id, how to combine them, how to target multiple classes, how to style several selectors in the same rule, how to follow the page hierarchy with child and direct child selectors, and adjacent siblings.\nIn this section we’ll analyze attribute selectors, and we’ll talk about pseudo class and pseudo element selectors in the next 2 sections.\nAttribute presence selectors The first selector type is the attribute presence selector.\nWe can check if an element has an attribute using the [] syntax. p[id] will select all p tags in the page that have an id attribute, regardless of its value:\np[id] { /* ... */ }  Exact attribute value selectors Inside the brackets you can check the attribute value using =, and the CSS will be applied only if the attribute matches the exact value specified:\np[id=\u0026quot;my-id\u0026quot;] { /* ... */ }  Match an attribute value portion While = lets us check for exact value, we have other operators:\n *= checks if the attribute contains the partial ^= checks if the attribute starts with the partial $= checks if the attribute ends with the partial |= checks if the attribute starts with the partial and it\u0026rsquo;s followed by a dash (common in classes, for example), or just contains the partial ~= checks if the partial is contained in the attribute, but separated by spaces from the rest  All the checks we mentioned are case sensitive.\nIf you add an i just before the closing bracket, the check will be case insensitive. It\u0026rsquo;s supported in many browsers but not in all, check https://caniuse.com/#feat=css-case-insensitive.\nPSEUDO-CLASSES Pseudo classes are predefined keywords that are used to select an element based on its state, or to target a specific child.\nThey start with a single colon :.\nThey can be used as part of a selector, and they are very useful to style active or visited links, for example, change the style on hover, focus, or target the first child, or odd rows. Very handy in many cases.\nThese are the most popular pseudo classes you will likely use:\nLet’s do an example. A common one, actually. You want to style a link, so you create a CSS rule to target the a element:\na { color: yellow; }  Things seem to work fine, until you click one link. The link goes back to the predefined color (blue) when you click it. Then when you open the link and go back to the page, now the link is blue.\nWhy does that happen?\nBecause the link when clicked changes state, and goes in the :active state. And when it\u0026rsquo;s been visited, it is in the :visited state. Forever, until the user clears the browsing history.\nSo, to correctly make the link yellow across all states, you need to write\na, a:visited, a:active { color: yellow; }  :nth-child() deserves a special mention. It can be used to target odd or even children with :nth-child(odd) and :nth-child(even).\nIt is commonly used in lists to color odd lines differently from even lines:\nul:nth-child(odd) { color: white; background-color: black; }  You can also use it to target the first 3 children of an element with :nth-child(-n+3). Or you can style 1 in every 5 elements with :nth-child(5n).\nSome pseudo classes are just used for printing, like :first, :left, :right, so you can target the first page, all the left pages, and all the right pages, which are usually styled slightly differently.\nPSEUDO-ELEMENTS Pseudo-elements are used to style a specific part of an element. They start with a double colon ::.\n Sometimes you will spot them in the wild with a single colon, but this is only a syntax supported for backwards compatibility reasons. You should use 2 colons to distinguish them from pseudo-classes.\n ::before and ::after are probably the most used pseudo-elements. They are used to add content before or after an element, like icons for example.\nHere’s the list of the pseudo-elements:\nLet’s do an example. Say you want to make the first line of a paragraph slightly bigger in font size, a common thing in typography:\np::first-line { font-size: 2rem; }  Or maybe you want the first letter to be bolder:\np::first-letter { font-weight: bolder; }  ::after and ::before are a bit less intuitive. I remember using them when I had to add icons using CSS.\nYou specify the content property to insert any kind of content after or before an element:\np::before { content: url(/myimage.png); } .myElement::before { content: \u0026quot;Hey Hey!\u0026quot;; }  COLORS By default an HTML page is rendered by web browsers quite sadly in terms of the colors used.\nWe have a white background, black color, and blue links. That’s it.\nLuckily CSS gives us the ability to add colors to our designs.\nWe have these properties:\n color background-color border-color  All of them accept a color value, which can be in different forms.\nNamed colors First, we have CSS keywords that define colors. CSS started with 16, but today there is a huge number of colors names:\n aliceblue antiquewhite aqua aquamarine azure beige bisque black blanchedalmond blue blueviolet brown burlywood cadetblue chartreuse chocolate coral cornflowerblue cornsilk crimson cyan darkblue darkcyan darkgoldenrod darkgray darkgreen darkgrey darkkhaki darkmagenta darkolivegreen darkorange darkorchid darkred darksalmon darkseagreen darkslateblue darkslategray darkslategrey darkturquoise darkviolet deeppink deepskyblue dimgray dimgrey dodgerblue firebrick floralwhite forestgreen fuchsia gainsboro ghostwhite gold goldenrod gray green greenyellow grey honeydew hotpink indianred indigo ivory khaki lavender lavenderblush lawngreen lemonchiffon lightblue lightcoral lightcyan lightgoldenrodyellow lightgray lightgreen lightgrey lightpink lightsalmon lightseagreen lightskyblue lightslategray lightslategrey lightsteelblue lightyellow lime limegreen linen magenta maroon mediumaquamarine mediumblue mediumorchid mediumpurple mediumseagreen mediumslateblue mediumspringgreen mediumturquoise mediumvioletred midnightblue mintcream mistyrose moccasin navajowhite navy oldlace olive olivedrab orange orangered orchid palegoldenrod palegreen paleturquoise palevioletred papayawhip peachpuff peru pink plum powderblue purple rebeccapurple red rosybrown royalblue saddlebrown salmon sandybrown seagreen seashell sienna silver skyblue slateblue slategray slategrey snow springgreen steelblue tan teal thistle tomato turquoise violet wheat white whitesmoke yellow yellowgreen  plus tranparent, and currentColor which points to the color property, for example it’s useful to make the border-color inherit it.\nThey are defined in the CSS Color Module, Level 4. They are case insensitive.\nWikipedia has a nice table which lets you pick the perfect color by its name.\nNamed colors are not the only option.\nRGB and RGBa You can use the rgb() function to calculate a color from its RGB notation, which sets the color based on its red-green-blue parts. From 0 to 255:\np { color: rgb(255, 255, 255); /* white */ background-color: rgb(0, 0, 0); /* black */ }  rgba() lets you add the alpha channel to enter a transparent part. That can be a number from 0 to 1:\np { background-color: rgb(0, 0, 0, 0.5); }  Hexadecimal notation Another option is to express the RGB parts of the colors in the hexadecimal notation, which is composed by 3 blocks.\nBlack, which is rgb(0,0,0) is expressed as #000000 or #000 (we can shortcut the 2 numbers to 1 if they are equal).\nWhite, rgb(255,255,255) can be expressed as #ffffff or #fff.\nThe hexadecimal notation lets us express a number from 0 to 255 in just 2 digits, since they can go from 0 to “15” (f).\nWe can add the alpha channel by adding 1 or 2 more digits at the end, for example #00000033. Not all browsers support the shortened notation, so use all 6 digits to express the RGB part.\nHSL and HSLa This is a more recent addition to CSS.\nHSL = Hue Saturation Lightness.\nIn this notation, black is hsl(0, 0%, 0%) and white is hsl(0, 0%, 100%).\nIf you are more familiar with HSL than RGB because of your past knowledge, you can definitely use that.\nYou also have hsla() which adds the alpha channel to the mix, again a number from 0 to 1: hsl(0, 0%, 0%, 0.5)\nUNITS One of the things you’ll use every day in CSS are units. They are used to set lengths, paddings, margins, align elements and so on.\nThings like px, em, rem, or percentages.\nThey are everywhere. There are some obscure ones, too. We’ll go through each of them in this section.\nPixels The most widely used measurement unit. A pixel does not actually correlate to a physical pixel on your screen, as that varies, a lot, by device (think high-DPI devices vs non-retina devices).\nThere is a convention that make this unit work consistently across devices.\nPercentages Another very useful measure, percentages let you specify values in percentages of that parent element’s corresponding property.\nExample:\n.parent { width: 400px; } .child { width: 50%; /* = 200px */ }  Real-world measurement units We have those measurement units which are translated from the outside world. Mostly useless on screen, they can be useful for print stylesheets. They are:\n cm a centimeter (maps to 37.8 pixels) mm a millimeter (0.1cm) q a quarter of a millimeter in an inch (maps to 96 pixels) pt a point (1 inch = 72 points) pc a pica (1 pica = 12 points)  Relative units  em is the value assigned to that element\u0026rsquo;s font-size, therefore its exact value changes between elements. It does not change depending on the font used, just on the font size. In typography this measures the width of the m letter. rem is similar to em, but instead of varying on the current element font size, it uses the root element (html) font size. You set that font size once, and rem will be a consistent measure across all the page. ex is like em, but inserted of measuring the width of m, it measures the height of the x letter. It can change depending on the font used, and on the font size. ch is like ex but instead of measuring the height of x it measures the width of 0 (zero).  Viewport units  vw the viewport width unit represents a percentage of the viewport width. 50vw means 50% of the viewport width. vh the viewport height unit represents a percentage of the viewport height. 50vh means 50% of the viewport height. vmin the viewport minimum unit represents the minimum between the height or width in terms of percentage. 30vmin is the 30% of the current width or height, depending which one is smaller vmax the viewport maximum unit represents the maximum between the height or width in terms of percentage. 30vmax is the 30% of the current width or height, depending which one is bigger  Fraction units fr are fraction units, and they are used in CSS Grid to divide space into fractions.\nWe’ll talk about them in the context of CSS Grid later on.\nURL When we talk about background images, @import, and more, we use the url() function to load a resource:\ndiv { background-image: url(test.png); }  In this case I used a relative URL, which searches the file in the folder where the CSS file is defined.\nI could go one level back\ndiv { background-image: url(../test.png); }  or go into a folder\ndiv { background-image: url(subfolder/test.png); }  Or I could load a file starting from the root of the domain where the CSS is hosted:\ndiv { background-image: url(/test.png); }  Or I could use an absolute URL to load an external resource:\ndiv { background-image: url(https://mysite.com/test.png); }  CALC The calc() function lets you perform basic math operations on values, and it\u0026rsquo;s especially useful when you need to add or subtract a length value from a percentage.\nThis is how it works:\ndiv { max-width: calc(80% - 100px) }  It returns a length value, so it can be used anywhere you expect a pixel value.\nYou can perform\n additions using + subtractions using - multiplication using * division using /   One caveat: with addition and subtraction, the space around the operator is mandatory, otherwise it does not work as expected.\n Examples:\ndiv { max-width: calc(50% / 3) } div { max-width: calc(50% + 3px) }  BACKGROUNDS The background of an element can be changed using several CSS properties:\n background-color background-image background-clip background-position background-origin background-repeat background-attachment background-size  and the shorthand property background, which allows us to shorten definitions and group them on a single line.\nbackground-color accepts a color value, which can be one of the color keywords, or an rgb or hsl value:\np { background-color: yellow; } div { background-color: #333; }  Instead of using a color, you can use an image as background to an element, by specifying the image location URL:\ndiv { background-image: url(image.png); }  background-clip lets you determine the area used by the background image, or color. The default value is border-box, which extends up to the border outer edge.\nOther values are\n padding-box to extend the background up to the padding edge, without the border content-box to extend the background up to the content edge, without the padding inherit to apply the value of the parent  When using an image as background you will want to set the position of the image placement using the background-position property: left, right, center are all valid values for the X axis, and top, bottom for the Y axis:\ndiv { background-position: top right; }  If the image is smaller than the background, you need to set the behavior using background-repeat. Should it repeat-x, repeat-y or repeat on all the axes? This last one is the default value. Another value is no-repeat.\nbackground-origin lets you choose where the background should be applied: to the entire element including padding (default) using padding-box, to the entire element including the border using border-box, to the element without the padding using content-box.\nWith background-attachment we can attach the background to the viewport, so that scrolling will not affect the background:\ndiv { background-attachment: fixed; }  By default the value is scroll. There is another value, local. The best way to visualize their behavior is this Codepen.\nThe last background property is background-size. We can use 3 keywords: auto, cover and contain. auto is the default.\ncover expands the image until the entire element is covered by the background.\ncontain stops expanding the background image when one dimension (x or y) covers the whole smallest edge of the image, so it\u0026rsquo;s fully contained into the element.\nYou can also specify a length value, and if so it sets the width of the background image (and the height is automatically defined):\ndiv { background-size: 100%; }  If you specify 2 values, one is the width and the second is the height:\ndiv { background-size: 800px 600px; }  The shorthand property background allows to shorten definitions and group them on a single line.\nThis is an example:\ndiv { background: url(bg.png) top left no-repeat; }  If you use an image, and the image could not be loaded, you can set a fallback color:\ndiv { background: url(image.png) yellow; }  You can also set a gradient as background:\ndiv { background: linear-gradient(#fff, #333); }  COMMENTS CSS gives you the ability to write comments in a CSS file, or in the style tag in the page header\nThe format is the /* this is a comment */ C-style (or JavaScript-style, if you prefer) comments.\nThis is a multiline comment. Until you add the closing */ token, the all the lines found after the opening one are commented.\nExample:\n#name { display: block; } /* Nice rule! */ /* #name { display: block; } */ #name { display: block; /* color: red; */ }  CSS does not have inline comments, like // in C or JavaScript.\nPay attention though — if you add // before a rule, the rule will not be applied, looking like the comment worked. In reality, CSS detected a syntax error and due to how it works it ignored the line with the error, and went straight to the next line.\nKnowing this approach lets you purposefully write inline comments, although you have to be careful because you can’t add random text like you can in a block comment.\nFor example:\n// Nice rule! #name { display: block; }  In this case, due to how CSS works, the #name rule is actually commented out. You can find more details here if you find this interesting. To avoid shooting yourself in the foot, just avoid using inline comments and rely on block comments.\nCUSTOM PROPERTIES In the last few years CSS preprocessors have had a lot of success. It was very common for greenfield projects to start with Less or Sass. And it’s still a very popular technology.\nThe main benefits of those technologies are, in my opinion:\n They allow you to nest selectors The provide an easy imports functionality They give you variables  Modern CSS has a new powerful feature called CSS Custom Properties, also commonly known as CSS Variables.\nCSS is not a programming language like JavaScript, Python, PHP, Ruby or Go where variables are key to do something useful. CSS is very limited in what it can do, and it’s mainly a declarative syntax to tell browsers how they should display an HTML page.\nBut a variable is a variable: a name that refers to a value, and variables in CSS help reduce repetition and inconsistencies in your CSS, by centralizing the values definition.\nAnd it introduces a unique feature that CSS preprocessors won’t ever have: you can access and change the value of a CSS Variable programmatically using JavaScript.\nThe basics of using variables A CSS Variable is defined with a special syntax, prepending two dashes to a name (--variable-name), then a colon and a value. Like this:\n:root { --primary-color: yellow; }  (more on :root later)\nYou can access the variable value using var():\np { color: var(--primary-color) }  The variable value can be any valid CSS value, for example:\n:root { --default-padding: 30px 30px 20px 20px; --default-color: red; --default-background: #fff; }  Create variables inside any element CSS Variables can be defined inside any element. Some examples:\n:root { --default-color: red; } body { --default-color: red; } main { --default-color: red; } p { --default-color: red; } span { --default-color: red; } a:hover { --default-color: red; }  What changes in those different examples is the scope.\nVariables scope Adding variables to a selector makes them available to all the children of it.\nIn the example above you saw the use of :root when defining a CSS variable:\n:root { --primary-color: yellow; }  :root is a CSS pseudo-class that identifies the root element of a tree.\nIn the context of an HTML document, using the :root selector points to the html element, except that :root has higher specificity (takes priority).\nIn the context of an SVG image, :root points to the svg tag.\nAdding a CSS custom property to :root makes it available to all the elements in the page.\nIf you add a variable inside a .container selector, it\u0026rsquo;s only going to be available to children of .container:\n.container { --secondary-color: yellow; }  and using it outside of this element is not going to work.\nVariables can be reassigned:\n:root { --primary-color: yellow; } .container { --primary-color: blue; }  Outside .container, --primary-color will be yellow, but inside it will be blue.\nYou can also assign or overwrite a variable inside the HTML using inline styles:\n\u0026lt;main style=\u0026quot;--primary-color: orange;\u0026quot;\u0026gt; \u0026lt;!-- ... --\u0026gt; \u0026lt;/main\u0026gt;   CSS Variables follow the normal CSS cascading rules, with precedence set according to specificity.\n Interacting with a CSS Variable value using JavaScript The coolest thing with CSS Variables is the ability to access and edit them using JavaScript.\nHere’s how you set a variable value using plain JavaScript:\nconst element = document.getElementById('my-element') element.style.setProperty('--variable-name', 'a-value')  This code below can be used to access a variable value instead, in case the variable is defined on :root:\nconst styles = getComputedStyle(document.documentElement) const value = String(styles.getPropertyValue('--variable-name')).trim()  Or, to get the style applied to a specific element, in case of variables set with a different scope:\nconst element = document.getElementById('my-element') const styles = getComputedStyle(element) const value = String(styles.getPropertyValue('--variable-name')).trim()  Handling invalid values If a variable is assigned to a property which does not accept the variable value, it’s considered invalid.\nFor example you might pass a pixel value to a position property, or a rem value to a color property.\nIn this case the line is considered invalid and is ignored.\nBrowser support Browser support for CSS Variables is very good, according to Can I Use.\nCSS Variables are here to stay, and you can use them today if you don’t need to support Internet Explorer and old versions of the other browsers.\nIf you need to support older browsers you can use libraries like PostCSS or Myth, but you’ll lose the ability to interact with variables via JavaScript or the Browser Developer Tools, as they are transpiled to good old variable-less CSS (and as such, you lose most of the power of CSS Variables).\nCSS Variables are case sensitive This variable:\n--width: 100px;  is different than this one:\n--Width: 100px;  Math in CSS Variables To do math in CSS Variables, you need to use calc(), for example:\n:root { --default-left-padding: calc(10px * 2); }  Media queries with CSS Variables Nothing special here. CSS Variables normally apply to media queries:\nbody { --width: 500px; } @media screen and (max-width: 1000px) and (min-width: 700px) { --width: 800px; } .container { width: var(--width); }  Setting a fallback value for var() var() accepts a second parameter, which is the default fallback value when the variable value is not set:\n.container { margin: var(--default-margin, 30px); }  FONTS At the dawn of the web you only had a handful of fonts you could choose from.\nThankfully today you can load any kind of font on your pages.\nCSS has gained many nice capabilities over the years in regards to fonts.\nThe font property is the shorthand for a number of properties:\n font-family font-weight font-stretch font-style font-size  Let’s see each one of them and then we’ll cover font.\nThen we’ll talk about how to load custom fonts, using @import or @font-face, or by loading a font stylesheet.\nfont-family Sets the font family that the element will use.\nWhy “family”? Because what we know as a font is actually composed of several sub-fonts which provide all the style (bold, italic, light..) we need.\nHere’s an example from my Mac’s Font Book app — the Fira Code font family hosts several dedicated fonts underneath:\nThis property lets you select a specific font, for example:\nbody { font-family: Helvetica; }  You can set multiple values, so the second option will be used if the first cannot be used for some reason (if it’s not found on the machine, or the network connection to download the font failed, for example):\nbody { font-family: Helvetica, Arial; }  I used some specific fonts up to now, ones we call Web Safe Fonts, as they are pre-installed on different operating systems.\nWe divide them in Serif, Sans-Serif, and Monospace fonts. Here’s a list of some of the most popular ones:\nSerif\n Georgia Palatino Times New Roman Times  Sans-Serif\n Arial Helvetica Verdana Geneva Tahoma Lucida Grande Impact Trebuchet MS Arial Black  Monospace\n Courier New Courier Lucida Console Monaco  You can use all of those as font-family properties, but they are not guaranteed to be there for every system. Others exist, too, with a varying level of support.\nYou can also use generic names:\n sans-serif a font without ligatures serif a font with ligatures monospace a font especially good for code cursive used to simulate handwritten pieces fantasy the name says it all  Those are typically used at the end of a font-family definition, to provide a fallback value in case nothing else can be applied:\nbody { font-family: Helvetica, Arial, sans-serif; }  font-weight This property sets the width of a font. You can use those predefined values:\n normal bold bolder (relative to the parent element) lighter (relative to the parent element)  Or using the numeric keywords\n 100 200 300 400, mapped to normal 500 600 700 mapped to bold 800 900  where 100 is the lightest font, and 900 is the boldest.\nSome of those numeric values might not map to a font, because that must be provided in the font family. When one is missing, CSS makes that number be at least as bold as the preceding one, so you might have numbers that point to the same font.\nfont-stretch Allows you to choose a narrow or wide face of the font, if available.\nThis is important: the font must be equipped with different faces.\nValues allowed are, from narrower to wider:\n ultra-condensed extra-condensed condensed semi-condensed normal semi-expanded expanded extra-expanded ultra-expanded  font-style Allows you to apply an italic style to a font:\np { font-style: italic; }  This property also allows the values oblique and normal. There is very little, if any, difference between using italic and oblique. The first is easier to me, as HTML already offers an i element which means italic.\nfont-size This property is used to determine the size of fonts.\nYou can pass 2 kinds of values:\n a length value, like px, em, rem etc, or a percentage a predefined value keyword  In the second case, the values you can use are:\n xx-small x-small small medium large x-large xx-large smaller (relative to the parent element) larger (relative to the parent element)  Usage:\np { font-size: 20px; } li { font-size: medium; }  font-variant This property was originally used to change the text to small caps, and it had just 3 valid values:\n normal inherit small-caps  Small caps means the text is rendered in “smaller caps” beside its uppercase letters.\nfont The font property lets you apply different font properties in a single one, reducing the clutter.\nWe must at least set 2 properties, font-size and font-family, the others are optional:\nbody { font: 20px Helvetica; }  If we add other properties, they need to be put in the correct order.\nThis is the order:\nfont: \u0026lt;font-stretch\u0026gt; \u0026lt;font-style\u0026gt; \u0026lt;font-variant\u0026gt; \u0026lt;font-weight\u0026gt; \u0026lt;font-size\u0026gt; \u0026lt;line-height\u0026gt; \u0026lt;font-family\u0026gt;;  Example:\nbody { font: italic bold 20px Helvetica; } section { font: small-caps bold 20px Helvetica; }  Loading custom fonts using @font-face @font-face lets you add a new font family name, and map it to a file that holds a font.\nThis font will be downloaded by the browser and used in the page, and it’s been such a fundamental change to typography on the web — we can now use any font we want.\nWe can add @font-face declarations directly into our CSS, or link to a CSS dedicated to importing the font.\nIn our CSS file we can also use @import to load that CSS file.\nA @font-face declaration contains several properties we use to define the font, including src, the URI (one or more URIs) to the font. This follows the same-origin policy, which means fonts can only be downloaded form the current origin (domain + port + protocol).\nFonts are usually in the formats\n woff (Web Open Font Format) woff2 (Web Open Font Format 2.0) eot (Embedded Open Type) otf (OpenType Font) ttf (TrueType Font)  The following properties allow us to define the properties to the font we are going to load, as we saw above:\n font-family font-weight font-style font-stretch  A note on performance Of course loading a font has performance implications which you must consider when creating the design of your page.\nTYPOGRAPHY We already talked about fonts, but there’s more to styling text.\nIn this section we’ll talk about the following properties:\n text-transform text-decoration text-align vertical-align line-height text-indent text-align-last word-spacing letter-spacing text-shadow white-space tab-size writing-mode hyphens text-orientation direction line-break word-break overflow-wrap  text-transform This property can transform the case of an element.\nThere are 4 valid values:\n capitalize to uppercase the first letter of each word uppercase to uppercase all the text lowercase to lowercase all the text none to disable transforming the text, used to avoid inheriting the property  Example:\np { text-transform: uppercase; }  text-decoration This property is sed to add decorations to the text, including\n underline overline line-through blink none  Example:\np { text-decoration: underline; }  You can also set the style of the decoration, and the color.\nExample:\np { text-decoration: underline dashed yellow; }  Valid style values are solid, double, dotted, dashed, wavy.\nYou can do all in one line, or use the specific properties:\n text-decoration-line text-decoration-color text-decoration-style  Example:\np { text-decoration-line: underline; text-decoration-color: yellow; text-decoration-style: dashed; }  text-align By default text align has the start value, meaning the text starts at the \u0026ldquo;start\u0026rdquo;, origin 0, 0 of the box that contains it. This means top left in left-to-right languages, and top right in right-to-left languages.\nPossible values are start, end, left, right, center, justify (nice to have a consistent spacing at the line ends):\np { text-align: right; }  vertical-align Determines how inline elements are vertically aligned.\nWe have several values for this property. First we can assign a length or percentage value. Those are used to align the text in a position higher or lower (using negative values) than the baseline of the parent element.\nThen we have the keywords:\n baseline (the default), aligns the baseline to the baseline of the parent element sub makes an element subscripted, simulating the sub HTML element result super makes an element superscripted, simulating the sup HTML element result top align the top of the element to the top of the line text-top align the top of the element to the top of the parent element font middle align the middle of the element to the middle of the line of the parent bottom align the bottom of the element to the bottom of the line text-bottom align the bottom of the element to the bottom of the parent element font  line-height This allows you to change the height of a line. Each line of text has a certain font height, but then there is additional spacing vertically between the lines. That’s the line height:\np { line-height: 0.9rem; }  text-indent Indent the first line of a paragraph by a set length, or a percentage of the paragraph width:\np { text-indent: -10px; }  text-align-last By default the last line of a paragraph is aligned following the text-align value. Use this property to change that behavior:\np { text-align-last: right; }  word-spacing Modifies the spacing between each word.\nYou can use the normal keyword, to reset inherited values, or use a length value:\np { word-spacing: 2px; } span { word-spacing: -0.2em; }  letter-spacing Modifies the spacing between each letter.\nYou can use the normal keyword, to reset inherited values, or use a length value:\np { letter-spacing: 0.2px; } span { letter-spacing: -0.2em; }  text-shadow Apply a shadow to the text. By default the text has now shadow.\nThis property accepts an optional color, and a set of values that set\n the X offset of the shadow from the text the Y offset of the shadow from the text the blur radius  If the color is not specified, the shadow will use the text color.\nExamples:\np { text-shadow: 0.2px 2px; } span { text-shadow: yellow 0.2px 2px 3px; }  white-space Sets how CSS handles the white space, new lines and tabs inside an element.\nValid values that collapse white space are:\n normal collapses white space. Adds new lines when necessary as the text reaches the container end nowrap collapses white space. Does not add a new line when the text reaches the end of the container, and suppresses any line break added to the text pre-line collapses white space. Adds new lines when necessary as the text reaches the container end  Valid values that preserve white space are:\n pre preserves white space. Does not add a new line when the text reaches the end of the container, but preserves line break added to the text pre-wrap preserves white space. Adds new lines when necessary as the text reaches the container end  tab-size Sets the width of the tab character. By default it’s 8, and you can set an integer value that sets the character spaces it takes, or a length value:\np { tab-size: 2; } span { tab-size: 4px; }  writing-mode Defines whether lines of text are laid out horizontally or vertically, and the direction in which blocks progress.\nThe values you can use are\n horizontal-tb (default) vertical-rl content is laid out vertically. New lines are put on the left of the previous vertical-lr content is laid out vertically. New lines are put on the right of the previous  hyphens Determines if hyphens should be automatically added when going to a new line.\nValid values are\n none (default) manual only add an hyphen when there is already a visible hyphen or a hidden hyphen (a special character) auto add hyphens when determined the text can have a hyphen.  text-orientation When writing-mode is in a vertical mode, determines the orientation of the text.\nValid values are\n mixed is the default, and if a language is vertical (like Japanese) it preserves that orientation, while rotating text written in western languages upright makes all text be vertically oriented sideways makes all text horizontally oriented  direction Sets the direction of the text. Valid values are ltr and rtl:\np { direction: rtl; }  word-break This property specifies how to break lines within words.\n normal (default) means the text is only broken between words, not inside a word break-all the browser can break a word (but no hyphens are added) keep-all suppress soft wrapping. Mostly used for CJK (Chinese/Japanese/Korean) text.  Speaking of CJK text, the property line-break is used to determine how text lines break. I\u0026rsquo;m not an expert with those languages, so I will avoid covering it.\noverflow-wrap If a word is too long to fit a line, it can overflow outside of the container.\n This property is also known as word-wrap, although that is non-standard (but still works as an alias)\n This is the default behavior (overflow-wrap: normal;).\nWe can use:\np { overflow-wrap: break-word; }  to break it at the exact length of the line, or\np { overflow-wrap: anywhere; }  if the browser sees there’s a soft wrap opportunity somewhere earlier. No hyphens are added, in any case.\nThis property is very similar to word-break. We might want to choose this one on western languages, while word-break has special treatment for non-western languages.\nBOX MODEL Every CSS element is essentially a box. Every element is a generic box.\nThe box model explains the sizing of the elements based on a few CSS properties.\nFrom the inside to the outside, we have:\n the content area padding border margin  The best way to visualize the box model is to open the browser DevTools and check how it is displayed:\nHere you can see how Firefox tells me the properties of a span element I highlighted. I right-clicked on it, pressed Inspect Element, and went to the Layout panel of the DevTools.\nSee, the light blue space is the content area. Surrounding it there is the padding, then the border and finally the margin.\nBy default, if you set a width (or height) on the element, that is going to be applied to the content area. All the padding, border, and margin calculations are done outside of the value, so you have to keep this in mind when you do your calculation.\nLater you’ll see how you can change this behavior using Box Sizing.\nBORDER The border is a thin layer between padding and margin. By editing the border, you can make elements draw their perimeter on screen.\nYou can work on borders by using those properties:\n border-style border-color border-width  The property border can be used as a shorthand for all those properties.\nborder-radius is used to create rounded corners.\nYou also have the ability to use images as borders, an ability given to you by border-image and its specific separate properties:\n border-image-source border-image-slice border-image-width border-image-outset border-image-repeat  Let’s start with border-style.\nThe border style The border-style property lets you choose the style of the border. The options you can use are:\n dotted dashed solid double groove ridge inset outset none hidden  Check out this Codepen for a live example.\nThe default for the style is none, so to make the border appear at all you need to change it to something else. solid is a good choice most of the time.\nYou can set a different style for each edge using the properties\n border-top-style border-right-style border-bottom-style border-left-style  or you can use border-style with multiple values to define them, using the usual Top-Right-Bottom-Left order:\np { border-style: solid dotted solid dotted; }  The border width border-width is used to set the width of the border.\nYou can use one of the pre-defined values:\n thin medium (the default value) thick  or express a value in pixels, em or rem or any other valid length value.\nExample:\np { border-width: 2px; }  You can set the width of each edge (Top-Right-Bottom-Left) separately by using 4 values:\np { border-width: 2px 1px 2px 1px; }  or you can use the specific edge properties border-top-width, border-right-width, border-bottom-width, border-left-width.\nThe border color border-color is used to set the color of the border.\nIf you don’t set a color, the border by default is colored using the color of the text in the element.\nYou can pass any valid color value to border-color.\nExample:\np { border-color: yellow; }  You can set the color of each edge (Top-Right-Bottom-Left) separately by using 4 values:\np { border-color: black red yellow blue; }  or you can use the specific edge properties border-top-color, border-right-color, border-bottom-color, border-left-color.\nThe border shorthand property Those 3 properties mentioned, border-width, border-style and border-color can be set using the shorthand property border.\nExample:\np { border: 2px black solid; }  You can also use the edge-specific properties border-top, border-right, border-bottom, border-left.\nExample:\np { border-left: 2px black solid; border-right: 3px red dashed; }  The border radius border-radius is used to set rounded corners to the border. You need to pass a value that will be used as the radius of the circle that will be used to round the border.\nUsage:\np { border-radius: 3px; }  You can also use the edge-specific properties border-top-left-radius, border-top-right-radius, border-bottom-left-radius, border-bottom-right-radius.\nUsing images as borders One very cool thing with borders is the ability to use images to style them. This lets you go very creative with borders.\nWe have 5 properties:\n border-image-source border-image-slice border-image-width border-image-outset border-image-repeat  and the shorthand border-image. I won\u0026rsquo;t go in much details here as images as borders would need a more in-depth coverage as what I can do in this little chapter. I recommend reading the CSS Tricks almanac entry on border-image for more information.\nPADDING The padding CSS property is commonly used in CSS to add space in the inner side of an element.\nRemember:\n margin adds space outside an element border padding adds space inside an element border  Specific padding properties padding has 4 related properties that alter the padding of a single edge at once:\n padding-top padding-right padding-bottom padding-left  The usage of those is very simple and cannot be confused, for example:\npadding-left: 30px; padding-right: 3em;  Using the padding shorthand padding is a shorthand to specify multiple padding values at the same time, and depending on the number of values entered, it behaves differently.\n1 value Using a single value applies that to all the paddings: top, right, bottom, left.\npadding: 20px;  2 values Using 2 values applies the first to bottom \u0026amp; top, and the second to left \u0026amp; right.\npadding: 20px 10px;  3 values Using 3 values applies the first to top, the second to left \u0026amp; right, the third to bottom.\npadding: 20px 10px 30px;  4 values Using 4 values applies the first to top, the second to right, the third to bottom, the fourth to left.\npadding: 20px 10px 5px 0px;  So, the order is top-right-bottom-left.\nValues accepted padding accepts values expressed in any kind of length unit, the most common ones are px, em, rem, but many others exist.\nMARGIN The margin CSS property is commonly used in CSS to add space around an element.\nRemember:\n margin adds space outside an element border padding adds space inside an element border  Specific margin properties margin has 4 related properties that alter the margin of a single edge at once:\n margin-top margin-right margin-bottom margin-left  The usage of those is very simple and cannot be confused, for example:\nmargin-left: 30px; margin-right: 3em;  Using the margin shorthand margin is a shorthand to specify multiple margins at the same time, and depending on the number of values entered, it behaves differently.\n1 value Using a single value applies that to all the margins: top, right, bottom, left.\nmargin: 20px;  2 values Using 2 values applies the first to bottom \u0026amp; top, and the second to left \u0026amp; right.\nmargin: 20px 10px;  3 values Using 3 values applies the first to top, the second to left \u0026amp; right, the third to bottom.\nmargin: 20px 10px 30px;  4 values Using 4 values applies the first to top, the second to right, the third to bottom, the fourth to left.\nmargin: 20px 10px 5px 0px;  So, the order is top-right-bottom-left.\nValues accepted margin accepts values expressed in any kind of length unit, the most common ones are px, em, rem, but many others exist.\nIt also accepts percentage values, and the special value auto.\nUsing auto to center elements auto can be used to tell the browser to select automatically a margin, and it\u0026rsquo;s most commonly used to center an element in this way:\nmargin: 0 auto;  As said above, using 2 values applies the first to bottom \u0026amp; top, and the second to left \u0026amp; right.\nThe modern way to center elements is to use Flexbox, and its justify-content: center; directive.\nOlder browsers of course do not implement Flexbox, and if you need to support them margin: 0 auto; is still a good choice.\nUsing a negative margin margin is the only property related to sizing that can have a negative value. It\u0026rsquo;s extremely useful, too. Setting a negative top margin makes an element move over elements before it, and given enough negative value it will move out of the page.\nA negative bottom margin moves up the elements after it.\nA negative right margin makes the content of the element expand beyond its allowed content size.\nA negative left margin moves the element left over the elements that precede it, and given enough negative value it will move out of the page.\nBOX SIZING The default behavior of browsers when calculating the width of an element is to apply the calculated width and height to the content area, without taking any of the padding, border and margin in consideration.\nThis approach has proven to be quite complicated to work with.\nYou can change this behavior by setting the box-sizing property.\nThe box-sizing property is a great help. It has 2 values:\n border-box content-box  content-box is the default, the one we had for ages before box-sizing became a thing.\nborder-box is the new and great thing we are looking for. If you set that on an element:\n.my-div { box-sizing: border-box; }  width and height calculation include the padding and the border. Only the margin is left out, which is reasonable since in our mind we also typically see that as a separate thing: margin is outside of the box.\nThis property is a small change but has a big impact. CSS Tricks even declared an international box-sizing awareness day, just saying, and it’s recommended to apply it to every element on the page, out of the box, with this:\n*, *:before, *:after { box-sizing: border-box; }  DISPLAY The display property of an object determines how it is rendered by the browser.\nIt’s a very important property, and probably the one with the highest number of values you can use.\nThose values include:\n block inline none contents flow flow-root table (and all the table-* ones) flex grid list-item inline-block inline-table inline-flex inline-grid inline-list-item  plus others you will not likely use, like ruby.\nChoosing any of those will considerably alter the behavior of the browser with the element and its children.\nIn this section we’ll analyze the most important ones not covered elsewhere:\n block inline inline-block none  We’ll see some of the others in later chapters, including coverage of table, flex and grid.\ninline Inline is the default display value for every element in CSS.\nAll the HTML tags are displayed inline out of the box except some elements like div, p and section, which are set as block by the user agent (the browser).\nInline elements don’t have any margin or padding applied.\nSame for height and width.\nYou can add them, but the appearance in the page won’t change — they are calculated and applied automatically by the browser.\ninline-block Similar to inline, but with inline-block width and height applied as you specify.\nblock As mentioned, normally elements are displayed inline, with the exception of some elements, including\n div p section ul  which are set as block by the browser.\nWith display: block, elements are stacked one after each other, vertically, and every element takes up 100% of the page.\nThe values assigned to the width and height properties are respected, if you set them, along with margin and padding.\nnone Using display: none makes an element disappear. It\u0026rsquo;s still there in the HTML, but just not visible in the browser.\nPOSITIONING Positioning is what makes us determine where elements appear on the screen, and how they appear.\nYou can move elements around, and position them exactly where you want.\nIn this section we’ll also see how things change on a page based on how elements with different position interact with each other.\nWe have one main CSS property: position.\nIt can have those 5 values:\n static relative absolute fixed sticky  Static positioning This is the default value for an element. Static positioned elements are displayed in the normal page flow.\nRelative positioning If you set position: relative on an element, you are now able to position it with an offset, using the properties\n top right bottom left  which are called offset properties. They accept a length value or a percentage.\nTake this example I made on Codepen. I create a parent container, a child container, and an inner box with some text:\n\u0026lt;div class=\u0026quot;parent\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;child\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;box\u0026quot;\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;  with some CSS to give some colors and padding, but does not affect positioning:\n.parent { background-color: #af47ff; padding: 30px; width: 300px; } .child { background-color: #ff4797; padding: 30px; } .box { background-color: #f3ff47; padding: 30px; border: 2px solid #333; border-style: dotted; font-family: courier; text-align: center; font-size: 2rem; }  here’s the result:\nYou can try and add any of the properties I mentioned before (top, right, bottom, left) to .box, and nothing will happen. The position is static.\nNow if we set position: relative to the box, at first apparently nothing changes. But the element is now able to move using the top, right, bottom, left properties, and now you can alter the position of it relatively to the element containing it.\nFor example:\n.box { /* ... */ position: relative; top: -60px; }  A negative value for top will make the box move up relatively to its container.\nOr\n.box { /* ... */ position: relative; top: -60px; left: 180px; }  Notice how the space that is occupied by the box remains preserved in the container, like it was still in its place.\nAnother property that will now work is z-index to alter the z-axis placement. We\u0026rsquo;ll talk about it later on.\nAbsolute positioning Setting position: absolute on an element will remove it from the document\u0026rsquo;s flow.\nRemember in relative positioning that we noticed the space originally occupied by an element was preserved even if it was moved around?\nWith absolute positioning, as soon as we set position: absolute on .box, its original space is now collapsed, and only the origin (x, y coordinates) remain the same.\n.box { /* ... */ position: absolute; }  We can now move the box around as we please, using the top, right, bottom, left properties:\n.box { /* ... */ position: absolute; top: 0px; left: 0px; }  or\n.box { /* ... */ position: absolute; top: 140px; left: 50px; }  The coordinates are relative to the closest container that is not static.\nThis means that if we add position: relative to the .child element, and we set top and left to 0, the box will not be positioned at the top left margin of the window, but rather it will be positioned at the 0, 0 coordinates of .child:\n.child { /* ... */ position: relative; } .box { /* ... */ position: absolute; top: 0px; left: 0px; }  Here’s how we already saw that .child is static (the default):\n.child { /* ... */ position: static; } .box { /* ... */ position: absolute; top: 0px; left: 0px; }  Like for relative positioning, you can use z-index to alter the z-axis placement.\nFixed positioning Like with absolute positioning, when an element is assigned position: fixed it\u0026rsquo;s removed from the flow of the page.\nThe difference with absolute positioning is this: elements are now always positioned relative to the window, instead of the first non-static container.\n.box { /* ... */ position: fixed; }  .box { /* ... */ position: fixed; top: 0; left: 0; }  Another big difference is that elements are not affected by scrolling. Once you put a sticky element somewhere, scrolling the page does not remove it from the visible part of the page.\nSticky positioning While the above values have been around for a very long time, this one was introduced recently and it’s still relatively unsupported (see caniuse.com)\nThe UITableView iOS component is the thing that comes to mind when I think about position: sticky. You know when you scroll in the contacts list and the first letter is stuck to the top, to let you know you are viewing that particular letter\u0026rsquo;s contacts?\nWe used JavaScript to emulate that, but this is the approach taken by CSS to allow it natively.\nFLOATING AND CLEARING Floating has been a very important topic in the past.\nIt was used in lots of hacks and creative usages because it was one of the few ways, along with tables, we could really implement some layouts. In the past we used to float the sidebar to the left, for example, to show it on the left side of the screen and added some margin to the main content.\nLuckily times have changed and today we have Flexbox and Grid to help us with layout, and float has gone back to its original scope: placing content on one side of the container element, and making its siblings show up around it.\nThe float property supports 3 values:\n left right none (the default)  Say we have a box which contains a paragraph with some text, and the paragraph also contains an image.\nHere’s some code:\n\u0026lt;div class=\u0026quot;parent\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;child\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;box\u0026quot;\u0026gt; \u0026lt;p\u0026gt;This is some random paragraph and an image. \u0026lt;img src=\u0026quot;https://via.placeholder.com/100x100\u0026quot; /\u0026gt; The image is in the middle of the text. The image is in the middle of the text. The image is in the middle of the text. The image is in the middle of the text. The image is in the middle of the text. The image is in the middle of the text. The image is in the middle of the text. The image is in the middle of the text. The image is in the middle of the text. \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; .parent { background-color: #af47ff; padding: 30px; width: 500px; } .child { background-color: #ff4797; padding: 30px; } .box { background-color: #f3ff47; padding: 30px; border: 2px solid #333; border-style: dotted; font-family: courier; text-align: justify; font-size: 1rem; }  and the visual appearance:\nAs you can see, the normal flow by default considers the image inline, and makes space for it in the line itself.\nIf we add float: left to the image, and some padding:\nimg { float: left; padding: 20px 20px 0px 0px; }  this is the result:\nand this is what we get by applying a float: right, adjusting the padding accordingly:\nimg { float: right; padding: 20px 0px 20px 20px; }  A floated element is removed from the normal flow of the page, and the other content flows around it.\nSee the example on Codepen\nYou are not limited to floating images, too. Here we switch the image with a span element:\n\u0026lt;div class=\u0026quot;parent\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;child\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;box\u0026quot;\u0026gt; \u0026lt;p\u0026gt;This is some random paragraph and an image. \u0026lt;span\u0026gt;Some text to float\u0026lt;/span\u0026gt; The image is in the middle of the text. The image is in the middle of the text. The image is in the middle of the text. The image is in the middle of the text. The image is in the middle of the text. The image is in the middle of the text. The image is in the middle of the text. The image is in the middle of the text. The image is in the middle of the text. \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; span { float: right; margin: 20px 0px 20px 20px; padding: 10px; border: 1px solid black }  and this is the result:\nClearing What happens when you float more than one element?\nIf when floated they find another floated image, by default they are stacked up one next to the other, horizontally. Until there is no room, and they will start being stacked on a new line.\nSay we had 3 inline images inside a p tag:\nIf we add float: left to those images:\nimg { float: left; padding: 20px 20px 0px 0px; }  this is what we’ll have:\nif you add clear: left to images, those are going to be stacked vertically rather than horizontally:\nI used the left value for clear. It allows\n left to clear left floats right to clear right floats both to clear both left and right floats none (default) disables clearing  Z-INDEX When we talked about positioning, I mentioned that you can use the z-index property to control the Z axis positioning of elements.\nIt’s very useful when you have multiple elements that overlap each other, and you need to decide which one is visible, as nearer to the user, and which one(s) should be hidden behind it.\nThis property takes a number (without decimals) and uses that number to calculate which elements appear nearer to the user, in the Z axis.\nThe higher the z-index value, the more an element is positioned nearer to the user.\nWhen deciding which element should be visible and which one should be positioned behind it, the browser does a calculation on the z-index value.\nThe default value is auto, a special keyword. Using auto, the Z axis order is determined by the position of the HTML element in the page - the last sibling appears first, as it\u0026rsquo;s defined last.\nBy default elements have the static value for the position property. In this case, the z-index property does not make any difference - it must be set to absolute, relative or fixed to work.\nExample:\n.my-first-div { position: absolute; top: 0; left: 0; width: 600px; height: 600px; z-index: 10; } .my-second-div { position: absolute; top: 0; left: 0; width: 500px; height: 500px; z-index: 20; }  The element with class .my-second-div will be displayed, and behind it .my-first-div.\nHere we used 10 and 20, but you can use any number. Negative numbers too. It’s common to pick non-consecutive numbers, so you can position elements in the middle. If you use consecutive numbers instead, you would need to re-calculate the z-index of each element involved in the positioning.\nCSS GRID CSS Grid is the new kid in the CSS town, and while not yet fully supported by all browsers, it’s going to be the future system for layouts.\nCSS Grid is a fundamentally new approach to building layouts using CSS.\nKeep an eye on the CSS Grid Layout page on caniuse.com (https://caniuse.com/#feat=css-grid) to find out which browsers currently support it. At the time of writing, April 2019, all major browsers (except IE, which will never have support for it) are already supporting this technology, covering 92% of all users.\nCSS Grid is not a competitor to Flexbox. They interoperate and collaborate on complex layouts, because CSS Grid works on 2 dimensions (rows AND columns) while Flexbox works on a single dimension (rows OR columns).\nBuilding layouts for the web has traditionally been a complicated topic.\nI won’t dig into the reasons for this complexity, which is a complex topic on its own. But you can think yourself as a very lucky human because nowadays you have 2 very powerful and well supported tools at your disposal:\n CSS Flexbox CSS Grid  These 2 are the tools to build the Web layouts of the future.\nUnless you need to support old browsers like IE8 and IE9, there is no reason to be messing with things like:\n Table layouts Floats clearfix hacks display: table hacks  In this guide there’s all you need to know about going from zero knowledge of CSS Grid to being a proficient user.\nThe basics The CSS Grid layout is activated on a container element (which can be a div or any other tag) by setting display: grid.\nAs with flexbox, you can define some properties on the container, and some properties on each individual item in the grid.\nThese properties combined will determine the final look of the grid.\nThe most basic container properties are grid-template-columns and grid-template-rows.\ngrid-template-columns and grid-template-rows Those properties define the number of columns and rows in the grid, and they also set the width of each column/row.\nThe following snippet defines a grid with 4 columns each 200px wide, and 2 rows with a 300px height each.\n.container { display: grid; grid-template-columns: 200px 200px 200px 200px; grid-template-rows: 300px 300px; }  Here’s another example of a grid with 2 columns and 2 rows:\n.container { display: grid; grid-template-columns: 200px 200px; grid-template-rows: 100px 100px; }  Automatic dimensions Many times you might have a fixed header size, a fixed footer size, and the main content that is flexible in height, depending on its length. In this case you can use the auto keyword:\n.container { display: grid; grid-template-rows: 100px auto 100px; }  Different columns and rows dimensions In the above examples we made regular grids by using the same values for rows and the same values for columns.\nYou can specify any value for each row/column, to create a lot of different designs:\n.container { display: grid; grid-template-columns: 100px 200px; grid-template-rows: 100px 50px; }  Another example:\n.container { display: grid; grid-template-columns: 10px 100px; grid-template-rows: 100px 10px; }  Adding space between the cells Unless specified, there is no space between the cells.\nYou can add spacing by using those properties:\n grid-column-gap grid-row-gap  or the shorthand syntax grid-gap.\nExample:\n.container { display: grid; grid-template-columns: 100px 200px; grid-template-rows: 100px 50px; grid-column-gap: 25px; grid-row-gap: 25px; }  The same layout using the shorthand:\n.container { display: grid; grid-template-columns: 100px 200px; grid-template-rows: 100px 50px; grid-gap: 25px; }  Spawning items on multiple columns and/or rows Every cell item has the option to occupy more than just one box in the row, and expand horizontally or vertically to get more space, while respecting the grid proportions set in the container.\nThese are the properties we’ll use for that:\n grid-column-start grid-column-end grid-row-start grid-row-end  Example:\n.container { display: grid; grid-template-columns: 200px 200px 200px 200px; grid-template-rows: 300px 300px; } .item1 { grid-column-start: 2; grid-column-end: 4; } .item6 { grid-column-start: 3; grid-column-end: 5; }  The numbers correspond to the vertical line that separates each column, starting from 1:\nThe same principle applies to grid-row-start and grid-row-end, except this time instead of taking more columns, a cell takes more rows.\nShorthand syntax Those properties have a shorthand syntax provided by:\n grid-column grid-row  The usage is simple, here’s how to replicate the above layout:\n.container { display: grid; grid-template-columns: 200px 200px 200px 200px; grid-template-rows: 300px 300px; } .item1 { grid-column: 2 / 4; } .item6 { grid-column: 3 / 5; }  Another approach is to set the starting column/row, and set how many it should occupy using span:\n.container { display: grid; grid-template-columns: 200px 200px 200px 200px; grid-template-rows: 300px 300px; } .item1 { grid-column: 2 / span 2; } .item6 { grid-column: 3 / span 2; }  More grid configuration Using fractions Specifying the exact width of each column or row is not ideal in every case.\nA fraction is a unit of space.\nThe following example divides a grid into 3 columns with the same width, 1\u0026frasl;3 of the available space each.\n.container { grid-template-columns: 1fr 1fr 1fr; }  Using percentages and rem You can also use percentages, and mix and match fractions, pixels, rem and percentages:\n.container { grid-template-columns: 3rem 15% 1fr 2fr }  Using repeat() repeat() is a special function that takes a number that indicates the number of times a row/column will be repeated, and the length of each one.\nIf every column has the same width, you can specify the layout using this syntax:\n.container { grid-template-columns: repeat(4, 100px); }  This creates 4 columns with the same width.\nOr using fractions:\n.container { grid-template-columns: repeat(4, 1fr); }  Specify a minimum width for a row Common use case: Have a sidebar that never collapses more than a certain amount of pixels when you resize the window.\nHere’s an example where the sidebar takes 1\u0026frasl;4 of the screen and never takes less than 200px:\n.container { grid-template-columns: minmax(200px, 3fr) 9fr; }  You can also set just a maximum value using the auto keyword:\n.container { grid-template-columns: minmax(auto, 50%) 9fr; }  or just a minimum value:\n.container { grid-template-columns: minmax(100px, auto) 9fr; }  Positioning elements using grid-template-areas By default elements are positioned in the grid using their order in the HTML structure.\nUsing grid-template-areas you can define template areas to move them around in the grid, and also to spawn an item on multiple rows / columns instead of using grid-column.\nHere’s an example:\n\u0026lt;div class=\u0026quot;container\u0026quot;\u0026gt; \u0026lt;main\u0026gt; ... \u0026lt;/main\u0026gt; \u0026lt;aside\u0026gt; ... \u0026lt;/aside\u0026gt; \u0026lt;header\u0026gt; ... \u0026lt;/header\u0026gt; \u0026lt;footer\u0026gt; ... \u0026lt;/footer\u0026gt; \u0026lt;/div\u0026gt; .container { display: grid; grid-template-columns: 200px 200px 200px 200px; grid-template-rows: 300px 300px; grid-template-areas: \u0026quot;header header header header\u0026quot; \u0026quot;sidebar main main main\u0026quot; \u0026quot;footer footer footer footer\u0026quot;; } main { grid-area: main; } aside { grid-area: sidebar; } header { grid-area: header; } footer { grid-area: footer; }  Despite their original order, items are placed where grid-template-areas define, depending on the grid-area property associated to them.\nAdding empty cells in template areas You can set an empty cell using the dot . instead of an area name in grid-template-areas:\n.container { display: grid; grid-template-columns: 200px 200px 200px 200px; grid-template-rows: 300px 300px; grid-template-areas: \u0026quot;. header header .\u0026quot; \u0026quot;sidebar . main main\u0026quot; \u0026quot;. footer footer .\u0026quot;; }  Fill a page with a grid You can make a grid extend to fill the page using fr:\n.container { display: grid; height: 100vh; grid-template-columns: 1fr 1fr 1fr 1fr; grid-template-rows: 1fr 1fr; }  An example: header, sidebar, content and footer Here is a simple example of using CSS Grid to create a site layout that provides a header op top, a main part with sidebar on the left and content on the right, and a footer afterwards.\nHere’s the markup:\n\u0026lt;div class=\u0026quot;wrapper\u0026quot;\u0026gt; \u0026lt;header\u0026gt;Header\u0026lt;/header\u0026gt; \u0026lt;article\u0026gt; \u0026lt;h1\u0026gt;Welcome\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Hi!\u0026lt;/p\u0026gt; \u0026lt;/article\u0026gt; \u0026lt;aside\u0026gt;\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;Sidebar\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\u0026lt;/aside\u0026gt; \u0026lt;footer\u0026gt;Footer\u0026lt;/footer\u0026gt; \u0026lt;/div\u0026gt;  and here’s the CSS:\nheader { grid-area: header; background-color: #fed330; padding: 20px; } article { grid-area: content; background-color: #20bf6b; padding: 20px; } aside { grid-area: sidebar; background-color: #45aaf2; } footer { padding: 20px; grid-area: footer; background-color: #fd9644; } .wrapper { display: grid; grid-gap: 20px; grid-template-columns: 1fr 3fr; grid-template-areas: \u0026quot;header header\u0026quot; \u0026quot;sidebar content\u0026quot; \u0026quot;footer footer\u0026quot;; }  I added some colors to make it prettier, but basically it assigns to every different tag a grid-area name, which is used in the grid-template-areas property in .wrapper.\nWhen the layout is smaller we can put the sidebar below the content using a media query:\n@media (max-width: 500px) { .wrapper { grid-template-columns: 4fr; grid-template-areas: \u0026quot;header\u0026quot; \u0026quot;content\u0026quot; \u0026quot;sidebar\u0026quot; \u0026quot;footer\u0026quot;; } }  See on CodePen\nThese are the basics of CSS Grid. There are many things I didn’t include in this introduction but I wanted to make it very simple, so you can start using this new layout system without making it feel overwhelming.\nFLEXBOX Flexbox, also called Flexible Box Module, is one of the two modern layouts systems, along with CSS Grid.\nCompared to CSS Grid (which is bi-dimensional), flexbox is a one-dimensional layout model. It will control the layout based on a row or on a column, but not together at the same time.\nThe main goal of flexbox is to allow items to fill the whole space offered by their container, depending on some rules you set.\nUnless you need to support old browsers like IE8 and IE9, Flexbox is the tool that lets you forget about using\n Table layouts Floats clearfix hacks display: table hacks  Let’s dive into flexbox and become a master of it in a very short time.\nBrowser support At the time of writing (Feb 2018), it’s supported by 97.66% of the users. All the most important browsers have implemented it for years, so even older browsers (including IE10+) are covered:\nWhile we must wait a few years for users to catch up on CSS Grid, Flexbox is an older technology and can be used right now.\nEnable Flexbox A flexbox layout is applied to a container, by setting\ndisplay: flex;  or\ndisplay: inline-flex;  The content inside the container will be aligned using flexbox.\nContainer properties Some flexbox properties apply to the container, which sets the general rules for its items. They are\n flex-direction justify-content align-items flex-wrap flex-flow  Align rows or columns The first property we see, **flex-direction**, determines if the container should align its items as rows, or as columns:\n flex-direction: row places items as a row, in the text direction (left-to-right for western countries) flex-direction: row-reverse places items just like row but in the opposite direction flex-direction: column places items in a column, ordering top to bottom flex-direction: column-reverse places items in a column, just like column but in the opposite direction  Vertical and horizontal alignment By default, items start from the left if flex-direction is row, and from the top if flex-direction is column.\nYou can change this behavior using justify-content to change the horizontal alignment, and align-items to change the vertical alignment.\nChange the horizontal alignment **justify-content** has 5 possible values:\n flex-start: align to the left side of the container. flex-end: align to the right side of the container. center: align at the center of the container. space-between: display with equal spacing between them. space-around: display with equal spacing around them  Change the vertical alignment **align-items** has 5 possible values:\n flex-start: align to the top of the container. flex-end: align to the bottom of the container. center: align at the vertical center of the container. baseline: display at the baseline of the container. stretch: items are stretched to fit the container.  A note on baseline:\nbaseline looks similar to flex-start in this example, due to my boxes being too simple. Check out this Codepen to have a more useful example, which I forked from a Pen originally created by Martin Michálek. As you can see there, item dimensions are aligned.\nWrap By default, items in a flexbox container are kept on a single line, shrinking them to fit in the container.\nTo force the items to spread across multiple lines, use flex-wrap: wrap. This will distribute the items according to the order set in flex-direction. Use flex-wrap: wrap-reverse to reverse this order.\nA shorthand property called flex-flow allows you to specify flex-direction and flex-wrap in a single line, by adding the flex-direction value first, followed by flex-wrap value, for example: flex-flow: row wrap.\nProperties that apply to each single item Up to this point, we’ve seen the properties you can apply to the container.\nSingle items can have a certain amount of independence and flexibility, and you can alter their appearance using those properties:\n order align-self flex-grow flex-shrink flex-basis flex  Let’s see them in detail.\nMoving items before / after another one using order Items are ordered based on the order they are assigned. By default every item has order 0 and the appearance in the HTML determines the final order.\nYou can override this property using order on each separate item. This is a property you set on the item, not the container. You can make an item appear before all the others by setting a negative value.\nVertical alignment using align-self An item can choose to override the container align-items setting, using **align-self**, which has the same 5 possible values of align-items:\n flex-start: align to the top of the container. flex-end: align to the bottom of the container. center: align at the vertical center of the container. baseline: display at the baseline of the container. stretch: items are stretched to fit the container.  Grow or shrink an item if necessary flex-grow\nThe defaut for any item is 0.\nIf all items are defined as 1 and one is defined as 2, the bigger element will take the space of two “1” items.\nflex-shrink\nThe defaut for any item is 1.\nIf all items are defined as 1 and one is defined as 3, the bigger element will shrink 3x the other ones. When less space is available, it will take 3x less space.\nflex-basis\nIf set to auto, it sizes an item according to its width or height, and adds extra space based on the flex-grow property.\nIf set to 0, it does not add any extra space for the item when calculating the layout.\nIf you specify a pixel number value, it will use that as the length value (width or height depends on if it’s a row or a column item)\nflex\nThis property combines the above 3 properties:\n flex-grow flex-shrink flex-basis  and provides a shorthand syntax: flex: 0 1 auto\nTABLES Tables in the past were greatly overused in CSS, as they were one of the only ways we could create a fancy page layout.\nToday with Grid and Flexbox we can move tables back to the job they were intended to do: styling tables.\nLet’s start from the HTML. This is a basic table:\n\u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th scope=\u0026quot;col\u0026quot;\u0026gt;Name\u0026lt;/th\u0026gt; \u0026lt;th scope=\u0026quot;col\u0026quot;\u0026gt;Age\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th scope=\u0026quot;row\u0026quot;\u0026gt;Flavio\u0026lt;/th\u0026gt; \u0026lt;td\u0026gt;36\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th scope=\u0026quot;row\u0026quot;\u0026gt;Roger\u0026lt;/th\u0026gt; \u0026lt;td\u0026gt;7\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt;  By default it’s not very attractive. The browser provides some standard styles, and that’s it:\nWe can use CSS to style all the elements of the table, of course.\nLet’s start with the border. A nice border can go a long way.\nWe can apply it on the table element, and on the inner elements too, like th and td:\ntable, th, td { border: 1px solid #333; }  If we pair it with some margin, we get a nice result:\nOne common thing with tables is the ability to add a color to one row, and a different color to another row. This is possible using the :nth-child(odd) or :nth-child(even) selector:\ntbody tr:nth-child(odd) { background-color: #af47ff; }  This gives us:\nIf you add border-collapse: collapse; to the table element, all borders are collapsed into one:\nCENTERING Centering things in CSS is a task that is very different if you need to center horizontally or vertically.\nIn this post I explain the most common scenarios and how to solve them. If a new solution is provided by Flexbox I ignore the old techniques because we need to move forward, and Flexbox has been supported by browsers for years, IE10 included.\nCenter horizontally Text Text is very simple to center horizontally using the text-align property set to center:\np { text-align: center; }  Blocks The modern way to center anything that is not text is to use Flexbox:\n#mysection { display: flex; justify-content: center; }  any element inside #mysection will be horizontally centered.\nHere is the alternative approach if you don’t want to use Flexbox.\nAnything that is not text can be centered by applying an automatic margin to left and right, and setting the width of the element:\nsection { margin: 0 auto; width: 50%; }  the above margin: 0 auto; is a shorthand for:\nsection { margin-top: 0; margin-bottom: 0; margin-left: auto; margin-right: auto; }  Remember to set the item to display: block if it\u0026rsquo;s an inline element.\nCenter vertically Traditionally this has always been a difficult task. Flexbox now provides us a great way to do this in the simplest possible way:\n#mysection { display: flex; align-items: center; }  any element inside #mysection will be vertically centered.\nCenter both vertically and horizontally Flexbox techniques to center vertically and horizontally can be combined to completely center an element in the page.\n#mysection { display: flex; align-items: center; justify-content: center; }  The same can be done using CSS Grid:\nbody { display: grid; place-items: center; height: 100vh; }  LISTS Lists are a very important part of many web pages.\nCSS can style them using several properties.\nlist-style-type is used to set a predefined marker to be used by the list:\nli { list-style-type: square; }  We have lots of possible values, which you can see here https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-type with examples of their appearance. Some of the most popular ones are disc, circle, square and none.\nlist-style-image is used to use a custom marker when a predefined marker is not appropriate:\nli { list-style-image: url(list-image.png); }  list-style-position lets you add the marker outside (the default) or inside of the list content, in the flow of the page rather than outside of it\nli { list-style-position: inside; }  The list-style shorthand property lets us specify all those properties in the same line:\nli { list-style: url(list-image.png) inside; }  MEDIA QUERIES AND RESPONSIVE DESIGN In this section we’re going to first introduce media types and media feature descriptors, then we’ll explain media queries.\nMedia types Used in media queries and @import declarations, media types allow us to determine on which media a CSS file, or a piece of CSS, is loaded.\nWe have the following media types\n all means all the media print used when printing screen used when the page is presented on a screen speech used for screen readers  screen is the default.\nIn the past we had more of them, but most are deprecated as they proved to be ineffective ways of determining device needs.\nWe can use them in @import statements like this:\n@import url(myfile.css) screen; @import url(myfile-print.css) print;  We can load a CSS file on multiple media types separating each with a comma:\n@import url(myfile.css) screen, print;  The same works for the link tag in HTML:\n\u0026lt;link rel=\u0026quot;stylesheet\u0026quot; type=\u0026quot;text/css\u0026quot; href=\u0026quot;myfile.css\u0026quot; media=\u0026quot;screen\u0026quot; /\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; type=\u0026quot;text/css\u0026quot; href=\u0026quot;another.css\u0026quot; media=\u0026quot;screen, print\u0026quot; /\u0026gt;  We’re not limited to just using media types in the media attribute and in the @import declaration. There\u0026rsquo;s more.\nMedia feature descriptors First, let’s introduce media feature descriptors. They are additional keywords that we can add to the media attribute of link or the the @import declaration, to express more conditionals over the loading of the CSS.\nHere’s the list of them:\n width height device-width device-height aspect-ratio device-aspect-ratio color color-index monochrome resolution orientation scan grid  Each of them has a corresponding min- and max-, for example:\n min-width, max-width min-device-width, max-device-width  and so on.\nSome of those accept a length value which can be expressed in px or rem or any length value. It\u0026rsquo;s the case of width, height, device-width, device-height.\nFor example:\n@import url(myfile.css) screen and (max-width: 800px);  Notice that we wrap each block using media feature descriptors in parentheses.\nSome accept a fixed value. orientation, used to detect the device orientation, accepts portrait or landscape.\nExample:\n\u0026lt;link rel=\u0026quot;stylesheet\u0026quot; type=\u0026quot;text/css\u0026quot; href=\u0026quot;myfile.css\u0026quot; media=\u0026quot;screen and (orientation: portrait)\u0026quot; /\u0026gt;  scan, used to determine the type of screen, accepts progressive (for modern displays) or interlace (for older CRT devices).\nSome others want an integer.\nLike color which inspects the number of bits per color component used by the device. Very low-level, but you just need to know it\u0026rsquo;s there for your usage (like grid, color-index, monochrome).\naspect-ratio and device-aspect-ratio accept a ratio value representing the width to height viewport ratio, which is expressed as a fraction.\nExample:\n@import url(myfile.css) screen and (aspect-ratio: 4/3);  resolution represents the pixel density of the device, expressed in a resolution data type like dpi.\nExample:\n@import url(myfile.css) screen and (min-resolution: 100dpi);  Logic operators We can combine rules using and:\n\u0026lt;link rel=\u0026quot;stylesheet\u0026quot; type=\u0026quot;text/css\u0026quot; href=\u0026quot;myfile.css\u0026quot; media=\u0026quot;screen and (max-width: 800px)\u0026quot; /\u0026gt;  We can perform an “or” type of logic operation using commas, which combines multiple media queries:\n@import url(myfile.css) screen, print;  We can use not to negate a media query:\n@import url(myfile.css) not screen;   Important: not can only be used to negate an entire media query, so it must be placed at the beginning of it (or after a comma).\n Media queries All those above rules we saw applied to @import or the the link HTML tag can be applied inside the CSS, too.\nYou need to wrap them in a @media () {} structure.\nExample:\n@media screen and (max-width: 800px) { /* enter some CSS */ }  and this is the foundation for responsive design.\nMedia queries can be quite complex. This example applies the CSS only if it’s a screen device, the width is between 600 and 800 pixels, and the orientation is landscape:\n@media screen and (max-width: 800px) and (min-width: 600px) and (orientation: landscape) { /* enter some CSS */ }  FEATURE QUERIES Feature queries are a recent and relatively unknown ability of CSS, but a well supported one.\nWe can use it to check if a feature is supported by the browser using the @supports keyword.\nI think this is especially useful, at the time of writing, for checking if a browser supports CSS grid, for example, which can be done using:\n@supports (display: grid) { /* apply this CSS */ }  We check if the browser supports the grid value for the display property.\nWe can use @supports for any CSS property, to check any value.\nWe can also use the logical operators and, or and not to build complex feature queries:\n@supports (display: grid) and (display: flex) { /* apply this CSS */ }  FILTERS Filters allow us to perform operations on elements.\nThings you normally do with Photoshop or other photo editing software, like changing the opacity or the brightness, and more.\nYou use the filter property. Here\u0026rsquo;s an example of it applied on an image, but this property can be used on any element:\nimg { filter: \u0026lt;something\u0026gt;; }  You can use various values here:\n blur() brightness() contrast() drop-shadow() grayscale() hue-rotate() invert() opacity() sepia() saturate() url()  Notice the parentheses after each option, because they all require a parameter.\nFor example:\nimg { filter: opacity(0.5); }  means the image will be 50% transparent, because opacity() takes one value from 0 to 1, or a percentage.\nYou can also apply multiple filters at once:\nimg { filter: opacity(0.5) blur(2px); }  Let’s now talk about each filter in detail.\nblur() Blurs an element content. You pass it a value, expressed in px or em or rem that will be used to determine the blur radius.\nExample:\nimg { filter: blur(4px); }  opacity() opacity() takes one value from 0 to 1, or a percentage, and determines the image transparency based on it.\n0, or 0%, means totally transparent. 1, or 100%, or higher, means totally visible.\nExample:\nimg { filter: opacity(0.5); }  CSS also has an opacity property. filter however can be hardware accelerated, depending on the implementation, so this should be the preferred method.\ndrop-shadow() drop-shadow() shows a shadow behind the element, which follows the alpha channel. This means that if you have a transparent image, you get a shadow applied to the image shape, not the image box. If the image does not have an alpha channel, the shadow will be applied to the entire image box.\nIt accepts a minimum of 2 parameters, up to 5:\n offset-x sets the horizontal offset. Can be negative. offset-y sets the vertical offset. Can be negative. blur-radius, optional, sets the blur radius for the shadow. It defaults to 0, no blur. spread-radius, optional, sets the spread radius. Expressed in px, rem or em color, optional, sets the color of the shadow.  You can set the color without setting the spread radius or blur radius. CSS understands the value is a color and not a length value.\nExample:\nimg { filter: drop-shadow(10px 10px 5px orange); } img { filter: drop-shadow(10px 10px orange); } img { filter: drop-shadow(10px 10px 5px 5px #333); }  grayscale() Makes the element have a gray color.\nYou pass one value from 0 to 1, or from 0% to 100%, where 1 and 100% mean completely gray, and 0 or 0% mean the image is not touched, and the original colors remain.\nExample:\nimg { filter: grayscale(50%); }  sepia() Makes the element have a sepia color.\nYou pass one value from 0 to 1, or from 0% to 100%, where 1 and 100% mean completely sepia, and 0 or 0% mean the image is not touched, and the original colors remain.\nExample:\nimg { filter: sepia(50%); }  invert() Invert the colors of an element. Inverting a color means looking up the opposite of a color in the HSL color wheel. Just search “color wheel” in Google if you have no idea what that means. For example, the opposite of yellow is blue, the opposite of red is cyan. Every single color has an opposite.\nYou pass a number, from 0 to 1 or from 0% to 100%, that determines the amount of inversion. 1 or 100% means full inversion, 0 or 0% means no inversion.\n0.5 or 50% will always render a 50% gray color, because you always end up in the middle of the wheel.\nExample:\nimg { filter: invert(50%); }  hue-rotate() The HSL color wheel is represented in degrees. Using hue-rotate() you can rotate the color using a positive or negative rotation.\nThe function accepts a deg value.\nExample:\nimg { filter: hue-rotate(90deg); }  brightness() Alters the brightness of an element.\n0 or 0% gives a total black element. 1 or 100% gives an unchanged image.\nValues higher than 1 or 100% make the image brighter up to reaching a total white element.\nExample:\nimg { filter: brightness(50%); }  contrast() Alters the contrast of an element.\n0 or 0% gives a total gray element. 1 or 100% gives an unchanged image.\nValues higher than 1 or 100% give more contrast.\nExample:\nimg { filter: contrast(150%); }  saturate() Alters the saturation of an element.\n0 or 0% gives a total grayscale element (with less saturation). 1 or 100% gives an unchanged image.\nValues higher than 1 or 100% give more saturation.\nExample:\nimg { filter: saturate(); }  url() This filter allows to apply a filter defined in an SVG file. You point to the SVG file location.\nExample:\nimg { filter: url(filter.svg); }  SVG filters are out of the scope of this piece, but you can read more on this Smashing Magazine post: https://www.smashingmagazine.com/2015/05/why-the-svg-filter-is-awesome/\nTRANSFORMS Transforms allow you to translate, rotate, scale, and skew elements, in the 2D or 3D space. They are a very cool CSS feature, especially when combined with animations.\n2D transforms The transform property accepts those functions:\n translate() to move elements around rotate() to rotate elements scale() to scale elements in size skew() to twist or slant an element matrix() a way to perform any of the above operations using a matrix of 6 elements, a less user friendly syntax but less verbose  We also have axis-specific functions:\n translateX() to move elements around on the X axis translateY() to move elements around on the Y axis scaleX() to scale elements in size on the X axis scaleY() to scale elements in size on the Y axis skewX() to twist or slant an element on the X axis skewY() to twist or slant an element on the Y axis  Here is an example of a transform which changes the .box element width by 2 (duplicating it) and the height by 0.5 (reducing it to half):\n.box { transform: scale(2, 0.5); }  [transform-origin](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin) lets us set the origin (the (0, 0) coordinates) for the transformation, letting us change the rotation center.\nCombining multiple transforms You can combine multiple transforms by separating each function with a space.\nFor example:\ntransform: rotateY(20deg) scaleX(3) translateY(100px);  3D transforms We can go one step further and move our elements in a 3D space instead of in a 2D space. With 3D, we are adding another axis, Z, which adds depth to our visuals.\nUsing the perspective property you can specify how far the 3D object is from the viewer.\nExample:\n.3Delement { perspective: 100px; }  perspective-origin determines the appearance of the position of the viewer, how are we looking at it in the X and Y axis.\nNow we can use additional functions that control the Z axis, and that add up to the other X and Y axis transforms:\n translateZ() rotateZ() scaleZ()  and the corresponding shorthands translate3d(), rotate3d() and scale3d() as shorthands for using the translateX(), translateY() and translateZ() functions and so on.\n3D transforms are a bit too advanced for this handbook, but are a great topic to explore on your own.\nTRANSITIONS CSS Transitions are the simplest way to create an animation in CSS.\nIn a transition, you change the value of a property, and you tell CSS to slowly change it according to some parameters, towards a final state.\nCSS Transitions are defined by these properties:\nThe transition property is a handy shorthand:\n.container { transition: property duration timing-function delay; }  Example of a CSS Transition This code implements a CSS Transition:\n.one, .three { background: rgba(142, 92, 205, .75); transition: background 1s ease-in; } .two, .four { background: rgba(236, 252, 100, .75); } .circle:hover { background: rgba(142, 92, 205, .25); /* lighter */ }  See the example on Glitch https://flavio-css-transitions-example.glitch.me\nWhen hovering the .one and .three elements, the purple circles, there is a transition animation that eases the change of background, while the yellow circles do not, because they do not have the transition property defined.\nTransition timing function values transition-timing-function allows you to specify the acceleration curve of the transition.\nThere are some simple values you can use:\n linear ease ease-in ease-out ease-in-out  This Glitch shows how these work in practice.\nYou can create a completely custom timing function using cubic bezier curves. This is rather advanced, but basically any of those functions above are built using bezier curves. We have handy names as they are common ones.\nCSS Transitions in Browser DevTools The Browser DevTools offer a great way to visualize transitions.\nThis is Chrome:\nThis is Firefox:\nFrom those panels you can live edit the transition and experiment in the page directly without reloading your code.\nWhich Properties you can Animate using CSS Animations A lot! They are the same you can animate using CSS Transitions, too.\nHere’s the full list:\n background background-color background-position background-size border border-color border-width border-bottom border-bottom-color border-bottom-left-radius border-bottom-right-radius border-bottom-width border-left border-left-color border-left-width border-radius border-right border-right-color border-right-width border-spacing border-top border-top-color border-top-left-radius border-top-right-radius border-top-width bottom box-shadow caret-color clip color column-count column-gap column-rule column-rule-color column-rule-width column-width columns content filter flex flex-basis flex-grow flex-shrink font font-size font-size-adjust font-stretch font-weight grid-area grid-auto-columns grid-auto-flow grid-auto-rows grid-column-end grid-column-gap grid-column-start grid-column grid-gap grid-row-end grid-row-gap grid-row-start grid-row grid-template-areas grid-template-columns grid-template-rows grid-template grid height left letter-spacing line-height margin margin-bottom margin-left margin-right margin-top max-height max-width min-height min-width opacity order outline outline-color outline-offset outline-width padding padding-bottom padding-left padding-right padding-top perspective perspective-origin quotes right tab-size text-decoration text-decoration-color text-indent text-shadow top transform. vertical-align visibility width word-spacing z-index  ANIMATIONS CSS Animations are a great way to create visual animations, not limited to a single movement like CSS Transitions, but much more articulated.\nAn animation is applied to an element using the animation property.\n.container { animation: spin 10s linear infinite; }  spin is the name of the animation, which we need to define separately. We also tell CSS to make the animation last 10 seconds, perform it in a linear way (no acceleration or any difference in its speed) and to repeat it infinitely.\nYou must define how your animation works using keyframes. Example of an animation that rotates an item:\n@keyframes spin { 0% { transform: rotateZ(0); } 100% { transform: rotateZ(360deg); } }  Inside the @keyframes definition you can have as many intermediate waypoints as you want.\nIn this case we instruct CSS to make the transform property to rotate the Z axis from 0 to 360 grades, completing the full loop.\nYou can use any CSS transform here.\nNotice how this does not dictate anything about the temporal interval the animation should take. This is defined when you use it via animation.\nA CSS Animations Example I want to draw four circles, all with a starting point in common, all 90 degrees distant from each other.\n\u0026lt;div class=\u0026quot;container\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;circle one\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;circle two\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;circle three\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;circle four\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; body { display: grid; place-items: center; height: 100vh; } .circle { border-radius: 50%; left: calc(50% - 6.25em); top: calc(50% - 12.5em); transform-origin: 50% 12.5em; width: 12.5em; height: 12.5em; position: absolute; box-shadow: 0 1em 2em rgba(0, 0, 0, .5); } .one, .three { background: rgba(142, 92, 205, .75); } .two, .four { background: rgba(236, 252, 100, .75); } .one { transform: rotateZ(0); } .two { transform: rotateZ(90deg); } .three { transform: rotateZ(180deg); } .four { transform: rotateZ(-90deg); }  You can see them in this Glitch: https://flavio-css-circles.glitch.me\nLet’s make this structure (all the circles together) rotate. To do this, we apply an animation on the container, and we define that animation as a 360 degree rotation:\n@keyframes spin { 0% { transform: rotateZ(0); } 100% { transform: rotateZ(360deg); } } .container { animation: spin 10s linear infinite; }  See it on https://flavio-css-animations-tutorial.glitch.me\nYou can add more keyframes to have funnier animations:\n@keyframes spin { 0% { transform: rotateZ(0); } 25% { transform: rotateZ(30deg); } 50% { transform: rotateZ(270deg); } 75% { transform: rotateZ(180deg); } 100% { transform: rotateZ(360deg); } }  See the example on https://flavio-css-animations-four-steps.glitch.me\nThe CSS animation properties CSS animations offers a lot of different parameters you can tweak:\nThe animation property is a shorthand for all these properties, in this order:\n.container { animation: name duration timing-function delay iteration-count direction fill-mode play-state; }  This is the example we used above:\n.container { animation: spin 10s linear infinite; }  JavaScript events for CSS Animations Using JavaScript you can listen for the following events:\n animationstart animationend animationiteration  Be careful with animationstart, because if the animation starts on page load, your JavaScript code is always executed after the CSS has been processed, so the animation is already started and you cannot intercept the event.\nconst container = document.querySelector('.container') container.addEventListener('animationstart', (e) =\u0026gt; { //do something }, false) container.addEventListener('animationend', (e) =\u0026gt; { //do something }, false) container.addEventListener('animationiteration', (e) =\u0026gt; { //do something }, false)  Which Properties You Can Animate using CSS Animations A lot! They are the same you can animate using CSS Transitions, too.\nHere’s the full list:\n background background-color background-position background-size border border-color border-width border-bottom border-bottom-color border-bottom-left-radius border-bottom-right-radius border-bottom-width border-left border-left-color border-left-width border-radius border-right border-right-color border-right-width border-spacing border-top border-top-color border-top-left-radius border-top-right-radius border-top-width bottom box-shadow caret-color clip color column-count column-gap column-rule column-rule-color column-rule-width column-width columns content filter flex flex-basis flex-grow flex-shrink font font-size font-size-adjust font-stretch font-weight grid-area grid-auto-columns grid-auto-flow grid-auto-rows grid-column-end grid-column-gap grid-column-start grid-column grid-gap grid-row-end grid-row-gap grid-row-start grid-row grid-template-areas grid-template-columns grid-template-rows grid-template grid height left letter-spacing line-height margin margin-bottom margin-left margin-right margin-top max-height max-width min-height min-width opacity order outline outline-color outline-offset outline-width padding padding-bottom padding-left padding-right padding-top perspective perspective-origin quotes right tab-size text-decoration text-decoration-color text-indent text-shadow top transform. vertical-align visibility width word-spacing z-index  NORMALIZING CSS The default browser stylesheet is the set of rules that browsers have to apply to give some minimum style to elements.\nMost of the time those styles are very useful.\nSince every browser has its own set, it’s common to find a common ground.\nRather than removing all defaults, like one of the CSS reset approaches does, the normalizing process removes browser inconsistencies, while keeping a basic set of rules you can rely on.\nNormalize.css http://necolas.github.io/normalize.css is the most commonly used solution for this problem.\nYou must load the normalizing CSS file before any other CSS.\nERROR HANDLING CSS is resilient. When it finds an error, it does not act like JavaScript which packs up all its things and goes away altogether, terminating all the script executions after the error is found.\nCSS tries very hard to do what you want.\nIf a line has an error, it skips it and jumps to the next line without any error.\nIf you forget the semicolon on one line:\np { font-size: 20px color: black; border: 1px solid black; }  the line with the error AND the next one will not be applied, but the third rule will be successfully applied on the page. Basically, it scans all until it finds a semicolon, but when it reaches it, the rule is now font-size: 20px color: black;, which is invalid, so it skips it.\nSometimes it’s tricky to realize there is an error somewhere, and where that error is, because the browser won’t tell us.\nThis is why tools like CSS Lint exist.\nVENDOR PREFIXES Vendor prefixes are one way browsers use to give CSS developers access to newer features not yet considered stable.\nBefore going on, keep in mind that this approach is declining in popularity. People now favour using experimental flags, which must be enabled explicitly in the user’s browser.\nWhy? Because developers, instead of considering vendor prefixes as a way to preview features, sometimes ship them in production — something considered harmful by the CSS Working Group.\nMostly because once you add a flag and developers start using it in production, browsers are in a bad position if they realise something must change. With flags, you can’t ship a feature unless you can push all your visitors to enable that flag in their browser (just joking, don’t try).\nThat said, let’s see what vendor prefixes are.\nI specifically remember them for working with CSS Transitions in the past. Instead of just using the transition property, you had to do this:\n.myClass { -webkit-transition: all 1s linear; -moz-transition: all 1s linear; -ms-transition: all 1s linear; -o-transition: all 1s linear; transition: all 1s linear; }  Now you just use\n.myClass { transition: all 1s linear; }  since the property is now well supported by all modern browsers.\nThe prefixes used are:\n -webkit- (Chrome, Safari, iOS Safari / iOS WebView, Android) -moz- (Safari) -ms- (Edge, Internet Explorer) -o- (Opera, Opera Mini)  Since Opera is Chromium-based and Edge will soon be too, -o- and -ms- will probably soon go out of fashion. But as we said, vendor prefixes as a whole are going out of fashion, too.\nWriting prefixes is hard, mostly because of uncertainty. Do you actually need a prefix for one property? Several online resources are outdated, too, which makes it even harder to do right. Projects like Autoprefixer can automate the process in its entirety without us needing to find out if a prefix is needed any more, or the feature is now stable and the prefix should be dropped. It uses data from caniuse.com, a very good reference site for all things related to browser support.\nIf you use React or Vue, projects like create-react-app and Vue CLI, two common ways to start building an application, use autoprefixer out of the box, so you don\u0026rsquo;t even have to worry about it.\nCSS FOR PRINT Even though we increasingly stare at our screens, printing is still a thing.\nEven with blog posts. I remember one time back in 2009 I met a person that told me he made his personal assistant print every blog post I published (yes, I stared blankly for a little bit). Definitely unexpected.\nMy main use case for looking into printing usually is printing to a PDF. I might create something inside the browser, and I want to make it available as PDF.\nBrowsers make this very easy, with Chrome defaulting to “Save” when trying to print a document and a printer is not available, and Safari has a dedicated button in the menu bar:\nPrint CSS Some common things you might want to do when printing is to hide some parts of the document, maybe the footer, something in the header, the sidebar.\nMaybe you want to use a different font for printing, which is totally legit.\nIf you have a large CSS for print, you’d better use a separate file for it. Browsers will only download it when printing:\n\u0026lt;link rel=\u0026quot;stylesheet\u0026quot; src=\u0026quot;print.css\u0026quot; type=\u0026quot;text/css\u0026quot; media=\u0026quot;print\u0026quot; /\u0026gt;  CSS @media print An alternative to the previous approach is media queries. Anything you add inside this block:\n@media print { /* ... */ }  is going to be applied only to printed documents.\nLinks HTML is great because of links. It’s called HyperText for a good reason. When printing we might lose a lot of information, depending on the content.\nCSS offers a great way to solve this problem by editing the content, appending the link after the \u0026lt;;a\u0026gt; tag text, using:\n@media print { a[href*='//']:after { content:\u0026quot; (\u0026quot; attr(href) \u0026quot;) \u0026quot;; color: $primary; } }  I target a[href*='//'] to only do this for external links. I might have internal links for navigation and internal indexing purposes, which would be useless in most of my use cases. If you also want internal links to be printed, just do:\n@media print { a:after { content:\u0026quot; (\u0026quot; attr(href) \u0026quot;) \u0026quot;; color: $primary; } }  Page margins You can add margins to every single page. cm or in is a good unit for paper printing.\n@page { margin-top: 2cm; margin-bottom: 2cm; margin-left: 2cm; margin-right: 2cm; }  @page can also be used to only target the first page, using @page :first, or only the left and right pages using @page :left and @page: right.\nPage breaks You might want to add a page break after some elements, or before them. Use page-break-after and page-break-before:\n.book-date { page-break-after: always; } .post-content { page-break-before: always; }  Those properties accept a wide variety of values.\nAvoid breaking images in the middle I experienced this with Firefox: images by default are cut in the middle, and continue on the next page. It might also happen to text.\nUse\np { page-break-inside: avoid; }  and wrap your images in a p tag. Targeting img directly didn\u0026rsquo;t work in my tests.\nThis applies to other content as well, not just images. If you notice something is cut when you don’t want, use this property.\nDebug the printing presentation The Chrome DevTools offer ways to emulate the print layout:\nOnce the panel opens, change the rendering emulation to print:\nWRAPPING UP I hope this article helped you get up to speed with CSS and get an overview of the main features you can use to style your pages and apps. I wrote it to help you get comfortable with CSS and get you quickly up to speed with using this awesome tool that lets you create stunning designs on the Web, and I hope I achieved with this goal.\nClick here to get a PDF / ePub / Mobi version of this post to read offline\n Reference : https://www.freecodecamp.org\n ","date":1556064000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1556064000,"objectID":"8d42fbabebe037cc32e4816e84ed334c","permalink":"https://example.com/post/css-handbook/","publishdate":"2019-04-24T00:00:00Z","relpermalink":"/post/css-handbook/","section":"post","summary":"The CSS Handbook a handy guide to CSS for developers","tags":["Front-end","freeCodeCamp"],"title":"The CSS Handbook","type":"post"},{"authors":["Little Dragon"],"categories":null,"content":" Click the Slides button above to demo academia\u0026rsquo;s Markdown slides feature.   Supplementary notes can be added here, including code and math.\n","date":1554595200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554595200,"objectID":"557dc08fd4b672a0c08e0a8cf0c9ff7d","permalink":"https://example.com/publication/preprint/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/preprint/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example preprint / working paper","type":"publication"},{"authors":["Little Dragon"],"categories":[],"content":" from IPython.core.display import Image Image('https://www.python.org/static/community_logos/python-logo-master-v3-TM-flattened.png')  print(\u0026quot;Welcome to academia!\u0026quot;)  Welcome to academia!  Install Python and Jupyter Install Anaconda which includes Python 3 and Jupyter notebook.\nOtherwise, for advanced users, install Jupyter notebook with pip3 install jupyter.\nCreate a new blog post as usual Run the following commands in your Terminal, substituting \u0026lt;MY_WEBSITE_FOLDER\u0026gt; and my-post with the file path to your academia website folder and a name for your blog post (without spaces), respectively:\ncd \u0026lt;MY_WEBSITE_FOLDER\u0026gt; hugo new --kind post post/my-post cd \u0026lt;MY_WEBSITE_FOLDER\u0026gt;/content/post/my-post/  Create or upload a Jupyter notebook Run the following command to start Jupyter within your new blog post folder. Then create a new Jupyter notebook (New \u0026gt; Python Notebook) or upload a notebook.\njupyter notebook  Convert notebook to Markdown jupyter nbconvert Untitled.ipynb --to markdown --NbConvertApp.output_files_dir=. # Copy the contents of Untitled.md and append it to index.md: cat Untitled.md | tee -a index.md # Remove the temporary file: rm Untitled.md  Edit your post metadata Open index.md in your text editor and edit the title etc. in the front matter according to your preference.\nTo set a featured image, place an image named featured into your post\u0026rsquo;s folder.\nFor other tips, such as using math, see the guide on writing content with academia.\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"6e929dc84ed3ef80467b02e64cd2ed64","permalink":"https://example.com/post/jupyter/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/post/jupyter/","section":"post","summary":"Learn how to blog in academia using Jupyter notebooks","tags":[],"title":"Display Jupyter Notebooks with academia","type":"post"},{"authors":[],"categories":[],"content":" Welcome to Slides academia\nFeatures  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides  Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = \\;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \nA fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears  Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view   Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links   night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links  Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/img/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}  Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://example.com/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using academia's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":null,"categories":null,"content":"","date":1546300800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1546300800,"objectID":"3dfd3d3c0558c444fb02f8d70374b146","permalink":"https://example.com/python/","publishdate":"2019-01-01T00:00:00Z","relpermalink":"/python/","section":"","summary":"Hello!","tags":null,"title":"Python","type":"widget_page"},{"authors":["Little Dragon"],"categories":["Articles","Python"],"content":" First of all, what is Python? According to its creator, Guido van Rossum, Python is a:\n “high-level programming language, and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code.”\n For me, the first reason to learn Python was that it is, in fact, a beautiful programming language. It was really natural to code in it and express my thoughts.\nAnother reason was that we can use coding in Python in multiple ways: data science, web development, and machine learning all shine here. Quora, Pinterest and Spotify all use Python for their backend web development. So let’s learn a bit about it.\nThe Basics 1. Variables You can think about variables as words that store a value. Simple as that.\nIn Python, it is really easy to define a variable and set a value to it. Imagine you want to store number 1 in a variable called “one.” Let’s do it:\none = 1  How simple was that? You just assigned the value 1 to the variable “one.”\ntwo = 2 some_number = 10000  And you can assign any other value to whatever other variables you want. As you see in the table above, the variable “two” stores the integer 2, and “some_number” stores 10,000.\nBesides integers, we can also use booleans (True / False), strings, float, and so many other data types.\n# booleans true_boolean = True false_boolean = False # string my_name = \u0026quot;Leandro Tk\u0026quot; # float book_price = 15.80  2. Control Flow: conditional statements “If” uses an expression to evaluate whether a statement is True or False. If it is True, it executes what is inside the “if” statement. For example:\nif True: print(\u0026quot;Hello Python If\u0026quot;) if 2 \u0026gt; 1: print(\u0026quot;2 is greater than 1\u0026quot;)  2 is greater than 1, so the “print” code is executed.\nThe “else” statement will be executed if the “if” expression is false.\nif 1 \u0026gt; 2: print(\u0026quot;1 is greater than 2\u0026quot;) else: print(\u0026quot;1 is not greater than 2\u0026quot;)  1 is not greater than 2, so the code inside the “else” statement will be executed.\nYou can also use an “elif” statement:\nif 1 \u0026gt; 2: print(\u0026quot;1 is greater than 2\u0026quot;) elif 2 \u0026gt; 1: print(\u0026quot;1 is not greater than 2\u0026quot;) else: print(\u0026quot;1 is equal to 2\u0026quot;)  3. Looping / Iterator In Python, we can iterate in different forms. I’ll talk about two: while and for.\nWhile Looping: while the statement is True, the code inside the block will be executed. So, this code will print the number from 1 to 10.\nnum = 1 while num \u0026lt;= 10: print(num) num += 1  The while loop needs a “loop condition.” If it stays True, it continues iterating. In this example, when num is 11 the loop condition equals False.\nAnother basic bit of code to better understand it:\nloop_condition = True while loop_condition: print(\u0026quot;Loop Condition keeps: %s\u0026quot; %(loop_condition)) loop_condition = False  The loop condition is True so it keeps iterating — until we set it to False.\nFor Looping: you apply the variable “num” to the block, and the “for” statement will iterate it for you. This code will print the same as while code: from 1 to 10.\nfor i in range(1, 11): print(i)  See? It is so simple. The range starts with 1 and goes until the 11th element (10 is the 10th element).\nList: Collection | Array | Data Structure Imagine you want to store the integer 1 in a variable. But maybe now you want to store 2. And 3, 4, 5 …\nDo I have another way to store all the integers that I want, but not in millions of variables? You guessed it — there is indeed another way to store them.\nList is a collection that can be used to store a list of values (like these integers that you want). So let’s use it:\nmy_integers = [1, 2, 3, 4, 5]  It is really simple. We created an array and stored it on my_integer.\nBut maybe you are asking: “How can I get a value from this array?”\nGreat question. List has a concept called index. The first element gets the index 0 (zero). The second gets 1, and so on. You get the idea.\nTo make it clearer, we can represent the array and each element with its index. I can draw it:\nUsing the Python syntax, it’s also simple to understand:\nmy_integers = [5, 7, 1, 3, 4] print(my_integers[0]) # 5 print(my_integers[1]) # 7 print(my_integers[4]) # 4  Imagine that you don’t want to store integers. You just want to store strings, like a list of your relatives’ names. Mine would look something like this:\nrelatives_names = [ \u0026quot;Toshiaki\u0026quot;, \u0026quot;Juliana\u0026quot;, \u0026quot;Yuji\u0026quot;, \u0026quot;Bruno\u0026quot;, \u0026quot;Kaio\u0026quot; ] print(relatives_names[4]) # Kaio  It works the same way as integers. Nice.\nWe just learned how Lists indices work. But I still need to show you how we can add an element to the List data structure (an item to a list).\nThe most common method to add a new value to a List is append. Let’s see how it works:\nbookshelf = [] bookshelf.append(\u0026quot;The Effective Engineer\u0026quot;) bookshelf.append(\u0026quot;The 4 Hour Work Week\u0026quot;) print(bookshelf[0]) # The Effective Engineer print(bookshelf[1]) # The 4 Hour Work Week  append is super simple. You just need to apply the element (eg. “The Effective Engineer”) as the append parameter.\nWell, enough about Lists. Let’s talk about another data structure.\nDictionary: Key-Value Data Structure Now we know that Lists are indexed with integer numbers. But what if we don’t want to use integer numbers as indices? Some data structures that we can use are numeric, string, or other types of indices.\nLet’s learn about the Dictionary data structure. Dictionary is a collection of key-value pairs. Here’s what it looks like:\ndictionary_example = { \u0026quot;key1\u0026quot;: \u0026quot;value1\u0026quot;, \u0026quot;key2\u0026quot;: \u0026quot;value2\u0026quot;, \u0026quot;key3\u0026quot;: \u0026quot;value3\u0026quot; }  The key is the index pointing to the value. How do we access the Dictionary value? You guessed it — using the key. Let’s try it:\ndictionary_tk = { \u0026quot;name\u0026quot;: \u0026quot;Leandro\u0026quot;, \u0026quot;nickname\u0026quot;: \u0026quot;Tk\u0026quot;, \u0026quot;nationality\u0026quot;: \u0026quot;Brazilian\u0026quot; } print(\u0026quot;My name is %s\u0026quot; %(dictionary_tk[\u0026quot;name\u0026quot;])) # My name is Leandro print(\u0026quot;But you can call me %s\u0026quot; %(dictionary_tk[\u0026quot;nickname\u0026quot;])) # But you can call me Tk print(\u0026quot;And by the way I'm %s\u0026quot; %(dictionary_tk[\u0026quot;nationality\u0026quot;])) # And by the way I'm Brazilian  I created a Dictionary about me. My name, nickname, and nationality. Those attributes are the Dictionary keys.\nAs we learned how to access the List using index, we also use indices (keys in the Dictionary context) to access the value stored in the Dictionary.\nIn the example, I printed a phrase about me using all the values stored in the Dictionary. Pretty simple, right?\nAnother cool thing about Dictionary is that we can use anything as the value. In the Dictionary I created, I want to add the key “age” and my real integer age in it:\ndictionary_tk = { \u0026quot;name\u0026quot;: \u0026quot;Leandro\u0026quot;, \u0026quot;nickname\u0026quot;: \u0026quot;Tk\u0026quot;, \u0026quot;nationality\u0026quot;: \u0026quot;Brazilian\u0026quot;, \u0026quot;age\u0026quot;: 24 } print(\u0026quot;My name is %s\u0026quot; %(dictionary_tk[\u0026quot;name\u0026quot;])) # My name is Leandro print(\u0026quot;But you can call me %s\u0026quot; %(dictionary_tk[\u0026quot;nickname\u0026quot;])) # But you can call me Tk print(\u0026quot;And by the way I'm %i and %s\u0026quot; %(dictionary_tk[\u0026quot;age\u0026quot;], dictionary_tk[\u0026quot;nationality\u0026quot;])) # And by the way I'm Brazilian  Here we have a key (age) value (24) pair using string as the key and integer as the value.\nAs we did with Lists, let’s learn how to add elements to a Dictionary. The key pointing to a value is a big part of what Dictionary is. This is also true when we are talking about adding elements to it:\ndictionary_tk = { \u0026quot;name\u0026quot;: \u0026quot;Leandro\u0026quot;, \u0026quot;nickname\u0026quot;: \u0026quot;Tk\u0026quot;, \u0026quot;nationality\u0026quot;: \u0026quot;Brazilian\u0026quot; } dictionary_tk['age'] = 24 print(dictionary_tk) # {'nationality': 'Brazilian', 'age': 24, 'nickname': 'Tk', 'name': 'Leandro'}  We just need to assign a value to a Dictionary key. Nothing complicated here, right?\nIteration: Looping Through Data Structures As we learned in the Python Basics, the List iteration is very simple. We Python developers commonly use For looping. Let’s do it:\nbookshelf = [ \u0026quot;The Effective Engineer\u0026quot;, \u0026quot;The 4-hour Workweek\u0026quot;, \u0026quot;Zero to One\u0026quot;, \u0026quot;Lean Startup\u0026quot;, \u0026quot;Hooked\u0026quot; ] for book in bookshelf: print(book)  So for each book in the bookshelf, we (can do everything with it) print it. Pretty simple and intuitive. That’s Python.\nFor a hash data structure, we can also use the for loop, but we apply the key :\ndictionary = { \u0026quot;some_key\u0026quot;: \u0026quot;some_value\u0026quot; } for key in dictionary: print(\u0026quot;%s --\u0026gt; %s\u0026quot; %(key, dictionary[key])) # some_key --\u0026gt; some_value  This is an example how to use it. For each key in the dictionary , we print the key and its corresponding value.\nAnother way to do it is to use the iteritems method.\ndictionary = { \u0026quot;some_key\u0026quot;: \u0026quot;some_value\u0026quot; } for key, value in dictionary.items(): print(\u0026quot;%s --\u0026gt; %s\u0026quot; %(key, value)) # some_key --\u0026gt; some_value  We did name the two parameters as key and value, but it is not necessary. We can name them anything. Let’s see it:\ndictionary_tk = { \u0026quot;name\u0026quot;: \u0026quot;Leandro\u0026quot;, \u0026quot;nickname\u0026quot;: \u0026quot;Tk\u0026quot;, \u0026quot;nationality\u0026quot;: \u0026quot;Brazilian\u0026quot;, \u0026quot;age\u0026quot;: 24 } for attribute, value in dictionary_tk.items(): print(\u0026quot;My %s is %s\u0026quot; %(attribute, value)) # My name is Leandro # My nickname is Tk # My nationality is Brazilian # My age is 24  We can see we used attribute as a parameter for the Dictionary key, and it works properly. Great!\nClasses \u0026amp; Objects A little bit of theory: Objects are a representation of real world objects like cars, dogs, or bikes. The objects share two main characteristics: data and behavior.\nCars have data, like number of wheels, number of doors, and seating capacity They also exhibit behavior: they can accelerate, stop, show how much fuel is left, and so many other things.\nWe identify data as attributes and behavior as methods in object-oriented programming. Again:\nData → Attributes and Behavior → Methods\nAnd a Class is the blueprint from which individual objects are created. In the real world, we often find many objects with the same type. Like cars. All the same make and model (and all have an engine, wheels, doors, and so on). Each car was built from the same set of blueprints and has the same components.\nPython Object-Oriented Programming mode: ON Python, as an Object-Oriented programming language, has these concepts: class and object.\nA class is a blueprint, a model for its objects.\nSo again, a class it is just a model, or a way to define attributes and behavior (as we talked about in the theory section). As an example, a vehicle class has its own attributes that define what objects are vehicles. The number of wheels, type of tank, seating capacity, and maximum velocity are all attributes of a vehicle.\nWith this in mind, let’s look at Python syntax for classes:\nclass Vehicle: pass  We define classes with a class statement — and that’s it. Easy, isn’t it?\nObjects are instances of a class. We create an instance by naming the class.\ncar = Vehicle() print(car) # \u0026lt;__main__.Vehicle instance at 0x7fb1de6c2638\u0026gt;  Here car is an object (or instance) of the class Vehicle.\nRemember that our vehicle class has four attributes: number of wheels, type of tank, seating capacity, and maximum velocity. We set all these attributes when creating a vehicle object. So here, we define our class to receive data when it initiates it:\nclass Vehicle: def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity): self.number_of_wheels = number_of_wheels self.type_of_tank = type_of_tank self.seating_capacity = seating_capacity self.maximum_velocity = maximum_velocity  We use the init method. We call it a constructor method. So when we create the vehicle object, we can define these attributes. Imagine that we love the Tesla Model S, and we want to create this kind of object. It has four wheels, runs on electric energy, has space for five seats, and the maximum velocity is 250km/hour (155 mph). Let’s create this object:\ntesla_model_s = Vehicle(4, 'electric', 5, 250)  Four wheels + electric “tank type” + five seats + 250km/hour maximum speed.\nAll attributes are set. But how can we access these attributes’ values? We send a message to the object asking about them. We call it a method. It’s the object’s behavior. Let’s implement it:\nclass Vehicle: def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity): self.number_of_wheels = number_of_wheels self.type_of_tank = type_of_tank self.seating_capacity = seating_capacity self.maximum_velocity = maximum_velocity def number_of_wheels(self): return self.number_of_wheels def set_number_of_wheels(self, number): self.number_of_wheels = number  This is an implementation of two methods: number_of_wheels and set_number_of_wheels. We call it getter \u0026amp; setter. Because the first gets the attribute value, and the second sets a new value for the attribute.\nIn Python, we can do that using @property (decorators) to define getters and setters. Let’s see it with code:\nclass Vehicle: def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity): self.number_of_wheels = number_of_wheels self.type_of_tank = type_of_tank self.seating_capacity = seating_capacity self.maximum_velocity = maximum_velocity @property def number_of_wheels(self): return self.__number_of_wheels @number_of_wheels.setter def number_of_wheels(self, number): self.__number_of_wheels = number  And we can use these methods as attributes:\ntesla_model_s = Vehicle(4, 'electric', 5, 250) print(tesla_model_s.number_of_wheels) # 4 tesla_model_s.number_of_wheels = 2 # setting number of wheels to 2 print(tesla_model_s.number_of_wheels) # 2  This is slightly different than defining methods. The methods work as attributes. For example, when we set the new number of wheels, we don’t apply two as a parameter, but set the value 2 to number_of_wheels. This is one way to write pythonic getter and setter code.\nBut we can also use methods for other things, like the “make_noise” method. Let’s see it:\nclass Vehicle: def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity): self.number_of_wheels = number_of_wheels self.type_of_tank = type_of_tank self.seating_capacity = seating_capacity self.maximum_velocity = maximum_velocity def make_noise(self): print('VRUUUUUUUM')  When we call this method, it just returns a string _“_VRRRRUUUUM.”\ntesla_model_s = Vehicle(4, 'electric', 5, 250) tesla_model_s.make_noise() # VRUUUUUUUM  Encapsulation: Hiding Information Encapsulation is a mechanism that restricts direct access to objects’ data and methods. But at the same time, it facilitates operation on that data (objects’ methods).\n “Encapsulation can be used to hide data members and members function. Under this definition, encapsulation means that the internal representation of an object is generally hidden from view outside of the object’s definition.” — Wikipedia\n All internal representation of an object is hidden from the outside. Only the object can interact with its internal data.\nFirst, we need to understand how public and non-public instance variables and methods work.\nPublic Instance Variables For a Python class, we can initialize a public instance variable within our constructor method. Let’s see this:\nWithin the constructor method:\nclass Person: def __init__(self, first_name): self.first_name = first_name  Here we apply the first_name value as an argument to the public instance variable.\ntk = Person('TK') print(tk.first_name) # =\u0026gt; TK  Within the class:\nclass Person: first_name = 'TK'  Here, we do not need to apply the first_name as an argument, and all instance objects will have a class attribute initialized with TK.\ntk = Person() print(tk.first_name) # =\u0026gt; TK  Cool. We have now learned that we can use public instance variables and class attributes. Another interesting thing about the public part is that we can manage the variable value. What do I mean by that? Our object can manage its variable value: Get and Set variable values.\nKeeping the Person class in mind, we want to set another value to its first_name variable:\ntk = Person('TK') tk.first_name = 'Kaio' print(tk.first_name) # =\u0026gt; Kaio  There we go. We just set another value (kaio) to the first_name instance variable and it updated the value. Simple as that. Since it’s a public variable, we can do that.\nNon-public Instance Variable  We don’t use the term “private” here, since no attribute is really private in Python (without a generally unnecessary amount of work). — PEP 8\n As the public instance variable , we can define the non-public instance variable both within the constructor method or within the class. The syntax difference is: for non-public instance variables , use an underscore (_) before the variable name.\n “‘Private’ instance variables that cannot be accessed except from inside an object don’t exist in Python. However, there is a convention that is followed by most Python code: a name prefixed with an underscore (e.g. _spam) should be treated as a non-public part of the API (whether it is a function, a method or a data member)” — Python Software Foundation\n Here’s an example:\nclass Person: def __init__(self, first_name, email): self.first_name = first_name self._email = email  Did you see the email variable? This is how we define a non-public variable :\ntk = Person('TK', 'tk@mail.com') print(tk._email) # tk@mail.com   We can access and update it. Non-public variables are just a convention and should be treated as a non-public part of the API.\n So we use a method that allows us to do it inside our class definition. Let’s implement two methods (email and update_email) to understand it:\nclass Person: def __init__(self, first_name, email): self.first_name = first_name self._email = email def update_email(self, new_email): self._email = new_email def email(self): return self._email  Now we can update and access non-public variables using those methods. Let’s see:\ntk = Person('TK', 'tk@mail.com') print(tk.email()) # =\u0026gt; tk@mail.com # tk._email = 'new_tk@mail.com' -- treat as a non-public part of the class API print(tk.email()) # =\u0026gt; tk@mail.com tk.update_email('new_tk@mail.com') print(tk.email()) # =\u0026gt; new_tk@mail.com   We initiated a new object with first_name TK and email tk@mail.com Printed the email by accessing the non-public variable with a method Tried to set a new email out of our class We need to treat non-public variable as non-public part of the API Updated the non-public variable with our instance method Success! We can update it inside our class with the helper method  Public Method With public methods, we can also use them out of our class:\nclass Person: def __init__(self, first_name, age): self.first_name = first_name self._age = age def show_age(self): return self._age  Let’s test it:\ntk = Person('TK', 25) print(tk.show_age()) # =\u0026gt; 25  Great — we can use it without any problem.\nNon-public Method But with non-public methods we aren’t able to do it. Let’s implement the same Person class, but now with a show_age non-public method using an underscore (_).\nclass Person: def __init__(self, first_name, age): self.first_name = first_name self._age = age def _show_age(self): return self._age  And now, we’ll try to call this non-public method with our object:\ntk = Person('TK', 25) print(tk._show_age()) # =\u0026gt; 25   We can access and update it. Non-public methods are just a convention and should be treated as a non-public part of the API.\n Here’s an example for how we can use it:\nclass Person: def __init__(self, first_name, age): self.first_name = first_name self._age = age def show_age(self): return self._get_age() def _get_age(self): return self._age tk = Person('TK', 25) print(tk.show_age()) # =\u0026gt; 25  Here we have a _get_age non-public method and a show_age public method. The show_age can be used by our object (out of our class) and the _get_age only used inside our class definition (inside show_age method). But again: as a matter of convention.\nEncapsulation Summary With encapsulation we can ensure that the internal representation of the object is hidden from the outside.\nInheritance: behaviors and characteristics Certain objects have some things in common: their behavior and characteristics.\nFor example, I inherited some characteristics and behaviors from my father. I inherited his eyes and hair as characteristics, and his impatience and introversion as behaviors.\nIn object-oriented programming, classes can inherit common characteristics (data) and behavior (methods) from another class.\nLet’s see another example and implement it in Python.\nImagine a car. Number of wheels, seating capacity and maximum velocity are all attributes of a car. We can say that an ElectricCar class inherits these same attributes from the regular Car class.\nclass Car: def __init__(self, number_of_wheels, seating_capacity, maximum_velocity): self.number_of_wheels = number_of_wheels self.seating_capacity = seating_capacity self.maximum_velocity = maximum_velocity  Our Car class implemented:\nmy_car = Car(4, 5, 250) print(my_car.number_of_wheels) print(my_car.seating_capacity) print(my_car.maximum_velocity)  Once initiated, we can use all instance variables created. Nice.\nIn Python, we apply a parent class to the child class as a parameter. An ElectricCar class can inherit from our Car class.\nclass ElectricCar(Car): def __init__(self, number_of_wheels, seating_capacity, maximum_velocity): Car.__init__(self, number_of_wheels, seating_capacity, maximum_velocity)  Simple as that. We don’t need to implement any other method, because this class already has it (inherited from Car class). Let’s prove it:\nmy_electric_car = ElectricCar(4, 5, 250) print(my_electric_car.number_of_wheels) # =\u0026gt; 4 print(my_electric_car.seating_capacity) # =\u0026gt; 5 print(my_electric_car.maximum_velocity) # =\u0026gt; 250  Beautiful.\nThat’s it! We learned a lot of things about Python basics:\n How Python variables work How Python conditional statements work How Python looping (while \u0026amp; for) works How to use Lists: Collection | Array Dictionary Key-Value Collection How we can iterate through these data structures Objects and Classes Attributes as objects’ data Methods as objects’ behavior Using Python getters and setters \u0026amp; property decorator Encapsulation: hiding information Inheritance: behaviors and characteristics  Congrats! You completed this dense piece of content about Python.\nIf you want a complete Python course, learn more real-world coding skills and build projects, try One Month Python Bootcamp. See you there ☺\nFor more stories and posts about my journey learning \u0026amp; mastering programming, follow my publication The Renaissance Developer.\nHave fun, keep learning, and always keep coding.\nMy Twitter \u0026amp; Github. ☺\n Reference : freeCodeCamp\n ","date":1506729600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1506729600,"objectID":"28ee31b385a89837fe78c4e639ce0b14","permalink":"https://example.com/post/python/tutorials/zero_to_hero/","publishdate":"2017-09-30T00:00:00Z","relpermalink":"/post/python/tutorials/zero_to_hero/","section":"post","summary":"Python is a **“high-level programming language, and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code.”**","tags":["Beginner","freeCodeCamp"],"title":"Learning Python From Zero to Hero","type":"post"},{"authors":null,"categories":null,"content":"","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"a903a8fd061907c9182a22fe4aed4729","permalink":"https://example.com/project/artificial-intelligence/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/artificial-intelligence/","section":"project","summary":"Lorem ipsum dolor sit amet consectetur adipisicing elit. Magnam, eius.","tags":["Demo","robotics"],"title":"Artificial Intelligence","type":"project"},{"authors":null,"categories":null,"content":"","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"cbe0c24c174e9c23efd27e59e7e56acc","permalink":"https://example.com/project/deep-learning/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/deep-learning/","section":"project","summary":"Lorem ipsum dolor sit amet consectetur adipisicing elit. Magnam, eius.","tags":["Demo","Deep Learning"],"title":"Deep Learning","type":"project"},{"authors":null,"categories":null,"content":"","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"d1311ddf745551c9e117aa4bb7e28516","permalink":"https://example.com/project/external-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/external-project/","section":"project","summary":"An example of linking directly to an external project website using \"external_link\".","tags":["Demo"],"title":"External Project","type":"project"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"8f66d660a9a2edc2d08e68cc30f701f7","permalink":"https://example.com/project/internal-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/internal-project/","section":"project","summary":"An example of using the in-built project page.","tags":["Deep Learning"],"title":"Internal Project","type":"project"},{"authors":null,"categories":null,"content":"","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"2deecdf5e31bc09985d9db8bcee07248","permalink":"https://example.com/project/robotics/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/robotics/","section":"project","summary":"Lorem ipsum dolor sit amet consectetur adipisicing elit. Magnam, eius.","tags":["Robotics"],"title":"Robotics","type":"project"},{"authors":null,"categories":null,"content":"","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"e3d2cb9f760d662f43826965ea291872","permalink":"https://example.com/project/skin-cancer-ai/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/skin-cancer-ai/","section":"project","summary":"Lorem ipsum dolor sit amet consectetur adipisicing elit. Magnam, eius.","tags":["human"],"title":"Skin Cancer AI","type":"project"},{"authors":["Little Dragon"],"categories":[],"content":" Create a free website with academia using Markdown, Jupyter, or RStudio. Choose a beautiful color theme and build anything with the Page Builder - over 40 widgets, themes, and language packs included!\nCheck out the latest demo of what you\u0026rsquo;ll get in less than 10 minutes, or view the showcase of personal, project, and business sites.\n Setup academia Get Started View the documentation Ask a question Request a feature or report a bug Updating? View the Update Guide and Release Notes Support development of academia:  Donate a coffee Become a backer on Patreon Decorate your laptop or journal with an academia sticker Wear the T-shirt   \nKey features:\n Page builder - Create anything with widgets and elements Edit any type of content - Blog posts, publications, talks, slides, projects, and more! Create content in Markdown, Jupyter, or RStudio Plugin System - Fully customizable color and font themes Display Code and Math - Code highlighting and LaTeX math supported Integrations - Google Analytics, Disqus commenting, Maps, Contact Forms, and more! Beautiful Site - Simple and refreshing one page design Industry-Leading SEO - Help get your website found on search engines and social media Media Galleries - Display your images and videos with captions in a customizable gallery Mobile Friendly - Look amazing on every screen with a mobile friendly version of your site Multi-language - 15+ language packs including English, 中文, and Português Multi-user - Each author gets their own profile page Privacy Pack - Assists with GDPR Stand Out - Bring your site to life with animation, parallax backgrounds, and scroll effects One-Click Deployment - No servers. No databases. Only files.  Color Themes academia comes with day (light) and night (dark) mode built-in. Click the sun/moon icon in the top right of the Demo to see it in action!\nChoose a stunning color and font theme for your site. Themes are fully customizable and include:\n         Ecosystem  academia Admin: An admin tool to import publications from BibTeX or import assets for an offline site academia Scripts: Scripts to help migrate content to new versions of academia  Install You can choose from one of the following four methods to install:\n one-click install using your web browser (recommended) install on your computer using Git with the Command Prompt/Terminal app install on your computer by downloading the ZIP files install on your computer with RStudio  Then personalize and deploy your new site.\nUpdating View the Update Guide.\nFeel free to star the project on Github to help keep track of updates.\nLicense Copyright 2016-present George Cushen.\nReleased under the MIT license.\n","date":1461110400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1555459200,"objectID":"737a4d9f40e4da19ee82ee5cb6985167","permalink":"https://example.com/post/snail/","publishdate":"2016-04-20T00:00:00Z","relpermalink":"/post/snail/","section":"post","summary":"Create a beautifully simple website in under 10 minutes.","tags":["academia"],"title":"A Study of Snail Behavior","type":"post"},{"authors":["Little Dragon"],"categories":[],"content":" Create a free website with academia using Markdown, Jupyter, or RStudio. Choose a beautiful color theme and build anything with the Page Builder - over 40 widgets, themes, and language packs included!\nCheck out the latest demo of what you\u0026rsquo;ll get in less than 10 minutes, or view the showcase of personal, project, and business sites.\n Setup academia Get Started View the documentation Ask a question Request a feature or report a bug Updating? View the Update Guide and Release Notes Support development of academia:  Donate a coffee Become a backer on Patreon Decorate your laptop or journal with an academia sticker Wear the T-shirt   \nKey features:\n Page builder - Create anything with widgets and elements Edit any type of content - Blog posts, publications, talks, slides, projects, and more! Create content in Markdown, Jupyter, or RStudio Plugin System - Fully customizable color and font themes Display Code and Math - Code highlighting and LaTeX math supported Integrations - Google Analytics, Disqus commenting, Maps, Contact Forms, and more! Beautiful Site - Simple and refreshing one page design Industry-Leading SEO - Help get your website found on search engines and social media Media Galleries - Display your images and videos with captions in a customizable gallery Mobile Friendly - Look amazing on every screen with a mobile friendly version of your site Multi-language - 15+ language packs including English, 中文, and Português Multi-user - Each author gets their own profile page Privacy Pack - Assists with GDPR Stand Out - Bring your site to life with animation, parallax backgrounds, and scroll effects One-Click Deployment - No servers. No databases. Only files.  Color Themes academia comes with day (light) and night (dark) mode built-in. Click the sun/moon icon in the top right of the Demo to see it in action!\nChoose a stunning color and font theme for your site. Themes are fully customizable and include:\n         Ecosystem  academia Admin: An admin tool to import publications from BibTeX or import assets for an offline site academia Scripts: Scripts to help migrate content to new versions of academia  Install You can choose from one of the following four methods to install:\n one-click install using your web browser (recommended) install on your computer using Git with the Command Prompt/Terminal app install on your computer by downloading the ZIP files install on your computer with RStudio  Then personalize and deploy your new site.\nUpdating View the Update Guide.\nFeel free to star the project on Github to help keep track of updates.\nLicense Copyright 2016-present George Cushen.\nReleased under the MIT license.\n","date":1461110400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1555459200,"objectID":"279b9966ca9cf3121ce924dca452bb1c","permalink":"https://example.com/post/getting-started/","publishdate":"2016-04-20T00:00:00Z","relpermalink":"/post/getting-started/","section":"post","summary":"Create a beautifully simple website in under 10 minutes.","tags":["academia"],"title":"academia: the website builder for Hugo","type":"post"},{"authors":["Little Dragon","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Click the Slides button above to demo academia\u0026rsquo;s Markdown slides feature.   Supplementary notes can be added here, including code and math.\n","date":1441065600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1441065600,"objectID":"966884cc0d8ac9e31fab966c4534e973","permalink":"https://example.com/publication/journal-article/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/journal-article/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example journal article","type":"publication"},{"authors":["Little Dragon","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Click the Slides button above to demo academia\u0026rsquo;s Markdown slides feature.   Supplementary notes can be added here, including code and math.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372636800,"objectID":"69425fb10d4db090cfbd46854715582c","permalink":"https://example.com/publication/conference-paper/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/conference-paper/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example conference paper","type":"publication"}]