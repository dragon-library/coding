<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sarawut Wongsanga | e-Library</title>
    <link>https://dragon-library.github.io/docs/author/sarawut-wongsanga/</link>
      <atom:link href="https://dragon-library.github.io/docs/author/sarawut-wongsanga/index.xml" rel="self" type="application/rss+xml" />
    <description>Sarawut Wongsanga</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sun, 10 May 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://dragon-library.github.io/docs/author/sarawut-wongsanga/avatar_hu52a603635ecebd45650b162dadabb4e5_12861_270x270_fill_q90_lanczos_center.jpg</url>
      <title>Sarawut Wongsanga</title>
      <link>https://dragon-library.github.io/docs/author/sarawut-wongsanga/</link>
    </image>
    
    <item>
      <title>Collections.Counter</title>
      <link>https://dragon-library.github.io/docs/post/collections/</link>
      <pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate>
      <guid>https://dragon-library.github.io/docs/post/collections/</guid>
      <description>&lt;p&gt;มอดูล collections ของไพธอนประกอบไปด้วยออบเจ็กต์จิปาถะที่อาจสะดวกที่จะใช้ในงานบางอย่าง เช่น collections.OrderedDict ที่ได้เขียนไปใน &lt;a href=&#34;https://phyblas.hinaboshi.com/20190706&#34;&gt;https://phyblas.hinaboshi.com/20190706&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ในบทความนี้จะแนะนำออบเจ็กต์อีกตัวที่อาจมีโอกาสได้ใช้บ่อย คือ collections.Counter Counter เป็นออบเจ็กต์ที่ใช้งานสะดวก ในเวลาที่เราต้องการจะนับจำนวนของอะไรบางอย่างว่ามีอะไรอยู่เท่าไหร่ เช่น มีลิสต์ที่มีตัวเลขอยู่จำนวนหนึ่ง ต้องการจะนับดูว่ามีตัวเลขอะไรอยู่เท่าไหร่ ถ้าใช้ดิกชันนารีทั่วไป อาจเขียนได้แบบนี้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lislek = [12,10,11,12,14,11,11,13,11,10,13,12]
naplek = {}
for lek in lislek:
    if(lek in naplek):
        naplek[lek] += 1
    else:
        naplek[lek] = 1

print(naplek) # ได้ {12: 3, 10: 2, 11: 4, 14: 1, 13: 2}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;แต่ถ้าใช้ Counter ก็จะทำได้โดยง่าย โดยแค่ใส่ลิสต์นั้นลงไปก็จะทำการนับให้เลย&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from collections import Counter

lislek = [22,20,21,22,24,21,21,23,21,20,23,22]
naplek = Counter(lislek)
print(naplek) # ได้ Counter({21: 4, 22: 3, 20: 2, 23: 2, 24: 1})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ผลที่ได้จะได้เป็นออบเจ็กต์ Counter ที่เรียงลำดับตามจำนวนจากมากไปน้อยให้เลย&lt;/p&gt;

&lt;p&gt;ออบเจ็กต์ Counter นี้โดยพื้นฐานแล้วมีส่วนคล้ายกับออบเจ็กต์ชนิดดิกชันนารี คือสามารถดูค่าได้โดยใส่คีย์ เพียงแต่ถ้าใส่คีย์ที่ไม่มีจะได้ค่า 0 และมีเมธอด .values() .keys() .items() และสามารถแปลงเป็นดิกชันนารีได้โดยง่าย&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(naplek[22]) # ได้ 3
print(naplek[26]) # ได้ 0
print(naplek.keys()) # ได้ dict_keys([22, 20, 21, 24, 23])
print(naplek.values()) # ได้ dict_values([3, 2, 4, 1, 2])
print(naplek.items()) # ได้ dict_items([(22, 3), (20, 2), (21, 4), (24, 1), (23, 2)])
print(dict(naplek)) # ได้ {22: 3, 20: 2, 21: 4, 24: 1, 23: 2}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ตั้งแต่ไพธอน 3.6 เป็นต้นไปดิกชันนารีจะเรียงอย่างมีลำดับ ดังนั้น Counter เมื่อแปลงเป็นดิกชันนารีแล้วลำดับในที่นี้จะเรียงตามลำดับก่อนหลังที่เริ่มเจอตัวแรก เหมือนอย่างในตัวอย่างแรกที่วนไล่ด้วย for สร้างดิกชันนารีขึ้นมาเอง&lt;/p&gt;

&lt;p&gt;Counter นอกจากจะใช้กับลิสต์แล้วก็ยังใช้กับสายอักขระได้ด้วย โดยถ้าป้อนสายอักขระลงไปมันก็จะช่วยนับจำนวนให้ว่ามีอักษรตัวไหนอยู่กี่ตัว&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;napakson = Counter(&#39;จอดรถตรงตรอกยอมทนอดนอนอดกรนรอยลภมรดมดอกหอมบนขอนตรงคลองมอญ&#39;)
print(napakson) # ได้ Counter({&#39;อ&#39;: 12, &#39;ร&#39;: 7, &#39;น&#39;: 6, &#39;ด&#39;: 5, &#39;ม&#39;: 5, &#39;ต&#39;: 3, &#39;ง&#39;: 3, &#39;ก&#39;: 3, &#39;ย&#39;: 2, &#39;ล&#39;: 2, &#39;จ&#39;: 1, &#39;ถ&#39;: 1, &#39;ท&#39;: 1, &#39;ภ&#39;: 1, &#39;ห&#39;: 1, &#39;บ&#39;: 1, &#39;ข&#39;: 1, &#39;ค&#39;: 1, &#39;ญ&#39;: 1})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Counter ที่สร้างมาแล้วสามารถเพิ่มข้อมูลลงไปได้ เช่นโดยใช้ +=&lt;/p&gt;

&lt;p&gt;เช่นอาจลองสร้าง Counter ว่างเปล่าแล้วค่อยๆใส่สมาชิกเพิ่มเข้าไป โดยไล่นับเพิ่มไปเรื่อยๆเช่น&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lislek = [2,1,4,5,2,6,2,6,3,2,4,1,2,2,3,2,1,4,2,4]
naplek = Counter()
for lek in lislek:
    naplek[lek] += 1

print(naplek)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;หรืออาจใช้เมธอด .update() เพื่อทำการเพิ่มข้อมูลใส่เข้าไปเรื่อยๆเช่น&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;napakson = Counter()
napakson.update(&#39;กนกพล&#39;)
print(napakson) # ได้ Counter({&#39;ก&#39;: 2, &#39;น&#39;: 1, &#39;พ&#39;: 1, &#39;ล&#39;: 1})
napakson.update(&#39;คนตลก&#39;)
print(napakson) # ได้ Counter({&#39;ก&#39;: 3, &#39;น&#39;: 2, &#39;ล&#39;: 2, &#39;พ&#39;: 1, &#39;ค&#39;: 1, &#39;ต&#39;: 1})
napakson.update(&#39;ตกคลอง&#39;)
print(napakson) # ได้ Counter({&#39;ก&#39;: 4, &#39;ล&#39;: 3, &#39;น&#39;: 2, &#39;ค&#39;: 2, &#39;ต&#39;: 2, &#39;พ&#39;: 1, &#39;อ&#39;: 1, &#39;ง&#39;: 1})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;นอกจากนี้ยังสามารถสร้างโดยแทนเลขจำนวนข้อมูลเข้าไป เช่นเดียวกับเวลาสร้างดิกชันนารีก็ได้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nap = Counter(a=7,b=2)
print(nap) # ได้ Counter({&#39;a&#39;: 7, &#39;b&#39;: 2})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;หรือจะสร้างโดยแปลงจากดิกชันนารีก็ได้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dic = {11: 2, 13: 4}
nap = Counter(dic)
print(nap) # ได้ Counter({13: 4, 11: 2})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;กรณีที่สร้างด้วยวิธีนี้ ค่าอาจจะไม่ใช่ตัวเลขก็ได้ ไม่ทำให้เกิดข้อผิดพลาดอะไร แต่ถ้าตัวที่ไม่ใช่ตัวเลขถูกใส่ข้อมูลเพิ่มเช่นใช้เมธอด .update() ในสภาพแบบนั้นก็จะเกิดข้อผิดพลาด&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nap = Counter({&amp;quot;ก&amp;quot;: &amp;quot;ข&amp;quot;, &amp;quot;ค&amp;quot;: &amp;quot;ง&amp;quot;})
print(nap) # ได้ Counter({&#39;ค&#39;: &#39;ง&#39;, &#39;ก&#39;: &#39;ข&#39;})
nap.update(&amp;quot;ก&amp;quot;) # ได้ TypeError: can only concatenate str (not &amp;quot;int&amp;quot;) to str
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ถ้าใช้เมธอด .most_common() จะได้ลิสต์ของแต่ละคู่โดยเรียงจากมากไปน้อยตามจำนวนลำดับที่กำหนด แต่ถ้าไม่ได้ใส่เลขลำดับจะแสดงทั้งหมด&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nap = Counter(&#39;สมพรสวดวนจนอรชรสองคนฉงนฉงวยงวยงงคอตกยอมนอนลงบนบก&#39;)
print(nap.most_common(3)) # ได้ [(&#39;น&#39;, 7), (&#39;ง&#39;, 7), (&#39;อ&#39;, 5)]
print(nap.most_common()) # ได้ [(&#39;น&#39;, 7), (&#39;ง&#39;, 7), (&#39;อ&#39;, 5), (&#39;ว&#39;, 4), (&#39;ส&#39;, 3), (&#39;ร&#39;, 3), (&#39;ย&#39;, 3), (&#39;ม&#39;, 2), (&#39;ค&#39;, 2), (&#39;ฉ&#39;, 2), (&#39;ก&#39;, 2), (&#39;บ&#39;, 2), (&#39;พ&#39;, 1), (&#39;ด&#39;, 1), (&#39;จ&#39;, 1), (&#39;ช&#39;, 1), (&#39;ต&#39;, 1), (&#39;ล&#39;, 1)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ถ้าใช้เมธอด .elements() จะได้อิเทอเรเตอร์ที่ไล่สมาชิกที่มีในนั้นทีละตัว&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nap = Counter(&#39;ดวงกมลชงนมผงรอชมภมรบนดอน&#39;)
print(nap) # ได้ Counter({&#39;ม&#39;: 4, &#39;ง&#39;: 3, &#39;น&#39;: 3, &#39;ด&#39;: 2, &#39;ช&#39;: 2, &#39;ร&#39;: 2, &#39;อ&#39;: 2, &#39;ว&#39;: 1, &#39;ก&#39;: 1, &#39;ล&#39;: 1, &#39;ผ&#39;: 1, &#39;ภ&#39;: 1, &#39;บ&#39;: 1})
el = nap.elements()
print(el) # ได้ &amp;lt;itertools.chain object at 0x10bbfae50&amp;gt;
print(list(el)) # ได้ [&#39;ด&#39;, &#39;ด&#39;, &#39;ว&#39;, &#39;ง&#39;, &#39;ง&#39;, &#39;ง&#39;, &#39;ก&#39;, &#39;ม&#39;, &#39;ม&#39;, &#39;ม&#39;, &#39;ม&#39;, &#39;ล&#39;, &#39;ช&#39;, &#39;ช&#39;, &#39;น&#39;, &#39;น&#39;, &#39;น&#39;, &#39;ผ&#39;, &#39;ร&#39;, &#39;ร&#39;, &#39;อ&#39;, &#39;อ&#39;, &#39;ภ&#39;, &#39;บ&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;กรณีที่สร้างโดยกำหนดจำนวนเข้าไปโดยตรงก็จะออกมาเรียงตามลำดับที่ใส่โดยตัวเดียวกันอยู่ติดกัน&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nap = Counter(na=3,ka=4,ma=2)
print(list(nap.elements())) # ได้ [&#39;na&#39;, &#39;na&#39;, &#39;na&#39;, &#39;ka&#39;, &#39;ka&#39;, &#39;ka&#39;, &#39;ka&#39;, &#39;ma&#39;, &#39;ma&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Counter สามารถนำมาบวกลบกันได้ โดยการบวกจะเป็นการเอาสมาชิกที่มีมารวมกัน&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = Counter(&#39;ปลวกจกหนอนลงคอ&#39;)
b = Counter(&#39;คงลอยคอลอยวน&#39;)
print(a) # ได้ Counter({&#39;ล&#39;: 2, &#39;ก&#39;: 2, &#39;น&#39;: 2, &#39;อ&#39;: 2, &#39;ป&#39;: 1, &#39;ว&#39;: 1, &#39;จ&#39;: 1, &#39;ห&#39;: 1, &#39;ง&#39;: 1, &#39;ค&#39;: 1})
print(b) # ได้ Counter({&#39;อ&#39;: 3, &#39;ค&#39;: 2, &#39;ล&#39;: 2, &#39;ย&#39;: 2, &#39;ง&#39;: 1, &#39;ว&#39;: 1, &#39;น&#39;: 1})
print(a+b) # ได้ Counter({&#39;อ&#39;: 5, &#39;ล&#39;: 4, &#39;น&#39;: 3, &#39;ค&#39;: 3, &#39;ว&#39;: 2, &#39;ก&#39;: 2, &#39;ง&#39;: 2, &#39;ย&#39;: 2, &#39;ป&#39;: 1, &#39;จ&#39;: 1, &#39;ห&#39;: 1})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ส่วนการลบจะเอามาหักลบกัน เพียงแต่ถ้าติดลบหรือเป็น 0 จะหายไปเลย ไม่แสดง&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = Counter(&#39;พลพรรคครบสองคน&#39;)
b = Counter(&#39;ลงคอรอครอบครอง&#39;)
print(a) # ได้ Counter({&#39;ร&#39;: 3, &#39;ค&#39;: 3, &#39;พ&#39;: 2, &#39;ล&#39;: 1, &#39;บ&#39;: 1, &#39;ส&#39;: 1, &#39;อ&#39;: 1, &#39;ง&#39;: 1, &#39;น&#39;: 1})
print(b) # ได้ Counter({&#39;อ&#39;: 4, &#39;ค&#39;: 3, &#39;ร&#39;: 3, &#39;ง&#39;: 2, &#39;ล&#39;: 1, &#39;บ&#39;: 1})
print(a-b) # ได้ Counter({&#39;พ&#39;: 2, &#39;ส&#39;: 1, &#39;น&#39;: 1})
print(b-a) # ได้ Counter({&#39;อ&#39;: 3, &#39;ง&#39;: 1})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;นอกจากนี้ยังมีคุณสมบัติแปลกๆเช่นถ้ามีจำนวนทั้งบวกและลบอยู่ในนี้ หากเจอเครื่องหมายบวกจะกำจัดตัวที่เป็นลบ หากเจอเครื่องหมายลบจะเหลือแต่ตัวที่เป็นลบ และค่าจะกลายเป็นบวก&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nap = Counter(ha=3,na=-2,ya=-4)
print(+nap) # ได้ Counter({&#39;ha&#39;: 3})
print(-nap) # ได้ Counter({&#39;ya&#39;: 4, &#39;na&#39;: 2})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;สามารถใช้ตัวดำเนินการ &amp;amp; และ | ซึ่งจะให้ผลคล้ายกับการอินเตอร์เซ็กและยูเนียนกันของเซ็ต&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = Counter(&#39;สองสมรยอมลงคลองลอยคอ&#39;)
b = Counter(&#39;รอชวนภมรดมดอมดอกขจร&#39;)
print(a) # ได้ Counter({&#39;อ&#39;: 5, &#39;ง&#39;: 3, &#39;ล&#39;: 3, &#39;ส&#39;: 2, &#39;ม&#39;: 2, &#39;ย&#39;: 2, &#39;ค&#39;: 2, &#39;ร&#39;: 1})
print(b) # ได้ Counter({&#39;ร&#39;: 3, &#39;อ&#39;: 3, &#39;ม&#39;: 3, &#39;ด&#39;: 3, &#39;ช&#39;: 1, &#39;ว&#39;: 1, &#39;น&#39;: 1, &#39;ภ&#39;: 1, &#39;ก&#39;: 1, &#39;ข&#39;: 1, &#39;จ&#39;: 1})
print(a|b) # ได้ Counter({&#39;อ&#39;: 5, &#39;ง&#39;: 3, &#39;ม&#39;: 3, &#39;ร&#39;: 3, &#39;ล&#39;: 3, &#39;ด&#39;: 3, &#39;ส&#39;: 2, &#39;ย&#39;: 2, &#39;ค&#39;: 2, &#39;ช&#39;: 1, &#39;ว&#39;: 1, &#39;น&#39;: 1, &#39;ภ&#39;: 1, &#39;ก&#39;: 1, &#39;ข&#39;: 1, &#39;จ&#39;: 1})
print(b&amp;amp;a) # ได้ Counter({&#39;อ&#39;: 3, &#39;ม&#39;: 2, &#39;ร&#39;: 1})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;เมธอด .subtract() จะให้ผลคล้ายกับการเอามาลบกัน แต่จะเป็นการเปลี่ยนแปลง Counter ตัวทางซ้าย (ตัวที่ใช้เมธอด) แทนที่จะคืนค่า และจำนวนที่เป็น 0 และติดลบจะยังคงเหลืออยู่&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = Counter(&#39;ฝนตกตลอด&#39;)
b = Counter(&#39;ตกตรงตรอก&#39;)
print(a) # ได้ Counter({&#39;ต&#39;: 2, &#39;ฝ&#39;: 1, &#39;น&#39;: 1, &#39;ก&#39;: 1, &#39;ล&#39;: 1, &#39;อ&#39;: 1, &#39;ด&#39;: 1})
print(b) # ได้ Counter({&#39;ต&#39;: 3, &#39;ก&#39;: 2, &#39;ร&#39;: 2, &#39;ง&#39;: 1, &#39;อ&#39;: 1})
a.subtract(b)
print(a) # ได้ Counter({&#39;ฝ&#39;: 1, &#39;น&#39;: 1, &#39;ล&#39;: 1, &#39;ด&#39;: 1, &#39;อ&#39;: 0, &#39;ต&#39;: -1, &#39;ก&#39;: -1, &#39;ง&#39;: -1, &#39;ร&#39;: -2})
a.subtract(b)
print(a) # ได้ Counter({&#39;ฝ&#39;: 1, &#39;น&#39;: 1, &#39;ล&#39;: 1, &#39;ด&#39;: 1, &#39;อ&#39;: -1, &#39;ง&#39;: -2, &#39;ก&#39;: -3, &#39;ต&#39;: -4, &#39;ร&#39;: -4})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;สุดท้ายขอยกตัวอย่างการนำมาประยุกต์ใช้งาน เช่นนับจำนวนเฉพาะที่เป็นองค์ประกอบในตัวเลข&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def yaek(n):
    nap = Counter()
    i = 2
    while(i*2&amp;lt;=n):
        if(n%i==0):
            nap[i] += 1
            n = n//i
        elif(i==2):
            i += 1
        else:
            i += 2
    if(n!=1):
        nap[n] += 1
    return nap

print(yaek(104)) # ได้ Counter({2: 3, 13: 1})
print(yaek(150)) # ได้ Counter({5: 2, 2: 1, 3: 1})
print(yaek(508)) # ได้ Counter({2: 2, 127: 1})
print(yaek(4500)) # ได้ Counter({5: 3, 2: 2, 3: 2})
print(yaek(16129)) # ได้ Counter({127: 2})
print(yaek(19600)) # ได้ Counter({2: 4, 5: 2, 7: 2})
print(yaek(51000)) # ได้ Counter({2: 3, 5: 3, 3: 1, 17: 1})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reference : &lt;a href=&#34;https://phyblas.hinaboshi.com/20200413&#34;&gt;https://phyblas.hinaboshi.com&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Stock Data</title>
      <link>https://dragon-library.github.io/docs/post/notebook/</link>
      <pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://dragon-library.github.io/docs/post/notebook/</guid>
      <description>

&lt;h2 id=&#34;install-python-and-jupyterlab&#34;&gt;Install Python and JupyterLab&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from IPython.core.display import Image
Image(&#39;https://www.python.org/static/community_logos/python-logo-master-v3-TM-flattened.png&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Welcome to Academic!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Welcome to Academic!
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;install-python-and-jupyterlab-1&#34;&gt;Install Python and JupyterLab&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.anaconda.com/distribution/#download-section&#34;&gt;Install Anaconda&lt;/a&gt; which includes Python 3 and JupyterLab.&lt;/p&gt;

&lt;p&gt;Alternatively, install JupyterLab with &lt;code&gt;pip3 install jupyterlab&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;create-or-upload-a-jupyter-notebook&#34;&gt;Create or upload a Jupyter notebook&lt;/h2&gt;

&lt;p&gt;Run the following commands in your Terminal, substituting &lt;code&gt;&amp;lt;MY-WEBSITE-FOLDER&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;SHORT-POST-TITLE&amp;gt;&lt;/code&gt; with the file path to your Academic website folder and a short title for your blog post (use hyphens instead of spaces), respectively:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p &amp;lt;MY-WEBSITE-FOLDER&amp;gt;/content/post/&amp;lt;SHORT-POST-TITLE&amp;gt;/
cd &amp;lt;MY-WEBSITE-FOLDER&amp;gt;/content/post/&amp;lt;SHORT-POST-TITLE&amp;gt;/
jupyter lab index.ipynb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;jupyter&lt;/code&gt; command above will launch the JupyterLab editor, allowing us to add Academic metadata and write the content.&lt;/p&gt;

&lt;h2 id=&#34;edit-your-post-metadata&#34;&gt;Edit your post metadata&lt;/h2&gt;

&lt;p&gt;The first cell of your Jupter notebook will contain your post metadata (&lt;a href=&#34;https://sourcethemes.com/academic/docs/front-matter/&#34;&gt;front matter&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;In Jupter, choose &lt;em&gt;Markdown&lt;/em&gt; as the type of the first cell and wrap your Academic metadata in three dashes, indicating that it is YAML front matter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title: My post&#39;s title
date: 2019-09-01

# Put any other Academic metadata here...
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Edit the metadata of your post, using the &lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content&#34;&gt;documentation&lt;/a&gt; as a guide to the available options.&lt;/p&gt;

&lt;p&gt;To set a &lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/#featured-image&#34;&gt;featured image&lt;/a&gt;, place an image named &lt;code&gt;featured&lt;/code&gt; into your post&amp;rsquo;s folder.&lt;/p&gt;

&lt;p&gt;For other tips, such as using math, see the guide on &lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34;&gt;writing content with Academic&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;convert-notebook-to-markdown&#34;&gt;Convert notebook to Markdown&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;jupyter nbconvert index.ipynb --to markdown --NbConvertApp.output_files_dir=.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;p&gt;This post was created with Jupyter. The orginal files can be found at &lt;a href=&#34;https://github.com/gcushen/hugo-academic/tree/master/exampleSite/content/post/jupyter&#34;&gt;https://github.com/gcushen/hugo-academic/tree/master/exampleSite/content/post/jupyter&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>สรุปบทเรียน Learning How to Learn</title>
      <link>https://dragon-library.github.io/docs/post/learning-how/</link>
      <pubDate>Sun, 29 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://dragon-library.github.io/docs/post/learning-how/</guid>
      <description>

&lt;p&gt;ในยุคแห่ง Dataยุคแห่งข้อมูลข่าวสาร ความรู้หรือวุฒิการศึกษาที่เรามี อาจไม่เพียงพอ และไม่ทันกับการเปลี่ยนแปลงต่างๆ ที่เกิดขึ้นอย่างรวดเร็ว&lt;/p&gt;

&lt;p&gt;หนึ่งในคุณสมบัติที่ดีเพื่อการปรับตัวอยู่รอดให้ได้ในยุคนี้ คือการเป็นคนที่ต้องเรียนรู้อยู่ตลอดเวลา&lt;/p&gt;

&lt;p&gt;การจะเรียนรู้สิ่งต่างๆได้ดี มีประสิทธิภาพ ก็ต้องเริ่มจากการรู้ว่า “วิธีการเรียนที่ดี” นั้นเป็นอย่างไร&lt;/p&gt;

&lt;p&gt;นี่คือที่มาของสรุปบทเรียน “Learning how to Learn”​ คอร์สเรียนออนไลน์ (MOOC) ที่มีผู้ชมมากที่สุดในโลก (ยอดลงทะเบียน ณ 19/06/19 = 1,714,748 คน) ซึ่งเริ่มเปิดสอนตั้งแต่สิงหา 2014 ที่  &lt;a href=&#34;https://www.coursera.org/learn/learning-how-to-learn&#34;&gt;Coursera.org&lt;/a&gt;  อาจารย์ผู้สอนในคอร์สนี้มีสองคนคือ&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Dr. Barbara Oakley : ศาสตราจารย์ด้านวิศวกรรมศาสตร์ แห่ง Oakland University ซึ่งเดิมนั้นเธอเป็นคนที่เกลียดวิชาคณิตศาสตร์อย่างมาก เธอเข้าทำงานในกองทัพสหรัฐอเมริกาและเรียนจบมาในด้านภาษา แต่ภายหลังก็อยากท้ทาทายความสามารถของสมองตัวเอง ว่าจากที่เรียนมาแต่ด้านภาษา จะไปรอดในวิชาที่ต้องใช้คณิตศาสตร์เป็นหลักได้หรือไม่ เธอจึงเรียนต่อด้านวิศวกรรมจนจบปริญญาเอก (เธอเริ่มเรียนเลขตอนอายุ 26 ปี!)&lt;/li&gt;
&lt;li&gt;Dr. Terrence Sejnowski : ศาสตราจารย์ด้าน computational neuroscience ซึ่งเรียกได้ว่าเป็นโคตรอัจฉริยะ เพราะมีความเป็นเลิศทั้งด้านการแพทย์ และ วิศวกรรม ปัจจุบันทำงานอยู่ที่ Salk Institute for Biological studies (เป็นสถาบันที่ผลิตนักวิทยาศาสตร์ระดับรางวัลโนเบลมาแล้วมากมาย)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://i0.wp.com/www.theobservingmind.co/wp-content/uploads/2019/06/Barb_Oakley_jpg.jpg?fit=200%2C280&amp;amp;ssl=1&#34; alt=&#34;Barbara Oakley&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Dr. Barbara Oakley&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i1.wp.com/www.theobservingmind.co/wp-content/uploads/2019/06/Sejnowski-Web.jpg?fit=767%2C767&amp;amp;ssl=1&#34; alt=&#34;Terrence Sejnowski&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Dr. Terrence Sejnowski&lt;/p&gt;

&lt;p&gt;เนื้อหาในคอร์สนั้นจะเกี่ยวกับว่า เรียนอย่างไรจึงจะมีประสิทธิภาพสูงที่สุด โดยอ้างอิงงานวิจัยจากทางด้าน Neuroscience ต่างๆ มาเป็นหลักฐาน จึงมั่นใจได้ว่าเนื้อหาในบทเรียนไม่ใช่เรื่องเพ้อเจ้อมโนไปเอง&lt;/p&gt;

&lt;p&gt;ตัวบทเรียน จะเรียงลำดับจากปูพื้นฐานด้านวิธีการคิด วิธีการเรียนรู้ของสมอง(แบบเบื้องต้น) ความทรงจำของเรามีกี่แบบ และทำงานอย่างไร การผัดวันประกันพรุ่งเกี่ยวข้องกับการเรียนอย่างไร เทคนิคการเรียน เทคนิคจำ เทคนิคการทำข้อสอบ อย่างไรก็ตามระหว่างเรียนนั้นผู้สอนก็จะเปลี่ยนไปมาระหว่างบทบ้าง (คือมี Interleaving-จะอธิบายคำนี้ในภายหลัง) แต่ก็ไม่ทำให้เกิดการสับสนแต่อย่างใด&lt;/p&gt;

&lt;p&gt;โดยรวมแล้วผมแนะนำให้ทุกคนเรียนCourse online นี้ครับ (คนที่ไม่เก่งภาษอังกฤษก็ไม่ต้องกลัวมี Subtitle ภาษาไทยอย่างดี) ตัววิดีโอนั้นรวมๆแล้วเพียงไม่กี่ชั่วโมง แต่เนื้อหานั้นจะทำให้เราตระหนักได้เลยว่าที่ราเคยเรียนกันมาตลอดนั้น มีข้อผิดพลาดใหญ่หลวงแค่ไหน&lt;/p&gt;

&lt;p&gt;การเรียนรู้ตลอดเวลานั้นจำเป็นมากในยุคนี้ ซึ่งจากข้อมูลปริมาณมากมายมหาศาล คุณจึงต้องรู้วิธีเรียนให้เร็ว และให้มีประสิทธิภาพด้วย&lt;/p&gt;

&lt;p&gt;ผมเชื่อว่า เนื้อหาในคอร์สนี้ จะเปลี่ยนชีวิตการเรียนรู้ของหลายๆคนไปตลอดกาลครับ&lt;/p&gt;

&lt;h2 id=&#34;couse-outline&#34;&gt;Couse Outline&lt;/h2&gt;

&lt;p&gt;ตัวบทเรียนนั้นจะแบ่งเนื้อหาอ่อนเป็น 4 ส่วน คือ&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Week 1: What is Learning?&lt;/li&gt;
&lt;li&gt;Week 2: Chunking&lt;/li&gt;
&lt;li&gt;Week 3: Procrastination and Memory&lt;/li&gt;
&lt;li&gt;Week 4: Renaissance Learning and Unlocking Your Potential&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ซึ่งดังที่บอกไปว่าระหว่างเรียนนั้น ผู้สอนก็จะมีการสลับสับเปลี่ยนเนื้อหาแต่ละบทไปบ้าง เพื่อเป็นการให้ผู้เรียนสามารถเชื่อมโยงระหว่างของใหม่และของเก่าได้&lt;/p&gt;

&lt;p&gt;อย่างไรก็ตามผมจะนำมาสรุปใหม่ตามความเข้าใจ และแบ่งออกเป็น Part ดังนี้ครับ&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The Essential Concepts: อธิบายการทำงานของสมองเบื้องต้น วิธีการคิด วิธีการจำ การสร้างกลุ่มของข้อมูล (Chunking) และความสำคัญในการนอนหลับ&lt;/li&gt;
&lt;li&gt;The Learning Techniques : อธิบายถึงเทคนิคต่างๆที่ทำให้เรียนดีขึ้น และอุปสรรคต่างๆที่คอยขัดขวางไม่ให้การเรียนเป็นไปอย่างมีประสิทธิภาพ รวมถึงการแก้ปัญหา&lt;/li&gt;
&lt;li&gt;The Procrastination: การผัดวันประกันพรุ่งคือศัตรูสำคัญที่สุด ในการเรียนรู้สิ่งต่างๆ part นี้จึงแยกออกมา โดยเริ่มการอธิบายว่าแท้จริงแล้วมันเกิดจากอะไร และจะมีวิธีแก้ปัญหาอย่างไรได้บ้าง&lt;/li&gt;
&lt;li&gt;The Memory Techniques: เมื่อเรามีเทคนิคการเรียนที่ดีแล้ว การฝึกจำให้ได้ก็สำคัญเช่นกัน&lt;/li&gt;
&lt;li&gt;The Test Taking Tips: รวมเทคนิคเล็กๆน้อย ที่จะทำให้คุณสอบได้อย่างมีประสิทธิภาพมากขึ้น&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;part-i-the-essential-concepts&#34;&gt;Part I : The Essential Concepts&lt;/h2&gt;

&lt;h3 id=&#34;the-brain&#34;&gt;The Brain&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;สมองนั้นประกอบด้วยเซลล์ประสาทหลายล้านเซลล์ ข้อมูลต่างๆจะถูกส่งผ่านทาง Synapse&lt;/li&gt;
&lt;li&gt;เมื่อคุณเรียนรู้สิ่งใหม่ๆ หรือจดจำสิ่งใหม่ๆ และตามด้วยการนอนหลับที่เพียงพอ เซลล์สมองจะมีการสร้าง Synapse เพิ่มมากขึ้น&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;thinking-mode-สมองของค-ณทำงานอย-างไร-เวลากำล-งค-ดถ-งอะไรส-กอย-าง&#34;&gt;Thinking Mode : สมองของคุณทำงานอย่างไร เวลากำลังคิดถึงอะไรสักอย่าง?&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;สมมติคุณกำลังแก้โจทย์ปัญหาอยู่ 1 ข้อ หากข้อนั้นเป็นเรืองๆง่ายๆที่คุณคุ้นเคย คุณจะแก้มันได้ภายในไม่ถึงนาที&lt;/li&gt;
&lt;li&gt;แต่หากเป็นเรื่องที่ยากขึ้น ซับซ้อนขึ้น คุณอาจต้องโฟกัส นั่งคิดวิเคราะห์อยู่นานหลายนาทีกว่าจะคิดออก&lt;/li&gt;
&lt;li&gt;หรือบางครั้ง คุณนั่งคิดยังไงก็คิดไม่ออก พยายามเต็มที่แล้วยังไงก็ไม่ได้ แต่พอคุณไปเดินพัก แวะกินไปกินข้าว ไปวิ่ง หรือตื่นนอนมาในอีกวัน คุณกลับพบว่าคุณคิดคำตอบออกแล้ว&lt;/li&gt;
&lt;li&gt;การที่คุณ”ไม่ได้คิด” อะไรอยู่ แต่กลับมาพร้อมกับคำตอบได้นั้น จึงแสดงว่าแท้จริงแล้ว ในเบื้องหลัง สมองก็ยังทำงานอยู่นั่นเอง เพียงแต่คุณไม่รู้ตัว เรียกว่าความคิดใน Diffuse mode&lt;/li&gt;
&lt;li&gt;โดยปกติเวลาเรากำลังคิดแก้ปัญหาอะไร เราจะมีรูปแบบความคิดในการแก้ปัญหา 2 โหมด คือ Focus mode และ Diffuse mode&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://i2.wp.com/www.theobservingmind.co/wp-content/uploads/2019/06/Focus-mode.png?fit=800%2C420&amp;amp;ssl=1&#34; alt=&#34;Focus mode&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;เพื่อความเข้าใจ จะใช้การเล่นพินบอลมาเปรียบเทียบกับรูปแบบความคิด 2 อย่างนี้ โดยเปรียบลูกบอลเหมือน ความคิด (Though) และ ตัวลานพินบอลนี้ก็คือสมอง ส่วนตัว Bumper ก็คือตัวคอยจำกัดพื้นที่การเคลื่อนไหวของความคิด (ลูกบอล) , ยิ่งมี Bumper หนาแน่น ความคิดก็เคลื่อนที่ได้แคบลง สั้นลง แต่จะ concentrate มากขึ้น&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;1-focus-mode&#34;&gt;1. Focus Mode :&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;หรือ รูปแบบการคิดแบบโฟกัส เปรียบก็คือ ความคิดที่อยู่ในสนามพินบอลที่มีตัว bumper วางตัวกันอย่างหนาแน่นและเป็นระเบียบ ความคิดเราใน Mode นี้จึงมีช่องทางเดินที่จำกัด แต่ก็จะพุ่ง Focus ไปยังเป้าหมายโดยตรง

&lt;ul&gt;
&lt;li&gt;เส้นสีส้มในรูป คือ Familia Thought pattern (รูปแบบการคิดที่เราคุ้ยเคย) เช่น การบวกลบเลข การคำนวณสูตรคลื่นแม่เหล็กไฟฟ้า การวิจารณ์วรรณกรรม หรือก็คือ Idea อะไรก็ตามที่เราคุ้นเคยกับมัน เมื่อเราอยู่ใน Mode นี้ ความคิดเราสามารถไปสู่มันได้ง่าย (ก็คือถ้าเราคิดอย่างโฟกัส กับสิ่งที่เราคุ้นเคย เราก็จะแก้ปัญหาได้เร็ว)&lt;/li&gt;
&lt;li&gt;แต่ปัญหาคือ หากเราเจอกับปัญหาที่เป็นเรื่องใหม่ๆ ที่ไม่เคยเจอมาก่อน ไม่มีข้อมูลมาก่อน ไม่รู้วิธีแก้ปัญหามาก่อน (ดังเช่นวงสีดำๆในภาพ) กรอบ(Bumper) ก็จะกันไม่ให้ความคิดของเราไปถึงมันได้ จึงทำให้แก้ปัญหาไม่ได้นั่นเอง&lt;/li&gt;
&lt;li&gt;ดังนั้นการคิดแบบโฟกัส จึงใช้ได้ดีในการคิดแก้ปัญหากับสิ่งที่เราคุ้นเคยมาก่อน หรือปัญหาง่ายๆ แต่จะมีปัญหาหากต้องเจออะไรซับซ้อน หรือเจอปัญหาใหม่ๆที่เราไม่เคยเจอ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;เราจะเห็นได้ว่าตัว Bumper นั้นคอยกันไม่ให้เราไปถึงวิธีแก้ปัญหาได้ สมองจึงมีอีกโหมดเพื่อรับมือกับเหตุการณ์นี้ ก็คือ Diffuse Mode&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;2-diffuse-mode&#34;&gt;2. Diffuse Mode :&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;เมื่อคุณ Relax (ไม่ได้โฟกัสกับปัญหานั้นแล้ว) สมองของคุณจะอยู่ใน Neural Resting Stage สภาพสมองจะเปรียบเหมือนว่าตัว Bumper มันอยู่แยกกันหลวมๆมากขึ้น ความคิดของคุณ (ซึ่งยังแล่นอยู่เบื้องหลัง โดยคุยไม่รู้ตัว) ก็จะแล่นได้อิสระมากขึ้น ไม่โดนบีบแน่นมากนัก มันจะวิ่งไปมาได้อิสระขึ้น ไปได้กว้างขึ้น&lt;/li&gt;
&lt;li&gt;ในโหมดนี้ เปรียบเสมือนว่าคุณปล่อยความคิดให้ล่องลอยอย่างอิสระ ปล่อยให้มันสร้าง Random connection ไปเอง&lt;/li&gt;
&lt;li&gt;ใน Mode นี้คุณจะไม่รู้ตัวว่ากำลังคิดถึงปัญหาที่ต้องการแก้อยู่ แต่ตัวความคิดในการแก้ปัญหาที่คุณได้จาก focus mode นั้น ก็ยังคงทำงาน ฉะนั้น คำตอบที่ได้จากความคิดในโหมดนี้ จะไม่ใช่คำตอบสุดท้ายหรือคำตอบที่ชัดเจนนัก แต่มันจะมาในลักษณะของไอเดียเริ่มต้น(อารมณ์ประมาณว่า “อ๋อ มันน่าจะเป็นแบบนี้นะ”) พอทำให้คุณได้คลำทางว่าจะเริ่มแก้ปัญหาจากจุดใด และเป็นช่วงเวลาที่ทำให้คุณได้เริ่มมีไอเดียสร้างสรรค์สิ่งใหม่ๆได้&lt;/li&gt;

&lt;li&gt;&lt;p&gt;การคิดแก้ปัญหาใน Mode นี้จะเกิดเมื่อคุณอยู่ในภาวะผ่อนคลาย (คิดโดยไม่คิด) เป็นความคิดใน Subconscious level เช่น เกิดขึ้นในขณะเดินเล่น วิ่งเล่น อาบน้ำ หรือนอนหลับ&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;เราไม่สามารถใช้ความคิดทั้งสอง Mode นี้ได้ ในเวลาเดียวกัน&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;การเรียนสิ่งใหม่ๆ การแก้ปัญหาที่ไม่คุ้นเคย หรือปัญหาที่ซับซ้อน นั้นจะประกอบไปด้วยการสลับกันระหว่างความคิดทั้งสองMode นี้ โดย Focus mode จะทำให้คุณได้ข้อมูล ได้คิดวิเคราะแก้ปัญหาเต็มที่ ได้เค้นสมองเต็มที่ แต่หากคุณคิดคำตอบไม่ออก คุณก็ไปผ่อนคลาย เพื่อให้สมองอยู่ใน Diffuse mode, เพื่อให้ความคิดใต้สำนึกของคุณพยายามหาสิ่งใหม่ๆมาเชื่อมโยง และมองภาพให้กว้างขึ้น เมื่อเวลาาผ่านไปซักพัก คุณก็อาจจะพบว่าคุณเริ่มรู้วิธีแก้ปัญหา เริ่มมีข้อมูลแก้ปัญหามากขึ้น หรือคิดสร้างสรรค์วิธีแก้ปัญหาใหม่ๆได้&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;memory&#34;&gt;Memory&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;โดยหลักแล้วเวลาจะคิดอะไรใดๆ เราก็จะมี Material ในการคิด, Material นี้ก็มาจากความจำนั่นเอง&lt;/li&gt;
&lt;li&gt;ความจำแบ่งอีกเป็น 2 ประเภท&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;1-working-memory&#34;&gt;1. Working Memory :&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;คือความจำที่คุณใช้มันเวลาที่จำเป็นต้องคิดอะไรสักอย่างในใจ ความจำชนิดนี้จะอยู่ในส่วนของสมองที่บริเวณที่เรียกว่า Prefrontal Cortex ตัว working memory มีSlot ให้จดจำข้อมูลต่างๆ เพียงแค่ 4 slots เท่านั้น&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;2-long-term-memory&#34;&gt;2. Long-Term Memory :&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;ความจำระยะยาว ซึ่งจะถูกเก็บอยู่ในบริเวณต่างๆของสมอง สมองของเราจะเก็บความจำระยะยาวได้มากมาย แต่มันก็ยากเหมือนกันในการนำความรู้ที่เก็บอยู่ในความทรงจำระยะยาวนี้กลับมาใช้&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;spaced-repetation&#34;&gt;Spaced Repetation&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;เวลาคุณเรียนรู้สิ่งใหม่ๆ มันจะเหมือนกับว่าคุณกำลังนำข้อมูลต่างๆนั้นมาเก็บใน working memory ก่อน ,เปรียบเทียบ working memory เป็นกระดานดำที่แสดงภาพได้ไม่ชัด การจะทำให้คุณเรียนรู้สิ่งใหม่ๆได้ดีนั้นจึงต้องมีการซ้ำหลายๆครั้ง โดยการทบทวนความจำที่ดีและทำให้จำได้ดีคือ “Space repetition” คือการจำหรือทำซ้ำโดนเว้นห่างหลายๆวัน เช่น ห่างวันเว้นวัน วันเว้นสองวัน วิธีจำซ้ำนี้จะใช้ได้ดีกว่าจำอัดๆกันในวันเดียว&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;sleeping&#34;&gt;Sleeping&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;การนอนหลับจะช่วยเป็นการจัดเก็บข้อมูลที่สำคัญที่คุณได้เรียนรู้ในแต่ละวัน ลงในสมอง จึงสำคัญมากในการรักษา Long Term Memory และยังช่วยลบความทรงจำที่ไม่จำเป็นออกด้วย&lt;/li&gt;
&lt;li&gt;นอกจากนี้พบว่า หากบังเอิญถ้าคุณฝันถึงสิ่งที่คุณเรียน คุณก็จะยิ่งจำมันได้ดีขึ้น&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;chunking&#34;&gt;Chunking&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Chunk เป็นศัพท์ทางจิตวิทยา หมายถึงกลุ่มก้อนข้อมูลที่มีความเกี่ยวโยงกัน ผ่านทางความหมายหรือจากการใช้งานบ่อยๆ&lt;/li&gt;
&lt;li&gt;Chunk สามารถเพิ่มขนาดได้เรื่อยๆ เมื่อเราได้รับข้อมูลเพิ่ม , การมีอยู่ของ chunk ทำให้สมองเราสามารถ access กลุ่มของข้อมูลต่างๆได้ง่ายขึ้น เป็นการประหยัดเนื้อที่ของ working memory อีกทางหนึ่ง

&lt;ul&gt;
&lt;li&gt;ตัวอย่างเช่น เมื่อนำตัวอักษร P-O-P มาอยู่ด้วยกันจะได้ว่า POP ซึ่งทำให้คุณรู้สึกถึงเสียงดัง “ป็อป” การที่คุณเห็นตัวอักษรสามตัวนี้เรียงกันแล้ว นึกถึงเสียงป็อป ก็คือการทำที่สมองมันจดจำ chunk นี้ได้ และมีเซลล์ประสาทกลุ่มหนึ่งทำงานพร้อมกันนั่นเอง&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Chunking ก็คือกระบวนการอัดข้อมูลต่างๆ ให้กลายเป็น Chunk&lt;/li&gt;
&lt;li&gt;เราจะสร้าง Chunk ที่มีประสิทธิภาพได้อย่างไร?

&lt;ul&gt;
&lt;li&gt;สมมติคุณจะฝึกเล่นกีต้าให้ได้สักเพลงหนึ่ง เพลงๆนั้นก็เหมือน Chuck ก้อนมหึมา การจะฝึกเล่นเพลงให้ได้ ก็เริ่มจากที่คุณต้องคอยๆฝึกไปทีละท่อนๆเป็นเวลาหลายๆวัน เป็นการสร้าง Neural mini chunk มาต่อๆกัน จนเป็นอันใหญ่ หรือก็คือเพลงๆหนึ่งนั่นเอง&lt;/li&gt;
&lt;li&gt;Step

&lt;ol&gt;
&lt;li&gt;Focus Undivided Attention : เพ่งสมาธิกับในข้อมูลที่คุณต้องการ Form Chunk , ในครั้งแรกที่คุณจะเรียนรู้สิ่งใหม่ๆ คุณกำลังสร้าง Neural pattern อันใหม่ และต้องการ connect มันกับสิ่งที่มีมาก่อน ซึ่งก็กระจัดกระจายอยู่ทั่วสมอง คุณจึงต้องมีสมาธิอย่างมาก&lt;/li&gt;
&lt;li&gt;ทำความเข้าใจข้อมูลที่กำลังจะ Chunk , ความเข้าใจจะเป็นตัวเชื่อมที่ดีระหว่างความทรงจำในข้อมูลต่างๆ คุณสามารถ form chunk ได้แม้คุณจะไม่เข้าใจ แต่นั่นจะเป็นเพียงแค่ useless chunk ที่ไม่fit กับข้อมูลอื่นๆได้เลย และคุณจะลืมมันง่ายๆมากๆ

&lt;ol&gt;
&lt;li&gt;** การทำความเข้าใจ ในที่นี้ ไม่ใช่อารมแบบฟังครูอธิบายแล้วเข้าใจ หรือ อ่านเฉลยแล้วเข้าใจ แต่หมายถึงความเข้าใจที่เกิดจากตัวคุณเอง ทีได้จากการที่คุณทบทวนบทเรียน หรือได้ลองทำแบบฝึกหัดและแก้ปัญหาเองแล้ว (เช่นเดียวกันกับการวาดรูป การเล่นกีต้า ที่ต้องเล่นเอง)&lt;/li&gt;
&lt;li&gt;ต้องทำเองเท่านั้นที่จะสร้าง neural pattern ที่มีความหมายได้&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://i1.wp.com/www.theobservingmind.co/wp-content/uploads/2019/06/Chunk.png?fit=752%2C323&amp;amp;ssl=1&#34; alt=&#34;Chunk&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;หา context (Practice): การรู้ Context จะทำให้เรารู้ว่าเราควรใช้ chunk นี้ได้เมื่อไหร่ และไม่ควรใช้มันเมื่อไหร่&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;-   -   ปกติการเรียนรู้เกิดขึ้นในสองทาง คือ Top-down ซึ่งเป็นการมองภาพรวมให้ออกว่าคุณกำลังเรียนอะไร และ Bottom-up คือ เรียนรายละเอียดในเรื่องใดๆเรื่องหนึ่ง
    -   Context คือที่ๆ Top-down และ Bottom-up มาเจอกัน
    -   ตัวอย่างเช่น Big picture คือการที่คุณเปิดหนังสือบทนี้ผ่านๆ เพื่อดู outline และให้รู้ว่าตัวบทนี้เกี่ยวกับอะไร , Bottom up คือการเรียนเจาะลึกไปในแต่ละหัวข้อย่อย Context คือการที่คุณรู้ว่าเมื่อถึงตรงนี้คุณต้องใช้องค์ความรู้ย่อยตัวไหน และไม่ควรใช้ตัวไหน&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://i0.wp.com/www.theobservingmind.co/wp-content/uploads/2019/06/Context.png?fit=800%2C468&amp;amp;ssl=1&#34; alt=&#34;Context&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;library-of-chunk&#34;&gt;Library of Chunk&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;การที่คนๆนึงจะกลายเป็นผู้เขี่ยวขาญอะไรบางอย่าง ไม่ว่าจะเป็นการซ้อมดนตรี ซ้อมกีฬา อ่านหนังสือ ก็คือการค่อยๆ สะสม chunk เล็กๆ ให้มากขึ้นๆเรื่อยๆเมื่อเวลาผ่านไป และให้มันเชื่อมต่อกันมากขึ้นเรื่อยๆ เหมือนสายริบบอนที่ยาวมากขึ้นๆ&lt;/li&gt;
&lt;li&gt;นอกจากนี้การเก็บสะสม chunk จะทำให้ diffuse mode ค่อยๆเชื่อมโยงconcept ต่างๆมากขึ้น เกิดเป็น pattern ต่างๆที่พร้อมให้เราหยิบใช้ได้มากขึ้นโดยไม่ได้รู้ตัว&lt;/li&gt;
&lt;li&gt;Transfer

&lt;ul&gt;
&lt;li&gt;การมี chunk ที่หลากหลายทำให้คุรเข้าใจ concept ใหม่ๆง่ายขึ้น เวลาที่คุณเจอองค์ความรู้ที่มีลักษณะคล้ายๆกัน เช่น ความรู้จากฟิสิก คล้ายกับความรู้เวลาทำธุรกิจ เราเรียกว่ามันสามารถ transfer แก่กันได้&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;part-ii-the-learning-techniques&#34;&gt;Part II : The Learning Techniques&lt;/h2&gt;

&lt;h3 id=&#34;1-recall&#34;&gt;1. Recall&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;งานวิจัยของ Jeffrey Karpicke พบว่า การทวนเนื้อหาโดยการอ่านหนังสือซ้ำๆ เป็นการกระทำที่ไม่ Productive และเสียเวลา ที่ดีกว่าคือการ Recall (คือปิดหนังสือ แล้วพยายามนึกไห้ได้ว่าที่อ่านไปมันเป็นยังไง)

&lt;ol&gt;
&lt;li&gt;Recall นั้นได้ผลดีกว่า การ Rereading หรือแม้แต่การวาด MindMap เสียด้วยซ้ำ&lt;/li&gt;
&lt;li&gt;Rereading ที่มีประโยชน์นั้นจะมีต่อเมื่อคุณต้องเว้นช่วงอ่านซ้ำ ซึ่งก็เป็น Space Repetition แบบหนึ่งนั่นเอง&lt;/li&gt;
&lt;li&gt;การเรียนรู้และการ Recall สิ่งใหม่ๆนั้น จะเหมือนกับว่าเราทำให้ Slot memory 4 ช่อง ที่เริ่มด้วยข้อมูลต่างๆที่มี connection อันยุ่งเหยิงนั้น เกิดการปะติดปะต่อเรื่องราว และสร้าง Chunk ออกมาได้ ความยุ่งเหยิงนี้ก็จะลดลง จนอาจจะเหลือเป็น chunk ยาวๆสายใยเดียวกันที่ใช้พื้นที่ slot ไปเพียงแค่อันเดียว จึงทำให้คุณมีช่องว่างเพิ่ม เพื่อใช้ประมวลผลข้อมูลเพิ่มขึ้น&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Recall ที่ดี ต้องทำนอกสถานที่

&lt;ol&gt;
&lt;li&gt;เวลาที่คุณเรียนรู้อะไรใหม่ๆ สภาพแวดล้อม ณ ขณะที่คุณกำลังเรียนอยู่นั้น อาจทำตัวเป็นเงื่อนไข (Subliminal cue) ในการทำให้คุณจำได้ (เช่น อยู่ที่บ้านจำได้ พอย้ายมาที่ห้องสอบกลับจำไม่ได้ เพราะไม่คุ้นชินกับสภาพแวดล้อมใหม่)ดังนั้น ถ้ามีเวลา ก็ให้คุณฝึกลองrecall ข้อมูลต่างๆ ในหลากลหายสถานที่ ก็อาจจะทำให้คุณนึกอะไรออกง่ายขึ้นเวลาเข้าห้องสอบ&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-illusion-of-competence&#34;&gt;2. Illusion Of Competence&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;คือการหลงผิด คิดว่าตัวเองรู้เรื่องแล้ว ทั้งๆที่ความจริงไม่ได้มีความรู้ใดๆเลย&lt;/li&gt;
&lt;li&gt;เวลาที่คุณฟังคำอธิบายเฉลยโจทย์ หรืออ่านเฉลย แล้วคุณรู้สึกเข้าใจแจ่มแจ้งดี และรู้สึกว่ามันก็ไม่ได้ยากอะไร แต่พอต้องทำแก้โจทย์ด้วยตัวเองจริงๆ กลับทำไม่ได้ (แม้โจทย์นั้นก็เป็นข้อที่คุณอ่านเฉลยมาแล้ว) แสดงว่าคุณกำลังเจอกับ Illusion of competence&lt;/li&gt;
&lt;li&gt;นั่นเป็นเพราะว่าคุณหลงคิดว่าคุณคิดออกมาได้จากสมองของตัวเอง (your own neural pattern) ทั้งที่จริงแล้วที่คุณได้มาคือแค่การรับสารอย่างหนึ่งเท่านั้น&lt;/li&gt;
&lt;li&gt;ดังนั้นการจะให้ความทรงจำอยู่ในหัวคุณได้ คุณจะต้องเป็นคนคิดแก้ปัญหานั่นเอง เพื่อสร้าง neural pattern ให้เกิดในสมองของคุณ&lt;/li&gt;
&lt;li&gt;Illusion of competence ยังพบได้ในการทำ highlight หรือ ทำสรุปย่อ/ Concept Mapping

&lt;ul&gt;
&lt;li&gt;การทำ Highlight เวลาอ่านหนังสือ ควรเน้นที่ประโยคสำคัญจริงๆเท่านั้น ย่อหน้านึ่งไม่ควรเกิดหนึ่งประโยค เพราะบางครั้งการ Hand motion จากการขีด Highlight จะหลอกว่าคุณได้เอา concept นี้เข้าไปในหัวแล้ว ซึ่งที่อาจจะไม่จริง&lt;/li&gt;
&lt;li&gt;การทำสรุปย่อ การทำMindMap สวยงาม ก็มีโอกาสเป็น Illusion of competence เช่นกัน คุณอาจหลงคิดไปเองว่าคุณรู้เรื่องแล้ว ทั้งที่จริงคุณกลับจำอะไรไม่ได้เลย เพราะไอ้ที่คุณเขียนไป ยังไม่อยู่ในหัวคุณนั่นเอง&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;การแก้ปัญหา illusion of competence นั้นทำได้ง่ายๆ โดยการทำข้อสอบ ทำแบบฝึกหัด หรือทดสอบความเข้าใจตัวคุณเอง หรือ สอนเนื้อหาให้กับคนอื่นๆ&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-overlearning&#34;&gt;3.Overlearning&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;-   การฝึกอะไรซ้ำไปซ้ำมาหลายๆรอบ เช่น ท่องศัพใหม่ๆ concept ใหม่ๆ หรือฝึกวิธีแก้ปัญหาเดิมซ้ำๆ ทำโจทย์เดิมซ้ำๆ แม้จะชำนาญในสิ่งนั้นแล้ว เรียกว่า Overlearning

&lt;ul&gt;
&lt;li&gt;Overlearning ทำให้เกิด Automaticity ซึ่งสำคัญในaction บางอย่าง เช่น การเล่นเปียในให้perfect, การฝึกพูดในที่สาธารณะ แต่การฝึกซ้ำๆในเวลาใกล้ๆกัน ก็จะเป็นการเสียเวลาไปโดยเปล่าประโยขน์นั่นเอง&lt;/li&gt;
&lt;li&gt;การ repeat ที่ดีควรจะทำในโอกาสถัดๆไปที่ไม่ใช้ same study session ซึ่งจะช่วย strengthen และ deepen Neuron pattern ของคุณได้ดีกว่า (Spaced Repetition)&lt;/li&gt;
&lt;li&gt;แต่การ Repeat สิ่งที่ดีแล้ว ก็อาจจะทำให้คุณหลงคิดว่าตัวคุณเองเก่ง (Illusion of competence) ทางที่ดีคือคุณต้องพยายามฝึกสิ่งที่ยากขึ้นเรื่อยๆ&lt;/li&gt;
&lt;li&gt;การ Focus ในสิ่งที่ยากขึ้นเรื่อยๆนี้ เรียกว่า Deliberate Practice ซึ่งกระบวนการนี้เอง ที่จะแยกระหว่างนักเรียนที่เก่ง และนักเรียนที่เก่งมาก&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;4-einstellung-effect&#34;&gt;4.Einstellung effect&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Einstellug เป็นภาษาเยอรมัน แปลว่า MindSet&lt;/li&gt;
&lt;li&gt;บางครั้งข้อมูลความรู้ที่คุณมี หรือ neural pattern ที่คุณมีและพัฒนามาแล้วนั้น อาจจะ Block ไม่ให้คุณได้ better idea หรือ better solution ออกมาได้ หรือบางครั้งมันอาจจะพาคุณหลงทางไปทำอย่างอื่นเลย&lt;/li&gt;
&lt;li&gt;เช่น คุณอาจจะมีแนวคิดว่า โจทย์แนวนี้ ก็ต้องแก้ปัญหาแนวนี้ แต่แท้จริงแล้วมันอาจจะมีวิธีที่ง่ายกว่า แต่คุณคิดไม่ออก เพราะวิธีแรกที่ผุดมาในหัว มัน Block หนทางอื่นๆไปแล้ว&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;5-interleaving&#34;&gt;5.Interleaving&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;คือการสลับเรียนรู้สิ่งต่างๆ ไม่ใช่ว่าเริ่มเรียนอะไร ก็จะเรียนแต่เรื่องนั้นต่อเนื่องยาวๆ เช่นเมื่อคุณกำลังเรียนบทหนึ่งในวิทยาศาสตร์ คุณอาจจะเอาแต่ศึกษาแก้โจทย์เรื่องไฟฟ้าจนรู้สึกเข้าใจลึกซึ้ง แต่พอกลับมาทำโจทย์กลศาสตร์ก็อาจลืมไป หรือรู้สึกไม่คล่องเหมือนเดิมแล้ว วิธีแก้ปัญหานี้ จึงเป็นที่มาของการทำ Interleaving&lt;/li&gt;
&lt;li&gt;Interleaving คือการคอยสลับเรียนรู้เนื้อหาไปมาระหว่างบทต่างๆ เพื่อทำให้สมองของคุณต้องคอยสลับวิธีคิด หรือหาวิธีแก้ปัญหาต่างๆ อย่างไม่ซ้ำกัน การทำแบบนี้แม้จะทำให้เรียนได้ยากลำบากขึ้น แต่ก็จะช่วยให้องค์ความรู้มันลึกขึ้น และช่วยสร้าง Flexibility และ Creativity แก่สมองของคุณ&lt;/li&gt;
&lt;li&gt;Interleaving นั้นสำคัญพอๆกับ Repetition มันจะทำให้คุณสร้างสรรสิ่งใหม่ๆได้ง่ายขึ้น&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;6-ออกกำล-งกาย&#34;&gt;6.ออกกำลังกาย&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;ในอดีตเชื่อกันเมื่อเราเกิดมา เราจะมี set จำนวน neuron ที่จำกัดและเราก็จะอยู่กับ neuron เซ็ตนี้ไปตลอด โดยมันจะค่อยๆลดลงเมื่อเราแก่ตัวลงเรื่อยๆ และยิ่งหายไปเร็วมากหากเราไม่ค่อยได้ฝึกใช้สมอง&lt;/li&gt;
&lt;li&gt;แต่งานวิจัยในหนูทดลองปี 2015 พบว่าใน Hippocampus จะมี neuron เกิดขึ้นได้ใหม่เมื่อหนูตัวนั้นกำลังเรียนรู้สิ่งใหม่ๆ เพียงแต่นิวรอนตัวใหม่นี้ก็จะตายไปหากมันไม่ได้รับการใช้งานแล้ว&lt;/li&gt;
&lt;li&gt;ซึ่งนักวิทยาศาสตร์พบว่า การออกกำลังกายสามารถช่วยให้neuron ที่เกิดใหม่นี้อยู่รอดได้นานขึ้น&lt;/li&gt;
&lt;li&gt;การออกกำลังกายมันจึงช่วยในการเรียนรู้ของคุณได้โดยตรง&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;7-การฝ-กฝนสมอง-สามารถซ-อมแซมส-วนท-เส-ยหายไปได&#34;&gt;7.การฝึกฝนสมอง สามารถซ่อมแซมส่วนที่เสียหายไปได้&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;สมองส่วนต่างๆจะมีวัยที่พัฒนาเต็มที่(Fully maturation) ที่ต่างกัน เช่น บริเวณที่เกี่ยวกับการมองภาพลึกตื้น (Binocular depth และมองภาพให้เห็นสามมิติ ซึ่งต้องอาศัยการทำงานที่สอดคล้องกันของตาทั้งสองข้าง และสมองส่วนการมองเห็น จะพัฒนาเต็มที่ตอนอายุ 2 ปี หรือบริเวณที่เกี่ยวกับการตัดสินใจ จะโตเต็มที่ช่วงอายุวัยรุ่น หากเลยช่วงอายุเหล่านี้ไป สมองของคุณจะไม่สามารถมองเห็นภาพเป็นสามมิติได้ตลอดกาล&lt;/li&gt;
&lt;li&gt;อย่างไรก็ตามนั่นเป็นแค่ความเชื่อในอดีต เข่นในทางปฏิบัติก็มีคนที่ไม่สามารถมองเห็น แต่สามารถฝึกสมองจนกลับมามองให้เห็นเป็นภาพสามมิติได้&lt;/li&gt;
&lt;li&gt;ดังนั้นข้อคิดก็คือ Practice can repair และ train your brain ได้ เพียงแต่มันต้องใช้เวลานานๆมากๆ (Practice can repair, as well as train the brain. But this takes much longer, past the critical period)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;8-ฝ-กทำความเข-าใจด-วยการเปร-ยบเท-ยบconceptน-น-ก-บส-งต-างๆ&#34;&gt;8.ฝึกทำความเข้าใจด้วยการเปรียบเทียบConceptนั้น กับสิ่งต่างๆ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;หนึ่งในวิธีที่ดีที่สุดในการจะทำให้เข้าใจ concept ได้นั้น นอกจากจะจำให้ได้ ก็คือการใช้วิธีอุปมาอุปไมย หรือ อุปลักษณ์(Metaphor)ยิ่งเทียบให้เห็นเป็นรูปธรรมมากเท่าไหร่ ยิ่งดูSillyเท่าไหร่ ยิ่งดีมากขึ้นเพราะมันจะยิ่งทำให้คุณจำอะไรๆง่ายขึ้นและจำได้นานามากขึ้น&lt;/li&gt;
&lt;li&gt;ยิ่งคุณเรียนสูงและศึกษาคอนเซ็บต่าๆได้ซับซ้อนมากขึ้นเท่าไหร่ คุณก็สามารถคิด metaphor ที่เจ๋งกว่ามาแทนที่อันเก่าได้&lt;/li&gt;
&lt;li&gt;Metaphor ไม่ใช่เรื่องเล่นหรือเรื่องที่ดูเป็นการใช้จินตนาการไร้สาระ อย่าลืมว่าความก้าวหน้าทางวิทยาศาสตร์นั้นก็เกิดจาก Metaphor มากมาย ไม่ว่าจะเป็นการคิดถึงรูปร่างโมเลกุลเป็นทรงกลม การคิดถึงรูปร่างจักรวาล การคิดถึงกระแสไฟฟ้าให้เป็นดั่งสายน้ำ เป็นต้น&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;9-the-value-of-teamwork&#34;&gt;9.The Value Of Teamwork&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;คนที่เป็น Stroke สมองซีกขวา จะมีภาวะหนึ่งที่เรียกว่า broad-perspective perceptual disorder of the right hemisphere โดยพบว่าคนที่เป็นโรคนี้จะยังคง Function ได้ตามปกติ ยังมีความฉลาดที่ปกติ ยังสามารถคำนวณโจทย์เลขยากๆได้ ถ้าเขาเคยทำได้มาก่อน แต่หากเขามีความผิดพลาดในการคำนวณ แม้จะดูไม่make sense มากๆ เช่น คำนวณได้ว่าร้านขายไส้กรอก มีรายได้พันล้าน ความผิดพลาดนี้จะไม่ทำให้พวกเขาเอะใจหรืออะไรใดๆ

&lt;ul&gt;
&lt;li&gt;พวกเขาจะดูเหมือนไม่มี big picture , ไม่มี Common sense&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;การศึกษพบว่าสมองซีกขวาช่วยในการมองย้อนถอยกลับมาดูภาพรวมกว้างๆ (step back and gain big picture perspective ) เพื่อให้เราดูว่าตอนนี้เดินมาถูกต้องหรือไม่&lt;/li&gt;
&lt;li&gt;ดังนั้นหากคุณเป็นคนที่ทำแบบทดสอบหรือทำข้อสอบโดยไม่ทวนเลยแสดงว่าคุณกำลังทำตัวเหมือนคนที่พิการสมองซีกขวา&lt;/li&gt;
&lt;li&gt;Right Hemisphere ทำหน้าที่เป็น Devil Advocate, ซึ่งจะคอยถามคำถามต่างๆ และคอยมองหาความไม่สม่ำเสมอ ในขณะที่ Left Hemisphere ทำหน้าที่เป็นตัว Focus, เป็นตัวแปลผลสารต่างๆในโลกที่เข้ามาหาเรา และจะเป็นตัว retain ไม่ให้ความหมายต่างๆนั้นแปรเปลี่ยนไป&lt;/li&gt;
&lt;li&gt;หนึ่งในวิธีที่ดีในการป้องกันจุดบอดนี้ ก็คือการ brainstorm กับคนทำงานอื่นๆที่มีความสนใจอย่างยวดยิ่งในสิ่งเดียวกัน เพราะยังไงก็ตามทุกคนก็มีจุดบอดของตัวเอง กัลยาณมิตรจึงสามารถเข้ามาช่วยคุณได้&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;part-iii-the-procrastination&#34;&gt;Part III : The Procrastination&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;การผัดวันประกันพุ่ง คือปฏิกิริยาตอบสนองของสมองต่อสิ่งที่เราไม่ชอบ โดนการหันไปทำอย่างอื่นที่น่าอภิรมย์กว่า ซึ่งจะให้เรามาซึ่งความสุขชั่วครู่&lt;/li&gt;
&lt;li&gt;การติดนิสัย Procrastnation มากๆจะยิ่งทำให้คุณรับมือกับปัญหายากๆได้ลำบากขึ้นเรื่อยๆในชีวิต&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;procrastination-เป-นน-ส-ย-habit-อย-างหน-ง&#34;&gt;Procrastination เป็นนิสัย(Habit) อย่างหนึ่ง&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Habit จะเกิดในสิ่งที่เราทำบ่อยๆ จนเคยชิน การมีอยู่ของมันก็เพราะเป็นการช่วยประหยัดพลังงานสมองให้ไม่ต้องคิดอะไรมาก เพราะมันเป็ฯสิ่งที่ทำประจำอยู่แล้ว&lt;/li&gt;
&lt;li&gt;Habit ประกอบด้วยองค์ประกอบสี่อย่างคือ

&lt;ol&gt;
&lt;li&gt;The Cue : คือตัวกระตุ้น(Trigger) ที่ทำให้คุณเข้าสู่โหมดอัตโนมัติ เช่น เห็นโจทย์ปัญหาข้อแรกหรือเห็นข้อความLineเด้งมา

&lt;ol&gt;
&lt;li&gt;Cue จะนำไปสู่ Routine ซึ่ง Routineก็มีทั้งที่ดีและไม่ดี&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;The Routine :เมื่อได้รับ Cue, คุยก็จะตอบสนองโดยอัตโนมัติ เรียกว่า routine นั่นเอง&lt;/li&gt;
&lt;li&gt;The Reward : นิสัยเกิดขึ้นและคงอยู่ได้ เพราะมันให้รางวัลสักอย่างแก่เรา ซึ่งโดยส่วนใหญ่ก็คือความรู้สึกพอใจ เช่น การอาบน้ำกลางคืนทำให้คุณรู้สึกสะอาด, Procrastination ก็เช่นเดียวกัน เพราะมันทำให้เรารู้สึกพึงพอใจเมื่อได้เมินหน้าหนีสิ่งที่ทำให้เราไม่เป็นสุข

&lt;ol&gt;
&lt;li&gt;Reward ของ Procrastination ก็คือการได้หนีปัญหานั่นเอง&lt;/li&gt;
&lt;li&gt;ดังนั้นการหา reward ดีๆ หลังจากเราประสบความสำเร็จ ก็อาจช่วยลด procrastination ได้&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;The Belief : Habit มีpower เพราะคุณเชื่อในมัน เช่น คุณเชื่อว่าคุณไม่มีทางทำงานได้จนกว่าไฟจะล้นก้น ดังนั้นต้องเริ่มจากว่า คุณต้องเชื่อว่าคุณจะเปลี่ยนhabitได้&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;product-vs-process&#34;&gt;Product vs Process&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;การเริ่มทำอะไรสักอย่างนั่นอาจทำให้คุณเป็นทุกข์ได้ วิธีการhandle อารมณ์ต่างๆนี้จึงสำคัญ คนหลายๆคนสามารถควบคุมความรู้สึกนี้ได้ แต่ถ้าคุณยังมีปัญหา อีกวิธีที่แนะนำคือการ Focus ไปที่ Process

&lt;ul&gt;
&lt;li&gt;Process ก็คือกระบวนการที่เกี่ยวข้องไปกับเวลาที่ผ่านไป ในขณะที่ Product คือผลของงานนั้นๆ&lt;/li&gt;
&lt;li&gt;เพื่อหลีกเลี่ยง procrastination คุณไม่ควรโฟกัสไปที่ product เพราะมันมักทำให้คุณทุกข์ แต่ให้ดูที่ process เช่น หากมีการบ้าน5 ข้อ การที่คุณคิดจะทำให้เสร็จสมบูรณ์ก็คือการคิดถึง product ซึ่งทำให้คุณหลีกเลี่ยงที่จะทำมันให้เสร็จ และหลอกตัวเองว่าใกล้deadline ก็ค่อยทำ แทนที่จะเป็นเช่นนี้ ก็ให้คุณลองfocus กับ process เช่น คุณอาจจะกันเวลาสัก 25 นาทีในการเริ่มทำงาน ได้เท่าไหนก็เท่านั้น ซึ่งถ้ามองแบบนี้จะทำให้ความรู้สึกเจ็บปวดน้อยกว่าและเริ่มงานได้เร็วกว่า และทำให้คุณ relax ได้มากขึ้น&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;ว-ธ-เปล-ยนน-ส-ย-procrastination&#34;&gt;วิธีเปลี่ยนนิสัย Procrastination&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;ดังที่กล่าวไปแล้วว่า Procrastination คือนิสัยอย่างนึง การเปลี่ยนนิสัยจึงต้องเปลี่ยนไปตามองค์ประกอบทั้งสี่อย่าง คือ&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;The Cue : Cue ที่เกียวกับ procrastination มักเกี่ยวกับ Location, Time , อารมณ์ขณะนั้น ดังนั้นคุณจึงต้องจับให้ได้ว่าอะไรเป็น Cue ที่ทำให้คุณเริ่ม Procrastination เช่น อาจเป็นการทำงานในที่ๆที่มีคนพลุกพล่าน ทำงานใกล้มือถือหรือสิ่งยั่วยวนใจต่างๆ หรือแม้แต่อารมณ์ไม่ดี&lt;/li&gt;
&lt;li&gt;The Routine : เมื่อเจอ cue เราก็จะมีroutine คือการหันเหไปทำอย่างอื่นที่pain น้อยกว่า ดังนั้นหากคุณมี plan รองรับว่าจะทำงานนั้นๆอย่างไรบ้าง ก็จะช่วยให้คุณบังคับตัวเองทำงานได้ง่ายขึ้น&lt;/li&gt;
&lt;li&gt;The Reward : อย่าให้รางวัลตัวเอง หากคุณสามารถพยายามทำงานจนเสร็จ เช่น ทำงานเสร็จแล้วจะไปดู seiries การให้รางวัลเป็นส่วนที่สำคัญ เพราะมันทำให้สมองคุณอยากทำสิ่งนี้มากขึ้น (neurological cravings) ทำให้สามารถพัฒนานิสัยใหม่ๆได้&lt;/li&gt;
&lt;li&gt;The belief : เชื่อมั่นในตัวคุณ ว่าคุณสามารถเอาชนะความผัดวันประกันพรุ่งนี้การเรียนได้&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;weekly-daily-list-juggling-life-and-learning&#34;&gt;Weekly/Daily list : Juggling Life and Learning&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;การเรียนรู้ของหลายๆคนจำเป็นต้องมี balanceกับภาระงานอื่นๆในชีวิตด้วย&lt;/li&gt;
&lt;li&gt;วิธีที่แนะนำคือการทำ weekly list ของงานที่จำเป็นต้องทำ และ ทำ Daily to do list ของวันถัดไปในช่วงก่อนนอน เพราะงานวิจัยพบว่า subconscious mind ของคุณก็จะช่วยคิดแก้ปัญหา วิธีทำ to do list นี้ด้วยระหว่างที่คุณกำลังนอน ทำให้คุณตื่นมาพร้อมคำตอบได้

&lt;ul&gt;
&lt;li&gt;นอกจากนี้การทำ list ยังเป็นการ free working memory space ของคุณ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ทำ quitting time ในแต่ละวันด้วย (เช่น หลังห้าโมงเย็นต้องหยุดงานทุกอย่าง แล้วไปออกกำลังกาย) ซึ่งมันสำคัญพอๆกับ การ set working time&lt;/li&gt;
&lt;li&gt;คนที่ทำงานหนัก และมีเวลาพักเพียงพอ มักจะ performance ดีกว่าคนที่เอาแต่ทำงานหนักๆอย่างเดียว&lt;/li&gt;
&lt;li&gt;เอางานที่ซับซ้อนและยากที่สุด และไม่พึงประสงค์ที่สุด มาเป็นงานแรกของวัน&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;สร-ป&#34;&gt;สรุป&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;1.  การเรียนรู้ที่ดีนั้น ต้องค่อยเป็นค่อยไป ดังนั้นการ tackle procrastination จึงสำคัญมากๆ

&lt;ol&gt;
&lt;li&gt;การรับมือ procrastination สรุปเป็นขั้นตอนดังนี้

&lt;ul&gt;
&lt;li&gt;Keep a planner journal&lt;/li&gt;
&lt;li&gt;Commit yourself to certain routine and task each day : complete daily to do list ก่อนนอน , จัดเรียงงานให้เป็น Series สั้นๆ และอย่าลืมให้รางวัลตัวเอง&lt;/li&gt;
&lt;li&gt;Deliberately Delay rewards until you finish the task&lt;/li&gt;
&lt;li&gt;Watch for procrastination cue&lt;/li&gt;
&lt;li&gt;Gain trust in your new system : trust your system enough so that when it comes time to relax, you actually relax without feelings of guilt or worry.&lt;/li&gt;
&lt;li&gt;Have backup plans for when you still procrastinate&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;part-iv-the-memory-techniques&#34;&gt;Part IV : The Memory Techniques&lt;/h2&gt;

&lt;h5 id=&#34;visual-memorizer&#34;&gt;Visual Memorizer&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;เดิมที่นั้นมนุษย์ไม่ได้มีวิวัฒนาการมาเพื่อจดจำชื่อหรือตัวเลขต่างๆ แต่เพื่อจดจำภาพ จดจำว่าแหล่งอาหารอยู่ไหน บริเวณไหนไม่ปลอดภัย มนุษย์จึงมีพัฒนาการ ด้าน Spatial and visual sense อย่างดีเยี่ยม สังเกตเวลาคุณไปเจอสถานที่ใหม่ๆ คุณมักจะจำรายละเอียดเล็กๆน้อยของสถานที่นั้นๆได้ดี&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ดังนั้นเวลาจำ พยายามเอาsense ทุกๆอย่างมาใช้ในการช่วยจำ เช่น การดู ฟัง สัมผัส ดมกลิ่น ได้ยิน&lt;/li&gt;
&lt;li&gt;มนุษย์พัฒนาความจำประเภท “where things are” และ “how they look” memory system ได้ดีกว่า&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ดังนั้นสิ่งที่ช่วยในการสร้างความทรงจำระยะยาวที่ดีอันหนึ่งคือจำเป็นรูป&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;spaced-repetition&#34;&gt;Spaced Repetition&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;ดังที่เคยกล่าวไปว่า การทำ Space repetition (แบ่งจำข้อมูลโดยทิ้งช่วงเวลา เช่น day 0,3,7,14..) จะช่วยให้คุณสามารถจดจำสิ่งต่างๆได้ดีเยี่ยม วิธีทำ Spaced repetition นั้นก็มีหลายแบบ เช่น&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;Reread หนังสือหรือเนื้อนั้นๆที่คุณอ่าน โดยทิ้งช่วงระยะห่าง&lt;/li&gt;
&lt;li&gt;พยายาม Recall ข้อมูลนั้นๆ โดยทิ้งช่วงระยะห่าง&lt;/li&gt;
&lt;li&gt;Flashcard ก็ช่วยได้ดี อาจใช้ Software ช่วย เช่น Anki Flashcard&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;long-term-memory&#34;&gt;Long Term Memory&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;มีรายงานเคสผู่วยที่ถูกผ่าตัดส่วน Hippocampus ออกไปเพื่อรักษาโรคลมชัก&lt;/li&gt;
&lt;li&gt;หลังจากการผ่าตัดสำเร็จไปด้วยดี เขากับกลายเป็นคนที่ไม่สามารถจำอะไรใหม่ๆได้เลย&lt;/li&gt;
&lt;li&gt;ที่เป็นเช่นนี้เพราะ Hippocampus เป็นส่วนที่นำข้อมูลใหม่ๆลงไปใน cortex ซึ่งมันกินระยะเวลาหลายๆปี (Memory consolidation) กว่าข้อมูลนั้นจะฝังติดแน่น ดังนั้นเขาจะจำเรื่องราวสมัยเด็กๆได้ แต่จะไม่สามารถจำเรื่องที่เกิดประมาณ 2-3 ปีก่อนเขาผ่าตัด หรือหลังผ่าตัดได้เลย&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://i2.wp.com/www.theobservingmind.co/wp-content/uploads/2019/06/Memory-mechanism.jpg?fit=800%2C450&amp;amp;ssl=1&#34; alt=&#34;Memory Consolidation&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ความจำนั้นเป็นสิ่งที่แปรเปลี่ยนไปได้เรื่อยๆ&lt;/li&gt;
&lt;li&gt;เมื่อคุณมีความจำบางอย่าง มันจะถูกเก็บใน long term memory ในตอนแรกด้วย process ชื่อ consolidation แต่เมื่อคุณนึกถึงมันซ้ำ ความจำในระยะยาวนี้ก็จะถูกนำกลับมาอีกครั้ง(Reactivation)

&lt;ul&gt;
&lt;li&gt;ความจำที่เอามาดูใหม่นี้ ก็สามารถกลับไปยัง long term memory ได้ ด้วย context อันใหม่ และมันสามารถไปSave ทับ old memory ได้ ด้วยสิ่งที่เรียกว่า Reconsolidation&lt;/li&gt;
&lt;li&gt;ทั้ง consolidation และ reconsolidation นี้เกิดในระหว่างการนอนหลับ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ดังนั้นการแบ่งเนื้อหาเรียนออกเป็นระยะเวลายาวๆ ค่อยๆเรียน จะมีประโยชน์กว่า เมื่อเทียบกับการอัดเนื้อหาในเวลาสั้นๆ (cramming)

&lt;ul&gt;
&lt;li&gt;หากคุณจะเรียนอะไรหนึ่งชม มันจะจำได้ดีกว่าถ้าคุณแบ่งซอยย่อนมันครั้งละ 10 นาที ต่อหนึ่งเดือน ดีกว่า 1 ชม จบได้ในวันเดียว&lt;/li&gt;
&lt;li&gt;เช่นเดียวกัน ถ้าคุณรอ cram ทุกอย่างก่อนวันสอบหนึ่งวัน คุณก็จะลืมมันอย่างรวดเร็ว&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;meaningful-groups-and-memory-palace&#34;&gt;Meaningful Groups and Memory palace&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;1.  Meaningful groups
    -   เวลาจำตัวเลข อาจเอามันมาเชื่อมโยงกับเหตุการณ์สำคัญในชีวิตคุณ
    -   เวลาจำ Item ในกลุ่มเดียวกัน อาจใช้Mnemonics โดยการเอาสิ่งต่างๆที่ต้องจำในกลุ่มเดียวกัน มาเชื่อมโยงกับเหตุการ สิ่งของบางอย่าง เพื่อให้จำได้ง่ายขึ้น เช่น เอาตัวอักษรตัวแรกของรายการต่างๆ มาเรียงกัน

&lt;ol&gt;
&lt;li&gt;Memory Palace

&lt;ul&gt;
&lt;li&gt;คือการจินตนาการถึงสถานที่ที่คุณคุ้นเคย เช่น แผนผังห้องนั่งเล่นที่บ้านแล้วก็ให้ทำ visual notepad คือใส่รูปต่างๆที่ต้องการจำลงไปที่มุมต่างๆของบ้าน&lt;/li&gt;
&lt;li&gt;วิธีนี้ใช้ได้ดีในการจำสิ่งที่ไม่เกี่ยวกัน เช่น list รายการของที่ต้องไปซื้อ เช่น ถ้าคุฯจะซื้อนม น้ำตาล ขนมปัง ก็ให้จินตนาการว่ามีขวดนมขนาดใหญ่ตั้งบนโซฟา ขนมปังอยู่เหนือประตู และไข่ไก่แตกอยู่ที่พื้น&lt;/li&gt;
&lt;li&gt;ในช่วงแรกๆที่คุณใช้วิธีนี้ คุณจะจำได้ช้าและอาจดูเหมือนไม่มีประสิทธิภาพ แต่ถ้าคุณฝึกใช้มันบ่อยๆ ในบางคนสามารถใช้ technique นี้ในการจดจำสิ่งของได้ถึง 40-50 อย่าง ในระยะเวลารวดเร็ว&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;part-v-the-test-taking-tip&#34;&gt;Part V : The Test Taking Tip&lt;/h2&gt;

&lt;h5 id=&#34;test-checklist&#34;&gt;Test Checklist&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Checklist อันนี้พัฒนาโดยนักการศึกษาในตำนาน Dr Richard Felder แม้ว่ามันจะออกแบบมาสำหรับการสอบวิศวกรรม แต่ก็สามารถประยุกต์ใช้ได้กับวิชาต่างๆ&lt;/li&gt;
&lt;li&gt;หากคุณมีคำถามว่า “ฉันควรจะเตรียมตัวสำหรับการสอบอย่างไร ” ให้เช็คว่าคุณได้ทำสิ่งต่างๆ เพื่อให้แต่ละข้อนั้น “ใช่” หรือไม่&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;คุณได้ใช้ความพยายามอย่างจริงจังเพื่อเข้าใจเนื้อหาหรือไม่? แค่การมองหาตัวอย่างแบบฝึกหัดที่มีเฉลยไม่ถือว่าได้พยายามแล้ว&lt;/li&gt;
&lt;li&gt;คุณได้ร่วมทำการบ้านกับเพื่อนร่วมชั้นหรืออย่างน้อยก็ได้ตรวจคำตอบที่ได้กับคนอื่นหรือไม่?&lt;/li&gt;
&lt;li&gt;คุณได้พยายามดูเค้าโครง/สรุปคำตอบของการบ้านก่อนจะอ่านหนังสือกับเพื่อนร่วมชั้นหรือไม่?&lt;/li&gt;
&lt;li&gt;คุณได้มีส่วนร่วมในการทำการบ้านด้วยการเสนอไอเดียและถามคำถามหรือไม่?&lt;/li&gt;
&lt;li&gt;คุณได้ปรึกษาอาจารย์หรือผู้ช่วยอาจารย์เมื่อมีปัญหาสงสัยหรือไม่?&lt;/li&gt;
&lt;li&gt;คุณเข้าใจคำตอบของการบ้านทุกข้อเมื่อคุณส่งการบ้านนั้นหรือไม่?&lt;/li&gt;
&lt;li&gt;ระหว่างอยู่ในชั้นเรียน คุณได้ถามคำอธิบายคำตอบของการบ้านข้อที่คุณไม่เข้าใจหรือไม่?&lt;/li&gt;
&lt;li&gt;หากคุณมีคู่มือการเรียนการสอน คุณได้ตั้งใจอ่านคู่มือนั้นก่อนการสอบ และมั่นใจว่า สามารถทำได้จุดประสงคของการเรียนครบทุกข้อแล้วหรือไม่?&lt;/li&gt;
&lt;li&gt;คุณได้พยายามสรุปและหาแนวการแก้ปัญหาแบบคร่าวๆอย่างรวดเร็ว โดยไม่เสียเวลา ไปกับการคิดคำนวณรายละเอียดย่อยๆหรือไม่?&lt;/li&gt;
&lt;li&gt;คุณได้ทบทวนคู่มือการเรียนการสอนและคำถามกับเพื่อนร่วมชั้นเรียน และทดสอบกันและกันหรือไม่?&lt;/li&gt;
&lt;li&gt;หากมีการจัดติวก่อนการสอบคุณได้เข้าร่วมและถามคำถาม เกี่ยวกับสิ่งที่คุณไม่มั่นใจหรือไม่?&lt;/li&gt;
&lt;li&gt;ข้อสุดท้าย คุณได้นอนหลับพักผ่อนเพียงพอ ในคืนวันก่อนสอบหรือไม่หากคำตอบสำหรับข้อสุดท้ายนี้คือ ไม่ คำตอบสำหรับคำถามข้ออื่นๆอาจไม่สำคัญเลย&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;hard-start-jump-to-easy-technique&#34;&gt;Hard Start – Jump to Easy Technique&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Classic way ที่เราถูกสอนมาคือเวลาทำข้อสอบ ให้ทำข้อง่ายๆก่อน เพราะจะใช้เวลาน้อยกว่า ทำให้เรามีเวลาเหลือไปสู้กับข้อยากๆได้ต่อ&lt;/li&gt;
&lt;li&gt;แต่อย่างที่รู้กันว่าการทำข้อสอบนั้นก็คือการใช้ focus mode , ซึ่งในปัญหายากๆก็อาจจำเป็นต้องใช้ความคิดสร้างสรรมาก ต้องการการเชื่อมโยงต่างๆมากกว่าปกติ ซึ่งเป็นหน้าที่ของ diffuse mode&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ดังนั้นวิธีที่แนะนำคือ เมื่อได้ข้อสอบมาแล้ว ให้ scan ดูคร่าวๆ ว่าข้อสอบเกี่ยวกับอะไร แล้วให้tackle ข้อยากๆก่อน แต่เมื่อคุณลองอ่านโจทย์ข้อยากๆแล้ว ก็ให้ใช้วเวลาคิดเต็มที่ หากคิดไม่ออกภายใน 1-2 นาที ก็รีบดึงตัวเองออกมา แล้วไปทำข้อง่ายๆก่อน แล้วค่อยกลับมาทำข้อยากๆนี้ใหม่ ถ้ายังไม่ได้ ก็กลับไปทำข้อง่ายก่อน ทำแบบนี้สลับไปสลับมา&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;วิธีนี้จะทำให้ระหว่างที่เรากำลังคิดข้อง่ายๆ ตัว diffuse mode จะทำหน้าที่ in background ในการหาความเชื่อมโยง หาวิธีแก้ปัญหาใหม่ๆให้กับโจทย์ข้อยากนั้นไปด้วย&lt;/li&gt;
&lt;li&gt;วิธีนี้ยังช่วยป้องกัน Einstellung หรือก็คือการติดกับโจทย์ข้อนั้น เพราะดันไปคิดวิธีผิดตั้งแต่ต้นนั่นเอง&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ที่เน้นย้ำคือ วิธีนี้ คุณต้องมีวินัยพอ ที่จะดึงตัวเองออกมาให้ได้ หากติดกับโจทย์ข้อยากๆนาน 1-2 นาทีขึ้นไป&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;stress&#34;&gt;Stress&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;เมื่อคุณมีความเครียดร่างกายจะหลั่งสาร cortisol ทำให้คุณมีเหงื่อออกมาก ใจสั่น รู้สึกหวิว&lt;/li&gt;
&lt;li&gt;ความเครียดจากการสอบหรือเห็นข้อสอบเป็นเรื่องปกติ แต่แทนทีคุณจะกลัว ให้คุณเปลี่ยนความคิดว่าข้อสอบนี้น่าตื่นเต้น และฉันจะทำมันให้ได้&lt;/li&gt;
&lt;li&gt;อีกหนึ่งวิธีที่ช่วยได้ คือการหายใจเข้าออกลึกๆ เพ่งสมาธิไปที่ลมหายใจของคุณ&lt;/li&gt;
&lt;li&gt;หนึ่งในความเครียดจากการสอบ คือการกลัวจะสอบไม่ได้เกรดที่ดีพอไปเรียนต่ออาชีพที่ต้องการ ก็ให้คุณมี plan B มีคำตอบในใจว่าหากไม่ได้อาชีพนี้ จะทำอะไรเป็นอาชีพสำรอง ซึ่งจะทำให้คุณช่วยผ่อนคลายความเครียดไปได้ ทำให้การสอบนั้นดีขึ้น&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;other-tips&#34;&gt;Other Tips&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;1 วันก่อนสอบ ให้มากสุดคือแค่อ่าน material เร็วๆ เพื่อฟื้นฟูความจำ คุณไม่ควร cramming ใดๆในวันก่อนสอบ ส่วนหนึ่งเพื่อให้ mental muscle พักผ่อนเต็มที่ ลิย่าลืม good night sleep มิฉะนั้นทุกอย่างที่เตรียมตัวมาก็จะสูญเปล่า&lt;/li&gt;
&lt;li&gt;Check คำตอบจากหน้าหลังมาข้างหน้า อาจทำให้คุณได้มุมมองการทำข้อสอบใหม่ๆได้&lt;/li&gt;
&lt;li&gt;เวลาตอบคำถาม MCQ ให้ลองปิดช้อยคำตอบ แล้ว Recall คำตอบของคุณให้ได้ก่อน&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Reference : &lt;a href=&#34;https://www.theobservingmind.co/learning-how-to-learn-summary/?fbclid=IwAR1UfDs5P9tH0vqGiELJFHUhcHaENl5vruGE_97G6g-1fwJ2ZvTHL-4ekMw&#34;&gt;https://www.theobservingmind.co&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Dictionary</title>
      <link>https://dragon-library.github.io/docs/post/dictionary/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://dragon-library.github.io/docs/post/dictionary/</guid>
      <description>

&lt;p&gt;ในบทนี้ คุณจะได้เรียนรู้เกี่ยวกับโครงสร้างข้อมูล Dictionary ในภาษา Python เราจะแนะนำให้คุณรู้จักกับ Dictionary คืออะไร และการประกาศและใช้งานสำหรับเก็บข้อมูลในการเขียนโปรแกรม นอกจากนี้ เรายังจะพูดถึงการใช้งานเมธอดและ built-in functions ของ Dictionary และตัวอย่างการใช้งานกับการเขียนโปรแกรมใบรูปแบบต่างๆ ในภาษา Python&lt;/p&gt;

&lt;p&gt;Dictionary คือประเภทข้อมูลที่เก็บข้อมูลในรูปแบบคู่ของ Key และ Value โดยที่ Key ใช้สำหรับเป็น Index ในการเข้าถึงข้อมูลและ Value เป็นค่าข้อมูลที่สอดคล้องกับ Key ของมัน การเข้าถึงข้อมูลใน Dictionary นั้นรวดเร็วเพราะว่าข้อมูลได้ถูกทำ Index ไว้อัตโนมัติโดยใช้ Key นอกจากนี้ Dictionary ยังมีเมธอดและฟังก์ชันอำนวยความสะดวกสำหรับการทำงานทั่วไป&lt;/p&gt;

&lt;h2 id=&#34;การประกาศ-dictionary-ในภาษา-python&#34;&gt;การประกาศ Dictionary ในภาษา Python&lt;/h2&gt;

&lt;p&gt;ในการใช้งาน Dictionary เรามักจะใช้เก็บข้อมูลที่สามารถใช้บางอย่างที่สามารถจำแนกข้อมูลออกจากกันได้ โดยกำหนดให้สิ่งนั้นเป็น Key ในการประกาศ Dictionary สมาชิกของมันจะอยู่ภายในวงเล็บปีกกา &lt;code&gt;{}&lt;/code&gt; มาดูตัวอย่างในการประกาศ Dictionary ในภาษา Python&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;scores = {&#39;james&#39;: 1828, &#39;thomas&#39;: 3628, &#39;danny&#39;: 9310}
scores[&#39;bobby&#39;] = 4401

numbers = {1: &#39;One&#39;, 2: &#39;Two&#39;, 3: &#39;Three&#39;}

print(scores)
print(numbers)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ในตัวอย่าง เราได้ประกาศตัวแปร Dictionary ที่มีชื่อว่า &lt;code&gt;scores&lt;/code&gt; สำหรับเก็บคะแนนของแต่ละคนโดยใช้ชื่อเป็น Key และค่าของมันก็คือคะแนน สมาชิกของ Dictionary แต่ละตัวจะถูกกำหนดในรูปแบบ &lt;code&gt;key: value&lt;/code&gt; และคั่นสมาชิกแต่ละตัวด้วยเครื่องหมายคอมมา เราได้กำหนดค่าเริ่มต้นสามค่าให้กับ Dictionary และสามารถกำหนดค่าให้กับ Dictionary ในรูปแบบ &lt;code&gt;scores[&#39;bobby&#39;]&lt;/code&gt; ได้หลังจากที่ตัวแปรถูกสร้างแล้ว สังเกตว่าเราสามารถใช้ Key เป็น String หรือประเภทข้อมูลอื่นๆ ได้ ต่อมาตัวแปร &lt;code&gt;numbers&lt;/code&gt; เป็น Dictionary ที่มี Key เป็นตัวเลข&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;{&#39;james&#39;: 1828, &#39;thomas&#39;: 3628, &#39;danny&#39;: 9310, &#39;bobby&#39;: 4401}
{1: &#39;One&#39;, 2: &#39;Two&#39;, 3: &#39;Three&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;นี่เป็นผลลัพธ์ของโปรแกรมในการแสดงผลข้อมูลภายในตัวแปร Dictionary ทั้งสองที่เราได้สร้างขึ้น&lt;/p&gt;

&lt;h2 id=&#34;การเข-าถ-งข-อม-ลภายใน-dictionary&#34;&gt;การเข้าถึงข้อมูลภายใน Dictionary&lt;/h2&gt;

&lt;p&gt;หลังจากที่เราได้ประกาศ Dictionary ไปแล้ว ต่อไปจะการเข้าถึงข้อมูลเพื่ออ่านและอัพเดทข้อมูลโดยผ่านทาง Key ของมัน มาดูตัวอย่างการเข้าถึงข้อมูลใน Dictionary&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;scores = {&#39;james&#39;: 1828, &#39;thomas&#39;: 3628, &#39;danny&#39;: 9310, &#39;bobby&#39;: 4401}

# display data
print(&#39;james =&amp;gt;&#39;, scores[&#39;james&#39;])
print(&#39;thomas =&amp;gt;&#39;, scores[&#39;thomas&#39;])
print(&#39;danny =&amp;gt;&#39;, scores[&#39;danny&#39;])
print(&#39;bobby =&amp;gt;&#39;, scores[&#39;bobby&#39;])

# update data
scores[&#39;james&#39;] = scores[&#39;james&#39;] + 1000
scores[&#39;thomas&#39;] = 100

print(&#39;james =&amp;gt;&#39;, scores[&#39;james&#39;])
print(&#39;thomas =&amp;gt;&#39;, scores[&#39;thomas&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ในตัวอย่าง เรามีตัวแปร &lt;code&gt;scores&lt;/code&gt; สำหรับเก็บคะแนนของผู้เล่นโดยชื่อเป็น Key ของ Dictionary ในการเข้าถึงข้อมูลนั้นจะใช้ Key ของมัน ในส่วนแรกเป็นการเข้าถึงข้อมูลภายใน Dictionary เพื่อแสดงผลคะแนนของแต่ละ Key ออกมาทางหน้าจอ ต่อมาเป็นการอัพเดทข้อมูลใน Dictionary โดยเราได้เพิ่มค่าให้กับ Key &lt;code&gt;&#39;james&#39;&lt;/code&gt; ขึ้นไปอีก 1000 และกำหนดค่าให้กับ Key &lt;code&gt;&#39;thomas&#39;&lt;/code&gt; เป็น 100 และแสดงผลอีกครั้ง&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;james =&amp;gt; 1828
thomas =&amp;gt; 3628
danny =&amp;gt; 9310
bobby =&amp;gt; 4401
james =&amp;gt; 2828
thomas =&amp;gt; 100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;นี่เป็นผลลัพธ์การทำงานของโปรแกรม ในการเข้าถึงข้อมูลภายใน Dictionary เพื่ออ่านค่าและอัพเดทข้อมูล&lt;/p&gt;

&lt;p&gt;ในการเข้าถึงข้อมูลภายใน Dictionary นั้น คุณต้องตรวจสอบให้แน่ใจว่า Key นั้นมีอยู่จริง ไม่เช่นนั้นโปรแกรมจะเกิดข้อผิดพลาดขึ้น ยกตัวอย่างเช่น&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;scores = {&#39;james&#39;: 1828, &#39;thomas&#39;: 3628, &#39;danny&#39;: 9310, &#39;bobby&#39;: 4401}
print(scores[&#39;smith&#39;]) # Error

# check if key smith exist
if &#39;smith&#39; in scores.keys():
    print(scores[&#39;smith&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ในตัวอย่างข้างบน โปรแกรมจะเกิดความผิดพลาดขึ้นเพราะเราได้เข้าถึง Key &lt;code&gt;&#39;smith&#39;&lt;/code&gt; ซึ่งไม่มีอยู่ใน &lt;code&gt;scores&lt;/code&gt; อย่าไรก็ตาม เราสามารถตรวจว่า Key มีอยู่หรือไม่ได้โดยการใช้คำสั่ง &lt;code&gt;in&lt;/code&gt; เพื่อตรวจสอบจาก Key ในเมธอด &lt;code&gt;keys()&lt;/code&gt; ของ Dictionary&lt;/p&gt;

&lt;h2 id=&#34;การอ-านค-าใน-dictionary-ด-วยคำส-ง-for-loop&#34;&gt;การอ่านค่าใน Dictionary ด้วยคำสั่ง For loop&lt;/h2&gt;

&lt;p&gt;คำสั่ง For loop นั้นเป็นคำสั่งที่ยืดหยุ่นและสามารถใช้งานได้อย่างหลากหลาย ในการอ่านค่าใน Dictionary นั้นเราสามารถใช้ For loop เพื่อวนอ่านค่าทั้ง Key และ Values ใน Dictionary ได้ มาดูตัวอย่างของโปรแกรม&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;countries = {&#39;de&#39;: &#39;Germany&#39;, &#39;ua&#39;: &#39;Ukraine&#39;,
             &#39;th&#39;: &#39;Thailand&#39;, &#39;nl&#39;: &#39;Netherlands&#39;}

for k, v in countries.items():
    print(k, v)

# iterate through keys
print(&#39;Key:&#39;, end = &#39; &#39;)
for k in countries.keys():
    print(k, end = &#39; &#39;)

# iterate through values
print(&#39;\nValue:&#39;, end = &#39; &#39;)
for v in countries.values():
    print(v, end = &#39; &#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ในตัวอย่าง เป็นการใช้งานคำสั่ง For loop วนอ่านค่าใน Dictionary ซึ่งมี 3 loop ด้วยกัน ในลูปแรกเป็นการอ่านค่าแบบ Key และ Value ในแต่ละรอบของการทำงานเราเอาข้อมูลใน Dictionary ด้วยเมธอด &lt;code&gt;items()&lt;/code&gt; ซึ่งจะส่งค่ากลับเป็น Key และ Value กับมาและโหลดใส่ในตัวแปร &lt;code&gt;k&lt;/code&gt; และ &lt;code&gt;v&lt;/code&gt; ตามลำดับ&lt;/p&gt;

&lt;p&gt;ในลูปที่สอง เป็นการวนอ่าน Key ทั้งหมดภายใน Dictionary โดยเมธอด &lt;code&gt;keys()&lt;/code&gt; จะส่งค่ากลับเป็น List ของ Key ทั้งหมดและโหลดใส่ในตัวแปร &lt;code&gt;k&lt;/code&gt; แต่ละรอบของลูป และในลูปสุดท้ายนั้นเป็นการอ่าน Value ทั้งหมด และเมธอด &lt;code&gt;values()&lt;/code&gt; เพื่อรับค่าของ Value ทั้งหมดมาและใส่ในตัวแปร &lt;code&gt;v&lt;/code&gt; ในแต่ละรอบของลูป&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;de Germany
ua Ukraine
th Thailand
nl Netherlands
Key: de ua th nl 
Value: Germany Ukraine Thailand Netherlands
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;นี่เป็นผลลัพธ์การทำงานของโปรแกรม ในการใช้คำสั่ง For loop เพื่ออ่านข้อมูลใน Dictionary ในภาษา Python&lt;/p&gt;

&lt;h2 id=&#34;python-dictionary-methods&#34;&gt;Python Dictionary methods&lt;/h2&gt;

&lt;p&gt;เช่นเดียวกับข้อมูลประเภทอื่นๆ Dictionary มีเมธอดที่ให้คุณสามารถทำงานกับมันได้ง่ายขึ้น โดยส่วนมากแล้วมักจะเป็นเมธอดในการอัพเดทและรับค่าข้อมูลภายใน Dictionary ต่อไปมาดูตัวอย่างการใช้งานเมธอดของ Dictionary ในภาษา Python&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;countries = {&#39;de&#39;: &#39;Germany&#39;, &#39;ua&#39;: &#39;Ukraine&#39;,
             &#39;th&#39;: &#39;Thailand&#39;, &#39;nl&#39;: &#39;Netherlands&#39;}

print(countries.keys())
print(countries.values())

print(countries.get(&#39;de&#39;)) # equal to countries[&#39;de&#39;]
countries.setdefault(&#39;tr&#39;, &#39;Turkey&#39;)

print(countries.popitem())
print(countries.popitem())

print(countries.items())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ในตัวอย่าง เป็นโปรแกรมในการใช้งานเมธอดของ Dictionary ตัวแปรของเรา &lt;code&gt;countries&lt;/code&gt; มาจากตัวอย่างก่อนหน้าที่มี Key เป็นชื่อย่อของประเทศและ Value เป็นชื่อเต็มของประเทศ เมธอด &lt;code&gt;keys()&lt;/code&gt; ส่งค่ากลับเป็น List ของ Key ทั้งหมดภายใน Dictionary และเมธอด &lt;code&gt;values()&lt;/code&gt; นั้นจะส่งเป็น List ของ Value&lt;/p&gt;

&lt;p&gt;หลังจากนั้นเป็นการเข้าถึงข้อมูลด้วยเมธอด &lt;code&gt;get()&lt;/code&gt; โดยมี Key เป็นอาร์กิวเมนต์ซึ่งผลลัพธ์การทำงานของมันจะเหมือนกับการเข้าถึงข้อมูลโดยตรง เช่น &lt;code&gt;countries[&#39;de&#39;]&lt;/code&gt; และเมธอด &lt;code&gt;setdefault()&lt;/code&gt; ใช้รับค่าจากคีย์ที่กำหนด ถ้าไม่มีจะเป็นการเพิ่มค่าดังกล่าวเข้าไปใน Dictionary และต่อมาเมธอด &lt;code&gt;popitem()&lt;/code&gt; จะนำสมาชิกตัวสุดท้ายออกจาก Dictionary และส่งค่าดังกล่าวกลับมาเป็น Tuple ออบเจ็ค ส่วนเมธอด &lt;code&gt;items()&lt;/code&gt; นั้นจะค่ากลับมาเป็น List ของ Tuple ของออบเจ็คของ Key และ Value ทั้งหมด&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dict_keys([&#39;de&#39;, &#39;ua&#39;, &#39;th&#39;, &#39;nl&#39;])
dict_values([&#39;Germany&#39;, &#39;Ukraine&#39;, &#39;Thailand&#39;, &#39;Netherlands&#39;])
Germany
(&#39;tr&#39;, &#39;Turkey&#39;)
(&#39;nl&#39;, &#39;Netherlands&#39;)
dict_items([(&#39;de&#39;, &#39;Germany&#39;), (&#39;ua&#39;, &#39;Ukraine&#39;), (&#39;th&#39;, &#39;Thailand&#39;)])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;นี่เป็นผลลัพธ์การทำงานของโปรแกรม ในการใช้เมธอดใน Dictionary ในภาษา Python และจากในตัวอย่างนั้นเป็นเพียงส่วนหนึ่งของเมธอดที่มีเท่านั้น สำหรับเมธอดทั้งหมดใน Dictionary นั้นแสดงดังตารางข้างล่างนี้&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Methods&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;clear()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ลบข้อมูลทั้งหมดภายใน Dictionary&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;copy()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;คัดลอก Dictionary ทั้งหมดไปยังอันใหม่&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;get(key[, default])&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ส่งค่าข้อมูลใน Dictionary จาก Key ที่กำหนด ถ้าหากไม่มี Key อยู่และไม่ได้กำหนด default จะทำให้เกิดข้อผิดพลาด KeyError&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;items()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ส่งค่ากลับเป็นออบเจ็คของ Key และ Value&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;keys()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ส่งค่ากลับเป็น List ของ Key ทั้งหมดใน Dictionary&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;pop(key[, default])&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ส่งค่ากลับเป็นค่าสุดท้ายใน Dictionary&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;popitem()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ส่งค่ากลับเป็น Tuple ออบเจ็คของ Key และ Value&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;setdefault(key[, default])&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ส่งค่ากลับเป็นค่าของ Key ที่กำหนด ถ้าหากไม่มี Key อยู่ใส่ข้อมูลเข้าไปใน Dictionary&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;update([other])&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;อัพเดท Dictionary กับคู่ของ Key และ Value จากออบเจ็คอื่น และเขียนทับ Key ที่มีอยู่&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;values()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ส่งค่ากลับเป็น List ของ Value ทั้งหมดใน Dictionary&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;python-dictionary-functions&#34;&gt;Python Dictionary functions&lt;/h2&gt;

&lt;p&gt;ฟังก์ชันที่เป็นพื้นฐานและสามารถใช้ได้กับโครงสร้างข้อมูลทุกประเภทคือฟังก์ชัน &lt;code&gt;len()&lt;/code&gt; เป็นฟังก์ชันที่ใช้สำหรับนับจำนวนสมาชิกของเจ็ค และ Dictionary ยังมีฟังก์ชัน &lt;code&gt;iter()&lt;/code&gt; ที่ทำงานเหมือนกับเมธอด &lt;code&gt;items()&lt;/code&gt; นี่เป็นตารางของฟังก์ชันที่สามารถใช้ได้กับ Dictionary&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Function&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;len(dict)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ส่งค่ากลับเป็นจำนวนของออบเจ็คใน Dictionary&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;iter(dict)|ส่งค่ากลับเป็นออบเจ็คของ Key และ Value|&lt;/p&gt;

&lt;p&gt;คุณสามารถใช้คำสั่ง &lt;code&gt;del&lt;/code&gt; เพื่อลบข้อมูลภายใน Dictionary ได้ เช่น คำสั่ง &lt;code&gt;del countries[&#39;de&#39;]&lt;/code&gt; เพื่อลบสมาชิกที่มี Key ที่กำหนดออกไป และคำสั่ง &lt;code&gt;del countries&lt;/code&gt; นั้นเป็นการลบทั้งตัวแปร&lt;/p&gt;

&lt;p&gt;ในบทนี้ คุณได้เรียนรู้เกี่ยวกับ Dictionary ในภาษา Python คุณได้ทราบวิธีการสร้างและใช้งาน Dictionary และสถานการณ์ที่เหมาะสมที่จะใช้ข้อมูลประเภทนี้ เราได้แสดงให้เห็นถึงการเข้าถึงข้อมูลภายใน Dictionary แบบพื้นฐานและด้วยการใช้คำสั่งวนซ้ำ For loop รวมถึงการใช้งานเมธอดและฟังก์ชันสำหรับจัดการ Dictionary&lt;/p&gt;

&lt;p&gt;Reference : &lt;a href=&#34;http://marcuscode.com/lang/python/dictionary&#34;&gt;http://marcuscode.com/lang/python/dictionary&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Display Jupyter Notebooks with Academic</title>
      <link>https://dragon-library.github.io/docs/post/jupyter/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://dragon-library.github.io/docs/post/jupyter/</guid>
      <description>

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from IPython.core.display import Image
Image(&#39;https://www.python.org/static/community_logos/python-logo-master-v3-TM-flattened.png&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;./index_1_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Welcome to Academic!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Welcome to Academic!
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;install-python-and-jupyterlab&#34;&gt;Install Python and JupyterLab&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.anaconda.com/distribution/#download-section&#34;&gt;Install Anaconda&lt;/a&gt; which includes Python 3 and JupyterLab.&lt;/p&gt;

&lt;p&gt;Alternatively, install JupyterLab with &lt;code&gt;pip3 install jupyterlab&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;create-or-upload-a-jupyter-notebook&#34;&gt;Create or upload a Jupyter notebook&lt;/h2&gt;

&lt;p&gt;Run the following commands in your Terminal, substituting &lt;code&gt;&amp;lt;MY-WEBSITE-FOLDER&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;SHORT-POST-TITLE&amp;gt;&lt;/code&gt; with the file path to your Academic website folder and a short title for your blog post (use hyphens instead of spaces), respectively:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p &amp;lt;MY-WEBSITE-FOLDER&amp;gt;/content/post/&amp;lt;SHORT-POST-TITLE&amp;gt;/
cd &amp;lt;MY-WEBSITE-FOLDER&amp;gt;/content/post/&amp;lt;SHORT-POST-TITLE&amp;gt;/
jupyter lab index.ipynb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;jupyter&lt;/code&gt; command above will launch the JupyterLab editor, allowing us to add Academic metadata and write the content.&lt;/p&gt;

&lt;h2 id=&#34;edit-your-post-metadata&#34;&gt;Edit your post metadata&lt;/h2&gt;

&lt;p&gt;The first cell of your Jupter notebook will contain your post metadata (&lt;a href=&#34;https://sourcethemes.com/academic/docs/front-matter/&#34;&gt;front matter&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;In Jupter, choose &lt;em&gt;Markdown&lt;/em&gt; as the type of the first cell and wrap your Academic metadata in three dashes, indicating that it is YAML front matter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title: My post&#39;s title
date: 2019-09-01

# Put any other Academic metadata here...
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Edit the metadata of your post, using the &lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content&#34;&gt;documentation&lt;/a&gt; as a guide to the available options.&lt;/p&gt;

&lt;p&gt;To set a &lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/#featured-image&#34;&gt;featured image&lt;/a&gt;, place an image named &lt;code&gt;featured&lt;/code&gt; into your post&amp;rsquo;s folder.&lt;/p&gt;

&lt;p&gt;For other tips, such as using math, see the guide on &lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34;&gt;writing content with Academic&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;convert-notebook-to-markdown&#34;&gt;Convert notebook to Markdown&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;jupyter nbconvert index.ipynb --to markdown --NbConvertApp.output_files_dir=.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;p&gt;This post was created with Jupyter. The orginal files can be found at &lt;a href=&#34;https://github.com/gcushen/hugo-academic/tree/master/exampleSite/content/post/jupyter&#34;&gt;https://github.com/gcushen/hugo-academic/tree/master/exampleSite/content/post/jupyter&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
