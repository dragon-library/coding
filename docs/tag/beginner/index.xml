<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>beginner | e-Library</title>
    <link>https://dragon-library.github.io/docs/tag/beginner/</link>
      <atom:link href="https://dragon-library.github.io/docs/tag/beginner/index.xml" rel="self" type="application/rss+xml" />
    <description>beginner</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Dragon©2020</copyright><lastBuildDate>Sun, 10 May 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://dragon-library.github.io/docs/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>beginner</title>
      <link>https://dragon-library.github.io/docs/tag/beginner/</link>
    </image>
    
    <item>
      <title>Collections.Counter</title>
      <link>https://dragon-library.github.io/docs/post/collections/</link>
      <pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate>
      <guid>https://dragon-library.github.io/docs/post/collections/</guid>
      <description>&lt;p&gt;มอดูล collections ของไพธอนประกอบไปด้วยออบเจ็กต์จิปาถะที่อาจสะดวกที่จะใช้ในงานบางอย่าง เช่น collections.OrderedDict ที่ได้เขียนไปใน &lt;a href=&#34;https://phyblas.hinaboshi.com/20190706&#34;&gt;https://phyblas.hinaboshi.com/20190706&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ในบทความนี้จะแนะนำออบเจ็กต์อีกตัวที่อาจมีโอกาสได้ใช้บ่อย คือ collections.Counter Counter เป็นออบเจ็กต์ที่ใช้งานสะดวก ในเวลาที่เราต้องการจะนับจำนวนของอะไรบางอย่างว่ามีอะไรอยู่เท่าไหร่ เช่น มีลิสต์ที่มีตัวเลขอยู่จำนวนหนึ่ง ต้องการจะนับดูว่ามีตัวเลขอะไรอยู่เท่าไหร่ ถ้าใช้ดิกชันนารีทั่วไป อาจเขียนได้แบบนี้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;lislek = [12,10,11,12,14,11,11,13,11,10,13,12]
naplek = {}
for lek in lislek:
    if(lek in naplek):
        naplek[lek] += 1
    else:
        naplek[lek] = 1

print(naplek) # ได้ {12: 3, 10: 2, 11: 4, 14: 1, 13: 2}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;แต่ถ้าใช้ Counter ก็จะทำได้โดยง่าย โดยแค่ใส่ลิสต์นั้นลงไปก็จะทำการนับให้เลย&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from collections import Counter

lislek = [22,20,21,22,24,21,21,23,21,20,23,22]
naplek = Counter(lislek)
print(naplek) # ได้ Counter({21: 4, 22: 3, 20: 2, 23: 2, 24: 1})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ผลที่ได้จะได้เป็นออบเจ็กต์ Counter ที่เรียงลำดับตามจำนวนจากมากไปน้อยให้เลย&lt;/p&gt;

&lt;p&gt;ออบเจ็กต์ Counter นี้โดยพื้นฐานแล้วมีส่วนคล้ายกับออบเจ็กต์ชนิดดิกชันนารี คือสามารถดูค่าได้โดยใส่คีย์ เพียงแต่ถ้าใส่คีย์ที่ไม่มีจะได้ค่า 0 และมีเมธอด .values() .keys() .items() และสามารถแปลงเป็นดิกชันนารีได้โดยง่าย&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(naplek[22]) # ได้ 3
print(naplek[26]) # ได้ 0
print(naplek.keys()) # ได้ dict_keys([22, 20, 21, 24, 23])
print(naplek.values()) # ได้ dict_values([3, 2, 4, 1, 2])
print(naplek.items()) # ได้ dict_items([(22, 3), (20, 2), (21, 4), (24, 1), (23, 2)])
print(dict(naplek)) # ได้ {22: 3, 20: 2, 21: 4, 24: 1, 23: 2}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ตั้งแต่ไพธอน 3.6 เป็นต้นไปดิกชันนารีจะเรียงอย่างมีลำดับ ดังนั้น Counter เมื่อแปลงเป็นดิกชันนารีแล้วลำดับในที่นี้จะเรียงตามลำดับก่อนหลังที่เริ่มเจอตัวแรก เหมือนอย่างในตัวอย่างแรกที่วนไล่ด้วย for สร้างดิกชันนารีขึ้นมาเอง&lt;/p&gt;

&lt;p&gt;Counter นอกจากจะใช้กับลิสต์แล้วก็ยังใช้กับสายอักขระได้ด้วย โดยถ้าป้อนสายอักขระลงไปมันก็จะช่วยนับจำนวนให้ว่ามีอักษรตัวไหนอยู่กี่ตัว&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;napakson = Counter(&#39;จอดรถตรงตรอกยอมทนอดนอนอดกรนรอยลภมรดมดอกหอมบนขอนตรงคลองมอญ&#39;)
print(napakson) # ได้ Counter({&#39;อ&#39;: 12, &#39;ร&#39;: 7, &#39;น&#39;: 6, &#39;ด&#39;: 5, &#39;ม&#39;: 5, &#39;ต&#39;: 3, &#39;ง&#39;: 3, &#39;ก&#39;: 3, &#39;ย&#39;: 2, &#39;ล&#39;: 2, &#39;จ&#39;: 1, &#39;ถ&#39;: 1, &#39;ท&#39;: 1, &#39;ภ&#39;: 1, &#39;ห&#39;: 1, &#39;บ&#39;: 1, &#39;ข&#39;: 1, &#39;ค&#39;: 1, &#39;ญ&#39;: 1})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Counter ที่สร้างมาแล้วสามารถเพิ่มข้อมูลลงไปได้ เช่นโดยใช้ +=&lt;/p&gt;

&lt;p&gt;เช่นอาจลองสร้าง Counter ว่างเปล่าแล้วค่อยๆใส่สมาชิกเพิ่มเข้าไป โดยไล่นับเพิ่มไปเรื่อยๆเช่น&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lislek = [2,1,4,5,2,6,2,6,3,2,4,1,2,2,3,2,1,4,2,4]
naplek = Counter()
for lek in lislek:
    naplek[lek] += 1

print(naplek)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;หรืออาจใช้เมธอด .update() เพื่อทำการเพิ่มข้อมูลใส่เข้าไปเรื่อยๆเช่น&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;napakson = Counter()
napakson.update(&#39;กนกพล&#39;)
print(napakson) # ได้ Counter({&#39;ก&#39;: 2, &#39;น&#39;: 1, &#39;พ&#39;: 1, &#39;ล&#39;: 1})
napakson.update(&#39;คนตลก&#39;)
print(napakson) # ได้ Counter({&#39;ก&#39;: 3, &#39;น&#39;: 2, &#39;ล&#39;: 2, &#39;พ&#39;: 1, &#39;ค&#39;: 1, &#39;ต&#39;: 1})
napakson.update(&#39;ตกคลอง&#39;)
print(napakson) # ได้ Counter({&#39;ก&#39;: 4, &#39;ล&#39;: 3, &#39;น&#39;: 2, &#39;ค&#39;: 2, &#39;ต&#39;: 2, &#39;พ&#39;: 1, &#39;อ&#39;: 1, &#39;ง&#39;: 1})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;นอกจากนี้ยังสามารถสร้างโดยแทนเลขจำนวนข้อมูลเข้าไป เช่นเดียวกับเวลาสร้างดิกชันนารีก็ได้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nap = Counter(a=7,b=2)
print(nap) # ได้ Counter({&#39;a&#39;: 7, &#39;b&#39;: 2})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;หรือจะสร้างโดยแปลงจากดิกชันนารีก็ได้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dic = {11: 2, 13: 4}
nap = Counter(dic)
print(nap) # ได้ Counter({13: 4, 11: 2})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;กรณีที่สร้างด้วยวิธีนี้ ค่าอาจจะไม่ใช่ตัวเลขก็ได้ ไม่ทำให้เกิดข้อผิดพลาดอะไร แต่ถ้าตัวที่ไม่ใช่ตัวเลขถูกใส่ข้อมูลเพิ่มเช่นใช้เมธอด .update() ในสภาพแบบนั้นก็จะเกิดข้อผิดพลาด&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nap = Counter({&amp;quot;ก&amp;quot;: &amp;quot;ข&amp;quot;, &amp;quot;ค&amp;quot;: &amp;quot;ง&amp;quot;})
print(nap) # ได้ Counter({&#39;ค&#39;: &#39;ง&#39;, &#39;ก&#39;: &#39;ข&#39;})
nap.update(&amp;quot;ก&amp;quot;) # ได้ TypeError: can only concatenate str (not &amp;quot;int&amp;quot;) to str
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ถ้าใช้เมธอด .most_common() จะได้ลิสต์ของแต่ละคู่โดยเรียงจากมากไปน้อยตามจำนวนลำดับที่กำหนด แต่ถ้าไม่ได้ใส่เลขลำดับจะแสดงทั้งหมด&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nap = Counter(&#39;สมพรสวดวนจนอรชรสองคนฉงนฉงวยงวยงงคอตกยอมนอนลงบนบก&#39;)
print(nap.most_common(3)) # ได้ [(&#39;น&#39;, 7), (&#39;ง&#39;, 7), (&#39;อ&#39;, 5)]
print(nap.most_common()) # ได้ [(&#39;น&#39;, 7), (&#39;ง&#39;, 7), (&#39;อ&#39;, 5), (&#39;ว&#39;, 4), (&#39;ส&#39;, 3), (&#39;ร&#39;, 3), (&#39;ย&#39;, 3), (&#39;ม&#39;, 2), (&#39;ค&#39;, 2), (&#39;ฉ&#39;, 2), (&#39;ก&#39;, 2), (&#39;บ&#39;, 2), (&#39;พ&#39;, 1), (&#39;ด&#39;, 1), (&#39;จ&#39;, 1), (&#39;ช&#39;, 1), (&#39;ต&#39;, 1), (&#39;ล&#39;, 1)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ถ้าใช้เมธอด .elements() จะได้อิเทอเรเตอร์ที่ไล่สมาชิกที่มีในนั้นทีละตัว&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nap = Counter(&#39;ดวงกมลชงนมผงรอชมภมรบนดอน&#39;)
print(nap) # ได้ Counter({&#39;ม&#39;: 4, &#39;ง&#39;: 3, &#39;น&#39;: 3, &#39;ด&#39;: 2, &#39;ช&#39;: 2, &#39;ร&#39;: 2, &#39;อ&#39;: 2, &#39;ว&#39;: 1, &#39;ก&#39;: 1, &#39;ล&#39;: 1, &#39;ผ&#39;: 1, &#39;ภ&#39;: 1, &#39;บ&#39;: 1})
el = nap.elements()
print(el) # ได้ &amp;lt;itertools.chain object at 0x10bbfae50&amp;gt;
print(list(el)) # ได้ [&#39;ด&#39;, &#39;ด&#39;, &#39;ว&#39;, &#39;ง&#39;, &#39;ง&#39;, &#39;ง&#39;, &#39;ก&#39;, &#39;ม&#39;, &#39;ม&#39;, &#39;ม&#39;, &#39;ม&#39;, &#39;ล&#39;, &#39;ช&#39;, &#39;ช&#39;, &#39;น&#39;, &#39;น&#39;, &#39;น&#39;, &#39;ผ&#39;, &#39;ร&#39;, &#39;ร&#39;, &#39;อ&#39;, &#39;อ&#39;, &#39;ภ&#39;, &#39;บ&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;กรณีที่สร้างโดยกำหนดจำนวนเข้าไปโดยตรงก็จะออกมาเรียงตามลำดับที่ใส่โดยตัวเดียวกันอยู่ติดกัน&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nap = Counter(na=3,ka=4,ma=2)
print(list(nap.elements())) # ได้ [&#39;na&#39;, &#39;na&#39;, &#39;na&#39;, &#39;ka&#39;, &#39;ka&#39;, &#39;ka&#39;, &#39;ka&#39;, &#39;ma&#39;, &#39;ma&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Counter สามารถนำมาบวกลบกันได้ โดยการบวกจะเป็นการเอาสมาชิกที่มีมารวมกัน&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = Counter(&#39;ปลวกจกหนอนลงคอ&#39;)
b = Counter(&#39;คงลอยคอลอยวน&#39;)
print(a) # ได้ Counter({&#39;ล&#39;: 2, &#39;ก&#39;: 2, &#39;น&#39;: 2, &#39;อ&#39;: 2, &#39;ป&#39;: 1, &#39;ว&#39;: 1, &#39;จ&#39;: 1, &#39;ห&#39;: 1, &#39;ง&#39;: 1, &#39;ค&#39;: 1})
print(b) # ได้ Counter({&#39;อ&#39;: 3, &#39;ค&#39;: 2, &#39;ล&#39;: 2, &#39;ย&#39;: 2, &#39;ง&#39;: 1, &#39;ว&#39;: 1, &#39;น&#39;: 1})
print(a+b) # ได้ Counter({&#39;อ&#39;: 5, &#39;ล&#39;: 4, &#39;น&#39;: 3, &#39;ค&#39;: 3, &#39;ว&#39;: 2, &#39;ก&#39;: 2, &#39;ง&#39;: 2, &#39;ย&#39;: 2, &#39;ป&#39;: 1, &#39;จ&#39;: 1, &#39;ห&#39;: 1})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ส่วนการลบจะเอามาหักลบกัน เพียงแต่ถ้าติดลบหรือเป็น 0 จะหายไปเลย ไม่แสดง&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = Counter(&#39;พลพรรคครบสองคน&#39;)
b = Counter(&#39;ลงคอรอครอบครอง&#39;)
print(a) # ได้ Counter({&#39;ร&#39;: 3, &#39;ค&#39;: 3, &#39;พ&#39;: 2, &#39;ล&#39;: 1, &#39;บ&#39;: 1, &#39;ส&#39;: 1, &#39;อ&#39;: 1, &#39;ง&#39;: 1, &#39;น&#39;: 1})
print(b) # ได้ Counter({&#39;อ&#39;: 4, &#39;ค&#39;: 3, &#39;ร&#39;: 3, &#39;ง&#39;: 2, &#39;ล&#39;: 1, &#39;บ&#39;: 1})
print(a-b) # ได้ Counter({&#39;พ&#39;: 2, &#39;ส&#39;: 1, &#39;น&#39;: 1})
print(b-a) # ได้ Counter({&#39;อ&#39;: 3, &#39;ง&#39;: 1})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;นอกจากนี้ยังมีคุณสมบัติแปลกๆเช่นถ้ามีจำนวนทั้งบวกและลบอยู่ในนี้ หากเจอเครื่องหมายบวกจะกำจัดตัวที่เป็นลบ หากเจอเครื่องหมายลบจะเหลือแต่ตัวที่เป็นลบ และค่าจะกลายเป็นบวก&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nap = Counter(ha=3,na=-2,ya=-4)
print(+nap) # ได้ Counter({&#39;ha&#39;: 3})
print(-nap) # ได้ Counter({&#39;ya&#39;: 4, &#39;na&#39;: 2})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;สามารถใช้ตัวดำเนินการ &amp;amp; และ | ซึ่งจะให้ผลคล้ายกับการอินเตอร์เซ็กและยูเนียนกันของเซ็ต&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = Counter(&#39;สองสมรยอมลงคลองลอยคอ&#39;)
b = Counter(&#39;รอชวนภมรดมดอมดอกขจร&#39;)
print(a) # ได้ Counter({&#39;อ&#39;: 5, &#39;ง&#39;: 3, &#39;ล&#39;: 3, &#39;ส&#39;: 2, &#39;ม&#39;: 2, &#39;ย&#39;: 2, &#39;ค&#39;: 2, &#39;ร&#39;: 1})
print(b) # ได้ Counter({&#39;ร&#39;: 3, &#39;อ&#39;: 3, &#39;ม&#39;: 3, &#39;ด&#39;: 3, &#39;ช&#39;: 1, &#39;ว&#39;: 1, &#39;น&#39;: 1, &#39;ภ&#39;: 1, &#39;ก&#39;: 1, &#39;ข&#39;: 1, &#39;จ&#39;: 1})
print(a|b) # ได้ Counter({&#39;อ&#39;: 5, &#39;ง&#39;: 3, &#39;ม&#39;: 3, &#39;ร&#39;: 3, &#39;ล&#39;: 3, &#39;ด&#39;: 3, &#39;ส&#39;: 2, &#39;ย&#39;: 2, &#39;ค&#39;: 2, &#39;ช&#39;: 1, &#39;ว&#39;: 1, &#39;น&#39;: 1, &#39;ภ&#39;: 1, &#39;ก&#39;: 1, &#39;ข&#39;: 1, &#39;จ&#39;: 1})
print(b&amp;amp;a) # ได้ Counter({&#39;อ&#39;: 3, &#39;ม&#39;: 2, &#39;ร&#39;: 1})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;เมธอด .subtract() จะให้ผลคล้ายกับการเอามาลบกัน แต่จะเป็นการเปลี่ยนแปลง Counter ตัวทางซ้าย (ตัวที่ใช้เมธอด) แทนที่จะคืนค่า และจำนวนที่เป็น 0 และติดลบจะยังคงเหลืออยู่&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = Counter(&#39;ฝนตกตลอด&#39;)
b = Counter(&#39;ตกตรงตรอก&#39;)
print(a) # ได้ Counter({&#39;ต&#39;: 2, &#39;ฝ&#39;: 1, &#39;น&#39;: 1, &#39;ก&#39;: 1, &#39;ล&#39;: 1, &#39;อ&#39;: 1, &#39;ด&#39;: 1})
print(b) # ได้ Counter({&#39;ต&#39;: 3, &#39;ก&#39;: 2, &#39;ร&#39;: 2, &#39;ง&#39;: 1, &#39;อ&#39;: 1})
a.subtract(b)
print(a) # ได้ Counter({&#39;ฝ&#39;: 1, &#39;น&#39;: 1, &#39;ล&#39;: 1, &#39;ด&#39;: 1, &#39;อ&#39;: 0, &#39;ต&#39;: -1, &#39;ก&#39;: -1, &#39;ง&#39;: -1, &#39;ร&#39;: -2})
a.subtract(b)
print(a) # ได้ Counter({&#39;ฝ&#39;: 1, &#39;น&#39;: 1, &#39;ล&#39;: 1, &#39;ด&#39;: 1, &#39;อ&#39;: -1, &#39;ง&#39;: -2, &#39;ก&#39;: -3, &#39;ต&#39;: -4, &#39;ร&#39;: -4})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;สุดท้ายขอยกตัวอย่างการนำมาประยุกต์ใช้งาน เช่นนับจำนวนเฉพาะที่เป็นองค์ประกอบในตัวเลข&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def yaek(n):
    nap = Counter()
    i = 2
    while(i*2&amp;lt;=n):
        if(n%i==0):
            nap[i] += 1
            n = n//i
        elif(i==2):
            i += 1
        else:
            i += 2
    if(n!=1):
        nap[n] += 1
    return nap

print(yaek(104)) # ได้ Counter({2: 3, 13: 1})
print(yaek(150)) # ได้ Counter({5: 2, 2: 1, 3: 1})
print(yaek(508)) # ได้ Counter({2: 2, 127: 1})
print(yaek(4500)) # ได้ Counter({5: 3, 2: 2, 3: 2})
print(yaek(16129)) # ได้ Counter({127: 2})
print(yaek(19600)) # ได้ Counter({2: 4, 5: 2, 7: 2})
print(yaek(51000)) # ได้ Counter({2: 3, 5: 3, 3: 1, 17: 1})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reference : &lt;a href=&#34;https://phyblas.hinaboshi.com/20200413&#34;&gt;https://phyblas.hinaboshi.com&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dictionary Tutorials</title>
      <link>https://dragon-library.github.io/docs/post/dict_tutorial/</link>
      <pubDate>Tue, 05 May 2020 00:00:00 +0000</pubDate>
      <guid>https://dragon-library.github.io/docs/post/dict_tutorial/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Python comes with a variety of built-in data structures, capable of storing different types of data. A Python dictionary is one such data structure that can store data in the form of key-value pairs. The values in a Python dictionary can be accessed using the keys. In this article, we will be discussing the Python dictionary in detail.&lt;/p&gt;

&lt;h2 id=&#34;creating-a-dictionary&#34;&gt;Creating a Dictionary&lt;/h2&gt;

&lt;p&gt;To create a Python dictionary, we need to pass a sequence of items inside curly braces &lt;code&gt;{}&lt;/code&gt;, and separate them using a comma (,). Each item has a key and a value expressed as a &amp;ldquo;key:value&amp;rdquo; pair.&lt;/p&gt;

&lt;p&gt;The values can belong to any data type and they can repeat, but the keys must remain unique.&lt;/p&gt;

&lt;p&gt;The following examples demonstrate how to create Python dictionaries:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating an empty dictionary:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dict_sample = {}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Creating a dictionary with integer keys:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dict_sample = {1: &#39;mango&#39;, 2: &#39;pawpaw&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Creating a dictionary with mixed keys:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dict_sample = {&#39;fruit&#39;: &#39;mango&#39;, 1: [4, 6, 8]}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can also create a dictionary by explicitly calling the Python&amp;rsquo;s &lt;code&gt;dict()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dict_sample = dict({1:&#39;mango&#39;, 2:&#39;pawpaw&#39;})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A dictionary can also be created from a sequence as shown below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dict_sample = dict([(1,&#39;mango&#39;), (2,&#39;pawpaw&#39;)])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dictionaries can also be nested, which means that we can create a dictionary inside another dictionary. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dict_sample = {1: {&#39;student1&#39; : &#39;Nicholas&#39;, &#39;student2&#39; : &#39;John&#39;, &#39;student3&#39; : &#39;Mercy&#39;},
        2: {&#39;course1&#39; : &#39;Computer Science&#39;, &#39;course2&#39; : &#39;Mathematics&#39;, &#39;course3&#39; : &#39;Accounting&#39;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To print the dictionary contents, we can use the Python&amp;rsquo;s &lt;code&gt;print()&lt;/code&gt; function and pass the dictionary name as the argument to the function. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dict_sample = {
  &amp;quot;Company&amp;quot;: &amp;quot;Toyota&amp;quot;,
  &amp;quot;model&amp;quot;: &amp;quot;Premio&amp;quot;,
  &amp;quot;year&amp;quot;: 2012
}
print(dict_sample)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;{&#39;Company&#39;: &#39;Toyota&#39;, &#39;model&#39;: &#39;Premio&#39;, &#39;year&#39;: 2012}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;accessing-elements&#34;&gt;Accessing Elements&lt;/h2&gt;

&lt;p&gt;To access dictionary items, pass the key inside square brackets &lt;code&gt;[]&lt;/code&gt;. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dict_sample = {
  &amp;quot;Company&amp;quot;: &amp;quot;Toyota&amp;quot;,
  &amp;quot;model&amp;quot;: &amp;quot;Premio&amp;quot;,
  &amp;quot;year&amp;quot;: 2012
}
x = dict_sample[&amp;quot;model&amp;quot;]
print(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Premio
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We created a dictionary named &lt;code&gt;dict_sample&lt;/code&gt;. A variable named &lt;code&gt;x&lt;/code&gt; was then created and its value is set to be the value for the key &amp;ldquo;model&amp;rdquo; in the dictionary.&lt;/p&gt;

&lt;p&gt;Here is another example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dict = {&#39;Name&#39;: &#39;Mercy&#39;, &#39;Age&#39;: 23, &#39;Course&#39;: &#39;Accounting&#39;}
print(&amp;quot;Student Name:&amp;quot;, dict[&#39;Name&#39;])
print(&amp;quot;Course:&amp;quot;, dict[&#39;Course&#39;])
print(&amp;quot;Age:&amp;quot;, dict[&#39;Age&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Student Name: Mercy
Course: Accounting
Age: 23
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The dictionary object also provides the &lt;code&gt;get()&lt;/code&gt; function, which can be used to access dictionary elements as well. We append the function with the dictionary name using the dot operator and then pass the name of the key as the argument to the function. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dict_sample = {
  &amp;quot;Company&amp;quot;: &amp;quot;Toyota&amp;quot;,
  &amp;quot;model&amp;quot;: &amp;quot;Premio&amp;quot;,
  &amp;quot;year&amp;quot;: 2012
}
x = dict_sample.get(&amp;quot;model&amp;quot;)
print(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Premio
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we know how to access dictionary elements using a few different methods. In the next section we&amp;rsquo;ll discuss how to add new elements to an already existing dictionary.&lt;/p&gt;

&lt;h2 id=&#34;adding-elements&#34;&gt;Adding Elements&lt;/h2&gt;

&lt;p&gt;There are numerous ways to add new elements to a dictionary. We can use a new index key and assign a value to it. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dict_sample = {
  &amp;quot;Company&amp;quot;: &amp;quot;Toyota&amp;quot;,
  &amp;quot;model&amp;quot;: &amp;quot;Premio&amp;quot;,
  &amp;quot;year&amp;quot;: 2012
}
dict_sample[&amp;quot;Capacity&amp;quot;] = &amp;quot;1800CC&amp;quot;
print(dict_sample)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;{&#39;Capacity&#39;: &#39;1800CC&#39;, &#39;year&#39;: 2012, &#39;Company&#39;: &#39;Toyota&#39;, &#39;model&#39;: &#39;Premio&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The new element has &amp;ldquo;Capacity&amp;rdquo; as the key and &amp;ldquo;1800CC&amp;rdquo; as its corresponding value. It has been added as the first element of the dictionary.&lt;/p&gt;

&lt;p&gt;Here is another example. First let&amp;rsquo;s first create an empty dictionary:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;MyDictionary = {}
print(&amp;quot;An Empty Dictionary: &amp;quot;)
print(MyDictionary)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;An Empty Dictionary:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The dictionary returns nothing as it has nothing stored yet. Let us add some elements to it, one at a time:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;MyDictionary[0] = &#39;Apples&#39;
MyDictionary[2] = &#39;Mangoes&#39;
MyDictionary[3] = 20
print(&amp;quot;\n3 elements have been added: &amp;quot;)
print(MyDictionary)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;3 elements have been added:
{0: &#39;Apples&#39;, 2: &#39;Mangoes&#39;, 3: 20}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To add the elements, we specified keys as well as the corresponding values. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;MyDictionary[0] = &#39;Apples&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above example, 0 is the key while &amp;ldquo;Apples&amp;rdquo; is the value.&lt;/p&gt;

&lt;p&gt;It is even possible for us to add a set of values to one key. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;MyDictionary[&#39;Values&#39;] = 1, &amp;quot;Pairs&amp;quot;, 4
print(&amp;quot;\n3 elements have been added: &amp;quot;)
print(MyDictionary)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;3 elements have been added:
{&#39;Values&#39;: (1, &#39;Pairs&#39;, 4)}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above example, the name of the key is &amp;ldquo;Values&amp;rdquo; while everything after the &lt;code&gt;=&lt;/code&gt; sign are the actual values for that key, stored as a &lt;a href=&#34;https://docs.python.org/3/tutorial/datastructures.html#sets&#34;&gt;Set&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Other than adding new elements to a dictionary, dictionary elements can also be updated/changed, which we&amp;rsquo;ll go over in the next section.&lt;/p&gt;

&lt;h2 id=&#34;updating-elements&#34;&gt;Updating Elements&lt;/h2&gt;

&lt;p&gt;After adding a value to a dictionary we can then modify the existing dictionary element. You use the key of the element to change the corresponding value. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dict_sample = {
  &amp;quot;Company&amp;quot;: &amp;quot;Toyota&amp;quot;,
  &amp;quot;model&amp;quot;: &amp;quot;Premio&amp;quot;,
  &amp;quot;year&amp;quot;: 2012
}

dict_sample[&amp;quot;year&amp;quot;] = 2014

print(dict_sample)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;{&#39;year&#39;: 2014, &#39;model&#39;: &#39;Premio&#39;, &#39;Company&#39;: &#39;Toyota&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example you can see that we have updated the value for the key &amp;ldquo;year&amp;rdquo; from the old value of 2012 to a new value of 2014.&lt;/p&gt;

&lt;h2 id=&#34;removing-elements&#34;&gt;Removing Elements&lt;/h2&gt;

&lt;p&gt;The removal of an element from a dictionary can be done in several ways, which we&amp;rsquo;ll discuss one-by-one in this section:&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;del&lt;/code&gt; keyword can be used to remove the element with the specified key. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dict_sample = {
  &amp;quot;Company&amp;quot;: &amp;quot;Toyota&amp;quot;,
  &amp;quot;model&amp;quot;: &amp;quot;Premio&amp;quot;,
  &amp;quot;year&amp;quot;: 2012
}
del dict_sample[&amp;quot;year&amp;quot;]
print(dict_sample)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;{&#39;Company&#39;: &#39;Toyota&#39;, &#39;model&#39;: &#39;Premio&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We called the &lt;code&gt;del&lt;/code&gt; keyword followed by the dictionary name. Inside the square brackets that follow the dictionary name, we passed the key of the element we need to delete from the dictionary, which in this example was &amp;ldquo;year&amp;rdquo;. The entry for &amp;ldquo;year&amp;rdquo; in the dictionary was then deleted.&lt;/p&gt;

&lt;p&gt;Another way to delete a key-value pair is to use the &lt;code&gt;pop()&lt;/code&gt; function and pass the key of the entry to be deleted as the argument to the function. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dict_sample = {
  &amp;quot;Company&amp;quot;: &amp;quot;Toyota&amp;quot;,
  &amp;quot;model&amp;quot;: &amp;quot;Premio&amp;quot;,
  &amp;quot;year&amp;quot;: 2012
}
dict_sample.pop(&amp;quot;year&amp;quot;)
print(dict_sample)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;{&#39;Company&#39;: &#39;Toyota&#39;, &#39;model&#39;: &#39;Premio&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We invoked the &lt;code&gt;pop()&lt;/code&gt; function by appending it with the dictionary name. Again, in this example the entry for &amp;ldquo;year&amp;rdquo; in the dictionary will be deleted.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;popitem()&lt;/code&gt; function removes the last item inserted into the dictionary, without needing to specify the key. Take a look at the following example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dict_sample = {
  &amp;quot;Company&amp;quot;: &amp;quot;Toyota&amp;quot;,
  &amp;quot;model&amp;quot;: &amp;quot;Premio&amp;quot;,
  &amp;quot;year&amp;quot;: 2012
}
dict_sample.popitem()
print(dict_sample)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;{&#39;Company&#39;: &#39;Toyota&#39;, &#39;model&#39;: &#39;Premio&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last entry into the dictionary was &amp;ldquo;year&amp;rdquo;. It has been removed after calling the &lt;code&gt;popitem()&lt;/code&gt; function.&lt;/p&gt;

&lt;h3 id=&#34;subscribe-to-our-newsletter&#34;&gt;Subscribe to our Newsletter&lt;/h3&gt;

&lt;p&gt;Get occassional tutorials, guides, and reviews in your inbox. No spam ever. Unsubscribe at any time.&lt;/p&gt;

&lt;p&gt;Subscribe&lt;/p&gt;

&lt;p&gt;But what if you want to delete the entire dictionary? It would be difficult and cumbersome to use one of these methods on every single key. Instead, you can use the &lt;code&gt;del&lt;/code&gt; keyword to delete the entire dictionary. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dict_sample = {
  &amp;quot;Company&amp;quot;: &amp;quot;Toyota&amp;quot;,
  &amp;quot;model&amp;quot;: &amp;quot;Premio&amp;quot;,
  &amp;quot;year&amp;quot;: 2012
}
del dict_sample
print(dict_sample)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;NameError: name &#39;dict_sample&#39; is not defined
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code returns an error. The reason is that we are trying to access a dictionary which doesn&amp;rsquo;t exist since it has been deleted.&lt;/p&gt;

&lt;p&gt;However, your use-case may require you to just remove all dictionary elements and be left with an empty dictionary. This can be achieved by calling the &lt;code&gt;clear()&lt;/code&gt; function on the dictionary:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dict_sample = {
  &amp;quot;Company&amp;quot;: &amp;quot;Toyota&amp;quot;,
  &amp;quot;model&amp;quot;: &amp;quot;Premio&amp;quot;,
  &amp;quot;year&amp;quot;: 2012
}
dict_sample.clear()
print(dict_sample)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;{}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code returns an empty dictionary since all the dictionary elements have been removed.&lt;/p&gt;

&lt;h2 id=&#34;other-common-methods&#34;&gt;Other Common Methods&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;The len() Method&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With this method, you can count the number of elements in a dictionary. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dict_sample = {
  &amp;quot;Company&amp;quot;: &amp;quot;Toyota&amp;quot;,
  &amp;quot;model&amp;quot;: &amp;quot;Premio&amp;quot;,
  &amp;quot;year&amp;quot;: 2012
}
print(len(dict_sample))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are three entries in the dictionary, hence the method returned 3.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The copy() Method&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This method returns a copy of the existing dictionary. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dict_sample = {
  &amp;quot;Company&amp;quot;: &amp;quot;Toyota&amp;quot;,
  &amp;quot;model&amp;quot;: &amp;quot;Premio&amp;quot;,
  &amp;quot;year&amp;quot;: 2012
}
x = dict_sample.copy()

print(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;{&#39;Company&#39;: &#39;Toyota&#39;, &#39;year&#39;: 2012, &#39;model&#39;: &#39;Premio&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We created a copy of dictionary named &lt;code&gt;dict_sample&lt;/code&gt; and assigned it to the variable &lt;code&gt;x&lt;/code&gt;. If &lt;code&gt;x&lt;/code&gt; is printed on the console, you will see that it contains the same elements as those stored by &lt;code&gt;dict_sample&lt;/code&gt; dictionary.&lt;/p&gt;

&lt;p&gt;Note that this is useful because modifications made to the copied dictionary won&amp;rsquo;t affect the original one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The items() Method&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When called, this method returns an iterable object. The iterable object has key-value pairs for the dictionary, as tuples in a list. This method is primarily used when you want to iterate through a dictionary.&lt;/p&gt;

&lt;p&gt;The method is simply called on the dictionary object name as shown below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dict_sample = {
  &amp;quot;Company&amp;quot;: &amp;quot;Toyota&amp;quot;,
  &amp;quot;model&amp;quot;: &amp;quot;Premio&amp;quot;,
  &amp;quot;year&amp;quot;: 2012
}

for k, v in dict_sample.items():
  print(k, v)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;(&#39;Company&#39;, &#39;Toyota&#39;)
(&#39;model&#39;, &#39;Premio&#39;)
(&#39;year&#39;, 2012)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The object returned by &lt;code&gt;items()&lt;/code&gt; can also be used to show the changes that have been implemented on the dictionary. This is demonstrated below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dict_sample = {
  &amp;quot;Company&amp;quot;: &amp;quot;Toyota&amp;quot;,
  &amp;quot;model&amp;quot;: &amp;quot;Premio&amp;quot;,
  &amp;quot;year&amp;quot;: 2012
}

x = dict_sample.items()

print(x)

dict_sample[&amp;quot;model&amp;quot;] = &amp;quot;Mark X&amp;quot;

print(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;dict_items([(&#39;Company&#39;, &#39;Toyota&#39;), (&#39;model&#39;, &#39;Premio&#39;), (&#39;year&#39;, 2012)])
dict_items([(&#39;Company&#39;, &#39;Toyota&#39;), (&#39;model&#39;, &#39;Mark X&#39;), (&#39;year&#39;, 2012)])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output shows that when you change a value in the dictionary, the items object is also updated to reflect this change.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The fromkeys() Method&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This method returns a dictionary having specified keys and values. It takes the syntax given below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dictionary.fromkeys(keys, value)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The value for required &lt;code&gt;keys&lt;/code&gt; parameter is an iterable and it specifies the keys for the new dictionary. The value for &lt;code&gt;value&lt;/code&gt; parameter is optional and it specifies the default value for all the keys. The default value for this is &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Suppose we need to create a dictionary of three keys all with the same value. We can do so as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;name = (&#39;John&#39;, &#39;Nicholas&#39;, &#39;Mercy&#39;)
age = 25

dict_sample = dict.fromkeys(name, age)

print(dict_sample)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;{&#39;John&#39;: 25, &#39;Mercy&#39;: 25, &#39;Nicholas&#39;: 25}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the script above, we specified the keys and one value. The &lt;code&gt;fromkeys()&lt;/code&gt; method was able to pick the keys and combine them with this value to create a populated dictionary.&lt;/p&gt;

&lt;p&gt;The value for the &lt;code&gt;keys&lt;/code&gt; parameter is mandatory. The following example demonstrates what happens when the value for the &lt;code&gt;values&lt;/code&gt; parameter is not specified:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;name = (&#39;John&#39;, &#39;Nicholas&#39;, &#39;Mercy&#39;)

dict_sample = dict.fromkeys(name)

print(dict_sample)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;{&#39;John&#39;: None, &#39;Mercy&#39;: None, &#39;Nicholas&#39;: None}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The default value, which is &lt;code&gt;None&lt;/code&gt;, was used.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The setdefault() Method&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This method is applicable when we need to get the value of the element with the specified key. If the key is not found, it will be inserted into the dictionary alongside the specified value.&lt;/p&gt;

&lt;p&gt;The method takes the following syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dictionary.setdefault(keyname, value)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this function the &lt;code&gt;keyname&lt;/code&gt; parameter is required. It represents the keyname of the item you need to return a value from. The &lt;code&gt;value&lt;/code&gt; parameter is optional. If the dictionary already has the key, this parameter won&amp;rsquo;t have any effect. If the key doesn&amp;rsquo;t exist, then the value given in this function will become the value of the key. It has a default value of &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dict_sample = {
  &amp;quot;Company&amp;quot;: &amp;quot;Toyota&amp;quot;,
  &amp;quot;model&amp;quot;: &amp;quot;Premio&amp;quot;,
  &amp;quot;year&amp;quot;: 2012
}

x = dict_sample.setdefault(&amp;quot;color&amp;quot;, &amp;quot;Gray&amp;quot;)

print(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Gray
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The dictionary doesn&amp;rsquo;t have the key for &lt;code&gt;color&lt;/code&gt;. The &lt;code&gt;setdefault()&lt;/code&gt; method has inserted this key and the specified a value, that is, &amp;ldquo;Gray&amp;rdquo;, has been used as its value.&lt;/p&gt;

&lt;p&gt;The following example demonstrates how the method behaves if the value for the key &lt;em&gt;does&lt;/em&gt; exist:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dict_sample = {
  &amp;quot;Company&amp;quot;: &amp;quot;Toyota&amp;quot;,
  &amp;quot;model&amp;quot;: &amp;quot;Premio&amp;quot;,
  &amp;quot;year&amp;quot;: 2012
}

x = dict_sample.setdefault(&amp;quot;model&amp;quot;, &amp;quot;Allion&amp;quot;)

print(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Premio
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The value &amp;ldquo;Allion&amp;rdquo; has no effect on the dictionary since we already have a value for the key.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The keys() Method&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This method also returns an iterable object. The object returned is a list of all keys in the dictionary. And just like with the &lt;code&gt;items()&lt;/code&gt; method, the returned object can be used to reflect the changes made to the dictionary.&lt;/p&gt;

&lt;p&gt;To use this method, we only call it on the name of the dictionary, as shown below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dictionary.keys()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dict_sample = {
  &amp;quot;Company&amp;quot;: &amp;quot;Toyota&amp;quot;,
  &amp;quot;model&amp;quot;: &amp;quot;Premio&amp;quot;,
  &amp;quot;year&amp;quot;: 2012
}

x = dict_sample.keys()

print(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;dict_keys([&#39;model&#39;, &#39;Company&#39;, &#39;year&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Often times this method is used to iterate through each key in your dictionary, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dict_sample = {
  &amp;quot;Company&amp;quot;: &amp;quot;Toyota&amp;quot;,
  &amp;quot;model&amp;quot;: &amp;quot;Premio&amp;quot;,
  &amp;quot;year&amp;quot;: 2012
}

for k in dict_sample.keys():
  print(k)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Company
model
year
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This marks the end of this tutorial on Python dictionaries. These dictionaries store data in &amp;ldquo;key:value&amp;rdquo; pairs. The &amp;ldquo;key&amp;rdquo; acts as the identifier for the item while &amp;ldquo;value&amp;rdquo; is the value of the item. The Python dictionary comes with a variety of functions that can be applied for retrieval or manipulation of data. In this article, we saw how Python dictionary can be created, modified and deleted along with some of the most commonly used dictionary methods.&lt;/p&gt;

&lt;p&gt;Ref : &lt;a href=&#34;https://stackabuse.com/python-dictionary-tutorial/&#34;&gt;https://stackabuse.com/python-dictionary-tutorial/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tags : &lt;ul class=&#34;list-unstyled&#34;&gt;
  
  &lt;li&gt;&lt;a href=&#34;https://dragon-library.github.io/docs/docs/tag/beginner/&#34;&gt;beginner&lt;/a&gt;&lt;/li&gt;
  
  &lt;li&gt;&lt;a href=&#34;https://dragon-library.github.io/docs/docs/tag/beginning/&#34;&gt;beginning&lt;/a&gt;&lt;/li&gt;
  
  &lt;li&gt;&lt;a href=&#34;https://dragon-library.github.io/docs/docs/tag/collection/&#34;&gt;collection&lt;/a&gt;&lt;/li&gt;
  
  &lt;li&gt;&lt;a href=&#34;https://dragon-library.github.io/docs/docs/tag/deep-learning/&#34;&gt;Deep Learning&lt;/a&gt;&lt;/li&gt;
  
  &lt;li&gt;&lt;a href=&#34;https://dragon-library.github.io/docs/docs/tag/demo/&#34;&gt;Demo&lt;/a&gt;&lt;/li&gt;
  
  &lt;li&gt;&lt;a href=&#34;https://dragon-library.github.io/docs/docs/tag/dictionary/&#34;&gt;dictionary&lt;/a&gt;&lt;/li&gt;
  
  &lt;li&gt;&lt;a href=&#34;https://dragon-library.github.io/docs/docs/tag/learning-how-to-learn/&#34;&gt;Learning how to Learn&lt;/a&gt;&lt;/li&gt;
  
  &lt;li&gt;&lt;a href=&#34;https://dragon-library.github.io/docs/docs/tag/principles/&#34;&gt;Principles&lt;/a&gt;&lt;/li&gt;
  
  &lt;li&gt;&lt;a href=&#34;https://dragon-library.github.io/docs/docs/tag/source-themes/&#34;&gt;Source Themes&lt;/a&gt;&lt;/li&gt;
  
  &lt;li&gt;&lt;a href=&#34;https://dragon-library.github.io/docs/docs/tag/toyota/&#34;&gt;toyota&lt;/a&gt;&lt;/li&gt;
  
&lt;/ul&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dictionary</title>
      <link>https://dragon-library.github.io/docs/post/dictionary/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://dragon-library.github.io/docs/post/dictionary/</guid>
      <description>

&lt;p&gt;ในบทนี้ คุณจะได้เรียนรู้เกี่ยวกับโครงสร้างข้อมูล Dictionary ในภาษา Python เราจะแนะนำให้คุณรู้จักกับ Dictionary คืออะไร และการประกาศและใช้งานสำหรับเก็บข้อมูลในการเขียนโปรแกรม นอกจากนี้ เรายังจะพูดถึงการใช้งานเมธอดและ built-in functions ของ Dictionary และตัวอย่างการใช้งานกับการเขียนโปรแกรมใบรูปแบบต่างๆ ในภาษา Python&lt;/p&gt;

&lt;p&gt;Dictionary คือประเภทข้อมูลที่เก็บข้อมูลในรูปแบบคู่ของ Key และ Value โดยที่ Key ใช้สำหรับเป็น Index ในการเข้าถึงข้อมูลและ Value เป็นค่าข้อมูลที่สอดคล้องกับ Key ของมัน การเข้าถึงข้อมูลใน Dictionary นั้นรวดเร็วเพราะว่าข้อมูลได้ถูกทำ Index ไว้อัตโนมัติโดยใช้ Key นอกจากนี้ Dictionary ยังมีเมธอดและฟังก์ชันอำนวยความสะดวกสำหรับการทำงานทั่วไป&lt;/p&gt;

&lt;h2 id=&#34;การประกาศ-dictionary-ในภาษา-python&#34;&gt;การประกาศ Dictionary ในภาษา Python&lt;/h2&gt;

&lt;p&gt;ในการใช้งาน Dictionary เรามักจะใช้เก็บข้อมูลที่สามารถใช้บางอย่างที่สามารถจำแนกข้อมูลออกจากกันได้ โดยกำหนดให้สิ่งนั้นเป็น Key ในการประกาศ Dictionary สมาชิกของมันจะอยู่ภายในวงเล็บปีกกา &lt;code&gt;{}&lt;/code&gt; มาดูตัวอย่างในการประกาศ Dictionary ในภาษา Python&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;scores = {&#39;james&#39;: 1828, &#39;thomas&#39;: 3628, &#39;danny&#39;: 9310}
scores[&#39;bobby&#39;] = 4401

numbers = {1: &#39;One&#39;, 2: &#39;Two&#39;, 3: &#39;Three&#39;}

print(scores)
print(numbers)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ในตัวอย่าง เราได้ประกาศตัวแปร Dictionary ที่มีชื่อว่า &lt;code&gt;scores&lt;/code&gt; สำหรับเก็บคะแนนของแต่ละคนโดยใช้ชื่อเป็น Key และค่าของมันก็คือคะแนน สมาชิกของ Dictionary แต่ละตัวจะถูกกำหนดในรูปแบบ &lt;code&gt;key: value&lt;/code&gt; และคั่นสมาชิกแต่ละตัวด้วยเครื่องหมายคอมมา เราได้กำหนดค่าเริ่มต้นสามค่าให้กับ Dictionary และสามารถกำหนดค่าให้กับ Dictionary ในรูปแบบ &lt;code&gt;scores[&#39;bobby&#39;]&lt;/code&gt; ได้หลังจากที่ตัวแปรถูกสร้างแล้ว สังเกตว่าเราสามารถใช้ Key เป็น String หรือประเภทข้อมูลอื่นๆ ได้ ต่อมาตัวแปร &lt;code&gt;numbers&lt;/code&gt; เป็น Dictionary ที่มี Key เป็นตัวเลข&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;{&#39;james&#39;: 1828, &#39;thomas&#39;: 3628, &#39;danny&#39;: 9310, &#39;bobby&#39;: 4401}
{1: &#39;One&#39;, 2: &#39;Two&#39;, 3: &#39;Three&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;นี่เป็นผลลัพธ์ของโปรแกรมในการแสดงผลข้อมูลภายในตัวแปร Dictionary ทั้งสองที่เราได้สร้างขึ้น&lt;/p&gt;

&lt;h2 id=&#34;การเข-าถ-งข-อม-ลภายใน-dictionary&#34;&gt;การเข้าถึงข้อมูลภายใน Dictionary&lt;/h2&gt;

&lt;p&gt;หลังจากที่เราได้ประกาศ Dictionary ไปแล้ว ต่อไปจะการเข้าถึงข้อมูลเพื่ออ่านและอัพเดทข้อมูลโดยผ่านทาง Key ของมัน มาดูตัวอย่างการเข้าถึงข้อมูลใน Dictionary&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;scores = {&#39;james&#39;: 1828, &#39;thomas&#39;: 3628, &#39;danny&#39;: 9310, &#39;bobby&#39;: 4401}

# display data
print(&#39;james =&amp;gt;&#39;, scores[&#39;james&#39;])
print(&#39;thomas =&amp;gt;&#39;, scores[&#39;thomas&#39;])
print(&#39;danny =&amp;gt;&#39;, scores[&#39;danny&#39;])
print(&#39;bobby =&amp;gt;&#39;, scores[&#39;bobby&#39;])

# update data
scores[&#39;james&#39;] = scores[&#39;james&#39;] + 1000
scores[&#39;thomas&#39;] = 100

print(&#39;james =&amp;gt;&#39;, scores[&#39;james&#39;])
print(&#39;thomas =&amp;gt;&#39;, scores[&#39;thomas&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ในตัวอย่าง เรามีตัวแปร &lt;code&gt;scores&lt;/code&gt; สำหรับเก็บคะแนนของผู้เล่นโดยชื่อเป็น Key ของ Dictionary ในการเข้าถึงข้อมูลนั้นจะใช้ Key ของมัน ในส่วนแรกเป็นการเข้าถึงข้อมูลภายใน Dictionary เพื่อแสดงผลคะแนนของแต่ละ Key ออกมาทางหน้าจอ ต่อมาเป็นการอัพเดทข้อมูลใน Dictionary โดยเราได้เพิ่มค่าให้กับ Key &lt;code&gt;&#39;james&#39;&lt;/code&gt; ขึ้นไปอีก 1000 และกำหนดค่าให้กับ Key &lt;code&gt;&#39;thomas&#39;&lt;/code&gt; เป็น 100 และแสดงผลอีกครั้ง&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;james =&amp;gt; 1828
thomas =&amp;gt; 3628
danny =&amp;gt; 9310
bobby =&amp;gt; 4401
james =&amp;gt; 2828
thomas =&amp;gt; 100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;นี่เป็นผลลัพธ์การทำงานของโปรแกรม ในการเข้าถึงข้อมูลภายใน Dictionary เพื่ออ่านค่าและอัพเดทข้อมูล&lt;/p&gt;

&lt;p&gt;ในการเข้าถึงข้อมูลภายใน Dictionary นั้น คุณต้องตรวจสอบให้แน่ใจว่า Key นั้นมีอยู่จริง ไม่เช่นนั้นโปรแกรมจะเกิดข้อผิดพลาดขึ้น ยกตัวอย่างเช่น&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;scores = {&#39;james&#39;: 1828, &#39;thomas&#39;: 3628, &#39;danny&#39;: 9310, &#39;bobby&#39;: 4401}
print(scores[&#39;smith&#39;]) # Error

# check if key smith exist
if &#39;smith&#39; in scores.keys():
    print(scores[&#39;smith&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ในตัวอย่างข้างบน โปรแกรมจะเกิดความผิดพลาดขึ้นเพราะเราได้เข้าถึง Key &lt;code&gt;&#39;smith&#39;&lt;/code&gt; ซึ่งไม่มีอยู่ใน &lt;code&gt;scores&lt;/code&gt; อย่าไรก็ตาม เราสามารถตรวจว่า Key มีอยู่หรือไม่ได้โดยการใช้คำสั่ง &lt;code&gt;in&lt;/code&gt; เพื่อตรวจสอบจาก Key ในเมธอด &lt;code&gt;keys()&lt;/code&gt; ของ Dictionary&lt;/p&gt;

&lt;h2 id=&#34;การอ-านค-าใน-dictionary-ด-วยคำส-ง-for-loop&#34;&gt;การอ่านค่าใน Dictionary ด้วยคำสั่ง For loop&lt;/h2&gt;

&lt;p&gt;คำสั่ง For loop นั้นเป็นคำสั่งที่ยืดหยุ่นและสามารถใช้งานได้อย่างหลากหลาย ในการอ่านค่าใน Dictionary นั้นเราสามารถใช้ For loop เพื่อวนอ่านค่าทั้ง Key และ Values ใน Dictionary ได้ มาดูตัวอย่างของโปรแกรม&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;countries = {&#39;de&#39;: &#39;Germany&#39;, &#39;ua&#39;: &#39;Ukraine&#39;,
             &#39;th&#39;: &#39;Thailand&#39;, &#39;nl&#39;: &#39;Netherlands&#39;}

for k, v in countries.items():
    print(k, v)

# iterate through keys
print(&#39;Key:&#39;, end = &#39; &#39;)
for k in countries.keys():
    print(k, end = &#39; &#39;)

# iterate through values
print(&#39;\nValue:&#39;, end = &#39; &#39;)
for v in countries.values():
    print(v, end = &#39; &#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ในตัวอย่าง เป็นการใช้งานคำสั่ง For loop วนอ่านค่าใน Dictionary ซึ่งมี 3 loop ด้วยกัน ในลูปแรกเป็นการอ่านค่าแบบ Key และ Value ในแต่ละรอบของการทำงานเราเอาข้อมูลใน Dictionary ด้วยเมธอด &lt;code&gt;items()&lt;/code&gt; ซึ่งจะส่งค่ากลับเป็น Key และ Value กับมาและโหลดใส่ในตัวแปร &lt;code&gt;k&lt;/code&gt; และ &lt;code&gt;v&lt;/code&gt; ตามลำดับ&lt;/p&gt;

&lt;p&gt;ในลูปที่สอง เป็นการวนอ่าน Key ทั้งหมดภายใน Dictionary โดยเมธอด &lt;code&gt;keys()&lt;/code&gt; จะส่งค่ากลับเป็น List ของ Key ทั้งหมดและโหลดใส่ในตัวแปร &lt;code&gt;k&lt;/code&gt; แต่ละรอบของลูป และในลูปสุดท้ายนั้นเป็นการอ่าน Value ทั้งหมด และเมธอด &lt;code&gt;values()&lt;/code&gt; เพื่อรับค่าของ Value ทั้งหมดมาและใส่ในตัวแปร &lt;code&gt;v&lt;/code&gt; ในแต่ละรอบของลูป&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;de Germany
ua Ukraine
th Thailand
nl Netherlands
Key: de ua th nl 
Value: Germany Ukraine Thailand Netherlands
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;นี่เป็นผลลัพธ์การทำงานของโปรแกรม ในการใช้คำสั่ง For loop เพื่ออ่านข้อมูลใน Dictionary ในภาษา Python&lt;/p&gt;

&lt;h2 id=&#34;python-dictionary-methods&#34;&gt;Python Dictionary methods&lt;/h2&gt;

&lt;p&gt;เช่นเดียวกับข้อมูลประเภทอื่นๆ Dictionary มีเมธอดที่ให้คุณสามารถทำงานกับมันได้ง่ายขึ้น โดยส่วนมากแล้วมักจะเป็นเมธอดในการอัพเดทและรับค่าข้อมูลภายใน Dictionary ต่อไปมาดูตัวอย่างการใช้งานเมธอดของ Dictionary ในภาษา Python&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;countries = {&#39;de&#39;: &#39;Germany&#39;, &#39;ua&#39;: &#39;Ukraine&#39;,
             &#39;th&#39;: &#39;Thailand&#39;, &#39;nl&#39;: &#39;Netherlands&#39;}

print(countries.keys())
print(countries.values())

print(countries.get(&#39;de&#39;)) # equal to countries[&#39;de&#39;]
countries.setdefault(&#39;tr&#39;, &#39;Turkey&#39;)

print(countries.popitem())
print(countries.popitem())

print(countries.items())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ในตัวอย่าง เป็นโปรแกรมในการใช้งานเมธอดของ Dictionary ตัวแปรของเรา &lt;code&gt;countries&lt;/code&gt; มาจากตัวอย่างก่อนหน้าที่มี Key เป็นชื่อย่อของประเทศและ Value เป็นชื่อเต็มของประเทศ เมธอด &lt;code&gt;keys()&lt;/code&gt; ส่งค่ากลับเป็น List ของ Key ทั้งหมดภายใน Dictionary และเมธอด &lt;code&gt;values()&lt;/code&gt; นั้นจะส่งเป็น List ของ Value&lt;/p&gt;

&lt;p&gt;หลังจากนั้นเป็นการเข้าถึงข้อมูลด้วยเมธอด &lt;code&gt;get()&lt;/code&gt; โดยมี Key เป็นอาร์กิวเมนต์ซึ่งผลลัพธ์การทำงานของมันจะเหมือนกับการเข้าถึงข้อมูลโดยตรง เช่น &lt;code&gt;countries[&#39;de&#39;]&lt;/code&gt; และเมธอด &lt;code&gt;setdefault()&lt;/code&gt; ใช้รับค่าจากคีย์ที่กำหนด ถ้าไม่มีจะเป็นการเพิ่มค่าดังกล่าวเข้าไปใน Dictionary และต่อมาเมธอด &lt;code&gt;popitem()&lt;/code&gt; จะนำสมาชิกตัวสุดท้ายออกจาก Dictionary และส่งค่าดังกล่าวกลับมาเป็น Tuple ออบเจ็ค ส่วนเมธอด &lt;code&gt;items()&lt;/code&gt; นั้นจะค่ากลับมาเป็น List ของ Tuple ของออบเจ็คของ Key และ Value ทั้งหมด&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dict_keys([&#39;de&#39;, &#39;ua&#39;, &#39;th&#39;, &#39;nl&#39;])
dict_values([&#39;Germany&#39;, &#39;Ukraine&#39;, &#39;Thailand&#39;, &#39;Netherlands&#39;])
Germany
(&#39;tr&#39;, &#39;Turkey&#39;)
(&#39;nl&#39;, &#39;Netherlands&#39;)
dict_items([(&#39;de&#39;, &#39;Germany&#39;), (&#39;ua&#39;, &#39;Ukraine&#39;), (&#39;th&#39;, &#39;Thailand&#39;)])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;นี่เป็นผลลัพธ์การทำงานของโปรแกรม ในการใช้เมธอดใน Dictionary ในภาษา Python และจากในตัวอย่างนั้นเป็นเพียงส่วนหนึ่งของเมธอดที่มีเท่านั้น สำหรับเมธอดทั้งหมดใน Dictionary นั้นแสดงดังตารางข้างล่างนี้&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Methods&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;clear()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ลบข้อมูลทั้งหมดภายใน Dictionary&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;copy()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;คัดลอก Dictionary ทั้งหมดไปยังอันใหม่&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;get(key[, default])&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ส่งค่าข้อมูลใน Dictionary จาก Key ที่กำหนด ถ้าหากไม่มี Key อยู่และไม่ได้กำหนด default จะทำให้เกิดข้อผิดพลาด KeyError&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;items()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ส่งค่ากลับเป็นออบเจ็คของ Key และ Value&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;keys()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ส่งค่ากลับเป็น List ของ Key ทั้งหมดใน Dictionary&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;pop(key[, default])&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ส่งค่ากลับเป็นค่าสุดท้ายใน Dictionary&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;popitem()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ส่งค่ากลับเป็น Tuple ออบเจ็คของ Key และ Value&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;setdefault(key[, default])&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ส่งค่ากลับเป็นค่าของ Key ที่กำหนด ถ้าหากไม่มี Key อยู่ใส่ข้อมูลเข้าไปใน Dictionary&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;update([other])&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;อัพเดท Dictionary กับคู่ของ Key และ Value จากออบเจ็คอื่น และเขียนทับ Key ที่มีอยู่&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;values()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ส่งค่ากลับเป็น List ของ Value ทั้งหมดใน Dictionary&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;python-dictionary-functions&#34;&gt;Python Dictionary functions&lt;/h2&gt;

&lt;p&gt;ฟังก์ชันที่เป็นพื้นฐานและสามารถใช้ได้กับโครงสร้างข้อมูลทุกประเภทคือฟังก์ชัน &lt;code&gt;len()&lt;/code&gt; เป็นฟังก์ชันที่ใช้สำหรับนับจำนวนสมาชิกของเจ็ค และ Dictionary ยังมีฟังก์ชัน &lt;code&gt;iter()&lt;/code&gt; ที่ทำงานเหมือนกับเมธอด &lt;code&gt;items()&lt;/code&gt; นี่เป็นตารางของฟังก์ชันที่สามารถใช้ได้กับ Dictionary&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Function&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;len(dict)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ส่งค่ากลับเป็นจำนวนของออบเจ็คใน Dictionary&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;iter(dict)|ส่งค่ากลับเป็นออบเจ็คของ Key และ Value|&lt;/p&gt;

&lt;p&gt;คุณสามารถใช้คำสั่ง &lt;code&gt;del&lt;/code&gt; เพื่อลบข้อมูลภายใน Dictionary ได้ เช่น คำสั่ง &lt;code&gt;del countries[&#39;de&#39;]&lt;/code&gt; เพื่อลบสมาชิกที่มี Key ที่กำหนดออกไป และคำสั่ง &lt;code&gt;del countries&lt;/code&gt; นั้นเป็นการลบทั้งตัวแปร&lt;/p&gt;

&lt;p&gt;ในบทนี้ คุณได้เรียนรู้เกี่ยวกับ Dictionary ในภาษา Python คุณได้ทราบวิธีการสร้างและใช้งาน Dictionary และสถานการณ์ที่เหมาะสมที่จะใช้ข้อมูลประเภทนี้ เราได้แสดงให้เห็นถึงการเข้าถึงข้อมูลภายใน Dictionary แบบพื้นฐานและด้วยการใช้คำสั่งวนซ้ำ For loop รวมถึงการใช้งานเมธอดและฟังก์ชันสำหรับจัดการ Dictionary&lt;/p&gt;

&lt;p&gt;Reference : &lt;a href=&#34;http://marcuscode.com/lang/python/dictionary&#34;&gt;http://marcuscode.com/lang/python/dictionary&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
