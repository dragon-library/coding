<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SQL on Library</title>
    <link>https://dragon-library.github.io/docs/library/tags/sql/</link>
    <description>Recent content in SQL on Library</description>
    <generator>Source Themes academia (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 Jun 2020 00:00:00 +0000</lastBuildDate>
    
	    <atom:link href="https://dragon-library.github.io/docs/library/tags/sql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>การอ่านเขียนข้อมูลจากฐานข้อมูล sql</title>
      <link>https://dragon-library.github.io/docs/library/post/python/tutorials/read-write-database-sql/</link>
      <pubDate>Tue, 02 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/docs/library/post/python/tutorials/read-write-database-sql/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;เขียนเมื่อ 2020/06/02 19:13&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ฐานข้อมูล sql เป็นรูปแบบการเก็บข้อมูลที่ใช้กันอย่างกว้างขวาง การเก็บข้อมูลของ sql นั้นมีลักษณะเป็นตารางข้อมูลเป็นแถวๆ คล้ายกับ pandas&lt;/p&gt;

&lt;p&gt;pandas มีคำสั่งที่ช่วยให้ติดต่อกับฐานข้อมูล sql ได้อย่างง่ายดายขึ้น โดยสามารถเอาตารางจาก pandas เขียนลงใน sql และอ่านตารางจาก sql เข้ามาเป็นตารางใน pandas  ความสามารถส่วนใหญ่ในส่วนนี้จะใช้กับมอดูล sqlalchemy เป็นหลัก ดังนั้นจำเป็นต้องติดตั้งมอดูล sqlalchemy ด้วย&lt;/p&gt;

&lt;p&gt;เกี่ยวกับการใช้ sqlalchemy อ่านได้ใน  &lt;a href=&#34;https://phyblas.hinaboshi.com/20200529&#34; target=&#34;_blank&#34;&gt;https://phyblas.hinaboshi.com/20200529&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;เพียงแต่ว่าก็อาจไม่ต้องเรียกใช้ sqlalchemy โดยตรง แค่มีลงมอดูล sqlalchamy ไว้ก็สามารถใช้ความสามารถนี้ได้แล้ว&lt;/p&gt;

&lt;p&gt;ฐานข้อมูล sql ยังแบ่งออกเป็นหลายแบบ เช่น sqlite, posgresql, mysql ซึ่ง sqlalchemy ก็รองรับฐานข้อมูลหลายชนิด ซึ่งก็ทำให้ใช้ใน pandas ได้ด้วยเช่นกัน ในที่นี้จะใช้ sqlite ซึ่งเป็นฐานข้อมูล sql แบบที่ง่ายที่สุด มีติดตัวอยู่ตั้งแต่แรกไม่ต้องติดตั้งเพิ่ม  เมื่อมีตารางข้อมูลเก็บอยู่ในเดตาเฟรมแล้วต้องการบันทึกลงฐานข้อมูล sql สามารถทำได้โดยใช้เมธอด .to_sql() จากตัวเดตาเฟรมนั้น&lt;/p&gt;

&lt;p&gt;การใช้คำสั่งนี้มีการเขียนอยู่หลายวิธี ที่ง่ายที่สุดก็คือใส่ชื่อตารางและตามด้วยชื่อตารางที่เก็บข้อมูลนั้นอยู่  วิธีที่ง่ายที่สุดคือแค่ใส่ชื่อตาราง แล้วตามด้วยชื่อตัวฐานข้อมูลที่จะเก็บตารางข้อมูลนั้นไว้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.to_sql(ชื่อตาราง,ชื่อฐานข้อมูล)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ตัวอย่างการใช้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd

p = {&#39;สายพันธุ์&#39;:[&#39;ซันกูส&#39;,&#39;ฮาบุเนก&#39;,&#39;ลูนาโทน&#39;],
     &#39;ส่วนสูง&#39;:[1.3,2.7,1],
     &#39;น้ำหนัก&#39;:[40.3,52.5,168]}
pokedf = pd.DataFrame(p,index=[335,336,337])
pokedf.to_sql(&#39;pokemon&#39;,&#39;sqlite:///pkdata.db&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ในที่นี้ใช้กับฐานข้อมูล sqlite ในส่วนของชื่อฐานข้อมูลจะเขียนเป็น  &lt;code&gt;&#39;sqlite:///ชื่อไฟล์&#39;&lt;/code&gt;  แบบนี้  อนึ่ง เดิมทีแล้ว .to_sql() ควรจะใช้กับตัวออบเจ็กต์เชื่อมต่อ ซึ่งใน sqlalchemy เรียกว่า engine  หากเขียนแบบเต็มๆตั้งแต่ขั้นตอนการสร้าง engine ก็อาจเขียนแบบนี้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlalchemy

engine = sqlalchemy.create_engine(&#39;sqlite:///pkdata.db&#39;)
pokedf.to_sql(&#39;pokemon&#39;,engine)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;เพียงแต่ว่าสามารถเขียนย่อเป็นแบบใส่แค่ชื่อฐานข้อมูลไปโดยตรงก็ได้ ดังนั้นจึงสะดวกกว่ามาก ไม่จำเป็นต้อง import sqlalchemy มาโดยตรงเลยด้วย  ส่วนการอ่านข้อมูลจากตารางใน sql ทำได้โดยฟังก์ชัน pd.read_sql_table() วิธีใช้ก็เช่นเดียวกับตอนเขียนข้อมูลลง sql นั่นคือใส่ชื่อตารางกับชื่อฐานข้อมูล&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = pd.read_sql_table(ชื่อตาราง,ชื่อฐานข้อมูล)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ตัวอย่างเช่นถ้าต้องการอ่านข้อมูลที่บันทึกลงไปในฐานข้อมูลในตัวอย่างที่แล้ว&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = pd.read_sql_table(&#39;pokemon&#39;,&#39;sqlite:///pkdata.db&#39;)
print(df)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;index	สายพันธุ์	ส่วนสูง	น้ำหนัก
0	335	ซันกูส	1.3	40.3
1	336	ฮาบุเนก	2.7	52.5
2	337	ลูนาโทน	1.0	168.0  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;จากในตัวอย่างที่แล้วทั้งตอนเขียนและอ่านล้วนไม่ได้ใส่ตัวเลือกเสริมอะไรลงไปเลย ทุกอย่างจึงเป็นไปตามค่าตั้งต้น&lt;/p&gt;

&lt;p&gt;ซึ่งจะเห็นว่าตอนที่ใช้ .to_sql() นั้นตัวดัชนีก็ถูกเปลี่ยนเป็นคอลัมน์หนึ่งใน sql ไปด้วย โดยชื่อคอลัมน์ดัชนีก็จะกลายเป็นชื่อคอลัมน์ใน sql ด้วย  หากต้องการเปลี่ยนชื่อคอลัมน์ดัชนีใหม่อาจทำได้โดยใส่ในตัวเลือกเสริม index_label เช่น&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pk = {&#39;สายพันธุ์&#39;:[&#39;โซลร็อก&#39;,&#39;โดจ็อช&#39;],
      &#39;ส่วนสูง&#39;:[1.2,0.4],
      &#39;น้ำหนัก&#39;:[154,1.9]}
index = pd.Series([338,339],name=&#39;หมายเลข&#39;)
pokedf = pd.DataFrame(pk,index=index)
pokedf.to_sql(&#39;pokemon&#39;,&#39;sqlite:///pkdt.db&#39;,index_label=&#39;id&#39;)
print(pd.read_sql_table(&#39;pokemon&#39;,&#39;sqlite:///pkdt.db&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;id	สายพันธุ์	ส่วนสูง	น้ำหนัก
0	338	โซลร็อก	1.2	154.0
1	339	โดจ็อช	0.4	1.9  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;นอกจากนี้ถ้าหากไม่ได้ตั้งชื่อให้คอลัมน์ดัชนี แล้วก็ไม่ได้กำหนด index_label ก็จะถูกตั้งชื่อเป็น index โดยอัตโนมัติ  หากจะให้ทิ้งส่วนดัชนีไปเลยก็ใส่ตัวเลขเสริม index เป็น index=False&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pk = {&#39;สายพันธุ์&#39;:[&#39;นามาซึน&#39;,&#39;เฮย์งานิ&#39;],
      &#39;ส่วนสูง&#39;:[0.9,0.6],
      &#39;น้ำหนัก&#39;:[23.6,11.5]}
pokedf = pd.DataFrame(pk,index=[340,341])
pokedf.to_sql(&#39;pokemon&#39;,&#39;sqlite:///pkdex.db&#39;,index=False)
print(pd.read_sql_table(&#39;pokemon&#39;,&#39;sqlite:///pkdex.db&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt; สายพันธุ์	ส่วนสูง	น้ำหนัก
0	นามาซึน	0.9	23.6
1	เฮย์งานิ	0.6	11.5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;หากชื่อตารางที่ใส่ไปนั้นซ้ำกับที่มีอยู่ในฐานข้อมูลนั้นแล้ว ปกติจะเกิดข้อผิดพลาดขึ้น&lt;br /&gt;
หากไม่ต้องการให้เป็นเช่นนั้น ก็อาจกำหนดไปในตัวเลือกเสริม if_exists เพิ่มเติม โดยถ้า id_exists=&amp;lsquo;replace&amp;rsquo; ตารางเดิมจะหายไปแล้วเอาข้อมูลใหม่ใส่ลงไปแทน เช่นลองใส่ตารางเดิมซ้ำในฐานข้อมูลเดียวกับตัวอย่างที่แล้ว&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pk = {&#39;สายพันธุ์&#39;:[&#39;เนนดอล&#39;,&#39;ลีลีลา&#39;],
      &#39;ส่วนสูง&#39;:[1.5,1],
      &#39;น้ำหนัก&#39;:[108,23.8]}
pokedf = pd.DataFrame(pk,index=[344,345])
pokedf.to_sql(&#39;pokemon&#39;,&#39;sqlite:///pkdex.db&#39;,if_exists=&#39;replace&#39;)
print(pd.read_sql_table(&#39;pokemon&#39;,&#39;sqlite:///pkdex.db&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ได้&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;index	สายพันธุ์	ส่วนสูง	น้ำหนัก
0	344	เนนดอล	1.5	108.0
1	345	ลีลีลา	1.0	23.8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;จะเห็นว่าข้อมูลเก่าหายไปแล้วกลายเป็นข้อมูลใหม่  ตรงนี้ถ้าไม่ได้ใส่ หรือใส่ if_exists=&amp;lsquo;fail&amp;rsquo; ก็จะขึ้นมาว่า&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ValueError: Table &#39;pokemon&#39; already exists.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;นอกจากนี้ ถ้า id_exists=&amp;lsquo;append&amp;rsquo; จะเป็นการเพิ่มข้อมูลเข้าไปในตารางที่มีอยู่แล้ว   เช่น ลองใส่ตารางเดิมซ้ำในฐานข้อมูลเดียวกับตัวอย่างที่แล้ว&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pk = {&#39;สายพันธุ์&#39;:[&#39;ชิซาริเกอร์&#39;,&#39;ยาจิลอน&#39;],
      &#39;ส่วนสูง&#39;:[1.1,0.5]}
pokedf = pd.DataFrame(pk,index=[342,343])
pokedf.to_sql(&#39;pokemon&#39;,&#39;sqlite:///pkdex.db&#39;,if_exists=&#39;append&#39;)
print(pd.read_sql_table(&#39;pokemon&#39;,&#39;sqlite:///pkdex.db&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ได้&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;index	สายพันธุ์	ส่วนสูง	น้ำหนัก
0	344	เนนดอล	1.5	108.0
1	345	ลีลีลา	1.0	23.8
2	342	ชิซาริเกอร์	1.1	NaN
3	343	ยาจิลอน	0.5	NaN
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ข้อมูลที่ใส่ต่อเข้าไปนั้นควรจะมีคอลัมน์ซ้ำกับตารางเดิม หรือจะขาดไปบางคอลัมน์ก็ได้ ค่าที่ขาดจะว่างไว้ แต่ถ้าหากมีคอลัมน์ที่ไม่มีอยู่เดิมก็จะเกิดข้อผิดพลาด  สำหรับชนิดของข้อมูลนั้น ถ้าไม่ได้กำหนดอะไรก็จะเป็นไปตามชนิดของข้อมูลที่สัมพันธ์กับที่อยู่ในเดตาเฟรม  เช่น ตัวอย่างนี้ เมื่อไม่ได้กำหนด dtype ก็จะเป็นแบบนี้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pk = {&#39;สายพันธุ์&#39;:[&#39;มิโลคารอส&#39;,&#39;คาคุเรออน&#39;],
      &#39;ส่วนสูง&#39;:[6.2,1],
      &#39;น้ำหนัก&#39;:[162.0,22.0]}
pokedf = pd.DataFrame(pk,pd.Series([350,352],name=&#39;เลข&#39;))

pokedf.to_sql(&#39;pokemon&#39;,&#39;sqlite:///pkdex.db&#39;,if_exists=&#39;replace&#39;)
df = pd.read_sql_table(&#39;pokemon&#39;,&#39;sqlite:///pkdex.db&#39;,coerce_float=False)
print(df.values)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ได้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;[[350 &#39;มิโลคารอส&#39; 6.2 162.0]
 [352 &#39;คาคุเรออน&#39; 1.0 22.0]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;แต่หากต้องการให้เปลี่ยนชนิดข้อมูลเป็นแบบที่ต้องการก็สามารถกำหนดได้โดยตัวเลือกเสริม dtype  การใส่ชนิดข้อมูลนั้นให้ใส่ในรูปของชนิดข้อมูล sqlalchemy (ต้อง import มาใช้)  จากตัวอย่างที่แล้ว ลองกำหนด dtype เข้าไปได้ดังนี้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlalchemy

dtype = {&#39;ส่วนสูง&#39;:sqlalchemy.String,
         &#39;น้ำหนัก&#39;:sqlalchemy.Integer,
         &#39;เลข&#39;:sqlalchemy.Float}

pokedf.to_sql(&#39;pokemon&#39;,&#39;sqlite:///pkdex.db&#39;,if_exists=&#39;replace&#39;,dtype=dtype)
df = pd.read_sql_table(&#39;pokemon&#39;,&#39;sqlite:///pkdex.db&#39;)
print(df.values)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ได้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;[[350.0 &#39;มิโลคารอส&#39; &#39;6.2&#39; 162]
 [352.0 &#39;คาคุเรออน&#39; &#39;1.0&#39; 22]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;เวลาอ่านข้อมูลจาก sql ด้วย pd.read_sql_table() ก็มีตัวเลือกเสริมมากมายเพื่ออำนวยความสะดวกในการการกำหนดลักษณะการอ่าน  เช่น index_col ใช้กำหนดคอลัมน์ที่จะเป็นดัชนี ถ้าหากไม่กำหนดอะไรไปก็จะไม่มีคอลัมน์ไหนกลายเป็นดัชนี แล้วเป็นตัวเลข 0,1,2 ไป&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pk = {&#39;สายพันธุ์&#39;:[&#39;ฮินบาส&#39;,&#39;โปวาเลิน&#39;,&#39;คาเงะโบวซึ&#39;],
      &#39;ส่วนสูง&#39;:[0.6,0.3,0.6],
      &#39;น้ำหนัก&#39;:[7.4,0.8,2.3]}
pokedf = pd.DataFrame(pk,pd.Series([349,351,353],name=&#39;เลข&#39;))
pokedf.to_sql(&#39;pokemon&#39;,&#39;sqlite:///pkdex.db&#39;,if_exists=&#39;replace&#39;)

print(pd.read_sql_table(&#39;pokemon&#39;,&#39;sqlite:///pkdex.db&#39;))
print(pd.read_sql_table(&#39;pokemon&#39;,&#39;sqlite:///pkdex.db&#39;,index_col=&#39;เลข&#39;))
print(pd.read_sql_table(&#39;pokemon&#39;,&#39;sqlite:///pkdex.db&#39;,index_col=&#39;สายพันธุ์&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ได้&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; เลข	สายพันธุ์	ส่วนสูง	น้ำหนัก
0	349	ฮินบาส	0.6	7.4
1	351	โปวาเลิน	0.3	0.8
2	353	คาเงะโบวซึ	0.6	2.3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt; สายพันธุ์	ส่วนสูง น้ำหนัก เลข	 	 	 
349	ฮินบาส	0.6	7.4
351	โปวาเลิน	0.3	0.8
353	คาเงะโบวซึ	0.6	2.3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;
 	 เลข	ส่วนสูง	น้ำหนัก
สายพันธุ์	 	 	 
ฮินบาส	349	0.6	7.4
โปวาเลิน	351	0.3	0.8
คาเงะโบวซึ	353	0.6	2.3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ส่วนการเลือกเอาข้อมูลเฉพาะแค่บางคอลัมน์ทำได้โดยใส่ตัวเลือกเสริม columns&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pk = {&#39;สายพันธุ์&#39;:[&#39;ยูเรเดิล&#39;,&#39;อาโนปธ์&#39;,&#39;อาร์มัลโด&#39;],
      &#39;ส่วนสูง&#39;:[1.5,0.7,1.5],
      &#39;น้ำหนัก&#39;:[60.4,12.5,68.2]}
pokedf = pd.DataFrame(pk,index=[346,347,348])
pokedf.to_sql(&#39;pokemon&#39;,&#39;sqlite:///pkdex.db&#39;,if_exists=&#39;replace&#39;)

print(pd.read_sql_table(&#39;pokemon&#39;,&#39;sqlite:///pkdex.db&#39;,columns=[&#39;index&#39;,&#39;สายพันธุ์&#39;]))
print(pd.read_sql_table(&#39;pokemon&#39;,&#39;sqlite:///pkdex.db&#39;,columns=[&#39;index&#39;,&#39;สายพันธุ์&#39;],index_col=&#39;index&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ได้&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 	index	สายพันธุ์
0	346	ยูเรเดิล
1	347	อาโนปธ์
2	348	อาร์มัลโด
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;	 	สายพันธุ์
index	 
346		ยูเรเดิล
347		อาโนปธ์
348		อาร์มัลโดแต่ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;pd.read_sql_table() นั้นไม่สามารถกำหนดเงื่อนไขให้ข้อมูลออกมาเฉพาะบางแถวได้ จะอ่านข้อมูลออกมาทุกแถวเสมอ (เหมือนการใส่ where ในโค้ด sql)&lt;/p&gt;

&lt;p&gt;ฟังก์ชันอีกตัวที่ใช้สำหรับอ่านข้อมูลคือ pd.read_sql_query() ซึ่งใช้เขียนโค้ด sql เพื่อสั่งอ่านข้อมูลเข้ามาโดยตรง  การจะใช้ฟังก์ชันนี้ได้จึงต้องรู้โค้ด sql ด้วยทำให้อาจใช้ยากกว่า แต่ข้อดีคือเขียนได้ยืดหยุ่นกว่า สามารถเขียน where เพื่อกำหนดเงื่อนไขได้ หรือเขียน order by เพื่อเรียงลำดับข้อมูลได้  การกำหนดคอลัมน์ที่จะใช้เป็นดัชนีก็ทำได้ด้วยการใส่ index_col เช่นกัน&lt;/p&gt;

&lt;p&gt;ตัวอย่าง&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pk = {&#39;สายพันธุ์&#39;:[&#39;จูเพ็ตตา&#39;,&#39;โยมาวารุ&#39;,&#39;ซามาโยวรุ&#39;,&#39;โทรปิอุส&#39;],
      &#39;ส่วนสูง&#39;:[1.1,0.8,1.6,2],
      &#39;น้ำหนัก&#39;:[12.5,35,30.6,100]}
pokedf = pd.DataFrame(pk,index=[354,355,356,357])
pokedf.to_sql(&#39;pokemon&#39;,&#39;sqlite:///pkdex.db&#39;,if_exists=&#39;replace&#39;)

sql = &#39;select * from pokemon where น้ำหนัก&amp;gt;32&#39;
print(pd.read_sql_query(sql,&#39;sqlite:///pkdex.db&#39;))
sql = &#39;select สายพันธุ์,น้ำหนัก from pokemon order by น้ำหนัก desc&#39;
print(pd.read_sql_query(sql,&#39;sqlite:///pkdex.db&#39;))
sql = &#39;select * from pokemon&#39;
print(pd.read_sql_query(sql,&#39;sqlite:///pkdex.db&#39;,index_col=&#39;index&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ได้&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 	index	สายพันธุ์	ส่วนสูง	น้ำหนัก
0	355	โยมาวารุ	0.8	35.0
1	357	โทรปิอุส	2.0	100.0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;  	สายพันธุ์	น้ำหนัก
0	โทรปิอุส	100.0
1	โยมาวารุ	35.0
2	ซามาโยวรุ	30.6
3	จูเพ็ตตา	12.5 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;
 	สายพันธุ์	ส่วนสูง	น้ำหนัก
index	 	 	 
354	จูเพ็ตตา	1.1	12.5
355	โยมาวารุ	0.8	35.0
356	ซามาโยวรุ	1.6	30.6
357	โทรปิอุส	2.0	100.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;หากใน โค้ดมีการใช้เครื่องหมายคำถาม ? ซึ่งแทนตัวพารามิเตอร์ สามารถใส่ค่าลงไปได้โดยเติมลิสต์ของพารามิเตอร์ที่ต้องการแทนใส่ในคีย์เวิร์ด params เช่น&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pk = {&#39;สายพันธุ์&#39;:[&#39;ชิรีน&#39;,&#39;อับโซล&#39;,&#39;โซนาโน&#39;],
      &#39;ส่วนสูง&#39;:[0.6,1.2,0.6],
      &#39;น้ำหนัก&#39;:[1,47,14]}
pokedf = pd.DataFrame(pk,pd.Series([358,359,360],name=&#39;เลข&#39;))
pokedf.to_sql(&#39;pokemon&#39;,&#39;sqlite:///pkdex.db&#39;,if_exists=&#39;replace&#39;)

sql = &#39;select * from pokemon where สายพันธุ์==?&#39;
print(pd.read_sql_query(sql,&#39;sqlite:///pkdex.db&#39;,params=[&#39;ชิรีน&#39;]))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ได้&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;		 เลข	สายพันธุ์	ส่วนสูง	น้ำหนัก
0		358		ชิรีน		0.6	1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;หรือใส่ในรูปของตัวแปรที่ชื่อขึ้นต้นด้วยโคลอน : ก็ได้ กรณีนี้ให้ใส่ params เป็นดิกชันนารี เช่น&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sql = &#39;select * from pokemon where เลข=:lek&#39;
print(pd.read_sql_query(sql,&#39;sqlite:///pkdex.db&#39;,params={&#39;lek&#39;: 359}))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ได้&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 	เลข	สายพันธุ์	ส่วนสูง	น้ำหนัก
0	359	อับโซล	1.2		47
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;นอกจากนี้มีฟังก์ชัน &lt;code&gt;pd.read_sql()&lt;/code&gt; ซึ่งอาจใช้เพื่อแทน &lt;code&gt;pd.read_sql_table()&lt;/code&gt; หรือ &lt;code&gt;pd.read_sql_query()&lt;/code&gt; ได้&lt;/p&gt;

&lt;p&gt;โดย &lt;code&gt;pd.read_sql()&lt;/code&gt; จะดูจากค่าที่ใส่ไปเองว่าควรจะเรียก &lt;code&gt;pd.read_sql_table()&lt;/code&gt; หรือ pd.read_sql_query() ดังนั้นในทางปฏิบัติแล้วถ้าไม่อยากเขียนยาวจะใช้&lt;code&gt;pd.read_sql()&lt;/code&gt;อย่างเดียวตลอดก็ได้&lt;/p&gt;

&lt;p&gt;ตัวอย่าง&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pk = {&#39;สายพันธุ์&#39;:[&#39;ยุกิวาราชิ&#39;,&#39;โอนิโกริ&#39;,&#39;ทามะซาราชิ&#39;],
      &#39;ส่วนสูง&#39;:[0.7,1.5,0.8],
      &#39;น้ำหนัก&#39;:[16.8,256.5,39.5]}
pokedf = pd.DataFrame(pk,pd.Series([361,362,363],name=&#39;เลข&#39;))
pokedf.to_sql(&#39;pokemon&#39;,&#39;sqlite:///pkdex.db&#39;,if_exists=&#39;replace&#39;)

print(pd.read_sql(&#39;pokemon&#39;,&#39;sqlite:///pkdex.db&#39;,columns=[&#39;เลข&#39;,&#39;สายพันธุ์&#39;]))
sql = &#39;select * from pokemon where น้ำหนัก&amp;lt;40&#39;

print(pd.read_sql(sql,&#39;sqlite:///pkdex.db&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ได้&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 	เลข	สายพันธุ์
0	361	ยุกิวาราชิ
1	362	โอนิโกริ
2	363	ทามะซาราชิ

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt; 	เลข	สายพันธุ์		ส่วนสูง	น้ำหนัก
0	361	ยุกิวาราชิ		0.7		16.8
1	363	ทามะซาราชิ	0.8		39.5

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;เช่นเดียวกับ .to_sql() ฟังก์ชัน pd.read_sql_table(), pd.read_sql_query() และ pd.read_sql() เองก็เดิมทีควรใช้กับ engine ของ sqlalchemy เช่นกัน การเขียนแบบตัวอย่างที่ยกมาจึงเป็นแค่การเขียนย่อ&lt;/p&gt;

&lt;p&gt;หากเขียนเต็มๆตั้งแต่สร้าง engine ของ sqlalchemy ก็อาจเขียนได้แบบนี้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlalchemy

engine = sqlalchemy.create_engine(&#39;sqlite:///pkdex.db&#39;)
print(pd.read_sql(&#39;pokemon&#39;,engine))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;นอกจากนี้ pd.read_sql_query() หรือ pd.read_sql() สามารถใช้กับมอดูล sqlite3 ได้ด้วย ดังนั้นจึงอาจเขียนแบบนี้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlite3

conn = sqlite3.connect(&#39;pkdex.db&#39;)
print(pd.read_sql(&#39;select * from pokemon&#39;,conn))
conn.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;เพียงแต่ .to_sql() กับ df.read_sql_table จะใช้ได้กับ sqlalchemy เท่านั้น ใช้กับ sqlite3 ไม่ได้&lt;/p&gt;

&lt;p&gt;อ้างอิง&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_sql.html&#34; target=&#34;_blank&#34;&gt;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_sql.html&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_sql_table.html&#34; target=&#34;_blank&#34;&gt;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_sql_table.html&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_sql_query.html&#34; target=&#34;_blank&#34;&gt;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_sql_query.html&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_sql.html&#34; target=&#34;_blank&#34;&gt;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_sql.html&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://www.cjavapy.com/article/143&#34; target=&#34;_blank&#34;&gt;https://www.cjavapy.com/article/143&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://qiita.com/orengeo/items/36e8809e07be7c1b145e&#34; target=&#34;_blank&#34;&gt;https://qiita.com/orengeo/items/36e8809e07be7c1b145e&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Reference : &lt;a href=&#34;https://phyblas.hinaboshi.com/yancham20&#34; target=&#34;_blank&#34;&gt;https://phyblas.hinaboshi.com/yancham20&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>
