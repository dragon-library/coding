<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pandas on Library</title>
    <link>https://dragon-library.github.io/docs/library/docs/pandas/</link>
    <description>Recent content in Pandas on Library</description>
    <generator>Source Themes academia (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 17 Jun 2020 00:00:00 +0000</lastBuildDate>
    
	    <atom:link href="https://dragon-library.github.io/docs/library/docs/pandas/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Pandas Tutorials</title>
      <link>https://dragon-library.github.io/docs/library/docs/pandas/pandas-tutorials/</link>
      <pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/docs/library/docs/pandas/pandas-tutorials/</guid>
      <description>

&lt;h2 id=&#34;environment-setup&#34;&gt;Environment Setup&lt;/h2&gt;

&lt;p&gt;Standard Python distribution doesn&amp;rsquo;t come bundled with Pandas module. A lightweight alternative is to install NumPy using popular Python package installer,  &lt;strong&gt;pip.&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;pip install pandas
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you install Anaconda Python package, Pandas will be installed by default with the following −&lt;/p&gt;

&lt;h2 id=&#34;windows&#34;&gt;Windows&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Anaconda&lt;/strong&gt;  (from  &lt;a href=&#34;https://www.continuum.io/&#34; target=&#34;_blank&#34;&gt;https://www.continuum.io&lt;/a&gt;) is a free Python distribution for SciPy stack. It is also available for Linux and Mac.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Canopy&lt;/strong&gt;  (&lt;a href=&#34;https://www.enthought.com/products/canopy&#34; target=&#34;_blank&#34;&gt;https://www.enthought.com/products/canopy/&lt;/a&gt;) is available as free as well as commercial distribution with full SciPy stack for Windows, Linux and Mac.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt;  (x,y) is a free Python distribution with SciPy stack and Spyder IDE for Windows OS. (Downloadable from  &lt;a href=&#34;http://python-xy.github.io/&#34; target=&#34;_blank&#34;&gt;http://python-xy.github.io/&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;linux&#34;&gt;Linux&lt;/h2&gt;

&lt;p&gt;Package managers of respective Linux distributions are used to install one or more packages in SciPy stack.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For Ubuntu Users&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;sudo apt-get install python-numpy python-scipy python-matplotlibipythonipythonnotebook
python-pandas python-sympy python-nose
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;For Fedora Users&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;sudo yum install numpyscipy python-matplotlibipython python-pandas sympy
python-nose atlas-devel
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;dataframe&#34;&gt;DataFrame&lt;/h2&gt;

&lt;p&gt;A Data frame is a two-dimensional data structure, i.e., data is aligned in a tabular fashion in rows and columns.&lt;/p&gt;

&lt;h3 id=&#34;features-of-dataframe&#34;&gt;Features of DataFrame&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Potentially columns are of different types&lt;/li&gt;
&lt;li&gt;Size – Mutable&lt;/li&gt;
&lt;li&gt;Labeled axes (rows and columns)&lt;/li&gt;
&lt;li&gt;Can Perform Arithmetic operations on rows and columns&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;structure&#34;&gt;Structure&lt;/h3&gt;

&lt;p&gt;Let us assume that we are creating a data frame with student’s data.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.tutorialspoint.com/python_pandas/images/structure_table.jpg&#34; alt=&#34;Structure Table&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can think of it as an SQL table or a spreadsheet data representation.&lt;/p&gt;

&lt;h2 id=&#34;pandas-dataframe&#34;&gt;pandas.DataFrame&lt;/h2&gt;

&lt;p&gt;A pandas DataFrame can be created using the following constructor −&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;pandas.DataFrame( data, index, columns, dtype, copy)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The parameters of the constructor are as follows −&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Sr.No&lt;/th&gt;
&lt;th&gt;Parameter &amp;amp; Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;data&lt;/strong&gt; data takes various forms like ndarray, series, map, lists, dict, constants and also another DataFrame.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;index&lt;/strong&gt; For the row labels, the Index to be used for the resulting frame is Optional Default np.arange(n) if no index is passed.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;columns&lt;/strong&gt;  For column labels, the optional default syntax is - np.arange(n). This is only true if no index is passed.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;dtype&lt;/strong&gt;  Data type of each column.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;copy&lt;/strong&gt;  This command (or whatever it is) is used for copying of data, if the default is False.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;create-dataframe&#34;&gt;Create DataFrame&lt;/h2&gt;

&lt;p&gt;A pandas DataFrame can be created using various inputs like −&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lists&lt;/li&gt;
&lt;li&gt;dict&lt;/li&gt;
&lt;li&gt;Series&lt;/li&gt;
&lt;li&gt;Numpy ndarrays&lt;/li&gt;
&lt;li&gt;Another DataFrame&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the subsequent sections of this chapter, we will see how to create a DataFrame using these inputs.&lt;/p&gt;

&lt;h2 id=&#34;create-an-empty-dataframe&#34;&gt;Create an Empty DataFrame&lt;/h2&gt;

&lt;p&gt;A basic DataFrame, which can be created is an Empty Dataframe.&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;#import the pandas library and aliasing as pd  import pandas as pd
df = pd.DataFrame()  print df
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Its  &lt;strong&gt;output&lt;/strong&gt;  is as follows −&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;Empty DataFrame
Columns: []
Index: []
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;create-a-dataframe-from-lists&#34;&gt;Create a DataFrame from Lists&lt;/h2&gt;

&lt;p&gt;The DataFrame can be created using a single list or a list of lists.&lt;/p&gt;

&lt;h3 id=&#34;example-1&#34;&gt;Example 1&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;import pandas as pd
data =  [1,2,3,4,5] 
df = pd.DataFrame(data)  
print df
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Its  &lt;strong&gt;output&lt;/strong&gt;  is as follows −&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;     0
0    1
1    2
2    3
3    4
4    5
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;example-2&#34;&gt;Example 2&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;import pandas as pd
data =  [[&#39;Alex&#39;,10],[&#39;Bob&#39;,12],[&#39;Clarke&#39;,13]] 
df = pd.DataFrame(data,columns=[&#39;Name&#39;,&#39;Age&#39;])  
print (df)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Its  &lt;strong&gt;output&lt;/strong&gt;  is as follows −&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;      Name      Age
0     Alex      10
1     Bob       12
2     Clarke    13
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;example-3&#34;&gt;Example 3&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;import pandas as pd
data =  [[&#39;Alex&#39;,10],[&#39;Bob&#39;,12],[&#39;Clarke&#39;,13]] 
df = pd.DataFrame(data,columns=[&#39;Name&#39;,&#39;Age&#39;],dtype=float)  
print (df)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Its  &lt;strong&gt;output&lt;/strong&gt;  is as follows −&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;      Name     Age
0     Alex     10.0
1     Bob      12.0
2     Clarke   13.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;*Note**  − Observe, the  &lt;strong&gt;dtype&lt;/strong&gt;  parameter changes the type of Age column to floating point.&lt;/p&gt;

&lt;h2 id=&#34;create-a-dataframe-from-dict-of-ndarrays-lists&#34;&gt;Create a DataFrame from Dict of ndarrays / Lists&lt;/h2&gt;

&lt;p&gt;All the  &lt;strong&gt;ndarrays&lt;/strong&gt;  must be of same length. If index is passed, then the length of the index should equal to the length of the arrays.&lt;/p&gt;

&lt;p&gt;If no index is passed, then by default, index will be range(n), where  &lt;strong&gt;n&lt;/strong&gt;  is the array length.&lt;/p&gt;

&lt;h3 id=&#34;example-1-1&#34;&gt;Example 1&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;import pandas as pd
data =  {&#39;Name&#39;:[&#39;Tom&#39;,  &#39;Jack&#39;,  &#39;Steve&#39;,  
&#39;Ricky&#39;],&#39;Age&#39;:[28,34,29,42]} 
df = pd.DataFrame(data)  
print (df)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Its  &lt;strong&gt;output&lt;/strong&gt;  is as follows −&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;      Age      Name
0     28        Tom
1     34       Jack
2     29      Steve
3     42      Ricky
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;  − Observe the values 0,1,2,3. They are the default index assigned to each using the function range(n).&lt;/p&gt;

&lt;h3 id=&#34;example-2-1&#34;&gt;Example 2&lt;/h3&gt;

&lt;p&gt;Let us now create an indexed DataFrame using arrays.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;import pandas as pd
data =  {&#39;Name&#39;:[&#39;Tom&#39;,  &#39;Jack&#39;,  &#39;Steve&#39;,  &#39;Ricky&#39;],&#39;Age&#39;:[28,34,29,42]} 
df = pd.DataFrame(data, 
index=[&#39;rank1&#39;,&#39;rank2&#39;,&#39;rank3&#39;,&#39;rank4&#39;])  
print df
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Its  &lt;strong&gt;output&lt;/strong&gt;  is as follows −&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;         Age    Name
rank1    28      Tom
rank2    34     Jack
rank3    29    Steve
rank4    42    Ricky
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;  − Observe, the  &lt;strong&gt;index&lt;/strong&gt;  parameter assigns an index to each row.&lt;/p&gt;

&lt;h2 id=&#34;create-a-dataframe-from-list-of-dicts&#34;&gt;Create a DataFrame from List of Dicts&lt;/h2&gt;

&lt;p&gt;List of Dictionaries can be passed as input data to create a DataFrame. The dictionary keys are by default taken as column names.&lt;/p&gt;

&lt;h3 id=&#34;example-1-2&#34;&gt;Example 1&lt;/h3&gt;

&lt;p&gt;The following example shows how to create a DataFrame by passing a list of dictionaries.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;import pandas as pd
data =  [{&#39;a&#39;:  1,  &#39;b&#39;:  2},{&#39;a&#39;:  5,  &#39;b&#39;:  10,  &#39;c&#39;:  20}] 
df = pd.DataFrame(data)  
print df
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Its  &lt;strong&gt;output&lt;/strong&gt;  is as follows −&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;    a    b      c
0   1   2     NaN
1   5   10   20.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;  − Observe, NaN (Not a Number) is appended in missing areas.&lt;/p&gt;

&lt;h3 id=&#34;example-2-2&#34;&gt;Example 2&lt;/h3&gt;

&lt;p&gt;The following example shows how to create a DataFrame by passing a list of dictionaries and the row indices.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;import pandas as pd
data =  [{&#39;a&#39;:  1,  &#39;b&#39;:  2},{&#39;a&#39;:  5,  &#39;b&#39;:  10,  &#39;c&#39;:  20}] 
df = pd.DataFrame(data, index=[&#39;first&#39;,  &#39;second&#39;])  
print df
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Its  &lt;strong&gt;output&lt;/strong&gt;  is as follows −&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;        a   b       c
first   1   2     NaN
second  5   10   20.0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;example-3-1&#34;&gt;Example 3&lt;/h3&gt;

&lt;p&gt;The following example shows how to create a DataFrame with a list of dictionaries, row indices, and column indices.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;import pandas as pd
data =  [{&#39;a&#39;:  1,  &#39;b&#39;:  2},{&#39;a&#39;:  5,  &#39;b&#39;:  10,  &#39;c&#39;:  20}]  
#With two column indices, values same as dictionary keys 
df1 = pd.DataFrame(data, 
index=[&#39;first&#39;,  &#39;second&#39;], columns=[&#39;a&#39;,  &#39;b&#39;])  #With two column indices with one index with other name 
df2 = pd.DataFrame(data, 
index=[&#39;first&#39;,  &#39;second&#39;], columns=[&#39;a&#39;,  &#39;b1&#39;]) 
print df1 
print df2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Its  &lt;strong&gt;output&lt;/strong&gt;  is as follows −&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;#df1 output
         a  b
first    1  2
second   5  10

#df2 output
         a  b1
first    1  NaN
second   5  NaN
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;  − Observe, df2 DataFrame is created with a column index other than the dictionary key; thus, appended the NaN’s in place. Whereas, df1 is created with column indices same as dictionary keys, so NaN’s appended.&lt;/p&gt;

&lt;h2 id=&#34;create-a-dataframe-from-dict-of-series&#34;&gt;Create a DataFrame from Dict of Series&lt;/h2&gt;

&lt;p&gt;Dictionary of Series can be passed to form a DataFrame. The resultant index is the union of all the series indexes passed.&lt;/p&gt;

&lt;h3 id=&#34;example-1-3&#34;&gt;Example&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;import pandas as pd

d =  {&#39;one&#39;  : pd.Series([1,  2,  3], 
index=[&#39;a&#39;,  &#39;b&#39;,  &#39;c&#39;]),  &#39;two&#39;  : pd.Series([1,  2,  3,  4], 
index=[&#39;a&#39;,  &#39;b&#39;,  &#39;c&#39;,  &#39;d&#39;])} 
df = pd.DataFrame(d)  
print df
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Its  &lt;strong&gt;output&lt;/strong&gt;  is as follows −&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;      one    two
a     1.0    1
b     2.0    2
c     3.0    3
d     NaN    4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;  − Observe, for the series one, there is no label  &lt;strong&gt;‘d’&lt;/strong&gt;  passed, but in the result, for the  &lt;strong&gt;d&lt;/strong&gt;  label, NaN is appended with NaN.&lt;/p&gt;

&lt;p&gt;Let us now understand  &lt;strong&gt;column selection, addition&lt;/strong&gt;, and  &lt;strong&gt;deletion&lt;/strong&gt;  through examples.&lt;/p&gt;

&lt;h2 id=&#34;column-selection&#34;&gt;Column Selection&lt;/h2&gt;

&lt;p&gt;We will understand this by selecting a column from the DataFrame.&lt;/p&gt;

&lt;h3 id=&#34;example-1-4&#34;&gt;Example&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;
import pandas as pd

d =  {&#39;one&#39;  : pd.Series([1,  2,  3], 
index=[&#39;a&#39;,  &#39;b&#39;,  &#39;c&#39;]),  &#39;two&#39;  : pd.Series([1,  2,  3,  4], 
index=[&#39;a&#39;,  &#39;b&#39;,  &#39;c&#39;,  &#39;d&#39;])} 
df = pd.DataFrame(d)  
print df [&#39;one&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Its  &lt;strong&gt;output&lt;/strong&gt;  is as follows −&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;a     1.0
b     2.0
c     3.0
d     NaN
Name: one, dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;column-addition&#34;&gt;Column Addition&lt;/h2&gt;

&lt;p&gt;We will understand this by adding a new column to an existing data frame.&lt;/p&gt;

&lt;h3 id=&#34;example-1-5&#34;&gt;Example&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;import pandas as pd

d =  {&#39;one&#39;  : pd.Series([1,  2,  3], 
index=[&#39;a&#39;,  &#39;b&#39;,  &#39;c&#39;]),  
&#39;two&#39;  : pd.Series([1,  2,  3,  4], 
index=[&#39;a&#39;,  &#39;b&#39;,  &#39;c&#39;,  &#39;d&#39;])} 
df = pd.DataFrame(d)  # Adding a new column to an existing DataFrame object with column label by passing new series  
print  (&amp;quot;Adding a new column by passing as Series:&amp;quot;) df[&#39;three&#39;]=pd.Series([10,20,30],index=[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;])  
print df 
print (&amp;quot;Adding a new column using the existing columns in DataFrame:&amp;quot;) 
df[&#39;four&#39;]=df[&#39;one&#39;]+df[&#39;three&#39;] 
print df
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Its  &lt;strong&gt;output&lt;/strong&gt;  is as follows −&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;Adding a new column by passing as Series:
     one   two   three
a    1.0    1    10.0
b    2.0    2    20.0
c    3.0    3    30.0
d    NaN    4    NaN
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Adding a new column using the existing columns in DataFrame:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;      one   two   three    four
a     1.0    1    10.0     11.0
b     2.0    2    20.0     22.0
c     3.0    3    30.0     33.0
d     NaN    4     NaN     NaN
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;column-deletion&#34;&gt;Column Deletion&lt;/h2&gt;

&lt;p&gt;Columns can be deleted or popped; let us take an example to understand how.&lt;/p&gt;

&lt;h3 id=&#34;example-1-6&#34;&gt;Example&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# Using the previous DataFrame, we will delete a column  
# using del function  
import pandas as pd

d =  {&#39;one&#39;  : pd.Series([1,  2,  3], 
index=[&#39;a&#39;,  &#39;b&#39;,  &#39;c&#39;]),  &#39;two&#39;  : pd.Series([1,  2,  3,  4], 
index=[&#39;a&#39;,  &#39;b&#39;,  &#39;c&#39;,  &#39;d&#39;]),  &#39;three&#39;  : pd.Series([10,20,30], 
index=[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;])} 
df = pd.DataFrame(d)  
print  (&amp;quot;Our dataframe is:&amp;quot;)  
print df # using del function  print  (&amp;quot;Deleting the first column using DEL function:&amp;quot;)  
del df[&#39;one&#39;]  
print df # using pop function  
print  (&amp;quot;Deleting another column using POP function:&amp;quot;) df.pop(&#39;two&#39;)  
print df
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Its  &lt;strong&gt;output&lt;/strong&gt;  is as follows −&lt;/p&gt;

&lt;p&gt;Our dataframe is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;      one   three  two
a     1.0    10.0   1
b     2.0    20.0   2
c     3.0    30.0   3
d     NaN     NaN   4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Deleting the first column using DEL function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;      three    two
a     10.0     1
b     20.0     2
c     30.0     3
d     NaN      4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Deleting another column using POP function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;   three
a  10.0
b  20.0
c  30.0
d  NaN
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;row-selection-addition-and-deletion&#34;&gt;Row Selection, Addition, and Deletion&lt;/h2&gt;

&lt;p&gt;We will now understand row selection, addition and deletion through examples. Let us begin with the concept of selection.&lt;/p&gt;

&lt;h3 id=&#34;selection-by-label&#34;&gt;Selection by Label&lt;/h3&gt;

&lt;p&gt;Rows can be selected by passing row label to a  &lt;strong&gt;loc&lt;/strong&gt;  function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;import pandas as pd

d =  {&#39;one&#39;  : pd.Series([1,  2,  3], 
index=[&#39;a&#39;,  &#39;b&#39;,  &#39;c&#39;]),  &#39;two&#39;  : pd.Series([1,  2,  3,  4], 
index=[&#39;a&#39;,  &#39;b&#39;,  &#39;c&#39;,  &#39;d&#39;])} 
df = pd.DataFrame(d)  
print df.loc[&#39;b&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Its  &lt;strong&gt;output&lt;/strong&gt;  is as follows −&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;one 2.0
two 2.0
Name: b, dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The result is a series with labels as column names of the DataFrame. And, the Name of the series is the label with which it is retrieved.&lt;/p&gt;

&lt;h3 id=&#34;selection-by-integer-location&#34;&gt;Selection by integer location&lt;/h3&gt;

&lt;p&gt;Rows can be selected by passing integer location to an  &lt;strong&gt;iloc&lt;/strong&gt;  function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;import pandas as pd

d =  {&#39;one&#39;  : pd.Series([1,  2,  3], 
index=[&#39;a&#39;,  &#39;b&#39;,  &#39;c&#39;]),  &#39;two&#39;  : pd.Series([1,  2,  3,  4], 
index=[&#39;a&#39;,  &#39;b&#39;,  &#39;c&#39;,  &#39;d&#39;])} 
df = pd.DataFrame(d)  
print df.iloc[2]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Its  &lt;strong&gt;output&lt;/strong&gt;  is as follows −&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;one   3.0
two   3.0
Name: c, dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;slice-rows&#34;&gt;Slice Rows&lt;/h3&gt;

&lt;p&gt;Multiple rows can be selected using ‘ : ’ operator.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;import pandas as pd

d =  {&#39;one&#39;  : pd.Series([1,  2,  3], 
index=[&#39;a&#39;,  &#39;b&#39;,  &#39;c&#39;]),  &#39;two&#39;  : pd.Series([1,  2,  3,  4], 
index=[&#39;a&#39;,  &#39;b&#39;,  &#39;c&#39;,  &#39;d&#39;])} 
df = pd.DataFrame(d)  
print df[2:4]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Its  &lt;strong&gt;output&lt;/strong&gt;  is as follows −&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;   one  two
c  3.0    3
d  NaN    4
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;addition-of-rows&#34;&gt;Addition of Rows&lt;/h3&gt;

&lt;p&gt;Add new rows to a DataFrame using the  &lt;strong&gt;append&lt;/strong&gt;  function. This function will append the rows at the end.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;import pandas as pd

df = pd.DataFrame([[1,  2],  [3,  4]], columns =  [&#39;a&#39;,&#39;b&#39;]) 
df2 = pd.DataFrame([[5,  6],  [7,  8]], columns =  [&#39;a&#39;,&#39;b&#39;]) 
df = df.append(df2)  
print df
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Its  &lt;strong&gt;output&lt;/strong&gt;  is as follows −&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;   a  b
0  1  2
1  3  4
0  5  6
1  7  8
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;deletion-of-rows&#34;&gt;Deletion of Rows&lt;/h3&gt;

&lt;p&gt;Use index label to delete or drop rows from a DataFrame. If label is duplicated, then multiple rows will be dropped.&lt;/p&gt;

&lt;p&gt;If you observe, in the above example, the labels are duplicate. Let us drop a label and will see how many rows will get dropped.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;import pandas as pd

df = pd.DataFrame([[1,  2],  [3,  4]], columns =  [&#39;a&#39;,&#39;b&#39;]) 
df2 = pd.DataFrame([[5,  6],  [7,  8]], columns =  [&#39;a&#39;,&#39;b&#39;]) 
df = df.append(df2)  # Drop rows with label 0 
df = df.drop(0)  
print df
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Its  &lt;strong&gt;output&lt;/strong&gt;  is as follows −&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;  a b
1 3 4
1 7 8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above example, two rows were dropped because those two contain the same label 0.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Reference : &lt;a href=&#34;https://www.tutorialspoint.com/python_pandas/python_pandas_dataframe.htm&#34; target=&#34;_blank&#34;&gt;tutorialspoint.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>
