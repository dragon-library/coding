<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorials on Library</title>
    <link>https://dragon-library.github.io/coding/tutorials/categories/tutorials/</link>
    <description>Recent content in Tutorials on Library</description>
    <generator>Source Themes academia (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 Jun 2020 00:00:00 +0000</lastBuildDate>
    
	    <atom:link href="https://dragon-library.github.io/coding/tutorials/categories/tutorials/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>การอ่านเขียนข้อมูลจากฐานข้อมูล sql</title>
      <link>https://dragon-library.github.io/coding/tutorials/post/python/tutorials/read-write-database-sql/</link>
      <pubDate>Tue, 02 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/coding/tutorials/post/python/tutorials/read-write-database-sql/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;เขียนเมื่อ 2020/06/02 19:13&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ฐานข้อมูล sql เป็นรูปแบบการเก็บข้อมูลที่ใช้กันอย่างกว้างขวาง การเก็บข้อมูลของ sql นั้นมีลักษณะเป็นตารางข้อมูลเป็นแถวๆ คล้ายกับ pandas&lt;/p&gt;

&lt;p&gt;pandas มีคำสั่งที่ช่วยให้ติดต่อกับฐานข้อมูล sql ได้อย่างง่ายดายขึ้น โดยสามารถเอาตารางจาก pandas เขียนลงใน sql และอ่านตารางจาก sql เข้ามาเป็นตารางใน pandas  ความสามารถส่วนใหญ่ในส่วนนี้จะใช้กับมอดูล sqlalchemy เป็นหลัก ดังนั้นจำเป็นต้องติดตั้งมอดูล sqlalchemy ด้วย&lt;/p&gt;

&lt;p&gt;เกี่ยวกับการใช้ sqlalchemy อ่านได้ใน  &lt;a href=&#34;https://phyblas.hinaboshi.com/20200529&#34; target=&#34;_blank&#34;&gt;https://phyblas.hinaboshi.com/20200529&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;เพียงแต่ว่าก็อาจไม่ต้องเรียกใช้ sqlalchemy โดยตรง แค่มีลงมอดูล sqlalchamy ไว้ก็สามารถใช้ความสามารถนี้ได้แล้ว&lt;/p&gt;

&lt;p&gt;ฐานข้อมูล sql ยังแบ่งออกเป็นหลายแบบ เช่น sqlite, posgresql, mysql ซึ่ง sqlalchemy ก็รองรับฐานข้อมูลหลายชนิด ซึ่งก็ทำให้ใช้ใน pandas ได้ด้วยเช่นกัน ในที่นี้จะใช้ sqlite ซึ่งเป็นฐานข้อมูล sql แบบที่ง่ายที่สุด มีติดตัวอยู่ตั้งแต่แรกไม่ต้องติดตั้งเพิ่ม  เมื่อมีตารางข้อมูลเก็บอยู่ในเดตาเฟรมแล้วต้องการบันทึกลงฐานข้อมูล sql สามารถทำได้โดยใช้เมธอด .to_sql() จากตัวเดตาเฟรมนั้น&lt;/p&gt;

&lt;p&gt;การใช้คำสั่งนี้มีการเขียนอยู่หลายวิธี ที่ง่ายที่สุดก็คือใส่ชื่อตารางและตามด้วยชื่อตารางที่เก็บข้อมูลนั้นอยู่  วิธีที่ง่ายที่สุดคือแค่ใส่ชื่อตาราง แล้วตามด้วยชื่อตัวฐานข้อมูลที่จะเก็บตารางข้อมูลนั้นไว้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.to_sql(ชื่อตาราง,ชื่อฐานข้อมูล)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ตัวอย่างการใช้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd

p = {&#39;สายพันธุ์&#39;:[&#39;ซันกูส&#39;,&#39;ฮาบุเนก&#39;,&#39;ลูนาโทน&#39;],
     &#39;ส่วนสูง&#39;:[1.3,2.7,1],
     &#39;น้ำหนัก&#39;:[40.3,52.5,168]}
pokedf = pd.DataFrame(p,index=[335,336,337])
pokedf.to_sql(&#39;pokemon&#39;,&#39;sqlite:///pkdata.db&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ในที่นี้ใช้กับฐานข้อมูล sqlite ในส่วนของชื่อฐานข้อมูลจะเขียนเป็น  &lt;code&gt;&#39;sqlite:///ชื่อไฟล์&#39;&lt;/code&gt;  แบบนี้  อนึ่ง เดิมทีแล้ว .to_sql() ควรจะใช้กับตัวออบเจ็กต์เชื่อมต่อ ซึ่งใน sqlalchemy เรียกว่า engine  หากเขียนแบบเต็มๆตั้งแต่ขั้นตอนการสร้าง engine ก็อาจเขียนแบบนี้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlalchemy

engine = sqlalchemy.create_engine(&#39;sqlite:///pkdata.db&#39;)
pokedf.to_sql(&#39;pokemon&#39;,engine)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;เพียงแต่ว่าสามารถเขียนย่อเป็นแบบใส่แค่ชื่อฐานข้อมูลไปโดยตรงก็ได้ ดังนั้นจึงสะดวกกว่ามาก ไม่จำเป็นต้อง import sqlalchemy มาโดยตรงเลยด้วย  ส่วนการอ่านข้อมูลจากตารางใน sql ทำได้โดยฟังก์ชัน pd.read_sql_table() วิธีใช้ก็เช่นเดียวกับตอนเขียนข้อมูลลง sql นั่นคือใส่ชื่อตารางกับชื่อฐานข้อมูล&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = pd.read_sql_table(ชื่อตาราง,ชื่อฐานข้อมูล)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ตัวอย่างเช่นถ้าต้องการอ่านข้อมูลที่บันทึกลงไปในฐานข้อมูลในตัวอย่างที่แล้ว&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = pd.read_sql_table(&#39;pokemon&#39;,&#39;sqlite:///pkdata.db&#39;)
print(df)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;index	สายพันธุ์	ส่วนสูง	น้ำหนัก
0	335	ซันกูส	1.3	40.3
1	336	ฮาบุเนก	2.7	52.5
2	337	ลูนาโทน	1.0	168.0  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;จากในตัวอย่างที่แล้วทั้งตอนเขียนและอ่านล้วนไม่ได้ใส่ตัวเลือกเสริมอะไรลงไปเลย ทุกอย่างจึงเป็นไปตามค่าตั้งต้น&lt;/p&gt;

&lt;p&gt;ซึ่งจะเห็นว่าตอนที่ใช้ .to_sql() นั้นตัวดัชนีก็ถูกเปลี่ยนเป็นคอลัมน์หนึ่งใน sql ไปด้วย โดยชื่อคอลัมน์ดัชนีก็จะกลายเป็นชื่อคอลัมน์ใน sql ด้วย  หากต้องการเปลี่ยนชื่อคอลัมน์ดัชนีใหม่อาจทำได้โดยใส่ในตัวเลือกเสริม index_label เช่น&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pk = {&#39;สายพันธุ์&#39;:[&#39;โซลร็อก&#39;,&#39;โดจ็อช&#39;],
      &#39;ส่วนสูง&#39;:[1.2,0.4],
      &#39;น้ำหนัก&#39;:[154,1.9]}
index = pd.Series([338,339],name=&#39;หมายเลข&#39;)
pokedf = pd.DataFrame(pk,index=index)
pokedf.to_sql(&#39;pokemon&#39;,&#39;sqlite:///pkdt.db&#39;,index_label=&#39;id&#39;)
print(pd.read_sql_table(&#39;pokemon&#39;,&#39;sqlite:///pkdt.db&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;id	สายพันธุ์	ส่วนสูง	น้ำหนัก
0	338	โซลร็อก	1.2	154.0
1	339	โดจ็อช	0.4	1.9  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;นอกจากนี้ถ้าหากไม่ได้ตั้งชื่อให้คอลัมน์ดัชนี แล้วก็ไม่ได้กำหนด index_label ก็จะถูกตั้งชื่อเป็น index โดยอัตโนมัติ  หากจะให้ทิ้งส่วนดัชนีไปเลยก็ใส่ตัวเลขเสริม index เป็น index=False&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pk = {&#39;สายพันธุ์&#39;:[&#39;นามาซึน&#39;,&#39;เฮย์งานิ&#39;],
      &#39;ส่วนสูง&#39;:[0.9,0.6],
      &#39;น้ำหนัก&#39;:[23.6,11.5]}
pokedf = pd.DataFrame(pk,index=[340,341])
pokedf.to_sql(&#39;pokemon&#39;,&#39;sqlite:///pkdex.db&#39;,index=False)
print(pd.read_sql_table(&#39;pokemon&#39;,&#39;sqlite:///pkdex.db&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt; สายพันธุ์	ส่วนสูง	น้ำหนัก
0	นามาซึน	0.9	23.6
1	เฮย์งานิ	0.6	11.5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;หากชื่อตารางที่ใส่ไปนั้นซ้ำกับที่มีอยู่ในฐานข้อมูลนั้นแล้ว ปกติจะเกิดข้อผิดพลาดขึ้น&lt;br /&gt;
หากไม่ต้องการให้เป็นเช่นนั้น ก็อาจกำหนดไปในตัวเลือกเสริม if_exists เพิ่มเติม โดยถ้า id_exists=&amp;lsquo;replace&amp;rsquo; ตารางเดิมจะหายไปแล้วเอาข้อมูลใหม่ใส่ลงไปแทน เช่นลองใส่ตารางเดิมซ้ำในฐานข้อมูลเดียวกับตัวอย่างที่แล้ว&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pk = {&#39;สายพันธุ์&#39;:[&#39;เนนดอล&#39;,&#39;ลีลีลา&#39;],
      &#39;ส่วนสูง&#39;:[1.5,1],
      &#39;น้ำหนัก&#39;:[108,23.8]}
pokedf = pd.DataFrame(pk,index=[344,345])
pokedf.to_sql(&#39;pokemon&#39;,&#39;sqlite:///pkdex.db&#39;,if_exists=&#39;replace&#39;)
print(pd.read_sql_table(&#39;pokemon&#39;,&#39;sqlite:///pkdex.db&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ได้&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;index	สายพันธุ์	ส่วนสูง	น้ำหนัก
0	344	เนนดอล	1.5	108.0
1	345	ลีลีลา	1.0	23.8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;จะเห็นว่าข้อมูลเก่าหายไปแล้วกลายเป็นข้อมูลใหม่  ตรงนี้ถ้าไม่ได้ใส่ หรือใส่ if_exists=&amp;lsquo;fail&amp;rsquo; ก็จะขึ้นมาว่า&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ValueError: Table &#39;pokemon&#39; already exists.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;นอกจากนี้ ถ้า id_exists=&amp;lsquo;append&amp;rsquo; จะเป็นการเพิ่มข้อมูลเข้าไปในตารางที่มีอยู่แล้ว   เช่น ลองใส่ตารางเดิมซ้ำในฐานข้อมูลเดียวกับตัวอย่างที่แล้ว&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pk = {&#39;สายพันธุ์&#39;:[&#39;ชิซาริเกอร์&#39;,&#39;ยาจิลอน&#39;],
      &#39;ส่วนสูง&#39;:[1.1,0.5]}
pokedf = pd.DataFrame(pk,index=[342,343])
pokedf.to_sql(&#39;pokemon&#39;,&#39;sqlite:///pkdex.db&#39;,if_exists=&#39;append&#39;)
print(pd.read_sql_table(&#39;pokemon&#39;,&#39;sqlite:///pkdex.db&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ได้&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;index	สายพันธุ์	ส่วนสูง	น้ำหนัก
0	344	เนนดอล	1.5	108.0
1	345	ลีลีลา	1.0	23.8
2	342	ชิซาริเกอร์	1.1	NaN
3	343	ยาจิลอน	0.5	NaN
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ข้อมูลที่ใส่ต่อเข้าไปนั้นควรจะมีคอลัมน์ซ้ำกับตารางเดิม หรือจะขาดไปบางคอลัมน์ก็ได้ ค่าที่ขาดจะว่างไว้ แต่ถ้าหากมีคอลัมน์ที่ไม่มีอยู่เดิมก็จะเกิดข้อผิดพลาด  สำหรับชนิดของข้อมูลนั้น ถ้าไม่ได้กำหนดอะไรก็จะเป็นไปตามชนิดของข้อมูลที่สัมพันธ์กับที่อยู่ในเดตาเฟรม  เช่น ตัวอย่างนี้ เมื่อไม่ได้กำหนด dtype ก็จะเป็นแบบนี้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pk = {&#39;สายพันธุ์&#39;:[&#39;มิโลคารอส&#39;,&#39;คาคุเรออน&#39;],
      &#39;ส่วนสูง&#39;:[6.2,1],
      &#39;น้ำหนัก&#39;:[162.0,22.0]}
pokedf = pd.DataFrame(pk,pd.Series([350,352],name=&#39;เลข&#39;))

pokedf.to_sql(&#39;pokemon&#39;,&#39;sqlite:///pkdex.db&#39;,if_exists=&#39;replace&#39;)
df = pd.read_sql_table(&#39;pokemon&#39;,&#39;sqlite:///pkdex.db&#39;,coerce_float=False)
print(df.values)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ได้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;[[350 &#39;มิโลคารอส&#39; 6.2 162.0]
 [352 &#39;คาคุเรออน&#39; 1.0 22.0]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;แต่หากต้องการให้เปลี่ยนชนิดข้อมูลเป็นแบบที่ต้องการก็สามารถกำหนดได้โดยตัวเลือกเสริม dtype  การใส่ชนิดข้อมูลนั้นให้ใส่ในรูปของชนิดข้อมูล sqlalchemy (ต้อง import มาใช้)  จากตัวอย่างที่แล้ว ลองกำหนด dtype เข้าไปได้ดังนี้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlalchemy

dtype = {&#39;ส่วนสูง&#39;:sqlalchemy.String,
         &#39;น้ำหนัก&#39;:sqlalchemy.Integer,
         &#39;เลข&#39;:sqlalchemy.Float}

pokedf.to_sql(&#39;pokemon&#39;,&#39;sqlite:///pkdex.db&#39;,if_exists=&#39;replace&#39;,dtype=dtype)
df = pd.read_sql_table(&#39;pokemon&#39;,&#39;sqlite:///pkdex.db&#39;)
print(df.values)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ได้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;[[350.0 &#39;มิโลคารอส&#39; &#39;6.2&#39; 162]
 [352.0 &#39;คาคุเรออน&#39; &#39;1.0&#39; 22]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;เวลาอ่านข้อมูลจาก sql ด้วย pd.read_sql_table() ก็มีตัวเลือกเสริมมากมายเพื่ออำนวยความสะดวกในการการกำหนดลักษณะการอ่าน  เช่น index_col ใช้กำหนดคอลัมน์ที่จะเป็นดัชนี ถ้าหากไม่กำหนดอะไรไปก็จะไม่มีคอลัมน์ไหนกลายเป็นดัชนี แล้วเป็นตัวเลข 0,1,2 ไป&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pk = {&#39;สายพันธุ์&#39;:[&#39;ฮินบาส&#39;,&#39;โปวาเลิน&#39;,&#39;คาเงะโบวซึ&#39;],
      &#39;ส่วนสูง&#39;:[0.6,0.3,0.6],
      &#39;น้ำหนัก&#39;:[7.4,0.8,2.3]}
pokedf = pd.DataFrame(pk,pd.Series([349,351,353],name=&#39;เลข&#39;))
pokedf.to_sql(&#39;pokemon&#39;,&#39;sqlite:///pkdex.db&#39;,if_exists=&#39;replace&#39;)

print(pd.read_sql_table(&#39;pokemon&#39;,&#39;sqlite:///pkdex.db&#39;))
print(pd.read_sql_table(&#39;pokemon&#39;,&#39;sqlite:///pkdex.db&#39;,index_col=&#39;เลข&#39;))
print(pd.read_sql_table(&#39;pokemon&#39;,&#39;sqlite:///pkdex.db&#39;,index_col=&#39;สายพันธุ์&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ได้&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; เลข	สายพันธุ์	ส่วนสูง	น้ำหนัก
0	349	ฮินบาส	0.6	7.4
1	351	โปวาเลิน	0.3	0.8
2	353	คาเงะโบวซึ	0.6	2.3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt; สายพันธุ์	ส่วนสูง น้ำหนัก เลข	 	 	 
349	ฮินบาส	0.6	7.4
351	โปวาเลิน	0.3	0.8
353	คาเงะโบวซึ	0.6	2.3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;
 	 เลข	ส่วนสูง	น้ำหนัก
สายพันธุ์	 	 	 
ฮินบาส	349	0.6	7.4
โปวาเลิน	351	0.3	0.8
คาเงะโบวซึ	353	0.6	2.3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ส่วนการเลือกเอาข้อมูลเฉพาะแค่บางคอลัมน์ทำได้โดยใส่ตัวเลือกเสริม columns&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pk = {&#39;สายพันธุ์&#39;:[&#39;ยูเรเดิล&#39;,&#39;อาโนปธ์&#39;,&#39;อาร์มัลโด&#39;],
      &#39;ส่วนสูง&#39;:[1.5,0.7,1.5],
      &#39;น้ำหนัก&#39;:[60.4,12.5,68.2]}
pokedf = pd.DataFrame(pk,index=[346,347,348])
pokedf.to_sql(&#39;pokemon&#39;,&#39;sqlite:///pkdex.db&#39;,if_exists=&#39;replace&#39;)

print(pd.read_sql_table(&#39;pokemon&#39;,&#39;sqlite:///pkdex.db&#39;,columns=[&#39;index&#39;,&#39;สายพันธุ์&#39;]))
print(pd.read_sql_table(&#39;pokemon&#39;,&#39;sqlite:///pkdex.db&#39;,columns=[&#39;index&#39;,&#39;สายพันธุ์&#39;],index_col=&#39;index&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ได้&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 	index	สายพันธุ์
0	346	ยูเรเดิล
1	347	อาโนปธ์
2	348	อาร์มัลโด
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;	 	สายพันธุ์
index	 
346		ยูเรเดิล
347		อาโนปธ์
348		อาร์มัลโดแต่ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;pd.read_sql_table() นั้นไม่สามารถกำหนดเงื่อนไขให้ข้อมูลออกมาเฉพาะบางแถวได้ จะอ่านข้อมูลออกมาทุกแถวเสมอ (เหมือนการใส่ where ในโค้ด sql)&lt;/p&gt;

&lt;p&gt;ฟังก์ชันอีกตัวที่ใช้สำหรับอ่านข้อมูลคือ pd.read_sql_query() ซึ่งใช้เขียนโค้ด sql เพื่อสั่งอ่านข้อมูลเข้ามาโดยตรง  การจะใช้ฟังก์ชันนี้ได้จึงต้องรู้โค้ด sql ด้วยทำให้อาจใช้ยากกว่า แต่ข้อดีคือเขียนได้ยืดหยุ่นกว่า สามารถเขียน where เพื่อกำหนดเงื่อนไขได้ หรือเขียน order by เพื่อเรียงลำดับข้อมูลได้  การกำหนดคอลัมน์ที่จะใช้เป็นดัชนีก็ทำได้ด้วยการใส่ index_col เช่นกัน&lt;/p&gt;

&lt;p&gt;ตัวอย่าง&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pk = {&#39;สายพันธุ์&#39;:[&#39;จูเพ็ตตา&#39;,&#39;โยมาวารุ&#39;,&#39;ซามาโยวรุ&#39;,&#39;โทรปิอุส&#39;],
      &#39;ส่วนสูง&#39;:[1.1,0.8,1.6,2],
      &#39;น้ำหนัก&#39;:[12.5,35,30.6,100]}
pokedf = pd.DataFrame(pk,index=[354,355,356,357])
pokedf.to_sql(&#39;pokemon&#39;,&#39;sqlite:///pkdex.db&#39;,if_exists=&#39;replace&#39;)

sql = &#39;select * from pokemon where น้ำหนัก&amp;gt;32&#39;
print(pd.read_sql_query(sql,&#39;sqlite:///pkdex.db&#39;))
sql = &#39;select สายพันธุ์,น้ำหนัก from pokemon order by น้ำหนัก desc&#39;
print(pd.read_sql_query(sql,&#39;sqlite:///pkdex.db&#39;))
sql = &#39;select * from pokemon&#39;
print(pd.read_sql_query(sql,&#39;sqlite:///pkdex.db&#39;,index_col=&#39;index&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ได้&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 	index	สายพันธุ์	ส่วนสูง	น้ำหนัก
0	355	โยมาวารุ	0.8	35.0
1	357	โทรปิอุส	2.0	100.0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;  	สายพันธุ์	น้ำหนัก
0	โทรปิอุส	100.0
1	โยมาวารุ	35.0
2	ซามาโยวรุ	30.6
3	จูเพ็ตตา	12.5 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;
 	สายพันธุ์	ส่วนสูง	น้ำหนัก
index	 	 	 
354	จูเพ็ตตา	1.1	12.5
355	โยมาวารุ	0.8	35.0
356	ซามาโยวรุ	1.6	30.6
357	โทรปิอุส	2.0	100.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;หากใน โค้ดมีการใช้เครื่องหมายคำถาม ? ซึ่งแทนตัวพารามิเตอร์ สามารถใส่ค่าลงไปได้โดยเติมลิสต์ของพารามิเตอร์ที่ต้องการแทนใส่ในคีย์เวิร์ด params เช่น&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pk = {&#39;สายพันธุ์&#39;:[&#39;ชิรีน&#39;,&#39;อับโซล&#39;,&#39;โซนาโน&#39;],
      &#39;ส่วนสูง&#39;:[0.6,1.2,0.6],
      &#39;น้ำหนัก&#39;:[1,47,14]}
pokedf = pd.DataFrame(pk,pd.Series([358,359,360],name=&#39;เลข&#39;))
pokedf.to_sql(&#39;pokemon&#39;,&#39;sqlite:///pkdex.db&#39;,if_exists=&#39;replace&#39;)

sql = &#39;select * from pokemon where สายพันธุ์==?&#39;
print(pd.read_sql_query(sql,&#39;sqlite:///pkdex.db&#39;,params=[&#39;ชิรีน&#39;]))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ได้&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;		 เลข	สายพันธุ์	ส่วนสูง	น้ำหนัก
0		358		ชิรีน		0.6	1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;หรือใส่ในรูปของตัวแปรที่ชื่อขึ้นต้นด้วยโคลอน : ก็ได้ กรณีนี้ให้ใส่ params เป็นดิกชันนารี เช่น&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sql = &#39;select * from pokemon where เลข=:lek&#39;
print(pd.read_sql_query(sql,&#39;sqlite:///pkdex.db&#39;,params={&#39;lek&#39;: 359}))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ได้&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 	เลข	สายพันธุ์	ส่วนสูง	น้ำหนัก
0	359	อับโซล	1.2		47
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;นอกจากนี้มีฟังก์ชัน &lt;code&gt;pd.read_sql()&lt;/code&gt; ซึ่งอาจใช้เพื่อแทน &lt;code&gt;pd.read_sql_table()&lt;/code&gt; หรือ &lt;code&gt;pd.read_sql_query()&lt;/code&gt; ได้&lt;/p&gt;

&lt;p&gt;โดย &lt;code&gt;pd.read_sql()&lt;/code&gt; จะดูจากค่าที่ใส่ไปเองว่าควรจะเรียก &lt;code&gt;pd.read_sql_table()&lt;/code&gt; หรือ pd.read_sql_query() ดังนั้นในทางปฏิบัติแล้วถ้าไม่อยากเขียนยาวจะใช้&lt;code&gt;pd.read_sql()&lt;/code&gt;อย่างเดียวตลอดก็ได้&lt;/p&gt;

&lt;p&gt;ตัวอย่าง&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pk = {&#39;สายพันธุ์&#39;:[&#39;ยุกิวาราชิ&#39;,&#39;โอนิโกริ&#39;,&#39;ทามะซาราชิ&#39;],
      &#39;ส่วนสูง&#39;:[0.7,1.5,0.8],
      &#39;น้ำหนัก&#39;:[16.8,256.5,39.5]}
pokedf = pd.DataFrame(pk,pd.Series([361,362,363],name=&#39;เลข&#39;))
pokedf.to_sql(&#39;pokemon&#39;,&#39;sqlite:///pkdex.db&#39;,if_exists=&#39;replace&#39;)

print(pd.read_sql(&#39;pokemon&#39;,&#39;sqlite:///pkdex.db&#39;,columns=[&#39;เลข&#39;,&#39;สายพันธุ์&#39;]))
sql = &#39;select * from pokemon where น้ำหนัก&amp;lt;40&#39;

print(pd.read_sql(sql,&#39;sqlite:///pkdex.db&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ได้&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 	เลข	สายพันธุ์
0	361	ยุกิวาราชิ
1	362	โอนิโกริ
2	363	ทามะซาราชิ

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt; 	เลข	สายพันธุ์		ส่วนสูง	น้ำหนัก
0	361	ยุกิวาราชิ		0.7		16.8
1	363	ทามะซาราชิ	0.8		39.5

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;เช่นเดียวกับ .to_sql() ฟังก์ชัน pd.read_sql_table(), pd.read_sql_query() และ pd.read_sql() เองก็เดิมทีควรใช้กับ engine ของ sqlalchemy เช่นกัน การเขียนแบบตัวอย่างที่ยกมาจึงเป็นแค่การเขียนย่อ&lt;/p&gt;

&lt;p&gt;หากเขียนเต็มๆตั้งแต่สร้าง engine ของ sqlalchemy ก็อาจเขียนได้แบบนี้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlalchemy

engine = sqlalchemy.create_engine(&#39;sqlite:///pkdex.db&#39;)
print(pd.read_sql(&#39;pokemon&#39;,engine))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;นอกจากนี้ pd.read_sql_query() หรือ pd.read_sql() สามารถใช้กับมอดูล sqlite3 ได้ด้วย ดังนั้นจึงอาจเขียนแบบนี้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlite3

conn = sqlite3.connect(&#39;pkdex.db&#39;)
print(pd.read_sql(&#39;select * from pokemon&#39;,conn))
conn.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;เพียงแต่ .to_sql() กับ df.read_sql_table จะใช้ได้กับ sqlalchemy เท่านั้น ใช้กับ sqlite3 ไม่ได้&lt;/p&gt;

&lt;p&gt;อ้างอิง&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_sql.html&#34; target=&#34;_blank&#34;&gt;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_sql.html&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_sql_table.html&#34; target=&#34;_blank&#34;&gt;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_sql_table.html&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_sql_query.html&#34; target=&#34;_blank&#34;&gt;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_sql_query.html&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_sql.html&#34; target=&#34;_blank&#34;&gt;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_sql.html&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://www.cjavapy.com/article/143&#34; target=&#34;_blank&#34;&gt;https://www.cjavapy.com/article/143&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://qiita.com/orengeo/items/36e8809e07be7c1b145e&#34; target=&#34;_blank&#34;&gt;https://qiita.com/orengeo/items/36e8809e07be7c1b145e&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Reference : &lt;a href=&#34;https://phyblas.hinaboshi.com/yancham20&#34; target=&#34;_blank&#34;&gt;https://phyblas.hinaboshi.com/yancham20&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>ปรับเปลี่ยนการแสดงผล pandas ใน jupyter</title>
      <link>https://dragon-library.github.io/coding/tutorials/post/python/tutorials/change-output-pandas-in-jupyter/</link>
      <pubDate>Tue, 02 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/coding/tutorials/post/python/tutorials/change-output-pandas-in-jupyter/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;เขียนเมื่อ 2016/10/23 12:11&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ในเนื้อหา  &lt;a href=&#34;https://phyblas.hinaboshi.com/yancham02&#34; target=&#34;_blank&#34;&gt;pandas เบื้องต้นบทที่ ๒&lt;/a&gt;  ได้มีเขียนถึงไปว่าเดตาเฟรมใน jupyter จะแสดงผลในลักษณะตารางที่สร้างขึ้นจากโค้ด html&lt;/p&gt;

&lt;p&gt;เกี่ยวกับการติดตั้งและใช้งาน jupyter มีคนเขียนถึงไว้แล้วอ่านได้ใน&lt;br /&gt;
&lt;a href=&#34;https://python3.wannaphong.com/2015/09/%E0%B8%95%E0%B8%B4%E0%B8%94%E0%B8%95%E0%B8%B1%E0%B9%89%E0%B8%87%E0%B9%80%E0%B8%84%E0%B8%A3%E0%B8%B7%E0%B9%88%E0%B8%AD%E0%B8%87%E0%B8%A1%E0%B8%B7%E0%B8%AD-python.html&#34; target=&#34;_blank&#34;&gt;https://python3.wannaphong.com/2015/09/ติดตั้งเครื่องมือ-python.html&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://naiwaen.debuggingsoft.com/2016/08/jupyter-with-python-part2&#34; target=&#34;_blank&#34;&gt;http://naiwaen.debuggingsoft.com/2016/08/jupyter-with-python-part2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;นอกจากแค่ใช้แสดงผลเป็นตารางได้ธรรมดาแล้ว การแสดงผลของเดตาเฟรมใน jupyter นั้นยังสามารถปรับแต่งใส่ลูกเล่นต่างๆได้ด้วย&lt;/p&gt;

&lt;p&gt;สำหรับบทความนี้จะพูดถึงการปรับเปลี่ยนรูปแบบการแสดงผล โดยใช้เมธอดต่างๆที่อยู่ภายในตัวเดตาเฟรม&lt;/p&gt;

&lt;p&gt;เนื้อหาแปลและตัดต่อเรียบเรียงจาก  &lt;a href=&#34;http://sinhrks.hatenablog.com/entry/2015/11/22/202640&#34; target=&#34;_blank&#34;&gt;http://sinhrks.hatenablog.com/entry/2015/11/22/202640&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ลองสร้างเดตาเฟรมขึ้นมาอันหนึ่งเพื่อใช้เป็นตัวอย่าง โดยประกอบด้วยคอลัมน์ที่เป็นตัวเลข แล้วก็ที่เป็นตัวหนังสือ&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;import  pandas  as  pd  
pokemon = pd.DataFrame([  
[&#39;ฟุชิงิดาเนะ&#39;,&#39;พืช/พิษ&#39;,0.7,6.9],  
[&#39;ฟุชิงิโซว&#39;,&#39;พืช/พิษ&#39;,1.0,13.0],  
[&#39;ฟุชิงิบานะ&#39;,&#39;พืช/พิษ&#39;,2.4,155.5],  
[&#39;ฮิโตคาเงะ&#39;,&#39;ไฟ&#39;,0.6,8.5],  
[&#39;ลิซาร์โด&#39;,&#39;ไฟ&#39;,1.1,19.0],  
[&#39;ลิซาร์ดอน&#39;,&#39;ไฟ/บิน&#39;,1.7,101.5],  
[&#39;เซนิงาเมะ&#39;,&#39;น้ำ&#39;,0.5,9.0],  
[&#39;คาเมล&#39;,&#39;น้ำ&#39;,1.0,22.5],  
[&#39;คาเม็กซ์&#39;,&#39;น้ำ&#39;,1.6,101.1]],  
columns=[&#39;สายพันธุ์&#39;,&#39;ชนิด&#39;,&#39;ส่วนสูง&#39;,&#39;น้ำหนัก&#39;],  
index=[1,2,3,4,5,6,7,8,9])  
pokemon
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;โดยปกติจะได้ตารางเรียบๆออกมาแบบนี้&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://phyblas.hinaboshi.com/rup/nayuki/ayu/b01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;การปรับการแสดงผลนั้นทำได้โดยพิมพ์คำว่า .style ต่อท้ายตัวแปรที่เก็บเดตาเฟรมอยู่ แล้วตามด้วยเมธอดที่ต้องการ&lt;/p&gt;

&lt;p&gt;ในที่นี้จะยกตัวอย่างแค่ส่วนหนึ่งขึ้นมาลองใช้ ได้แก่&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;.style.set_properties() ปรับค่าการแสดงผลทุกช่องตารางเหมือนกัน  
.style.apply() ปรับค่าการแสดงผลโดยแยกแต่ละแถวหรือแต่ละคอลัมน์ตามค่าโดยกำหนดด้วยฟังก์ชัน  
.style.applymap() ปรับค่าการแสดงผลโดยแยกตามค่าของแต่ละช่องโดยกำหนดด้วยฟังก์ชัน  
.style.highlight_max() เติมสีให้ช่องที่ค่าสูงสุด  
.style.highlight_min() เติมสีให้ช่องที่ค่าต่ำสุด  
.style.highlight_null() เติมสีให้ช่องที่ค่าเป็น NaN  
.style.background_gradient() เปลี่ยนสีฉากหลังแต่ละช่องตามค่าตัวเลข  
.style.bar() แสดงแผนภูมิแท่งขึ้นภายในตารางตามค่าตัวเลข  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;เริ่มจาก style.set_properties คำสั่งนี้จะปรับการแสดงผลโดยใช้โค้ด css หากใครใช้ css เป็นอยู่แล้วก็สามารถปรับแต่งอะไรต่างๆได้ตามใจชอบโดยไม่ต้องจำอะไรเพิ่มเติม&lt;/p&gt;

&lt;p&gt;ค่าคุณสมบัติต่างๆเขียนในรูปแบบ .style.set_properties(คุณสมบัติ1=ค่า1,คุณสมบัติ2=ค่า2,&amp;hellip;=&amp;hellip;) แบบนี้ได้&lt;/p&gt;

&lt;p&gt;ตัวอย่าง ลองเปลี่ยนสีอักษรในตาราง&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;pokemon.style.set_properties(color=&#39;#aa7711&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://phyblas.hinaboshi.com/rup/nayuki/ayu/b02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;เพียงแต่ว่าหากชื่อมีขีด - อยู่ด้วยจะใช้วิธีนี้ไม่ได้ ต้องใช้การเขียนในรูปดิกชันนารีแทน โดยใส่ดอกจันสองอันนำหน้า .style.set_properties(**{คุณสมบัติ1:ค่า1,คุณสมบัติ2:ค่า2,&amp;hellip;:&amp;hellip;}) แบบนี้&lt;/p&gt;

&lt;p&gt;ตัวอย่าง&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;pokemon.style.set_properties(**{&#39;background-color&#39;:&#39;#ff2266&#39;,&#39;color&#39;:&#39;#11ff00&#39;,&#39;font-size&#39;:&#39;20px&#39;})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://phyblas.hinaboshi.com/rup/nayuki/ayu/b03.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;การใช้ style.set_properties แบบนี้จะเป็นการเปลี่ยนทุกแถวทุกหลักเหมือนกันหมด แต่ถ้าต้องการกำหนดรูปแบบโดยขึ้นอยู่กับค่าในแต่ละช่องก็ให้ใช้ style.applymap&lt;/p&gt;

&lt;p&gt;ก่อนอื่นต้องสร้างฟังก์ชันที่ให้ค่าคืนกลับเป็นโค้ด css จากนั้นจึงนำฟังก์ชันนี้ไปใช้ style.applymap ฟังก์ชันจะถูกเรียกใช้โดยมีค่าของแต่ช่องตารางเป็นอาร์กิวเมนต์&lt;/p&gt;

&lt;p&gt;ตัวอย่าง&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def  f(x):  
if(type(x)==str):  
return  &#39;color: #00aa00&#39;  
elif(x&amp;gt;50):  
return  &#39;color: #ff0000&#39;  
else:  
return  &#39;&#39;  
pokemon.style.applymap(f)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://phyblas.hinaboshi.com/rup/nayuki/ayu/b04.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;แต่หากต้องการแยกเป็นแต่ละคอลัมน์ให้ใช้ style.apply เพียงแต่ว่าค่าที่ฟังก์ชันคืนกลับมาจะต้องเป็นลิสต์ของโค้ด css ที่มีจำนวนสมาชิกเท่ากับจำนวนแถว&lt;/p&gt;

&lt;p&gt;ตัวอย่าง&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def  f(x):  
z =  &#39;color: #110099; font-size: %dpx&#39;%(50*len(str(x.max()))**-0.5)  
return  [z]*len(x)  
pokemon.style.apply(f)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://phyblas.hinaboshi.com/rup/nayuki/ayu/b06.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;หากต้องการแยกเป็นแต่ละแถวก็ใช้ style.apply แล้วใส่ axis=1 เช่น&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def  f(x):  
if(&#39;พืช&#39;  in  x[&#39;ชนิด&#39;]):  
return  [&#39;&#39;,&#39;color: #00ee00&#39;,&#39;&#39;,&#39;&#39;]  
if(&#39;ไฟ&#39;  in  x[&#39;ชนิด&#39;]):  
return  [&#39;&#39;,&#39;color: #ee0000&#39;,&#39;&#39;,&#39;&#39;]  
if(x[&#39;ชนิด&#39;]==&#39;น้ำ&#39;):  
return  [&#39;&#39;,&#39;color: #0000ee&#39;,&#39;&#39;,&#39;&#39;]  
pokemon.style.apply(f,axis=1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://phyblas.hinaboshi.com/rup/nayuki/ayu/b05.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;หากต้องการระบายสีช่องที่มีค่าสูงสุดหรือต่ำสุดให้ใช้ style.highlight_max หรือ style.highlight_min โดยระบุค่าสีที่ต้องการด้วยคีย์เวิร์ด color คำสั่งนี้จะมีผลเฉพาะคอลัมน์ที่เป็นค่าตัวเลขเท่านั้น&lt;/p&gt;

&lt;p&gt;ตัวอย่าง&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;pokemon.style.highlight_max(color=&#39;#aaaaff&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://phyblas.hinaboshi.com/rup/nayuki/ayu/b07.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;สามารถใส่ซ้อนกันได้หากต้องการแสดงทั้งค่า max และ min&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;pokemon.style.highlight_max(color=&#39;#cc0000&#39;).highlight_min(color=&#39;#00cc00&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://phyblas.hinaboshi.com/rup/nayuki/ayu/b08.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ส่วน style.highlight_null จะระบายสีช่องที่ค่าเป็น None หรือ NaN&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;pokemon.loc[10] = [None]*4  
pokemon.style.highlight_null()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://phyblas.hinaboshi.com/rup/nayuki/ayu/b09.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;สำหรับ style.background_gradient จะเป็นการใส่สีให้แต่ละช่องของแต่ละแถงโดยเรียงตามค่าตัวเลขโดยเรียงสีตามคัลเลอร์แม็ป ให้ใส่คัลเลอร์แม็ปที่ต้องการลงในคีย์เวิร์ด cmap (เกี่ยวกับคัลเลอร์แม็ปได้อธิบายไว้ใน  &lt;a href=&#34;https://phyblas.hinaboshi.com/numa24&#34; target=&#34;_blank&#34;&gt;numpy &amp;amp; matplotlib เบื้องต้นบทที่ ๒๔&lt;/a&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;pokemon.style.background_gradient(cmap=&#39;summer&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://phyblas.hinaboshi.com/rup/nayuki/ayu/b10.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ปกติสีจะถูกใส่ให้กับทุกคอลัมน์ที่เป็นค่าตัวเลข แต่หากต้องการให้ใส่แค่บางคอลัมน์ก็ทำได้โดยใช้คีย์เวิร์ด subset แล้วระบุเฉพาะชื่อคอลัมน์ที่ต้องการ&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;pokemon.style.background_gradient(cmap=&#39;autumn&#39;,subset=[&#39;น้ำหนัก&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://phyblas.hinaboshi.com/rup/nayuki/ayu/b11.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;สุดท้าย style.bar จะเป็นการสร้างแท่งสีขึ้นมาเป็นฉากหลังในตาราง โดยมีความยาวตามค่า&lt;/p&gt;

&lt;p&gt;ตัวอย่าง&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;pokemon.style.bar(color=&#39;#aaffaa&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://phyblas.hinaboshi.com/rup/nayuki/ayu/b12.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;การแสดงผลของตารางทั้งหมดมาจากโค้ด html ซึ่งหากต้องการได้ตัวโค้ด html ออกมาในรูปสายอักขระทันทีก็ให้ใช้เมธอด render() พิมพ์ต่อท้ายไปอีก&lt;/p&gt;

&lt;p&gt;เช่น&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;pokemon.style.bar(color=&#39;#aaffaa&#39;).render()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;แบบนี้จะได้ตัวโค้ด html มา&lt;/p&gt;

&lt;p&gt;นอกจากนี้แล้วยังมีความสามารถอื่นๆที่ทำได้อีกมากใน jupyter ที่ไม่ได้กล่าวถึงในนี้ สำหรับผู้ที่สนใจก็ไปลองๆใช้และศึกษากันดูเพิ่มเติมได้&lt;/p&gt;

&lt;p&gt;Reference : &lt;a href=&#34;https://phyblas.hinaboshi.com/20161023&#34; target=&#34;_blank&#34;&gt;https://phyblas.hinaboshi.com/20161023&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pandas Cheat Sheet</title>
      <link>https://dragon-library.github.io/coding/tutorials/post/python/tutorials/pandas-cheat-sheet/</link>
      <pubDate>Sun, 31 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/coding/tutorials/post/python/tutorials/pandas-cheat-sheet/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.datath.com/2017/11/05/&#34; target=&#34;_blank&#34;&gt;November 5, 2017&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;featured.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Image by www.reddit.com&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Pandas ถือเป็นเครื่องมือหลักในการทำ Data Wrangling บน Python และสามารถนำไปใช้ประโยชน์คู่กับ Package อื่น เช่น เอาไปเตรียมข้อมูลก่อนทำ Model ใน SKLearn ได้ด้วย&lt;/p&gt;

&lt;p&gt;วันนี้แอดมินเลยเอาคำสั่ง Pandas ที่ใช้บ่อย ๆ มารวบรวมให้renameหาง่าย ๆ ตั้งแต่อ่านไฟล์ข้อมูล เลือกข้อมูล แก้ไขข้อมูล ไปจนถึงเซฟไฟล์ข้อมูลเพื่อนำไปใช้ต่อเลยทีเดียว หวังว่าจะเป็นประโยชน์กับทุกท่านนะครับ :)&lt;/p&gt;

&lt;p&gt;และเนื่องจากหน้านี้เป็น Cheatsheet รวมเทคนิคเยอะแยะมากมาย ถ้าไล่อ่านกันอาจจะหายาก ผมเลยเตรียมสารบัญมาให้ด้านล่างนี้ครับ&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Contents&lt;/strong&gt;  &lt;a href=&#34;https://blog.datath.com/cheatsheet-pandas/#&#34; target=&#34;_blank&#34;&gt;hide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.datath.com/cheatsheet-pandas/#Pandas_khux_xari&#34; target=&#34;_blank&#34;&gt;1  Pandas คืออะไร?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.datath.com/cheatsheet-pandas/#thekhnikh_kar_chi_Pandas&#34; target=&#34;_blank&#34;&gt;2  เทคนิคการใช้ Pandas&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.datath.com/cheatsheet-pandas/#withi_chekh_Version_Pandas&#34; target=&#34;_blank&#34;&gt;2.1  วิธีเช็ค Version Pandas&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.datath.com/cheatsheet-pandas/#withi_kar_hold_fil_CSV_Import&#34; target=&#34;_blank&#34;&gt;2.2  วิธีการโหลดไฟล์ CSV (Import)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.datath.com/cheatsheet-pandas/#withi_sum_khxmul_sahrab_chekh_Sample&#34; target=&#34;_blank&#34;&gt;2.3  วิธีสุ่มข้อมูลสำหรับเช็ค (Sample)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.datath.com/cheatsheet-pandas/#withi_chekh_khxmul_hakhwam_phid_pkti_ni_DataFrame_beuxng_tn&#34; target=&#34;_blank&#34;&gt;2.4  วิธีเช็คข้อมูลหาความผิดปกติใน DataFrame เบื้องต้น&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.datath.com/cheatsheet-pandas/#withi_paelng_prapheth_khxmul_Data_Type_ni_Data_Frame&#34; target=&#34;_blank&#34;&gt;2.5  วิธีแปลงประเภทข้อมูล (Data Type) ใน Data Frame&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.datath.com/cheatsheet-pandas/#withi_chekh_Summary_khxng_taela_khxlamn_count_min_max_mean&#34; target=&#34;_blank&#34;&gt;2.6  วิธีเช็ค Summary ของแต่ละคอลัมน์ (count, min, max, mean)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.datath.com/cheatsheet-pandas/#withi_chekh_Summary_count_min_max_mean_baeb_yaek_klum&#34; target=&#34;_blank&#34;&gt;2.7  วิธีเช็ค Summary (count, min, max, mean) แบบแยกกลุ่ม&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.datath.com/cheatsheet-pandas/#withi_srang_DataFrame_him&#34; target=&#34;_blank&#34;&gt;2.8  วิธีสร้าง DataFrame ใหม่&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.datath.com/cheatsheet-pandas/#withi_leuxk_hlay_khxlamn_cak_DataFrame&#34; target=&#34;_blank&#34;&gt;2.9  วิธีเลือกหลายคอลัมน์จาก DataFrame&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.datath.com/cheatsheet-pandas/#withi_leuxk_khxlamn_tam_ngeuxnkhi_thi_txngkar&#34; target=&#34;_blank&#34;&gt;2.10  วิธีเลือกคอลัมน์ตามเงื่อนไขที่ต้องการ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.datath.com/cheatsheet-pandas/#withi_leuxk_thaew_tam_ngeuxnkhi_thi_txngkar&#34; target=&#34;_blank&#34;&gt;2.11  วิธีเลือกแถวตามเงื่อนไขที่ต้องการ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.datath.com/cheatsheet-pandas/#withi_pheim_khxlamn_him&#34; target=&#34;_blank&#34;&gt;2.12  วิธีเพิ่มคอลัมน์ใหม่&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.datath.com/cheatsheet-pandas/#kar_slab_Row_-_Column_Transpose&#34; target=&#34;_blank&#34;&gt;2.13  การสลับ Row &amp;lt;-&amp;gt; Column (Transpose)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.datath.com/cheatsheet-pandas/#kar_tx_DataFrame&#34; target=&#34;_blank&#34;&gt;2.14  การต่อ DataFrame&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.datath.com/cheatsheet-pandas/#kar_tx_DataFrame_baeb_Join&#34; target=&#34;_blank&#34;&gt;2.15  การต่อ DataFrame แบบ Join&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.datath.com/cheatsheet-pandas/#kar_ha_kha_Mean_Sum_Max_Aggregate_baeb_thang_DataFrame&#34; target=&#34;_blank&#34;&gt;2.16  การหาค่า Mean, Sum, Max (Aggregate) แบบทั้ง DataFrame&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.datath.com/cheatsheet-pandas/#kar_Aggregate_baeb_tam_klum_thi_txngkar&#34; target=&#34;_blank&#34;&gt;2.17  การ Aggregate แบบตามกลุ่มที่ต้องการ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.datath.com/cheatsheet-pandas/#kar_ran_Function_deiywkan_thuk_thaew_hrux_thuk_khxlamn&#34; target=&#34;_blank&#34;&gt;2.18  การรัน Function เดียวกันทุกแถว หรือทุกคอลัมน์&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.datath.com/cheatsheet-pandas/#ran_kha_sang_thi_kheiyn_xeng_kab_thuk_thaew_ni_1_khxlamn&#34; target=&#34;_blank&#34;&gt;2.19  รันคำสั่งที่เขียนเองกับทุกแถวใน 1 คอลัมน์&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.datath.com/cheatsheet-pandas/#ran_kha_sang_thi_kheiyn_xeng_kab_thuk_kha&#34; target=&#34;_blank&#34;&gt;2.20  รันคำสั่งที่เขียนเองกับทุกค่า&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.datath.com/cheatsheet-pandas/#khanwn_Correlation_Covariance&#34; target=&#34;_blank&#34;&gt;2.21  คำนวณ Correlation &amp;amp; Covariance&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.datath.com/cheatsheet-pandas/#khanwn_Cross_Tabulation&#34; target=&#34;_blank&#34;&gt;2.22  คำนวณ Cross Tabulation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.datath.com/cheatsheet-pandas/#withi_ha_kha_Unique_ni_taela_khxlamn&#34; target=&#34;_blank&#34;&gt;2.23  วิธีหาค่า Unique ในแต่ละคอลัมน์&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.datath.com/cheatsheet-pandas/#withi_chekh_wa_mi_thaew_hin_khxmul_sa_may_Duplicated&#34; target=&#34;_blank&#34;&gt;2.24  วิธีเช็คว่ามีแถวไหนข้อมูลซ้ำมั้ย (Duplicated)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.datath.com/cheatsheet-pandas/#withi_kar_nab_canwn_Duplicate&#34; target=&#34;_blank&#34;&gt;2.25  วิธีการนับจำนวน Duplicate&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.datath.com/cheatsheet-pandas/#withi_kar_lb_Duplicate&#34; target=&#34;_blank&#34;&gt;2.26  วิธีการลบ Duplicate&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.datath.com/cheatsheet-pandas/#withi_kar_lb_thaew_laea_lb_khxlamn&#34; target=&#34;_blank&#34;&gt;2.27  วิธีการลบแถว และลบคอลัมน์&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.datath.com/cheatsheet-pandas/#withi_kar_lb_thaew_thi_mi_Missing_Value&#34; target=&#34;_blank&#34;&gt;2.28  วิธีการลบแถวที่มี Missing Value&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.datath.com/cheatsheet-pandas/#withi_thaen_kha_Missing_Value_dwy_kha_cheliy_Mean_Imputation&#34; target=&#34;_blank&#34;&gt;2.29  วิธีแทนค่า Missing Value ด้วยค่าเฉลี่ย (Mean Imputation)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.datath.com/cheatsheet-pandas/#kar_lup_khxmul_taela_khxlamn_laea_taela_thaew&#34; target=&#34;_blank&#34;&gt;2.30  การลูปข้อมูลแต่ละคอลัมน์ และแต่ละแถว&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.datath.com/cheatsheet-pandas/#withi_peliyn_DataFrame_cak_baeb_Wide_pen_Long_Melt&#34; target=&#34;_blank&#34;&gt;2.31  วิธีเปลี่ยน DataFrame จากแบบ Wide เป็น Long (Melt)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.datath.com/cheatsheet-pandas/#withi_kar_peliyn_chux_khxlamn_Rename&#34; target=&#34;_blank&#34;&gt;2.32  วิธีการเปลี่ยนชื่อคอลัมน์ (Rename)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.datath.com/cheatsheet-pandas/#withi_kar_si_khana_hna_khxlamn_Prefix&#34; target=&#34;_blank&#34;&gt;2.33  วิธีการใส่คำนำหน้าคอลัมน์ (Prefix)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.datath.com/cheatsheet-pandas/#withi_kar_thaen_kha_ni_DataFrame&#34; target=&#34;_blank&#34;&gt;2.34  วิธีการแทนค่าใน DataFrame&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.datath.com/cheatsheet-pandas/#withi_kar_Export_DataFrame_pen_fil_CSV&#34; target=&#34;_blank&#34;&gt;2.35  วิธีการ Export DataFrame เป็นไฟล์ CSV&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.datath.com/cheatsheet-pandas/#srup_kar_chi_ngan_Pandas&#34; target=&#34;_blank&#34;&gt;3  สรุปการใช้งาน Pandas&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;pandas-ค-ออะไร&#34;&gt;Pandas คืออะไร?&lt;/h2&gt;

&lt;p&gt;Pandas เป็น Library ใน Python ที่ทำให้เราเล่นกับข้อมูลได้ง่ายขึ้น เหมาะมากสำหรับทำ  &lt;a href=&#34;https://www.facebook.com/datasciencechill/photos/a.251751741876557.1073741828.250303472021384/388914871493576/?type=3&#34; target=&#34;_blank&#34;&gt;Data Cleaning / Wrangling&lt;/a&gt;  ครับผม&lt;/p&gt;

&lt;p&gt;วิธีการใช้งาน Pandas คือ โหลดไฟล์ข้อมูล เช่น CSV เข้าไป แล้วเราจะได้ข้อมูลในรูปแบบตาราง (DataFrame) ที่แบ่งข้อมูลตามแถวและคอลัมน์ หรือเหมือน Excel ที่เราใช้กันนั่นเอง&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.datath.com/cheatsheet-pandas/example-dataframe-pandas/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://cdn.shortpixel.ai/client/to_webp,q_lossy,ret_img,w_998/https://blog.datath.com/wp-content/uploads/2017/11/example-dataframe-pandas.jpg&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ตัวอย่าง DataFrame ของ Pandas เป็นตารางเหมือน Excel เลยครับ&lt;/p&gt;

&lt;p&gt;ป.ล. Pandas ไม่เกี่ยวกับหมีแพนด้านะฮะ จริง ๆ แล้วมาจากคำว่า PANel DAta ซึ่งหมายถึงข้อมูลที่มีหลายมิตินั่นเอง&lt;/p&gt;

&lt;h2 id=&#34;เทคน-คการใช-pandas&#34;&gt;เทคนิคการใช้ Pandas&lt;/h2&gt;

&lt;p&gt;อย่างที่&lt;a href=&#34;https://www.facebook.com/datasciencechill/photos/a.251751741876557.1073741828.250303472021384/388914871493576/?type=3&#34; target=&#34;_blank&#34;&gt;แอดมินเคยเล่า&lt;/a&gt; ว่าการทำ Data Wrangling เป็นงานที่ค่อนข้างถึกครับ วันนี้เลยรวบรวมโค้ดต่าง ๆ ในการใช้ Pandas มาให้ ซึ่งน่าจะครอบคลุมการใช้งานประมาณ 80 – 90% แล้วครับผม&lt;/p&gt;

&lt;p&gt;โค้ดบางส่วนมาจากคลาส Data Wrangling ที่แอดมินเรียน และจากเว็บไซต์ &lt;a href=&#34;https://mycheatsheets.com/pandas&#34; target=&#34;_blank&#34;&gt;MyCheatSheet&lt;/a&gt; ครับ&lt;/p&gt;

&lt;h3 id=&#34;ว-ธ-เช-ค-version-pandas&#34;&gt;วิธีเช็ค Version Pandas&lt;/h3&gt;

&lt;p&gt;โค้ดนี้เหมือนไม่สำคัญ แต่จริง ๆ แล้วสำคัญมากเวลาเราอ่าน Documentation ครับ เพราะถ้าเกิดมีอะไรพัง เราจะเทียบได้ว่า Pandas ของเราเป็นเวอร์ชั่นตามใน Documentation มั้ย&lt;/p&gt;

&lt;p&gt;print  (&amp;laquo;Pandas version&amp;raquo;,pandas.&lt;strong&gt;version&lt;/strong&gt;)&lt;/p&gt;

&lt;h3 id=&#34;ว-ธ-การโหลดไฟล-csv-import&#34;&gt;วิธีการโหลดไฟล์ CSV (Import)&lt;/h3&gt;

&lt;p&gt;จุดเริ่มต้นของการทำ Data Exploration &amp;amp; Analysis ใน Pandas ก็คือการโหลดไฟล์ข้อมูลแบบ CSV มาใช้งานนั่นเองครับ&lt;/p&gt;

&lt;p&gt;เราสามารถใช้คำสั่ง .head หรือ .tail เพื่อดูข้อมูลแถวบนสุด หรือแถวล่างสุดได้&lt;/p&gt;

&lt;h1 id=&#34;read-df&#34;&gt;Read DF&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;csvdf = pd.read_csv(&#39;data.csv&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;sometimes-reading-csv-for-excel-need-encoding&#34;&gt;Sometimes reading CSV for Excel need encoding&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;csvdf = pd.read_csv(&#39;data.csv&#39;,encoding = &amp;quot;ISO-8859-1&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;print-head-and-tail&#34;&gt;Print head and tail&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;csvdf.head()

csvdf.tail()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ว-ธ-ส-มข-อม-ลสำหร-บเช-ค-sample&#34;&gt;วิธีสุ่มข้อมูลสำหรับเช็ค (Sample)&lt;/h3&gt;

&lt;p&gt;ปกติเราเช็คข้อมูลว่าถูกต้องมั้ยด้วย head กับ tail ซึ่งเป็นการเช็คจากด้านบนหรือด้านล่าง อีกวิธีที่น่าสนใจ คือ เช็คแบบสุ่มข้อมูลขึ้นมานั่นเองครับ ทำได้ง่าย ๆ โดยใช้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;csvdf.sample()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ว-ธ-เช-คข-อม-ลหาความผ-ดปกต-ใน-dataframe-เบ-องต-น&#34;&gt;วิธีเช็คข้อมูลหาความผิดปกติใน DataFrame เบื้องต้น&lt;/h3&gt;

&lt;p&gt;หลังจากโหลดข้อมูลมาแล้ว เราอยากรู้ว่าข้อมูลมีกี่แถว, Missing value เท่าไหร่, แต่ละคอลัมน์เป็น Data Type อะไรบ้าง ก็รันคำสั่งนี้ได้เลย มีประโยชน์มากครับ&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;df.info()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn.shortpixel.ai/client/to_webp,q_lossy,ret_img,w_525/https://blog.datath.com/wp-content/uploads/2017/11/sample-info-pandas.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;df.info() จะแสดงสรุปข้อมูลมาให้&lt;/p&gt;

&lt;p&gt;นอกจากนั้นยังมีคำสั่ง df.dtypes (ไม่มีวงเล็บ) สำหรับดู Data Type แต่ละคอลัมน์อย่างเดียว&lt;/p&gt;

&lt;h3 id=&#34;ว-ธ-แปลงประเภทข-อม-ล-data-type-ใน-data-frame&#34;&gt;วิธีแปลงประเภทข้อมูล (Data Type) ใน Data Frame&lt;/h3&gt;

&lt;p&gt;บางครั้งประเภทข้อมูลของคอลัมน์เป็น String แต่เราต้องการ Integer หรือเราต้องการ Date เราสามารถแปลงข้อมูลได้ง่าย ๆ ดังนี้เลยครับ&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;df[&#39;hour&#39;] = pd.to_numeric(df[&#39;hour&#39;]) # แปลงเป็น Numeric

df[&#39;hour&#39;] = df[&#39;hour&#39;].astype(&#39;int&#39;) # อีกวิธีในการแปลงค่า สามารถใช้วิธีนี้แปลงเป็น float ได้
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ว-ธ-เช-ค-summary-ของแต-ละคอล-มน-count-min-max-mean&#34;&gt;วิธีเช็ค Summary ของแต่ละคอลัมน์ (count, min, max, mean)&lt;/h3&gt;

&lt;p&gt;ถ้าเราอยากรู้ Distribution คร่าว ๆ ของแต่ละคอลัมน์ว่าเป็นอย่างไร สามารถใช้คำสั่ง describe() ได้&lt;/p&gt;

&lt;p&gt;df.describe()&lt;/p&gt;

&lt;h3 id=&#34;ว-ธ-เช-ค-summary-count-min-max-mean-แบบแยกกล-ม&#34;&gt;วิธีเช็ค Summary (count, min, max, mean) แบบแยกกลุ่ม&lt;/h3&gt;

&lt;p&gt;บางครั้งเราไม่ได้ต้องการรู้ Summary ของทั้งคอลัมน์ แต่อยากให้แยกตามแต่ละค่าในคอลัมน์นั้น ๆ ครับ ซึ่งมีประโยชน์มากเวลาเราทำ Data Analysis แล้วอยากรู้ว่าบางกลุ่มมีอะไรผิดปกติหรือเปล่า&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;test = df.groupby([&#39;Gender&#39;])

test.describe()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ว-ธ-สร-าง-dataframe-ใหม&#34;&gt;วิธีสร้าง DataFrame ใหม่&lt;/h3&gt;

&lt;p&gt;วิธีสร้างแบบง่ายที่สุด ถ้าต้องการข้อมูลหลายรูปแบบ เราสามารถใช้ Dictionary แบบนี้เลยครับ&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;dataframe = pandas.DataFrame({

&#39;C1&#39;: pandas.date_range(&#39;20170101&#39;, periods=4),

&#39;C2&#39; : [10,20,30,40],

&#39;C3&#39;: pandas.Categorical([&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;D&#39;]),

&#39;C4&#39;: 1})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;แต่ถ้าเราต้องการแค่เป็นแบบตัวเลขทั่วไป ใช้ Numpy แบบนี้ได้เลย&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;array = numpy.array([(1,2,3), (4,5,6),(7,8,9)])

dataframe = pandas.DataFrame(array,columns=[&#39;C1&#39;,&#39;C2&#39;,&#39;C3&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ว-ธ-เล-อกหลายคอล-มน-จาก-dataframe&#34;&gt;วิธีเลือกหลายคอลัมน์จาก DataFrame&lt;/h3&gt;

&lt;p&gt;ปกติถ้าเราต้องการเลือกแค่ 1 Column ก็เขียนแบบนี้ได้เลย&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;df[&#39;C1&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;แต่ถ้าต้องการเลือกหลายคอลัมน์ ให้ทำแบบนี้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;df[[&#39;C1&#39;,&#39;C2&#39;]]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ว-ธ-เล-อกคอล-มน-ตามเง-อนไขท-ต-องการ&#34;&gt;วิธีเลือกคอลัมน์ตามเงื่อนไขที่ต้องการ&lt;/h3&gt;

&lt;p&gt;บางทีเราอยาก Filter เฉพาะคอลัมน์ที่มีค่าตามที่เราต้องการโดยใช้ .loc ได้ โดยสามารถเลือก Filter แบบ .all() (ทุกค่าในคอลัมน์ต้องตรงตามเงื่อนไข) หรือ .any() (บางค่าในคอลัมน์ต้องตรงตามเงื่อนไข)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;dataframe2 = dataframe.loc[:,(dataframe&amp;gt;50).any()]

dataframe3 = dataframe.loc[:,(dataframe&amp;gt;50).all()]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;เราสามารถใช้หาคอลัมน์ที่มี Missing Values หรือหาคอลัมน์ที่ไม่มี Missing Values เลยก็ได้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;dataframe2 = dataframe.loc[:,dataframe.isnull().any()]

dataframe3 = dataframe.loc[:,dataframe.notnull().all()]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ว-ธ-เล-อกแถวตามเง-อนไขท-ต-องการ&#34;&gt;วิธีเลือกแถวตามเงื่อนไขที่ต้องการ&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;dataframe[dataframe[&#39;C1&#39;]&amp;gt;50] # เงื่อนไขแบบง่าย ๆ

dataframe2 = dataframe.loc[dataframe.C1.isin([1,2,3])] # เงื่อนไขแบบซับซ้อน
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ถ้ามีหลายเงื่อนไขเราสามารถใช้ &amp;amp; (and) หรือ | (or) ได้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;dataframe[(dataframe[&#39;C1&#39;]&amp;gt;50) &amp;amp; ((dataframe[&#39;C2&#39;]&amp;lt;25) | (dataframe[&#39;C2&#39;]&amp;gt;75))]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;หรือใช้ Query เป็นเงื่อนไขได้ด้วย มีประโยชน์มากเวลาเรามีเงื่อนไขแปลก ๆ ไม่ต้องเขียนลูปขึ้นมาเองเลยครับ&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;dataframe2 = dataframe.query(&#39;C1 &amp;gt; C2&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ว-ธ-เพ-มคอล-มน-ใหม&#34;&gt;วิธีเพิ่มคอลัมน์ใหม่&lt;/h3&gt;

&lt;p&gt;สามารถเพิ่มคอลัมน์ใหม่ได้ 2 แบบ คือ&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;เพิ่มโดยอิงจากคอลัมน์เดิม (เช่น เอาคอลัมน์เดิม + 10 หรือ เอาคอลัมน์ A – คอลัมน์ B มีประโยชน์มากตอนทำ Feature Engineering)&lt;/li&gt;

&lt;li&gt;&lt;p&gt;เพิ่มคอลัมน์โดยตั้งค่า Fix ไปเลยสำหรับทุกแถว ส่วนใหญ่จะใช้วิธีนี้เวลาเราอยากได้ค่าอะไรแปลก ๆ ที่ต้องเขียนลูปเพื่อใส่ค่า ก็สร้างคอลัมน์แบบ Fix ค่าก่อน แล้วต่อด้วยลูป&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;df[&#39;new&#39;] = dataframe[&#39;old&#39;] + 10 # use old values

df[&#39;new2&#39;] = 5 # apply the same value
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;การสล-บ-row-column-transpose&#34;&gt;การสลับ Row &amp;lt;-&amp;gt; Column (Transpose)&lt;/h3&gt;

&lt;p&gt;ถ้าเราต้องการ Transpose (อารมณ์เหมือน Vector) เราสามารถใช้คำสั่งนี้ได้เลย&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;dataframe.T
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;การต-อ-dataframe&#34;&gt;การต่อ DataFrame&lt;/h3&gt;

&lt;p&gt;การต่อ Data Frame คือการเอา Data Set 2 ชุดมาต่อกันในแถวตั้งหรือแนวนอน สำหรับการต่อแบบปะติดไปเลย&lt;/p&gt;

&lt;p&gt;มี 2 คำสั่งที่เหมือนกัน คือ concat กับ append แต่ให้ใช้ concat ไปเลย เพราะ append เป็นคำสั่งที่ไม่ Memory Efficient&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;pd.concat([df1,df2], axis=1) # รวมกัน 2 คอลัมน์ (axis = 0 คือแถว, axis = 1 คือคอลัมน์)

pd.concat([df1,df2,df3)] # รวมมากกว่า 2 คอลัมน์ก็ได้

pd.concat(…, ignore_index=True) # รวมเสร็จแล้ว reset index ให้ด้วย ควรใช้ ไม่งั้นจะเจอ row ID ซ้ำกันตอนรวมร่าง

pd.concat(…, join=&#39;inner&#39;) # รวมร่างเฉพาะคอลัมน์ที่ df1 กับ df2 มีทั้งคู่

pd.concat(…, keys=[&#39;source1&#39;, &#39;source2&#39;]) # เพิ่มคอลัมน์เข้าไปด้วยเพื่อระบุว่า Row แต่ละอันมาจาก Data Frame อันไหน

pd.concat(…, join_axes=[df2.index]) # เลือกรวมร่างเฉพาะ row index ที่เรากำหนดได้
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;การต-อ-dataframe-แบบ-join&#34;&gt;การต่อ DataFrame แบบ Join&lt;/h3&gt;

&lt;p&gt;ถ้าต้องการต่อ DataFrame แบบ Advance หน่อย เราก็สามารถ Join DataFrame ได้เหมือน Join Table ใครเขียน SQL มาก่อนน่าจะถนัดเลย&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;pd.merge(df1, df2, left_on=&amp;quot;col1&amp;quot;, right_on=&amp;quot;col2&amp;quot;, how=&amp;quot;inner&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;เราสามารถเปลี่ยนตรง how=”inner” เป็น “outer”, “left”, “right” เพื่อเปลี่ยนเป็น Outer Join, Left Join, Right Join ได้อีกด้วย&lt;/p&gt;

&lt;h3 id=&#34;การหาค-า-mean-sum-max-aggregate-แบบท-ง-dataframe&#34;&gt;การหาค่า Mean, Sum, Max (Aggregate) แบบทั้ง DataFrame&lt;/h3&gt;

&lt;p&gt;Pandas สามารถสั่ง Aggregate เพื่อหาค่า Mean, Sum, และ Max ได้เลย เหมาะมากเวลาเราต้องการรวบข้อมูลก่อนเอาไป Visualize หรือต้องการทำ Feature Engineering ก็ได้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;newdf = df.agg([&#39;sum&#39;, &#39;max&#39;,&#39;mean&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;การ-aggregate-แบบตามกล-มท-ต-องการ&#34;&gt;การ Aggregate แบบตามกลุ่มที่ต้องการ&lt;/h3&gt;

&lt;p&gt;บางทีเราอยาก Aggregate ข้อมูลตามการจัดกลุ่มในคอลัมน์อื่น เช่น เราอยากได้รายจ่ายทั้งหมดของแต่ละคน (ต้อง aggregate sum ของคอลัมน์รายจ่าย โดยแบ่งกลุ่มตามคอลัมน์ User ID) ใช้แบบนี้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;aggregate = dataframe.groupby(&#39;C1&#39;).sum()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;การร-น-function-เด-ยวก-นท-กแถว-หร-อท-กคอล-มน&#34;&gt;การรัน Function เดียวกันทุกแถว หรือทุกคอลัมน์&lt;/h3&gt;

&lt;p&gt;เวลาเราอยากรันคำสั่งอะไรสักอย่างสำหรับทุกแถว หรือทุกคอลัมน์ เราสามารถเขียนได้แบบนี้&lt;/p&gt;

&lt;h1 id=&#34;sum-for-columns&#34;&gt;sum for columns&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;sum_columns = dataframe[[&#39;C1&#39;,&#39;C2&#39;]].apply(sum,axis=0)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;sum-for-rows&#34;&gt;sum for rows&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;sum_rows = dataframe[[&#39;C1&#39;,&#39;C2&#39;]].apply(sum,axis=1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;เหมือนกับฟังก์ชั่น apply() ใน R นั่นเอง&lt;/p&gt;

&lt;h3 id=&#34;ร-นคำส-งท-เข-ยนเองก-บท-กแถวใน-1-คอล-มน&#34;&gt;รันคำสั่งที่เขียนเองกับทุกแถวใน 1 คอลัมน์&lt;/h3&gt;

&lt;p&gt;ถ้าต้องการรันคำสั่ง (Function) ที่เขียนเอง สำหรับทุกแถวในคอลัมน์อันใดอันหนึ่ง ใช้แบบนี้ได้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;dataframe[&#39;C1&#39;] = dataframe[&#39;C1&#39;].map(lambda x: x-100)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ร-นคำส-งท-เข-ยนเองก-บท-กค-า&#34;&gt;รันคำสั่งที่เขียนเองกับทุกค่า&lt;/h3&gt;

&lt;p&gt;ถ้าต้องการรันคำสั่งที่เขียนเองกับทุกค่าใน DataFrame ใช้โค้ดนี้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;function_result = dataframe.applymap(lambda x: x*10)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;หรือใช้ transform ก็ได้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;new_dataframe = dataframe.transform(lambda x: x*100)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;คำนวณ-correlation-covariance&#34;&gt;คำนวณ Correlation &amp;amp; Covariance&lt;/h3&gt;

&lt;p&gt;เวลาเราอยากรู้ว่าค่าต่าง ๆ ใน Data Set เรา Correlate กันมั้ย&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;dataframe.corr() # Correlation

dataframe.cov() # Covariance
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;แต่ค่าที่ออกมาเป็นตัวเลขอาจจะดูยากนิดนึง เราสามารถพลอตสวย ๆ ด้วย Seaborn ได้ครับ สามารถใช้โค้ดด้านล่างนี้ได้เลย&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;import seaborn as sns

corr = modeldf.corr()
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;set-up-the-matplotlib-figure&#34;&gt;Set up the matplotlib figure&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;f, ax = plt.subplots(figsize=(15, 8))
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;generate-a-custom-diverging-colormap&#34;&gt;Generate a custom diverging colormap&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;cmap = sns.diverging_palette(10, 10, as_cmap=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;draw-the-heatmap-with-the-mask-and-correct-aspect-ratio&#34;&gt;Draw the heatmap with the mask and correct aspect ratio&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;sns.heatmap(corr, annot=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn.shortpixel.ai/client/to_webp,q_lossy,ret_img,w_861/https://blog.datath.com/wp-content/uploads/2017/11/seaborn-correlation-heatmap.jpg&#34; alt=&#34;&#34; /&gt;
Correlation Plot สวย ๆ ด้วย Seaborn&lt;/p&gt;

&lt;h3 id=&#34;คำนวณ-cross-tabulation&#34;&gt;คำนวณ Cross Tabulation&lt;/h3&gt;

&lt;p&gt;Cross Tabulation มีประโยชน์มากเวลาเราอยากรู้ว่ามี Data ที่ตรงกับกรุ๊ป A ของคอลัมน์ 1 และกรุ๊ป B ของคอลัมน์ 2 เท่าไหร่ เช่น มีนักเรียนผู้ชาย (คอลัมน์ gender) กี่คนในมัธยมปลาย (คอลัมน์ education) แบบนี้เป็นต้น&lt;/p&gt;

&lt;p&gt;หรือถ้าใครใช้ PivotTable ใน Excel มาก่อน ก็เหมือนกันเลยครับ&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;aggregate = pandas.crosstab(dataframe.C1, dataframe.C2)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ว-ธ-หาค-า-unique-ในแต-ละคอล-มน&#34;&gt;วิธีหาค่า Unique ในแต่ละคอลัมน์&lt;/h3&gt;

&lt;p&gt;คำสั่งนี้มีประโยชน์มาก เอาไว้ใช้เช็คว่าแต่ละคอลัมน์มีค่าแปลก ๆ มั้ย&lt;/p&gt;

&lt;p&gt;ตัวอย่างการใช้งานก็คือ เราอยากรู้ว่า มีบ้านไหนที่มีจำนวนห้องนอนแปลก ๆ มั้ย (เช่น 50 ห้องนอน หรือ -5 ห้องนอน) ก็หาค่า unique จากคอลัมน์ “bedrooms”&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;dataframe[&#39;C1&#39;].unique()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ว-ธ-เช-คว-าม-แถวไหนข-อม-ลซ-ำม-ย-duplicated&#34;&gt;วิธีเช็คว่ามีแถวไหนข้อมูลซ้ำมั้ย (Duplicated)&lt;/h3&gt;

&lt;p&gt;อันนี้มีประโยชน์มาก เอาไว้ใช้เช็คว่ามีข้อมูลแปลก ๆ มั้ย เช่น ทุกคอลัมน์ซ้ำกันหมด (อันนี้มีโอกาสว่าเป็นข้อมูลซ้ำ อาจจะต้องลบออก) หรือซ้ำกันบางคอลัมน์ (อันนี้ต้องเช็คอีกทีว่าคืออะไร)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;dataframe.duplicated() # หาอันที่เหมือนกันทุกคอลัมน์

dataframe.duplicated(&#39;C1&#39;) # หาอันที่ซ้ำกันเฉพาะคอลัมน์ C1

dataframe.duplicated([&#39;C1&#39;, &#39;C2&#39;]) # หาอันที่ซ้ำกันเฉพาะคอลัมน์ C1 และ C2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ปกติแล้วถ้ามีไอเทมซ้ำ คำสั่งนี้จะไม่แสดงไอเทมแรกในกลุ่มที่ซ้ำ (เช่น ถ้า C1=5 มี 2 แถว มันจะแสดงเฉพาะแถวที่ 2) เราสามารถใส่ Argument  &lt;strong&gt;keep=False&lt;/strong&gt;  เข้าไปเพื่อบังคับให้มันแสดงทุกแถวได้&lt;/p&gt;

&lt;p&gt;นอกจากนั้นเรายังสามารถนับจำนวนแถวที่ Duplicate และลบทิ้งได้ด้วย&lt;/p&gt;

&lt;h3 id=&#34;ว-ธ-การน-บจำนวน-duplicate&#34;&gt;วิธีการนับจำนวน Duplicate&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;len(df[ df.duplicated([&#39;A&#39;, &#39;B&#39;, &#39;C&#39;], keep = False)  ])
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ว-ธ-การลบ-duplicate&#34;&gt;วิธีการลบ Duplicate&lt;/h3&gt;

&lt;p&gt;เอาไว้ใช้ตอนเราเจอว่าทุกคอลัมน์ซ้ำกันหมดเลย ซึ่งเป็นเคสที่บอกว่าข้อมูลน่าจะซ้ำ ลบออกได้ (ขึ้นอยู่กับข้อมูลด้วยนะครับ บางข้อมูลอาจจะไม่ได้แปลว่าซ้ำแล้วลบได้):&lt;/p&gt;

&lt;h1 id=&#34;remove-the-duplicates&#34;&gt;Remove the duplicates&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;df.drop_duplicates([&#39;A&#39;, &#39;B&#39;, &#39;C&#39;], inplace=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;reset-dataframe-index-after-drop-duplicates&#34;&gt;Reset dataframe index after drop_duplicates.&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;df.reset_index(drop=True, inplace=True)

len(df)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;สำหรับโค้ดข้างบน จะเห็นว่าเราต้อง reset index หลังลบ duplicate ด้วยนะครับ&lt;/p&gt;

&lt;h3 id=&#34;ว-ธ-การลบแถว-และลบคอล-มน&#34;&gt;วิธีการลบแถว และลบคอลัมน์&lt;/h3&gt;

&lt;p&gt;ลบคอลัมน์สามารถทำได้แบบนี้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;dataframe = dataframe.drop(&#39;C1&#39;, axis=1)

df.drop([&#39;C1&#39;], axis=1, inplace=True) # แบบนี้ก็ได้

df.drop([&#39;C1&#39;, &#39;C2&#39;, &#39;C3&#39;], 1, inplace=True) # ลบทีละหลายคอลัมน์ก็ได้
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ส่วนการลบแถวจะลำบากหน่อย เพราะต้องใส่ Row Index (เลขที่อยู่ซ้ายสุดเวลาเราปรินท์ DataFrame)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;dataframe = dataframe.drop(5, axis=0)

dataframe.reset_index(drop=True) # Reset index
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ลบแถวแล้วอย่าลืมเช็คด้วยว่าที่ลบไปถูกต้องมั้ย และหลังจากลบแถวต้อง Reset Index ด้วย&lt;/p&gt;

&lt;h3 id=&#34;ว-ธ-การลบแถวท-ม-missing-value&#34;&gt;วิธีการลบแถวที่มี Missing Value&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;ข้อควรระวัง:&lt;/strong&gt;  การที่อยู่ ๆ เราลบแถวที่มี Missing Value ทิ้งไปเลยอาจจะไม่ใช่วิธีที่ดีที่สุดในการทำ Data Analysis เสมอไปนะครับ บางเคสการ Impute (คำนวณหาค่าไปใส่) จะดีกว่าครับ&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;dataframe2 = dataframe.dropna(axis=0)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ว-ธ-แทนค-า-missing-value-ด-วยค-าเฉล-ย-mean-imputation&#34;&gt;วิธีแทนค่า Missing Value ด้วยค่าเฉลี่ย (Mean Imputation)&lt;/h3&gt;

&lt;p&gt;วิธีหนึ่งในการแทนค่าที่หายไป คือการทำสิ่งที่เรียกว่า Mean Imputation หรือหาค่าเฉลี่ยของคอลัมน์นั้น แล้วเอามาแทนค่าที่หายไปนั่นเองครับ&lt;/p&gt;

&lt;p&gt;ข้อดีของการทำ Mean Imputation คือ สามารถทำได้ง่าย แต่ก็ต้องระวังเรื่องข้อเสีย เช่น ทำแบบนี้จะเป็นการไม่สนใจความสัมพันธ์ระหว่างตัวแปร ทำให้เกิด Bias สูง ควรใช้เฉพาะเวลา Missing Value ไม่เยอะเท่านั้นครับ&lt;/p&gt;

&lt;p&gt;สามารถรันโค้ดด้านล่างเพื่อทำ Mean Imputation ได้ง่าย ๆ เลย&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;import numpy as np

meanAge = np.mean(df.Age) # Get mean value

df.Age = df.Age.fillna(meanAge) # Fill missing values with mean
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;การล-ปข-อม-ลแต-ละคอล-มน-และแต-ละแถว&#34;&gt;การลูปข้อมูลแต่ละคอลัมน์ และแต่ละแถว&lt;/h3&gt;

&lt;p&gt;การลูปมีประโยชน์มากถ้าเราต้องการเขียนฟังก์ชั่นแปลก ๆ ใช้เองที่ Pandas ไม่รองรับ (หรืออาจจะรองรับแต่เราหาไม่เจอ เขียนเองง่ายกว่า) สามารถลูปได้ทั้งแต่ละคอลัมน์ และแต่ละแถว&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;for col_idx,data in dataframe.iteritems():

	print  (&amp;quot;column:&amp;quot;,col_idx)
	print  (&amp;quot;column data:&amp;quot;)
	print  (data,&amp;quot;\n&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;การลูปข้อมูลแต่ละแถว&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;for col_idx,data in dataframe.iterrows():

print  (&amp;quot;row:&amp;quot;,col_idx)
print  (&amp;quot;row data:&amp;quot;)
print  (data,&amp;quot;\n&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ว-ธ-เปล-ยน-dataframe-จากแบบ-wide-เป-น-long-melt&#34;&gt;วิธีเปลี่ยน DataFrame จากแบบ Wide เป็น Long (Melt)&lt;/h3&gt;

&lt;p&gt;การ Melt Data มีประโยชน์มากเวลาเราต้องการเอาข้อมูลไปพลอต Data Visualization หรือเราต้องการ Aggregate ครับ&lt;/p&gt;

&lt;p&gt;dataframe2 = dataframe.melt()&lt;/p&gt;

&lt;h3 id=&#34;ว-ธ-การเปล-ยนช-อคอล-มน-rename&#34;&gt;วิธีการเปลี่ยนชื่อคอลัมน์ (Rename)&lt;/h3&gt;

&lt;p&gt;บางทีเราต้องการเปลี่ยนชื่อเพื่อให้สั้นลง ให้พิมพ์สะดวกขึ้น สามารถทำได้ดังนี้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;dataframe.rename(columns={&#39;old&#39;:&#39;new&#39;},inplace=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ว-ธ-การใส-คำนำหน-าคอล-มน-prefix&#34;&gt;วิธีการใส่คำนำหน้าคอลัมน์ (Prefix)&lt;/h3&gt;

&lt;p&gt;อันนี้มีประโยชน์มากตอนเรามีข้อมูลหลาย ๆ ชุด และต้องการ Merge โดยอยากให้ชื่อคอลัมน์ไม่ซ้ำกัน&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;thisdata = thisdata.add_prefix(&#39;data_&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ว-ธ-การแทนค-าใน-dataframe&#34;&gt;วิธีการแทนค่าใน DataFrame&lt;/h3&gt;

&lt;p&gt;เหมาะมากเวลาต้องการแก้ Typo Error เช่น เราอยากได้ค่า Bangkok แต่เรารู้ว่ามีคนเขียนเป็น BKK อะไรแบบนี้ (รันคำสั่ง .unique เพื่อดูก่อน)&lt;/p&gt;

&lt;p&gt;เราสามารถ Replace ทั้ง DataFrame ได้เลยแบบนี้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;dataframe2 = dataframe.replace(1, -100)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;เราสามารถ Replace หลายค่าพร้อมกันได้ด้วยครับ และสามารถกำหนด Column ที่ต้องการให้แทนค่าได้ด้วย&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;df[&#39;city&#39;].replace({

&#39;BKK&#39;:&#39;Bangkok&#39;,

&#39;BNK&#39;:&#39;Bangkok&#39;

}, inplace=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ว-ธ-การ-export-dataframe-เป-นไฟล-csv&#34;&gt;วิธีการ Export DataFrame เป็นไฟล์ CSV&lt;/h3&gt;

&lt;p&gt;หลังจากที่เราจัดการ Data เรียบร้อยแล้ว ก็สามารถ Export เป็น CSV เอาไปใช้ต่อกับโปรแกรมอื่น หรืองานส่วนอื่น ๆ ได้ (แอดทำบ่อยเพราะบางทีต้องสลับ Python &amp;lt;-&amp;gt; R รัว ๆ)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;dataframe.to_csv(&#39;dataframe.csv&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Reference : &lt;a href=&#34;https://blog.datath.com/cheatsheet-pandas/&#34; target=&#34;_blank&#34;&gt;https://blog.datath.com/cheatsheet-pandas/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>จัดการฐานข้อมูล SQL ด้วย sqlalchemy</title>
      <link>https://dragon-library.github.io/coding/tutorials/post/python/tutorials/manage-sql-sqlalchemy/</link>
      <pubDate>Sun, 31 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/coding/tutorials/post/python/tutorials/manage-sql-sqlalchemy/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;featured.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;สารบัญ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;๛ แนวคิดการควบคุมฐานข้อมูลในรูปออบเจ็กต์&lt;br /&gt;
๛ การติดตั้ง&lt;br /&gt;
๛ การเริ่มต้นเชื่อมต่อกับฐานข้อมูลเพื่อเตรียมการใช้งาน&lt;br /&gt;
๛ การสร้างคลาสตารางข้อมูล&lt;br /&gt;
๛ การเตรียมไฟล์แบบจำลองและตัวสร้างเซสชัน&lt;br /&gt;
๛ การเพิ่มข้อมูลลงไป&lt;br /&gt;
๛ การอ่านข้อมูลในตาราง (query)&lt;br /&gt;
๛ การอ่านข้อมูลทั้งหมดใส่ลิสต์ (all)&lt;br /&gt;
๛ การกำหนดวิธีการเรียงลำดับข้อมูล (order_by)&lt;br /&gt;
๛ การเอาข้อมูลเฉพาะตัวแรกตัวเดียว (first)&lt;br /&gt;
๛ การจำกัดเอาข้อมูลเฉพาะบางส่วน (limit และ offset)&lt;br /&gt;
๛ การกำหนดเงื่อนไขข้อมูลที่จะอ่าน (filter)&lt;br /&gt;
๛ การแก้ข้อมูล (update)&lt;br /&gt;
๛ การลบข้อมูลออก (delete)&lt;br /&gt;
๛ การย้อนคืนสิ่งที่ทำกลับไป (rollback)&lt;br /&gt;
๛ การป้อนคำสั่ง SQL ใส่โดยตรง (execute)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;sqlalchemy&lt;/strong&gt; เป็นมอดูลในไพธอนที่ใช้สำหรับเชื่อมต่อกับระบบจัดการฐานข้อมูล SQL โดยควบคุมฐานข้อมูลในรูปแบบที่สั่งข้อมูลเหมือนเป็นออบเจ็กต์ตามแนวคิดเชิงวัตถุ&lt;/p&gt;

&lt;p&gt;บทความนี้จะอธิบายแนวคิดเบื้องต้นและวิธีการใช้ sqlalchemy เพื่อจัดการกับฐานข้อมูลอย่างง่าย&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;แนวคิดการควบคุมฐานข้อมูลในรูปออบเจ็กต์介&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ปกติการเชื่อมต่อกับฐานข้อมูล SQL จะทำโดยใช้โค้ดคำสั่งภาษา SQL แม้ว่าบางทีอาจไม่ได้สั่งโดยตรงแต่ผ่านตัวกลางอะไรก็ตาม&lt;/p&gt;

&lt;p&gt;ไพธอนมีมอดูลมาตรฐานที่ใช้จัดการฐานข้อมูลอยู่แล้วคือ sqlite3 อย่างไรก็ตาม มอดูลนี้เป็นแค่ตัวกลางสำหรับส่งโค้ดคำสั่ง SQL เข้าไปสั่งฐานข้อมูลเท่านั้น เรายังคงต้องเขียนโค้ดควบคุมด้วยตัวเอง&lt;/p&gt;

&lt;p&gt;เกี่ยวกับการใช้ sqlite3 ได้เขียนถึงไปใน &amp;gt;&amp;gt; &lt;a href=&#34;https://phyblas.hinaboshi.com/20200519&#34; target=&#34;_blank&#34;&gt;https://phyblas.hinaboshi.com/20200519&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;แต่หากใช้ sqlalchemy แม้จะใช้ควบคุมฐานข้อมูล SQL เหมือนกัน แต่ใช้วิธีการต่างกัน คือ sqlalchemy จะเป็นการควบคุมทางอ้อม เรามักจะไม่ต้องพิมพ์โค้ดคำสั่ง SQL เองโดยตรง&lt;/p&gt;

&lt;p&gt;วิธีการของ sqlalchemy คือมองว่าตารางข้อมูลในฐานข้อมูลนั้นเป็นออบเจ็กต์ตัวหนึ่ง โดยออบเจ็กต์นั้นจะมีฟังก์ชันหรือเมธอดต่างๆซึ่งเมื่อใช้แล้วจะไปสร้างโค้ดคำสั่ง SQL สั่งฐานข้อมูลอีกที&lt;/p&gt;

&lt;p&gt;ดังนั้นแล้วการควบคุมออบเจ็กต์นั้นก็เป็นการควบคุมข้อมูลในฐานข้อมูล ถ้าเราต้องการดึงข้อมูลในฐานข้อมูลมาอ่าน sqlalchemy ก็จะไปสร้างคำสั่งดึงข้อมูลมาให้ ถ้าเราทำความเปลี่ยนแปลงอะไรกับออบเจ็กต์ มันก็จะไปเปลี่ยนแปลงตัวข้อมูลในฐานข้อมูลด้วยโดยอัตโนมัติ&lt;/p&gt;

&lt;p&gt;การที่ทำแบบนี้ได้เพราะในตัวมอดูล sqlalchemy นั้นมีการตั้งความเชื่อมโยงระหว่างการกระทำต่อตัวออบเจ็กต์ กับคำสั่ง SQL สำหรับสั่งฐานข้อมูล&lt;/p&gt;

&lt;p&gt;แนวคิดแบบนี้เรียกว่า&lt;strong&gt;การจับคู่เชื่อมโยงระหว่างเชิงวัตถุและเชิงสัมพันธ์ (Object-Relational mapping)&lt;/strong&gt; หรือมักเรียกย่อๆว่า &lt;strong&gt;ORM&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;นอกจาก sqlalchemy แล้วในไพธอนก็ยังมีมอดูลตัวอื่นที่ทำคล้ายๆกันนี้ เช่น &lt;a href=&#34;https://tortoise-orm.readthedocs.io/&#34; target=&#34;_blank&#34;&gt;tortoise-orm&lt;/a&gt; รวมถึง &lt;a href=&#34;https://www.djangoproject.com/&#34; target=&#34;_blank&#34;&gt;django&lt;/a&gt; ซึ่งเป็นมอดูลทำเฟรมเวิร์กเขียนเว็บ ก็มีมอดูลย่อยที่ควบคุมฐานข้อมูลแบบ ORM เช่นเดียวกัน&lt;/p&gt;

&lt;p&gt;sqlalchemy อาจใช้คู่กับมอดูลไพธอนสำหรับเขียนเว็บที่ไม่ได้มี ORM อยู่ในตัวสำเร็จเหมือนอย่างที่ django มีแบบนั้น เช่น flask หรือ responder&lt;/p&gt;

&lt;p&gt;หากเทียบกับในภาษารูบีก็เหมือนกับมอดูล activerecord ซึ่งมักจะใช้คู่กับ ruby on rails เฟรมเวิร์กเขียนเว็บยอดนิยมตัวหนึ่ง&lt;/p&gt;

&lt;p&gt;sqlalchemy อาจใช้ได้กับฐานข้อมูลต่างๆเหล่านี้&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SQLite&lt;/li&gt;
&lt;li&gt;MySQL&lt;/li&gt;
&lt;li&gt;PostgreSQL&lt;/li&gt;
&lt;li&gt;Oracle&lt;/li&gt;
&lt;li&gt;Mycrosoft SQL Server&lt;/li&gt;
&lt;li&gt;Firebird&lt;/li&gt;
&lt;li&gt;Sybase&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ซึ่งฐานข้อมูลแต่ละตัวนั้นก็จะมีลักษณะการเขียนที่ต่างกันออกไป และ sqlalchemy ช่วยรองรับความแตกต่างนี้ให้ได้ในระดับหนึ่ง อย่างไรก็ตามความต่างนี้ก็ส่งผลอยู่บ้าง แต่พวกคำสั่งพื้นฐานจะใช้ได้ไม่ต่างกันนัก&lt;/p&gt;

&lt;p&gt;ในบทความนี้จะใช้ SQLite เป็นตัวอย่าง แต่วิธีการสามารถนำไปใช้กับฐานข้อมูลชนิดอื่นได้เช่นกัน แม้อาจมีรายละเอียดหรือผลลัพธ์ต่างกันออกไปบ้าง&lt;/p&gt;

&lt;p&gt;เมื่อใช้ sqlalchemy แล้วจะทำให้เราอ่านเขียนข้อมูลในฐานข้อมูล SQL ได้โดยไม่ต้องเขียนโค้ดภาษา SQL โดยตรงเลย เพียงแต่ในเบื้องหลังการทำงานของมันจริงๆแล้วก็คือสร้างโค้ด SQL โดยอัตโนมัติเพื่อไปสั่งอีกที ดังนั้นก็ยังควรจะรู้โค้ด SQL อยู่ เมื่อมีปัญหาจะได้เข้าใจว่าเกิดอะไรขึ้น อีกทั้งคำสั่งลึกๆซับซ้อนจำเพาะบางอย่างเขียนโค้ด SQL สั่งเองอาจจะเร็วกว่าด้วย&lt;/p&gt;

&lt;p&gt;ปกติเวลาเกิดข้อผิดพลาดอะไรขึ้นระหว่างติดต่อกับฐานข้อมูลอยู่ sqlalchemy ก็จะแสดงโค้ด SQL ที่ใช้ตอนนั้นให้ดูไปด้วย สามารถดูโค้ดเพื่อให้เข้าใจได้มากขึ้นว่ามีข้อผิดพลาดอะไร&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;การติดตั้ง介&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;sqlalchemy ไม่ใช่มอดูลมาตรฐานของไพธอน ต้องติดตั้งเพิ่มเติมเอง ซึ่งก็ทำได้ง่ายโดยใช้ pip&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;pip install SQLAlchemy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;หรือ conda&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;conda install -c anaconda sqlalchemy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;การเริ่มต้นเชื่อมต่อกับฐานข้อมูลเพื่อเตรียมการใช้งาน介&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ขอเริ่มด้วยการยกตัวอย่างการใช้ sqlalchemy ทำการเชื่อมต่อกับฐานข้อมูล สร้างตารางข้อมูลในนั้น จากนั้นเติมข้อมูลในตาราง และสุดท้ายคือดูข้อมูลในตาราง&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlalchemy
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base

# สร้างคลาสแบบจำลองพื้นฐาน
Base = declarative_base()

# สร้างคลาสตารางฐานข้อมูลนักเรียน
class Nakrian(Base):
    __tablename__ = &#39;nakrian&#39;
    chue = sqlalchemy.Column(sqlalchemy.String,primary_key=True)
    ayu = sqlalchemy.Column(sqlalchemy.Integer)
    sung = sqlalchemy.Column(sqlalchemy.Float)
    
    def __repr__(self):
        return f&#39;{self.chue} อายุ {self.ayu} สูง {self.sung*100:.0f} ซม.&#39;

# สร้างตัวเชื่อมต่อกับฐานข้อมูล sqlite ในไฟล์ yurudata.db
engine = sqlalchemy.create_engine(&#39;sqlite:///yurudata.db&#39;)

# ทำการสร้างตารางขึ้นมาในฐานข้อมูล SQL จริงๆ
Base.metadata.create_all(engine)

# สร้างเซชชัน
sm = sessionmaker(engine)
session = sm()



# เข้าสู่ขั้นตอนใช้งาน

# สร้างออบเจ็กต์นักเรียนคนแรก
nakrian1 = Nakrian(chue=&#39;ริเสะ&#39;,ayu=15,sung=1.46)
# ใส่นักเรียนคนแรกลงในฐานข้อมูล
session.add(nakrian1)

# สร้างออบเจ็กต์นักเรียนคนที่ ๒ และ ๓
nakrian2 = Nakrian(chue=&#39;อายาโนะ&#39;,ayu=14,sung=1.59)
nakrian3 = Nakrian(chue=&#39;ซากุราโกะ&#39;,ayu=13,sung=1.53)
# ใส่นักเรียนคนที่ ๒ และ ๓ ลงในฐานข้อมูลพร้อมกันทีเดียว
session.bulk_save_objects([nakrian2,nakrian3])

# บันทึกความเปลี่ยนแปลงลงในฐานข้อมูลจริงๆ
session.commit()

# เปิดดูข้อมูลทั้งหมดในฐานข้อมูล
for nakrian in session.query(Nakrian).order_by(Nakrian.ayu):
    print(nakrian)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ผลที่ได้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ซากุราโกะ อายุ 13 สูง 153 ซม.
อายาโนะ อายุ 14 สูง 159 ซม.
ริเสะ อายุ 15 สูง 146 ซม.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;จากตัวอย่างจะเห็นว่าขั้นตอนการเตรียมการใช้งานโดยรวมก็จะมีอยู่ดังนี้&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;สร้างคลาสแบบจำลองพื้นฐาน (Base) จาก sqlalchemy.ext.declarative.declarative_base()&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;สร้างคลาสตารางฐานข้อมูลนักเรียนขึ้นมาโดยรับทอดจากแบบจำลองพื้นฐานนั้น&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;สร้างออบเจ็กต์ตัวเชื่อมต่อกับฐานข้อมูล (ใน sqlalchemy จะเรียกว่าเป็น engine หรือเครื่องยนต์) โดยใช้ sqlalchemy.create_engine() แล้วระบุชื่อฐานข้อมูลที่จะเชื่อมต่อ&lt;/p&gt;

&lt;p&gt;ในกรณีของ SQLite ดังตัวอย่างนี้จะเขียนเป็น sqlalchemy.create_engine(&amp;lsquo;sqlite:///พาธและชื่อไฟล์ฐานข้อมูล&amp;rsquo;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;สร้างตารางขึ้นตามแบบจำลองที่สร้างไว้ Base.metadata.create_all(engine)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;สร้างตัวสร้างเซชชันขึ้นมาจาก sqlalchemy.orm.sessionmaker()&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;สร้างเซชชันขึ้นมาจากตัวสร้างเซชชัน&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;หลังจากนั้นก็เข้าสู่ขั้นตอนการนำมาใช้งานได้ โดยสิ่งที่จะต้องใช้คือตัว session และตัวคลาสของตารางข้อมูลที่เราสร้างขึ้นมาจากขั้นเตรียมการ&lt;/p&gt;

&lt;p&gt;รายละเอียดในส่วนการใช้งานนั้นจะอธิบายอีกทีหลังในหัวข้อถัดๆไป&lt;/p&gt;

&lt;p&gt;ฟังก์ชันที่ใช้นั้นกระจัดกระจายอยู่ตามมอดูลย่อยต่างๆ ตัวหลักๆที่ใช้เป็นประจำมีดังนี้&lt;/p&gt;

&lt;p&gt;ชื่อฟังก์ชัน&lt;/p&gt;

&lt;p&gt;หน้าที่&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sqlalchemy.create_engine&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;สร้างตัวเชื่อมต่อกับฐานข้อมูล&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sqlalchemy.orm.sessionmaker&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;ตัวสร้างเซสชันการเชื่อมต่อ&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sqlalchemy.ext.declarative.declarative_base&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;ตัวสร้างคลาสที่เป็นฐานของแบบจำลองตารางข้อมูล&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sqlalchemy.Column&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;สร้างออบเจ็กต์ที่แทนสดมภ์ของตารางข้อมูล&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sqlalchemy.String&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;sqlalchemy.Integer&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;sqlalchemy.Float&lt;/code&gt;&lt;br /&gt;
ฯลฯ&lt;/p&gt;

&lt;p&gt;คลาสแทนชนิดข้อมูล สายอักขระ, เลขจำนวนเต็ม, เลขทศนิยม, ฯลฯ&lt;/p&gt;

&lt;p&gt;การแค่ import sqlalchemy เข้ามาอย่างเดียวไม่ได้ทำให้สามารถเรียกใช้พวก sqlalchemy.orm.sessionmaker() หรือ sqlalchemy.ext.declarative.declarative_base() ซึ่งอยู่ภายในมอดูลย่อยได้ ดังนั้นจึงต้องเขียน from import แยกออกมาอีกที&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;การสร้างคลาสตารางข้อมูล介&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ในส่วนของขั้นตอนการเตรียมตัวดังที่ยกตัวอย่างมาแล้วนั้น ขั้นตอนที่ดูจะซับซ้อนและต้องปรับแต่งอะไรมากที่สุดก็คือการสร้างคลาสของตารางข้อมูล&lt;/p&gt;

&lt;p&gt;เวลาสร้างคลาสนี้ขึ้นจะสร้างโดยรับทอดจากคลาส Base ซึ่งสร้างขึ้นมาจาก sqlalchemy.ext.declarative.declarative_base() อีกที&lt;/p&gt;

&lt;p&gt;ตัวอย่าง สร้างตารางข้อมูลผู้กล้าซึ่งมี ๓ สดมภ์คือ chue (ชื่อ), lv, hp&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlalchemy
from sqlalchemy.ext.declarative import declarative_base

Basemodel = declarative_base()

class Phukla(Basemodel):
    __tablename__ = &#39;phukla&#39;
    chue = sqlalchemy.Column(sqlalchemy.String(32),primary_key=True)
    lv = sqlalchemy.Column(sqlalchemy.Integer)
    hp = sqlalchemy.Column(sqlalchemy.Float)
    
    def __repr__(self):
        return f&#39;{self.chue} lv: {self.lv} hp: {self.hp}&#39;

engine = sqlalchemy.create_engine(&#39;sqlite:///pukla.db&#39;)
Basemodel.metadata.create_all(engine)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;sqlalchemy.Column() คือคลาสที่ใช้สร้างออบเจ็กต์สดมภ์ (column) ของตารางข้อมูล ต้องการให้ตารางมีข้อมูลอะไรบ้างก็ใส่ไปตามนั้น โดยในวงเล็บจะเป็นตัวกำหนดคุณสมบัติของสดมภ์นั้น ที่สำคัญที่สุดก็คือชนิดของข้อมูล ก็ให้ใส่โดยใช้ตัวคลาสที่เตรียมไว้ในตัวมอดูล sqlalchemy ได้แก่ String (สายอักขระ), Integer (เลขจำนวนเต็ม), Float (เลขทศนิยม), ฯลฯ&lt;/p&gt;

&lt;p&gt;สำหรับสายอักขระ หากต้องการจำกัดจำนวนตัวอักษรก็ใส่วงเล็บต่อ เช่น sqlalchemy.String(20) แบบนี้ แต่จะไม่ใส่ก็ได้&lt;/p&gt;

&lt;p&gt;นอกจากนี้หากต้องการให้สดมภ์ไหนเป็นไพรมารีคีย์ (สดมภ์ที่สำคัญที่สุดในตาราง และจะให้มีค่าซ้ำกันไม่ได้) ก็ใส่ primary_key=True ลงไป&lt;/p&gt;

&lt;p&gt;ในการใช้ sqlalchemy จำเป็นต้องกำหนดสดมภ์สักตัวหนึ่งให้เป็นไพรมารีคีย์เสมอ&lt;/p&gt;

&lt;p&gt;ปกติแล้วแค่กำหนดคอลัมน์ลงไปแบบนี้ ตอนที่สั่งสร้างอินสแตนซ์ขึ้นมาก็ใส่ชื่อสดมภ์ต่างๆเหล่านั้นลงไปเป็นคีย์เวิร์ด&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;phukla1 = Phukla(chue=&#39;ได&#39;,lv=99,hp=999)
print(phukla1) # ได้ ได lv: 99 hp: 999
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ตรงส่วน &lt;strong&gt;repr&lt;/strong&gt; นี้ใส่ลงไปเพื่อกำหนดว่าเวลาสั่ง print ขึ้นมาจะให้แสดงค่าเป็นแบบไหน อาจจะไม่ได้จำเป็นต้องใส่ แต่สะดวกเวลาแสดงผล จะได้รู้ว่าข้อมูลตัวนี้เป็นตัวไหน มีค่าอะไรอย่างไร&lt;/p&gt;

&lt;p&gt;หากไม่เขียน &lt;strong&gt;repr&lt;/strong&gt; เมื่อสั่ง print ก็คงจะออกมาในลักษณะแบบนี้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&amp;lt;__main__.Phukla at 0x11b2a5090&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ซึ่งก็ไม่ได้แสดงข้อมูลในนี้ให้เห็นโดยตรง จึงอาจจะไม่สะดวก ดังนั้นตัวอย่างต่อจากนี้ไปก็จะใส่ &lt;strong&gt;repr&lt;/strong&gt; ไปด้วยตลอด&lt;/p&gt;

&lt;p&gt;นอกจากนี้แล้วอาจกำหนดตรงส่วนของ &lt;strong&gt;init&lt;/strong&gt; เพื่อให้ตอนสร้างง่ายขึ้นหน่อย เช่นแค่ใส่เป็นอาร์กิวเมนต์ลงไปตามลำดับ รวมทั้งกำหนดค่าเริ่มต้นให้ได้ด้วย เช่น&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Nangsue(Basemodel):
    __tablename__ = &#39;nangsue&#39;
    chue = sqlalchemy.Column(sqlalchemy.String,primary_key=True)
    chamnuanna = sqlalchemy.Column(sqlalchemy.Integer)
    rakha = sqlalchemy.Column(sqlalchemy.Float)
    
    def __init__(self,chue,chamnuanna=100,rakha=200):
        self.chue = chue
        self.chamnuanna = chamnuanna
        self.rakha = rakha
    
    def __repr__(self):
        return f&#39;หนังสือชื่อ &amp;quot;{self.chue}&amp;quot; มี {self.chamnuanna} หน้า ราคา {self.rakha} บาท&#39;

ns = Nangsue(&#39;สอนแมวเขียนโปรแกรม&#39;,400)
print(ns) # ได้ หนังสือชื่อ &amp;quot;สอนแมวเขียนโปรแกรม&amp;quot; มี 400 หน้า ราคา 200 บาท
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;นอกจากนี้ขั้นตอนสำคัญอีกอย่างก็คือการทำให้ตารางถูกสร้างขึ้นมาจริงๆในฐานข้อมูลด้วย&lt;/p&gt;

&lt;p&gt;การสร้างคลาสขึ้นมานั้นยังไม่ได้ทำให้ตารางถูกสร้างขึ้นมาในฐานข้อมูลจริงๆทันที ก่อนจะใช้งานจริงต้องสั่งสร้างตารางก่อน ซึ่งทำได้โดยสั่ง Base.metadata.create_all()&lt;/p&gt;

&lt;p&gt;Base นี้ก็คือตัวคลาสฐานที่ใช้ตอนรับทอดคลาสตารางข้อมูลนี้มา หากมีข้อมูลที่อยากให้สร้างขึ้นมาพร้อมกันก็ให้รับทอดจาก Base อันนี้เหมือนกัน แล้วเมื่อสั่ง .metadata.create_all() ก็จะสร้างขึ้นมาใหม่ทั้งหมด ถ้าหากยังไม่ได้มีอยู่ก่อน แต่ถ้าอันไหนมีแล้วก็จะไม่เกิดอะไรขึ้น&lt;/p&gt;

&lt;p&gt;ในทางกลับกัน ถ้าหากต้องการลบตารางข้อมูลทั้งหมดในฐานนั้นก็สั่ง Base.metadata.drop_all()&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;การเตรียมไฟล์แบบจำลองและตัวสร้างเซสชัน介&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;นอกจากตัวคลาสแบบจำลองแล้ว อีกสิ่งที่ต้องเตรียมการก็คือเซสชัน (session) ซึ่งสร้างจาก sqlalchemy.orm.sessionmaker&lt;/p&gt;

&lt;p&gt;เซสชันเป็นตัวกลางเชื่อมต่อกับ engine อีกที เวลาสร้าง sessionmaker ให้ใส่ engine ที่จะทำการเชื่อมต่อลงไป&lt;/p&gt;

&lt;p&gt;สิ่งที่ได้จาก sessionmaker คือตัวคลาสที่เอาไว้สร้างเซสชันอีกที ยังไม่ใช่ตัวเซสชัน ต้องเอามาเรียกใช้โดยสั่ง () เพื่อสร้างเซสชันอีกที&lt;/p&gt;

&lt;p&gt;ปกติแล้วส่วนของแบบจำลองและส่วนสร้างเซสชันอาจจะถูกเก็บไว้ในไฟล์หนึ่ง แล้วก็ให้เรียกใช้ไฟล์นั้นขึ้นมาในฐานะมอดูล โดย import เอาตัวคลาสและเซสชันมาใช้&lt;/p&gt;

&lt;p&gt;เพื่อเป็นตัวอย่างสำหรับหัวข้อถัดๆไป ขอสร้างแบบจำลองและเซสชันนี้ขึ้นมาใส่ในไฟล์ชื่อ pkmoses.py&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlalchemy
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base

Basemodel = declarative_base()

class Pokemon(Basemodel):
    __tablename__ = &#39;pokemon&#39;
    lek = sqlalchemy.Column(sqlalchemy.Integer,primary_key=True)
    chue = sqlalchemy.Column(sqlalchemy.String(32))
    nak = sqlalchemy.Column(sqlalchemy.Float)
    sung = sqlalchemy.Column(sqlalchemy.Float)
    
    def __init__(self,lek,chue,nak,sung):
        self.lek = lek
        self.chue = chue
        self.nak = nak
        self.sung = sung
    
    def __repr__(self):
        return f&#39;{self.lek}. {self.chue} หนัก {self.nak} สูง {self.sung*100:.0f} ซม.&#39;

engine = sqlalchemy.create_engine(&#39;sqlite:///pkdata.db&#39;)
Basemodel.metadata.create_all(engine)

Session = sessionmaker(engine)
session = Session()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ข้อมูลในตารางนี้ก็คือข้อมูล pokemon ซึ่งมี ๔ สดมภ์ ได้แก่ lek (เลข), chue (ชื่อ), nak (หนัก), sung (สูง) โดยใช้เลขเป็นไพรมารีคีย์&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;การเพิ่มข้อมูลลงไป介&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;หลังจากขั้นตอนการสร้างตาราง ก็เข้าสู่ขั้นตอนการใช้งาน โดยคำสั่งพื้นฐานที่สุดก็คือการใส่ข้อมูลเข้าไป&lt;/p&gt;

&lt;p&gt;การใส่ข้อมูลอาจมีขั้นตอนดังนี้&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;สร้างออบเจ็กต์ที่เป็นอินสแตนซ์ของคลาสตารางข้อมูลขึ้นมา&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ใส่ข้อมูลลงในฐานข้อมูลจริงๆ โดยใช้ session.add (ถ้ามีตัวเดียว) หรือ session.add_all หรือ session.bulk_save_objects (ถ้ามีหลายตัว)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;session.commit() เพื่อให้ข้อมูลถูกบันทึกไปจริงๆ&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ตัวอย่างการใช้งาน ให้ import ตัวคลาสแบบจำลองและ session จาก pkmoses ที่สร้างขึ้นมาจากไฟล์ที่สร้างจากในหัวข้อที่แล้ว แล้วเพิ่มข้อมูลลงไปตัวหนึ่งด้วย .add()&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pkmoses import session,Pokemon

poke1 = Pokemon(152,&#39;ชิโครีตา&#39;,6.4,0.9)
session.add(poke1)
session.commit()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;หากต้องการเพิ่มทีละหลายตัวอาจใช้ .add_all() หรือ .bulk_save_objects() ก็ได้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;poke2 = Pokemon(155,&#39;ฮิโนอาราชิ&#39;,7.9,0.5)
poke3 = Pokemon(158,&#39;วานิโนโกะ&#39;,9.5,0.6)
session.bulk_save_objects([poke2,poke3])
session.commit()

poke4 = Pokemon(153,&#39;เบย์ลีฟ&#39;,15.8,1.2)
poke5 = Pokemon(154,&#39;เมกาเนียม&#39;,100.5,1.8)
session.add_all([poke4,poke5])
session.commit()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;เพียงแต่ข้อแตกต่างก็คือ .add_all() จะเป็นการสั่งให้วนซ้ำเพิ่มข้อมูลเข้าไปทีละตัวตามลำดับ ส่วน .bulk_save_objects() จะทำไปพร้อมกันและจะรวดเร็วกว่า&lt;/p&gt;

&lt;p&gt;ดังนั้นถ้าต้องการความรวดเร็วใช้ .bulk_save_objects() จะเร็วกว่า เพียงแต่เนื่องจากข้อมูลอาจถูกใส่อย่างไม่เป็นลำดับถูกต้อง ดังนั้นหากให้ความสำคัญกับลำดับของข้อมูลก็อาจใช้ .add_all()&lt;/p&gt;

&lt;p&gt;หลังสั่งเพิ่มข้อมูลทั้งหมดลงไปแล้วต้องสั่ง .commit() หากไม่มีการสั่ง .commit() ไปแม้จะใช้ .add() หรือ .add_all() หรือ .bulk_save_objects() ลงไปแล้วก็จะไม่มีการบันทึกลงไปจริงๆ&lt;/p&gt;

&lt;p&gt;อย่างไรก็ตาม หากต้องการให้มีการบันทึกไปเลยโดยอัตโนมัติทุกครั้งไม่ต้องมาสั่ง .commit() ก็ทำได้โดยตอนที่สร้างตัวสร้างเซสชันขึ้นให้ใส่เป็น sessionmaker(autocommit=True) ไป ก็เป็นวิธีหนึ่งที่ทำได้&lt;/p&gt;

&lt;p&gt;หากเพิ่มข้อมูลไปแล้วแต่ยังไม่ได้ .commit() แล้วต้องการยกเลิกความเปลี่ยนแปลงนั้นก็สามารถทำได้โดยใช้ .rollback()&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;การอ่านข้อมูลในตาราง (query)介&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;การอ่านข้อมูลที่อยู่ในตารางทำได้โดยใช้เมธอด .query() โดยใส่คลาสของตารางนั้นลงไป&lt;/p&gt;

&lt;p&gt;ข้อมูลที่อ่านขึ้นมาสามารถนำมาใช้วนด้วย for เพื่อเอาค่าทีละตัวก็ได้&lt;/p&gt;

&lt;p&gt;ตัวอย่างการอ่านข้อมูล&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for pk in session.query(Pokemon):
    print(pk)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ได้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;152. ชิโครีตา หนัก 6.4 สูง 90 ซม.
153. เบย์ลีฟ หนัก 15.8 สูง 120 ซม.
154. เมกาเนียม หนัก 100.5 สูง 180 ซม.
155. ฮิโนอาราชิ หนัก 7.9 สูง 50 ซม.
158. วานิโนโกะ หนัก 9.5 สูง 60 ซม.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;กรณีที่ต้องการเอาข้อมูลแค่เฉพาะบางสดมภ์ให้ให้ใส่ตัวแอตทริบิวต์ที่เป็นชื่อตัวคอลัมน์ลงไปทีละตัวตามที่ต้องการ&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for pk in session.query(Pokemon.lek,Pokemon.chue):
    print(pk)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ได้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;(152, &#39;ชิโครีตา&#39;)
(153, &#39;เบย์ลีฟ&#39;)
(154, &#39;เมกาเนียม&#39;)
(155, &#39;ฮิโนอาราชิ&#39;)
(158, &#39;วานิโนโกะ&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;การอ่านข้อมูลทั้งหมดใส่ลิสต์ (all)介&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;วิธีการอ่านข้อมูลจากในตารางนอกจากจะใช้วนใน for แล้วก็ยังอาจจะใช้ .all() เพื่อดึงข้อมูลมาทั้งหมดทีเดียวเป็นลิสต์ก็ได้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(session.query(Pokemon).all())
print(session.query(Pokemon.lek,Pokemon.chue).all())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ได้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;[152. ชิโครีตา หนัก 6.4 สูง 90 ซม., 153. เบย์ลีฟ หนัก 15.8 สูง 120 ซม., 154. เมกาเนียม หนัก 100.5 สูง 180 ซม., 155. ฮิโนอาราชิ หนัก 7.9 สูง 50 ซม., 158. วานิโนโกะ หนัก 9.5 สูง 60 ซม.]
[(152, &#39;ชิโครีตา&#39;), (153, &#39;เบย์ลีฟ&#39;), (154, &#39;เมกาเนียม&#39;), (155, &#39;ฮิโนอาราชิ&#39;), (158, &#39;วานิโนโกะ&#39;)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;การกำหนดวิธีการเรียงลำดับข้อมูล (order_by)介&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;สามารถกำหนดลำดับการเรียงข้อมูลที่ออกมาได้โดยใส่ .order_by() โดยระบุสดมภ์ที่ต้องการใช้เรียงลงไป เช่น&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(session.query(Pokemon).order_by(Pokemon.sung).all())
print(session.query(Pokemon).order_by(Pokemon.nak).all())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ได้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;[155. ฮิโนอาราชิ หนัก 7.9 สูง 50 ซม., 158. วานิโนโกะ หนัก 9.5 สูง 60 ซม., 152. ชิโครีตา หนัก 6.4 สูง 90 ซม., 153. เบย์ลีฟ หนัก 15.8 สูง 120 ซม., 154. เมกาเนียม หนัก 100.5 สูง 180 ซม.]
[152. ชิโครีตา หนัก 6.4 สูง 90 ซม., 155. ฮิโนอาราชิ หนัก 7.9 สูง 50 ซม., 158. วานิโนโกะ หนัก 9.5 สูง 60 ซม., 153. เบย์ลีฟ หนัก 15.8 สูง 120 ซม., 154. เมกาเนียม หนัก 100.5 สูง 180 ซม.]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;หากต้องการเรียงกลับด้านให้ใส่ .desc() เช่น&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(session.query(Pokemon).order_by(Pokemon.lek.desc()).all())
print(session.query(Pokemon).order_by(Pokemon.sung.desc()).all())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ได้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;[158. วานิโนโกะ หนัก 9.5 สูง 60 ซม., 155. ฮิโนอาราชิ หนัก 7.9 สูง 50 ซม., 154. เมกาเนียม หนัก 100.5 สูง 180 ซม., 153. เบย์ลีฟ หนัก 15.8 สูง 120 ซม., 152. ชิโครีตา หนัก 6.4 สูง 90 ซม.]
[154. เมกาเนียม หนัก 100.5 สูง 180 ซม., 153. เบย์ลีฟ หนัก 15.8 สูง 120 ซม., 152. ชิโครีตา หนัก 6.4 สูง 90 ซม., 158. วานิโนโกะ หนัก 9.5 สูง 60 ซม., 155. ฮิโนอาราชิ หนัก 7.9 สูง 50 ซม.]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;การเอาข้อมูลเฉพาะตัวแรกตัวเดียว (first)介&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;หากต้องการข้อมูลเฉพาะแค่ตัวแรกให้ใช้ .first() เช่น&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(session.query(Pokemon).first())
# ได้ 152. ชิโครีตา หนัก 6.4 สูง 90 ซม.
print(session.query(Pokemon).order_by(Pokemon.sung).first())
# ได้ 155. ฮิโนอาราชิ หนัก 7.9 สูง 50 ซม.
print(session.query(Pokemon).order_by(Pokemon.nak.desc()).first())
# ได้ 154. เมกาเนียม หนัก 100.5 สูง 180 ซม.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;การจำกัดเอาข้อมูลเฉพาะบางส่วน (limit และ offset)介&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ถ้าต้องการจำกัดจำนวนที่จะเอาให้ใช้ .limit() และกำหนดลำดับเริ่มต้นโดยใช้ .offset() เช่น&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(session.query(Pokemon).limit(3).all())
# ได้ [152. ชิโครีตา หนัก 6.4 สูง 90 ซม., 153. เบย์ลีฟ หนัก 15.8 สูง 120 ซม., 154. เมกาเนียม หนัก 100.5 สูง 180 ซม.]
print(session.query(Pokemon.lek).limit(4).all())
# ได้ [(152,), (153,), (154,), (155,)]
print(session.query(Pokemon).offset(2).all())
# ได้ [154. เมกาเนียม หนัก 100.5 สูง 180 ซม., 155. ฮิโนอาราชิ หนัก 7.9 สูง 50 ซม., 158. วานิโนโกะ หนัก 9.5 สูง 60 ซม.]
print(session.query(Pokemon).offset(1).limit(2).all())
# ได้ [153. เบย์ลีฟ หนัก 15.8 สูง 120 ซม., 154. เมกาเนียม หนัก 100.5 สูง 180 ซม.]
print(session.query(Pokemon).order_by(Pokemon.sung).limit(2).all())
# ได้ [155. ฮิโนอาราชิ หนัก 7.9 สูง 50 ซม., 158. วานิโนโกะ หนัก 9.5 สูง 60 ซม.]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ถ้าใช้ order_by เพื่อกำหนดรูปแบบการเรียงไปด้วยให้ใส่ order_by ก่อนค่อยตามด้วย offset และ limit&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;การกำหนดเงื่อนไขข้อมูลที่จะอ่าน (filter)介&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;สามารถกำหนดเงื่อนไขว่าจะเอาข้อมูลแค่บางส่วนที่ต้องการออกมาได้โดยใช้ .filter() เช่น&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(session.query(Pokemon).filter(Pokemon.nak&amp;lt;10).all())
# ได้ [152. ชิโครีตา หนัก 6.4 สูง 90 ซม., 155. ฮิโนอาราชิ หนัก 7.9 สูง 50 ซม., 158. วานิโนโกะ หนัก 9.5 สูง 60 ซม.]
print(session.query(Pokemon.chue).filter(Pokemon.chue!=&#39;เบย์ลีฟ&#39;).all())
# ได้ [(&#39;ชิโครีตา&#39;,), (&#39;เมกาเนียม&#39;,), (&#39;ฮิโนอาราชิ&#39;,), (&#39;วานิโนโกะ&#39;,)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;สามารถใส่มากกว่าเงื่อนไขพร้อมกันได้ โดยจะมีความหมายเป็น &amp;laquo;และ&amp;raquo; คือต้องเข้าทุกเงื่อนไข&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(session.query(Pokemon).filter(Pokemon.nak&amp;gt;8,Pokemon.nak&amp;lt;20).all())
# ได้ [153. เบย์ลีฟ หนัก 15.8 สูง 120 ซม., 158. วานิโนโกะ หนัก 9.5 สูง 60 ซม.]
print(session.query(Pokemon.chue).filter(Pokemon.chue!=&#39;ชิโครีตา&#39;,Pokemon.chue!=&#39;เบย์ลีฟ&#39;).all())
# [(&#39;เมกาเนียม&#39;,), (&#39;ฮิโนอาราชิ&#39;,), (&#39;วานิโนโกะ&#39;,)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;นอกจากนี้ในการรวมหรือจัดการเงื่อนไขอาจใช้ and&lt;em&gt;, or&lt;/em&gt;, not_ เพื่อแทน &amp;laquo;และ&amp;raquo;, &amp;laquo;หรือ&amp;raquo;, &amp;laquo;ไม่&amp;raquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(session.query(Pokemon).filter(sqlalchemy.or_(Pokemon.chue==&amp;quot;เบย์ลีฟ&amp;quot;,Pokemon.chue==&amp;quot;เมกาเนียม&amp;quot;)).all())
# ได้ [153. เบย์ลีฟ หนัก 15.8 สูง 120 ซม., 154. เมกาเนียม หนัก 100.5 สูง 180 ซม.]
print(session.query(Pokemon.chue).filter(sqlalchemy.not_(Pokemon.chue==&amp;quot;ชิโครีตา&amp;quot;)).all())
# ได้ [(&#39;เบย์ลีฟ&#39;,), (&#39;เมกาเนียม&#39;,), (&#39;ฮิโนอาราชิ&#39;,), (&#39;วานิโนโกะ&#39;,)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;อนึ่ง สาเหตุที่ชื่อ and&lt;em&gt;, or&lt;/em&gt;, not_ มี _ ต่อท้ายเพราะคำว่า and, or, not เป็นคำต้องห้ามในไพธอน ใช้เป็นชื่อตัวแปรไม่ได้เลยต้องเติม _&lt;/p&gt;

&lt;p&gt;นอกจากนี้เงื่อนไขที่เป็นตัวเลขอาจใช้ .between() เพื่อคัดเอาค่าที่อยู่ในช่วงได้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(session.query(Pokemon).filter(Pokemon.nak.between(9,25)).all())
# ได้ [153. เบย์ลีฟ หนัก 15.8 สูง 120 ซม., 158. วานิโนโกะ หนัก 9.5 สูง 60 ซม.]
print(session.query(Pokemon).filter(Pokemon.lek.between(153,155)).all())
# ได้ [153. เบย์ลีฟ หนัก 15.8 สูง 120 ซม., 154. เมกาเนียม หนัก 100.5 สูง 180 ซม., 155. ฮิโนอาราชิ หนัก 7.9 สูง 50 ซม.]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ถ้าค่าเป็นสายอักขระอาจใช้ .contains() เพื่อคัดเอาที่มีคำที่ต้องการอยู่&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(session.query(Pokemon.chue).filter(Pokemon.chue.contains(&#39;โน&#39;)).all())
# ได้ [(&#39;ฮิโนอาราชิ&#39;,), (&#39;วานิโนโกะ&#39;,)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;การแก้ข้อมูล (update)介&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;การแก้ไขข้อมูลอาจทำโดยใช้ .query อ่านข้อมูลเข้ามา() แล้วเอามาแก้ แล้วก็ทำการ .commit() ข้อมูลในฐานข้อมูลก็จะถูกแก้ไปด้วยตามนั้น&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pk1 = session.query(Pokemon).filter(Pokemon.chue==&#39;ฮิโนอาราชิ&#39;).first()
pk1.lek = 156
pk1.chue = &#39;แม็กมาราชิ&#39;
pk1.nak = 0.9
pk1.sung = 19
session.commit()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;นอกจากนี้ก็อาจใช้เมธอด .update() ที่ตัวข้อมูลที่ใช้ .filter() คัดมา เพื่อสั่งแก้ข้อมูลโดยตรง เช่น&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;kha = {&#39;lek&#39;:159,&#39;chue&#39;:&#39;อาลิเกตซ์&#39;,&#39;nak&#39;:1.1,&#39;sung&#39;:25}
session.query(Pokemon).filter(Pokemon.chue==&#39;วานิโนโกะ&#39;).update(kha)
session.commit()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;การลบข้อมูลออก (delete)介&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;การลบข้อมูลออกอาจทำโดยใช้ .query() ดึงข้อมูลที่ต้องการลบออกมา แล้วใช้เมธอด .delete() จากตัวเซสชัน แล้ว .commit()&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pk2 = session.query(Pokemon).filter(Pokemon.chue==&#39;เมกาเนียม&#39;).first()
session.delete(pk2)
session.commit()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;นอกจากนี้อาจจะเรียกเมธอด .delete() จากตัว query โดยตรงเลยก็ได้ เช่น&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;session.query(Pokemon).filter(Pokemon.chue==&#39;ชิโครีตา&#39;).delete()
session.commit()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;การย้อนคืนสิ่งที่ทำกลับไป (rollback)介&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;หากเพิ่มหรือแก้ไขหรือลบข้อมูลไปแล้วยังไม่ได้สั่ง .commit() ที่ตัวเซสชันอาจสามารถย้อนคืนกลับได้โดยใช้ .rollback()น&lt;/p&gt;

&lt;p&gt;ตัวอย่างการใช้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(session.query(Pokemon).all())
# ได้ [153. เบย์ลีฟ หนัก 15.8 สูง 120 ซม., 156. แม็กมาราชิ หนัก 0.9 สูง 1900 ซม., 159. อาลิเกตซ์ หนัก 1.1 สูง 2500 ซม.]

kha = {&#39;lek&#39;:157,&#39;chue&#39;:&#39;บักฟูน&#39;,&#39;nak&#39;:1.7,&#39;sung&#39;:79.5}
session.query(Pokemon).filter(Pokemon.chue==&#39;แม็กมาราชิ&#39;).update(kha)
session.query(Pokemon).filter(Pokemon.chue==&#39;เบย์ลีฟ&#39;).delete()

print(session.query(Pokemon).all())
# ได้ [157. บักฟูน หนัก 1.7 สูง 7950 ซม., 159. อาลิเกตซ์ หนัก 1.1 สูง 2500 ซม.]

session.rollback()
print(session.query(Pokemon).all())
# ได้ [153. เบย์ลีฟ หนัก 15.8 สูง 120 ซม., 156. แม็กมาราชิ หนัก 0.9 สูง 1900 ซม., 159. อาลิเกตซ์ หนัก 1.1 สูง 2500 ซม.]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;อาจนำมาใช้เพื่อรับมือในกรณีที่เกิดข้อผิดพลาด เช่น&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;try:
    oda = Pokemon(160,&#39;ออร์ไดล์&#39;,&#39;ไม่ทราบ&#39;,2.3)
    session.add(oda)
    session.commit()
except sqlalchemy.exc.SQLAlchemyError as e:
    session.rollback()
    print(&#39;เกิดข้อผิดพลาด\n&#39;,e)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ได้&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;เกิดข้อผิดพลาด
 (builtins.ValueError) could not convert string to float: &#39;ไม่ทราบ&#39;
[SQL: INSERT INTO pokemon (lek, chue, nak, sung) VALUES (?, ?, ?, ?)]
[parameters: [{&#39;sung&#39;: 2.3, &#39;lek&#39;: 160, &#39;chue&#39;: &#39;ออร์ไดล์&#39;, &#39;nak&#39;: &#39;ไม่ทราบ&#39;}]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;sqlalchemy.exc.SQLAlchemyError คือคลาสของความผิดพลาดที่จะเกิดขึ้นเมื่อมีปัญหาในการติดต่อกับฐานข้อมูล SQL จะมีการอธิบายรายละเอียดว่าโค้ด SQL ที่ส่งไปจริงๆเป็นอย่างไร และผิดพลาดที่ตรงไหน&lt;/p&gt;

&lt;p&gt;อย่างตัวอย่างนี้ไปใส่ nak ว่า &amp;lsquo;ไม่ทราบ&amp;rsquo; ทั้งที่จริงๆควรจะเป็นตัวเลข ก็เลยเกิดข้อผิดพลาดขึ้น&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;การป้อนคำสั่ง SQL ใส่โดยตรง (execute)介&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;นอกจากจะใช้เมธอดต่างๆที่ sqlalchemy เตรียมไว้ให้แล้ว หากต้องการพิมพ์โค้ด SQL เพื่อป้อนคำสั่งสั่งฐานข้อมูลโดยตรงก็สามารถทำผ่าน sqlalchemy ได้เช่นกัน โดยใช้เมธอด .execute() ซึ่งอาจเรียกจากตัว engine หรือตัว session ก็ได้&lt;/p&gt;

&lt;p&gt;ไม่ว่าขั้นตอนไหนก็สามารถใช้ .execute() ทำแทนได้ เช่น&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlalchemy
from sqlalchemy.orm import sessionmaker
engine = sqlalchemy.create_engine(&#39;sqlite:///pikadata.db&#39;)
engine.execute(&#39;create table pokemon (lek integer,chue text,nak real,sung real)&#39;)
engine.execute(&#39;insert into pokemon (lek,chue,nak,sung) values (25,&amp;quot;พิคาชู&amp;quot;,6,0.4)&#39;)
print(engine.execute(&#39;select * from pokemon&#39;).fetchall())
# ได้ [(25, &#39;พิคาชู&#39;, 6.0, 0.4)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;เมื่อใช้ execute กับ select ก็จะเอาผลที่ได้มาใช้ .fetchall() หรือวนด้วย for เพื่อเอาข้อมูลได้ เหมือนกับที่ใช้ sqlite3 โดยตรง&lt;/p&gt;

&lt;p&gt;เพียงแต่หากจะใช้ .execute() สั่งไปทั้งหมดแบบนี้ก็ไม่ต่างจากใช้ sqlite3 โดยตรง อาจไม่มีความหมายที่จะใช้ sqlalchemy นัก&lt;/p&gt;

&lt;p&gt;.execute() อาจจะใช้แค่บางส่วน แค่ในกรณีที่ต้องการสั่งคำสั่งที่ไม่สะดวกจะทำผ่านเมธอดต่างๆของ sqlalchemy เอง ซึ่งอาจมีความจำเป็นบ้างเพราะโค้ดจับคู่เชื่อมต่อก็ไม่ได้ทำทุกอย่างไว้สมบูรณ์แบบทั้งหมด&lt;/p&gt;

&lt;p&gt;หลักการใช้ยังมีรายละเอียดอีกมากมาย นี่เป็นเพียงแค่เบื้องต้นส่วนหนึ่งเท่านั้น อาจอ่านเพิ่มเติมได้ใน&lt;a href=&#34;https://www.sqlalchemy.org/&#34; target=&#34;_blank&#34;&gt;เว็บหลักของ sqlalchemy&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Reference : &lt;a href=&#34;https://phyblas.hinaboshi.com/20200529&#34; target=&#34;_blank&#34;&gt;https://phyblas.hinaboshi.com/20200529&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Python Cheatsheet.</title>
      <link>https://dragon-library.github.io/coding/tutorials/post/python/tutorials/cheatsheet/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/coding/tutorials/post/python/tutorials/cheatsheet/</guid>
      <description>

&lt;p&gt;Basic cheatsheet for Python mostly based on the book written by Al Sweigart, &lt;a href=&#34;https://automatetheboringstuff.com/&#34; target=&#34;_blank&#34;&gt;Automate the Boring Stuff with Python&lt;/a&gt; under the &lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/3.0/&#34; target=&#34;_blank&#34;&gt;Creative Commons license&lt;/a&gt; and many other sources.&lt;/p&gt;

&lt;h2 id=&#34;contribute&#34;&gt;Contribute&lt;/h2&gt;

&lt;p&gt;All contributions are welcome:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Read the issues, Fork the project and do a Pull Request.&lt;/li&gt;
&lt;li&gt;Request a new topic creating a &lt;code&gt;New issue&lt;/code&gt; with the  &lt;code&gt;enhancement&lt;/code&gt; tag.&lt;/li&gt;
&lt;li&gt;Find any kind of errors in the cheat sheet and create a &lt;code&gt;New issue&lt;/code&gt; with the details or fork the project and do a Pull Request.&lt;/li&gt;
&lt;li&gt;Suggest a better or more pythonic way for existing examples.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;read-it&#34;&gt;Read It&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.pythoncheatsheet.org&#34; target=&#34;_blank&#34;&gt;Website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/wilfredinni/python-cheatsheet&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/wilfredinni/Python-cheatsheet/raw/master/python_cheat_sheet.pdf&#34; target=&#34;_blank&#34;&gt;PDF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mybinder.org/v2/gh/wilfredinni/python-cheatsheet/master?filepath=jupyter_notebooks&#34; target=&#34;_blank&#34;&gt;Jupyter Notebook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;python-cheatsheet&#34;&gt;Python Cheatsheet&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#the-zen-of-python&#34;&gt;The Zen of Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#python-basics&#34;&gt;Python Basics&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#math-operators&#34;&gt;Math Operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#data-types&#34;&gt;Data Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#string-concatenation-and-replication&#34;&gt;String Concatenation and Replication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#variables&#34;&gt;Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#comments&#34;&gt;Comments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-print-function&#34;&gt;The print() Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-input-function&#34;&gt;The input() Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-len-function&#34;&gt;The len() Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-str-int-and-float-functions&#34;&gt;The str(), int(), and float() Functions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#flow-control&#34;&gt;Flow Control&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#comparison-operators&#34;&gt;Comparison Operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#boolean-evaluation&#34;&gt;Boolean evaluation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#boolean-operators&#34;&gt;Boolean Operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mixing-boolean-and-comparison-operators&#34;&gt;Mixing Boolean and Comparison Operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#if-statements&#34;&gt;if Statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#else-statements&#34;&gt;else Statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#elif-statements&#34;&gt;elif Statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#while-loop-statements&#34;&gt;while Loop Statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#break-statements&#34;&gt;break Statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#continue-statements&#34;&gt;continue Statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#for-loops-and-the-range-function&#34;&gt;for Loops and the range() Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#for-else-statement&#34;&gt;For else statement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#importing-modules&#34;&gt;Importing Modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ending-a-program-early-with-sysexit&#34;&gt;Ending a Program Early with sys.exit()&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#functions&#34;&gt;Functions&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#return-values-and-return-statements&#34;&gt;Return Values and return Statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-none-value&#34;&gt;The None Value&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#keyword-arguments-and-print&#34;&gt;Keyword Arguments and print()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#local-and-global-scope&#34;&gt;Local and Global Scope&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-global-statement&#34;&gt;The global Statement&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#exception-handling&#34;&gt;Exception Handling&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#basic-exception-handling&#34;&gt;Basic exception handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#final-code-in-exception-handling&#34;&gt;Final code in exception handling&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lists&#34;&gt;Lists&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#getting-individual-values-in-a-list-with-indexes&#34;&gt;Getting Individual Values in a List with Indexes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#negative-indexes&#34;&gt;Negative Indexes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#getting-sublists-with-slices&#34;&gt;Getting Sublists with Slices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#getting-a-list%E2%80%99s-length-with-len&#34;&gt;Getting a List’s Length with len()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#changing-values-in-a-list-with-indexes&#34;&gt;Changing Values in a List with Indexes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#list-concatenation-and-list-replication&#34;&gt;List Concatenation and List Replication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#removing-values-from-lists-with-del-statements&#34;&gt;Removing Values from Lists with del Statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#using-for-loops-with-lists&#34;&gt;Using for Loops with Lists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#looping-through-multiple-lists-with-zip&#34;&gt;Looping Through Multiple Lists with zip()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-in-and-not-in-operators&#34;&gt;The in and not in Operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-multiple-assignment-trick&#34;&gt;The Multiple Assignment Trick&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#augmented-assignment-operators&#34;&gt;Augmented Assignment Operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#finding-a-value-in-a-list-with-the-index-method&#34;&gt;Finding a Value in a List with the index() Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#adding-values-to-lists-with-the-append-and-insert-methods&#34;&gt;Adding Values to Lists with the append() and insert() Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#removing-values-from-lists-with-remove&#34;&gt;Removing Values from Lists with remove()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sorting-the-values-in-a-list-with-the-sort-method&#34;&gt;Sorting the Values in a List with the sort() Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tuple-data-type&#34;&gt;Tuple Data Type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#converting-types-with-the-list-and-tuple-functions&#34;&gt;Converting Types with the list() and tuple() Functions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dictionaries-and-structuring-data&#34;&gt;Dictionaries and Structuring Data&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#the-keys-values-and-items-methods&#34;&gt;The keys(), values(), and items() Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#checking-whether-a-key-or-value-exists-in-a-dictionary&#34;&gt;Checking Whether a Key or Value Exists in a Dictionary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-get-method&#34;&gt;The get() Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-setdefault-method&#34;&gt;The setdefault() Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pretty-printing&#34;&gt;Pretty Printing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#merge-two-dictionaries&#34;&gt;Merge two dictionaries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sets&#34;&gt;sets&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#initializing-a-set&#34;&gt;Initializing a set&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sets-unordered-collections-of-unique-elements&#34;&gt;sets: unordered collections of unique elements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#set-add-and-update&#34;&gt;set add() and update()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#set-remove-and-discard&#34;&gt;set remove() and discard()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#set-union&#34;&gt;set union()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#set-intersection&#34;&gt;set intersection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#set-difference&#34;&gt;set difference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#set-symetricdifference&#34;&gt;set symetric_difference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#itertools-module&#34;&gt;itertools Module&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#accumulate&#34;&gt;accumulate()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#combinations&#34;&gt;combinations()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#combinationswithreplacement&#34;&gt;combinations_with_replacement()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#count&#34;&gt;count()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cycle&#34;&gt;cycle()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#chain&#34;&gt;chain()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#compress&#34;&gt;compress()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dropwhile&#34;&gt;dropwhile()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#filterfalse&#34;&gt;filterfalse()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#groupby&#34;&gt;groupby()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#islice&#34;&gt;islice()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#permutations&#34;&gt;permutations()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#product&#34;&gt;product()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#repeat&#34;&gt;repeat()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#starmap&#34;&gt;starmap()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#takewhile&#34;&gt;takewhile()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tee&#34;&gt;tee()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ziplongest&#34;&gt;zip_longest()&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#comprehensions&#34;&gt;Comprehensions&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#list-comprehension&#34;&gt;List comprehension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#set-comprehension&#34;&gt;Set comprehension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dict-comprehension&#34;&gt;Dict comprehension&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#manipulating-strings&#34;&gt;Manipulating Strings&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#escape-characters&#34;&gt;Escape Characters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#raw-strings&#34;&gt;Raw Strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#multiline-strings-with-triple-quotes&#34;&gt;Multiline Strings with Triple Quotes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#indexing-and-slicing-strings&#34;&gt;Indexing and Slicing Strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-in-and-not-in-operators-with-strings&#34;&gt;The in and not in Operators with Strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-in-and-not-in-operators-with-list&#34;&gt;The in and not in Operators with list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-upper-lower-isupper-and-islower-string-methods&#34;&gt;The upper(), lower(), isupper(), and islower() String Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-isx-string-methods&#34;&gt;The isX String Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-startswith-and-endswith-string-methods&#34;&gt;The startswith() and endswith() String Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-join-and-split-string-methods&#34;&gt;The join() and split() String Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#justifying-text-with-rjust-ljust-and-center&#34;&gt;Justifying Text with rjust(), ljust(), and center()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#removing-whitespace-with-strip-rstrip-and-lstrip&#34;&gt;Removing Whitespace with strip(), rstrip(), and lstrip()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#copying-and-pasting-strings-with-the-pyperclip-module-need-pip-install&#34;&gt;Copying and Pasting Strings with the pyperclip Module (need pip install)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#string-formatting&#34;&gt;String Formatting&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#operator&#34;&gt;% operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#string-formatting-strformat&#34;&gt;String Formatting (str.format)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lazy-string-formatting&#34;&gt;Lazy string formatting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#formatted-string-literals-or-f-strings-python-36&#34;&gt;Formatted String Literals or f-strings (Python 3.6+)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#template-strings&#34;&gt;Template Strings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#regular-expressions&#34;&gt;Regular Expressions&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#matching-regex-objects&#34;&gt;Matching Regex Objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#grouping-with-parentheses&#34;&gt;Grouping with Parentheses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#matching-multiple-groups-with-the-pipe&#34;&gt;Matching Multiple Groups with the Pipe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#optional-matching-with-the-question-mark&#34;&gt;Optional Matching with the Question Mark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#matching-zero-or-more-with-the-star&#34;&gt;Matching Zero or More with the Star&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#matching-one-or-more-with-the-plus&#34;&gt;Matching One or More with the Plus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#matching-specific-repetitions-with-curly-brackets&#34;&gt;Matching Specific Repetitions with Curly Brackets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#greedy-and-nongreedy-matching&#34;&gt;Greedy and Nongreedy Matching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-findall-method&#34;&gt;The findall() Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#making-your-own-character-classes&#34;&gt;Making Your Own Character Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-caret-and-dollar-sign-characters&#34;&gt;The Caret and Dollar Sign Characters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-wildcard-character&#34;&gt;The Wildcard Character&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#matching-everything-with-dot-star&#34;&gt;Matching Everything with Dot-Star&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#matching-newlines-with-the-dot-character&#34;&gt;Matching Newlines with the Dot Character&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#review-of-regex-symbols&#34;&gt;Review of Regex Symbols&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#case-insensitive-matching&#34;&gt;Case-Insensitive Matching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#substituting-strings-with-the-sub-method&#34;&gt;Substituting Strings with the sub() Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#managing-complex-regexes&#34;&gt;Managing Complex Regexes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#handling-file-and-directory-paths&#34;&gt;Handling File and Directory Paths&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#backslash-on-windows-and-forward-slash-on-os-x-and-linux&#34;&gt;Backslash on Windows and Forward Slash on OS X and Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-current-working-directory&#34;&gt;The Current Working Directory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#creating-new-folders&#34;&gt;Creating New Folders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#absolute-vs-relative-paths&#34;&gt;Absolute vs. Relative Paths&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#handling-absolute-and-relative-paths&#34;&gt;Handling Absolute and Relative Paths&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#checking-path-validity&#34;&gt;Checking Path Validity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#finding-file-sizes-and-folder-contents&#34;&gt;Finding File Sizes and Folder Contents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#copying-files-and-folders&#34;&gt;Copying Files and Folders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#moving-and-renaming-files-and-folders&#34;&gt;Moving and Renaming Files and Folders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#permanently-deleting-files-and-folders&#34;&gt;Permanently Deleting Files and Folders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#safe-deletes-with-the-send2trash-module&#34;&gt;Safe Deletes with the send2trash Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#walking-a-directory-tree&#34;&gt;Walking a Directory Tree&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#reading-and-writing-files&#34;&gt;Reading and Writing Files&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#the-file-readingwriting-process&#34;&gt;The File Reading/Writing Process&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#opening-and-reading-files-with-the-open-function&#34;&gt;Opening and reading files with the open() function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#writing-to-files&#34;&gt;Writing to Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#saving-variables-with-the-shelve-module&#34;&gt;Saving Variables with the shelve Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#saving-variables-with-the-pprintpformat-function&#34;&gt;Saving Variables with the pprint.pformat() Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#reading-zip-files&#34;&gt;Reading ZIP Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#extracting-from-zip-files&#34;&gt;Extracting from ZIP Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#creating-and-adding-to-zip-files&#34;&gt;Creating and Adding to ZIP Files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#json-yaml-and-configuration-files&#34;&gt;JSON, YAML and configuration files&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#json&#34;&gt;JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#yaml&#34;&gt;YAML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#anyconfig&#34;&gt;Anyconfig&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#debugging&#34;&gt;Debugging&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#raising-exceptions&#34;&gt;Raising Exceptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#getting-the-traceback-as-a-string&#34;&gt;Getting the Traceback as a String&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#assertions&#34;&gt;Assertions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#logging&#34;&gt;Logging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#logging-levels&#34;&gt;Logging Levels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#disabling-logging&#34;&gt;Disabling Logging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#logging-to-a-file&#34;&gt;Logging to a File&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lambda-functions&#34;&gt;Lambda Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ternary-conditional-operator&#34;&gt;Ternary Conditional Operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#args-and-kwargs&#34;&gt;args and kwargs&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#things-to-rememberargs&#34;&gt;Things to Remember(args)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#things-to-rememberkwargs&#34;&gt;Things to Remember(kwargs)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#context-manager&#34;&gt;Context Manager&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#with-statement&#34;&gt;with statement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#writing-your-own-contextmanager-using-generator-syntax&#34;&gt;Writing your own contextmanager using generator syntax&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#main-top-level-script-environment&#34;&gt;&lt;code&gt;__main__&lt;/code&gt; Top-level script environment&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#advantages&#34;&gt;Advantages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#setuppy&#34;&gt;setup.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dataclasses&#34;&gt;Dataclasses&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#default-values&#34;&gt;Default values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#type-hints&#34;&gt;Type hints&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#virtual-environment&#34;&gt;Virtual Environment&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#virtualenv&#34;&gt;virtualenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#poetry&#34;&gt;poetry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pipenv&#34;&gt;pipenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#anaconda&#34;&gt;anaconda&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-zen-of-python&#34;&gt;The Zen of Python&lt;/h2&gt;

&lt;p&gt;From the &lt;a href=&#34;https://www.python.org/dev/peps/pep-0020/&#34; target=&#34;_blank&#34;&gt;PEP 20 &amp;ndash; The Zen of Python&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Long time Pythoneer Tim Peters succinctly channels the BDFL&amp;rsquo;s guiding principles for Python&amp;rsquo;s design into 20 aphorisms, only 19 of which have been written down.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import this
The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren&#39;t special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you&#39;re Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it&#39;s a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let&#39;s do more of those!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;python-basics&#34;&gt;Python Basics&lt;/h2&gt;

&lt;h3 id=&#34;math-operators&#34;&gt;Math Operators&lt;/h3&gt;

&lt;p&gt;From &lt;strong&gt;Highest&lt;/strong&gt; to &lt;strong&gt;Lowest&lt;/strong&gt; precedence:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operators&lt;/th&gt;
&lt;th&gt;Operation&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;**&lt;/td&gt;
&lt;td&gt;Exponent&lt;/td&gt;
&lt;td&gt;&lt;code&gt;2 ** 3 = 8&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;%&lt;/td&gt;
&lt;td&gt;Modulus/Remaider&lt;/td&gt;
&lt;td&gt;&lt;code&gt;22 % 8 = 6&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;//&lt;/td&gt;
&lt;td&gt;Integer division&lt;/td&gt;
&lt;td&gt;&lt;code&gt;22 // 8 = 2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;Division&lt;/td&gt;
&lt;td&gt;&lt;code&gt;22 / 8 = 2.75&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;Multiplication&lt;/td&gt;
&lt;td&gt;&lt;code&gt;3 * 3 = 9&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;Subtraction&lt;/td&gt;
&lt;td&gt;&lt;code&gt;5 - 2 = 3&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;Addition&lt;/td&gt;
&lt;td&gt;&lt;code&gt;2 + 2 = 4&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Examples of expressions in the interactive shell:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; 2 + 3 * 6
20
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; (2 + 3) * 6
30
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; 2 ** 8
256
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; 23 // 7
3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; 23 % 7
2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; (5 - 1) * ((7 + 1) / (3 - 1))
16.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;data-types&#34;&gt;Data Types&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Data Type&lt;/th&gt;
&lt;th&gt;Examples&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Integers&lt;/td&gt;
&lt;td&gt;&lt;code&gt;-2, -1, 0, 1, 2, 3, 4, 5&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Floating-point numbers&lt;/td&gt;
&lt;td&gt;&lt;code&gt;-1.25, -1.0, --0.5, 0.0, 0.5, 1.0, 1.25&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Strings&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&#39;a&#39;, &#39;aa&#39;, &#39;aaa&#39;, &#39;Hello!&#39;, &#39;11 cats&#39;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;string-concatenation-and-replication&#34;&gt;String Concatenation and Replication&lt;/h3&gt;

&lt;p&gt;String concatenation:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;Alice&#39; &#39;Bob&#39;
&#39;AliceBob&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: Avoid &lt;code&gt;+&lt;/code&gt; operator for string concatenation. Prefer string formatting.&lt;/p&gt;

&lt;p&gt;String Replication:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;Alice&#39; * 5
&#39;AliceAliceAliceAliceAlice&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;variables&#34;&gt;Variables&lt;/h3&gt;

&lt;p&gt;You can name a variable anything as long as it obeys the following three rules:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It can be only one word.&lt;/li&gt;
&lt;li&gt;It can use only letters, numbers, and the underscore (&lt;code&gt;_&lt;/code&gt;) character.&lt;/li&gt;
&lt;li&gt;It can’t begin with a number.&lt;/li&gt;
&lt;li&gt;Variable name starting with an underscore (&lt;code&gt;_&lt;/code&gt;) are considered as &amp;laquo;unuseful`.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam = &#39;Hello&#39;
&amp;gt;&amp;gt;&amp;gt; spam
&#39;Hello&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; _spam = &#39;Hello&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;_spam&lt;/code&gt; should not be used again in the code.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;comments&#34;&gt;Comments&lt;/h3&gt;

&lt;p&gt;Inline comment:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# This is a comment
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Multiline comment:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;# This is a
# multiline comment
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Code with a comment:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = 1  # initialization
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Please note the two spaces in front of the comment.&lt;/p&gt;

&lt;p&gt;Function docstring:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def foo():
    &amp;quot;&amp;quot;&amp;quot;
    This is a function docstring
    You can also use:
    &#39;&#39;&#39; Function Docstring &#39;&#39;&#39;
    &amp;quot;&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-print-function&#34;&gt;The print() Function&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(&#39;Hello world!&#39;)
Hello world!
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = 1
&amp;gt;&amp;gt;&amp;gt; print(&#39;Hello world!&#39;, a)
Hello world! 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-input-function&#34;&gt;The input() Function&lt;/h3&gt;

&lt;p&gt;Example Code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(&#39;What is your name?&#39;)   # ask for their name
&amp;gt;&amp;gt;&amp;gt; myName = input()
&amp;gt;&amp;gt;&amp;gt; print(&#39;It is good to meet you, {}&#39;.format(myName))
What is your name?
Al
It is good to meet you, Al
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-len-function&#34;&gt;The len() Function&lt;/h3&gt;

&lt;p&gt;Evaluates to the integer value of the number of characters in a string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; len(&#39;hello&#39;)
5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: test of emptiness of strings, lists, dictionary, etc, should &lt;strong&gt;not&lt;/strong&gt; use len, but prefer direct
boolean evaluation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = [1, 2, 3]
&amp;gt;&amp;gt;&amp;gt; if a:
&amp;gt;&amp;gt;&amp;gt;     print(&amp;quot;the list is not empty!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-str-int-and-float-functions&#34;&gt;The str(), int(), and float() Functions&lt;/h3&gt;

&lt;p&gt;Integer to String or Float:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; str(29)
&#39;29&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(&#39;I am {} years old.&#39;.format(str(29)))
I am 29 years old.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; str(-3.14)
&#39;-3.14&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Float to Integer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; int(7.7)
7
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; int(7.7) + 1
8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;flow-control&#34;&gt;Flow Control&lt;/h2&gt;

&lt;h3 id=&#34;comparison-operators&#34;&gt;Comparison Operators&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operator&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;==&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Equal to&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;!=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Not equal to&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Less than&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Greater Than&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Less than or Equal to&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Greater than or Equal to&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;These operators evaluate to True or False depending on the values you give them.&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; 42 == 42
True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; 40 == 42
False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;hello&#39; == &#39;hello&#39;
True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;hello&#39; == &#39;Hello&#39;
False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;dog&#39; != &#39;cat&#39;
True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; 42 == 42.0
True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; 42 == &#39;42&#39;
False
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;boolean-evaluation&#34;&gt;Boolean evaluation&lt;/h3&gt;

&lt;p&gt;Never use &lt;code&gt;==&lt;/code&gt; or &lt;code&gt;!=&lt;/code&gt; operator to evaluate boolean operation. Use the &lt;code&gt;is&lt;/code&gt; or &lt;code&gt;is not&lt;/code&gt; operators,
or use implicit boolean evaluation.&lt;/p&gt;

&lt;p&gt;NO (even if they are valid Python):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; True == True
True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; True != False
True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;YES (even if they are valid Python):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; True is True
True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; True is not False
True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These statements are equivalent:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; if a is True:
&amp;gt;&amp;gt;&amp;gt;    pass
&amp;gt;&amp;gt;&amp;gt; if a is not False:
&amp;gt;&amp;gt;&amp;gt;    pass
&amp;gt;&amp;gt;&amp;gt; if a:
&amp;gt;&amp;gt;&amp;gt;    pass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And these as well:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; if a is False:
&amp;gt;&amp;gt;&amp;gt;    pass
&amp;gt;&amp;gt;&amp;gt; if a is not True:
&amp;gt;&amp;gt;&amp;gt;    pass
&amp;gt;&amp;gt;&amp;gt; if not a:
&amp;gt;&amp;gt;&amp;gt;    pass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;boolean-operators&#34;&gt;Boolean Operators&lt;/h3&gt;

&lt;p&gt;There are three Boolean operators: and, or, and not.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;and&lt;/em&gt; Operator’s &lt;em&gt;Truth&lt;/em&gt; Table:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Expression&lt;/th&gt;
&lt;th&gt;Evaluates to&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;True and True&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;True&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;True and False&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;False and True&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;False and False&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The &lt;em&gt;or&lt;/em&gt; Operator’s &lt;em&gt;Truth&lt;/em&gt; Table:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Expression&lt;/th&gt;
&lt;th&gt;Evaluates to&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;True or True&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;True&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;True or False&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;True&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;False or True&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;True&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;False or False&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The &lt;em&gt;not&lt;/em&gt; Operator’s &lt;em&gt;Truth&lt;/em&gt; Table:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Expression&lt;/th&gt;
&lt;th&gt;Evaluates to&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;not True&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;not False&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;True&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;mixing-boolean-and-comparison-operators&#34;&gt;Mixing Boolean and Comparison Operators&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; (4 &amp;lt; 5) and (5 &amp;lt; 6)
True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; (4 &amp;lt; 5) and (9 &amp;lt; 6)
False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; (1 == 2) or (2 == 2)
True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also use multiple Boolean operators in an expression, along with the comparison operators:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; 2 + 2 == 4 and not 2 + 2 == 5 and 2 * 2 == 2 + 2
True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;if-statements&#34;&gt;if Statements&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if name == &#39;Alice&#39;:
    print(&#39;Hi, Alice.&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;else-statements&#34;&gt;else Statements&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;name = &#39;Bob&#39;
if name == &#39;Alice&#39;:
    print(&#39;Hi, Alice.&#39;)
else:
    print(&#39;Hello, stranger.&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;elif-statements&#34;&gt;elif Statements&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;name = &#39;Bob&#39;
age = 5
if name == &#39;Alice&#39;:
    print(&#39;Hi, Alice.&#39;)
elif age &amp;lt; 12:
    print(&#39;You are not Alice, kiddo.&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;name = &#39;Bob&#39;
age = 30
if name == &#39;Alice&#39;:
    print(&#39;Hi, Alice.&#39;)
elif age &amp;lt; 12:
    print(&#39;You are not Alice, kiddo.&#39;)
else:
    print(&#39;You are neither Alice nor a little kid.&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;while-loop-statements&#34;&gt;while Loop Statements&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;spam = 0
while spam &amp;lt; 5:
    print(&#39;Hello, world.&#39;)
    spam = spam + 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;break-statements&#34;&gt;break Statements&lt;/h3&gt;

&lt;p&gt;If the execution reaches a break statement, it immediately exits the while loop’s clause:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;while True:
    print(&#39;Please type your name.&#39;)
    name = input()
    if name == &#39;your name&#39;:
        break
print(&#39;Thank you!&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;continue-statements&#34;&gt;continue Statements&lt;/h3&gt;

&lt;p&gt;When the program execution reaches a continue statement, the program execution immediately jumps back to the start of the loop.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;while True:
    print(&#39;Who are you?&#39;)
    name = input()
    if name != &#39;Joe&#39;:
        continue
    print(&#39;Hello, Joe. What is the password? (It is a fish.)&#39;)
    password = input()
    if password == &#39;swordfish&#39;:
        break
print(&#39;Access granted.&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;for-loops-and-the-range-function&#34;&gt;for Loops and the range() Function&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(&#39;My name is&#39;)
&amp;gt;&amp;gt;&amp;gt; for i in range(5):
&amp;gt;&amp;gt;&amp;gt;     print(&#39;Jimmy Five Times ({})&#39;.format(str(i)))
My name is
Jimmy Five Times (0)
Jimmy Five Times (1)
Jimmy Five Times (2)
Jimmy Five Times (3)
Jimmy Five Times (4)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;em&gt;range()&lt;/em&gt; function can also be called with three arguments. The first two arguments will be the start and stop values, and the third will be the step argument. The step is the amount that the variable is increased by after each iteration.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; for i in range(0, 10, 2):
&amp;gt;&amp;gt;&amp;gt;    print(i)
0
2
4
6
8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can even use a negative number for the step argument to make the for loop count down instead of up.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; for i in range(5, -1, -1):
&amp;gt;&amp;gt;&amp;gt;     print(i)
5
4
3
2
1
0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;for-else-statement&#34;&gt;For else statement&lt;/h3&gt;

&lt;p&gt;This allows to specify a statement to execute in case of the full loop has been executed. Only
useful when a &lt;code&gt;break&lt;/code&gt; condition can occur in the loop:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; for i in [1, 2, 3, 4, 5]:
&amp;gt;&amp;gt;&amp;gt;    if i == 3:
&amp;gt;&amp;gt;&amp;gt;        break
&amp;gt;&amp;gt;&amp;gt; else:
&amp;gt;&amp;gt;&amp;gt;    print(&amp;quot;only executed when no item of the list is equal to 3&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;importing-modules&#34;&gt;Importing Modules&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import random
for i in range(5):
    print(random.randint(1, 10))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import random, sys, os, math
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from random import *.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;ending-a-program-early-with-sys-exit&#34;&gt;Ending a Program Early with sys.exit()&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sys

while True:
    print(&#39;Type exit to exit.&#39;)
    response = input()
    if response == &#39;exit&#39;:
        sys.exit()
    print(&#39;You typed {}.&#39;.format(response))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;functions&#34;&gt;Functions&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def hello(name):
&amp;gt;&amp;gt;&amp;gt;     print(&#39;Hello {}&#39;.format(name))
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; hello(&#39;Alice&#39;)
&amp;gt;&amp;gt;&amp;gt; hello(&#39;Bob&#39;)
Hello Alice
Hello Bob
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;return-values-and-return-statements&#34;&gt;Return Values and return Statements&lt;/h3&gt;

&lt;p&gt;When creating a function using the def statement, you can specify what the return value should be with a return statement. A return statement consists of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The return keyword.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The value or expression that the function should return.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import random
def getAnswer(answerNumber):
if answerNumber == 1:
    return &#39;It is certain&#39;
elif answerNumber == 2:
    return &#39;It is decidedly so&#39;
elif answerNumber == 3:
    return &#39;Yes&#39;
elif answerNumber == 4:
    return &#39;Reply hazy try again&#39;
elif answerNumber == 5:
    return &#39;Ask again later&#39;
elif answerNumber == 6:
    return &#39;Concentrate and ask again&#39;
elif answerNumber == 7:
    return &#39;My reply is no&#39;
elif answerNumber == 8:
    return &#39;Outlook not so good&#39;
elif answerNumber == 9:
    return &#39;Very doubtful&#39;

r = random.randint(1, 9)
fortune = getAnswer(r)
print(fortune)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-none-value&#34;&gt;The None Value&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam = print(&#39;Hello!&#39;)
Hello!
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam is None
True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: never compare to &lt;code&gt;None&lt;/code&gt; with the &lt;code&gt;==&lt;/code&gt; operator. Always use &lt;code&gt;is&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;keyword-arguments-and-print&#34;&gt;Keyword Arguments and print()&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(&#39;Hello&#39;, end=&#39;&#39;)
&amp;gt;&amp;gt;&amp;gt; print(&#39;World&#39;)
HelloWorld
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(&#39;cats&#39;, &#39;dogs&#39;, &#39;mice&#39;)
cats dogs mice
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(&#39;cats&#39;, &#39;dogs&#39;, &#39;mice&#39;, sep=&#39;,&#39;)
cats,dogs,mice
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;local-and-global-scope&#34;&gt;Local and Global Scope&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Code in the global scope cannot use any local variables.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;However, a local scope can access global variables.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Code in a function’s local scope cannot use variables in any other local scope.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can use the same name for different variables if they are in different scopes. That is, there can be a local variable named spam and a global variable also named spam.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-global-statement&#34;&gt;The global Statement&lt;/h3&gt;

&lt;p&gt;If you need to modify a global variable from within a function, use the global statement:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def spam():
&amp;gt;&amp;gt;&amp;gt;     global eggs
&amp;gt;&amp;gt;&amp;gt;     eggs = &#39;spam&#39;
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; eggs = &#39;global&#39;
&amp;gt;&amp;gt;&amp;gt; spam()
&amp;gt;&amp;gt;&amp;gt; print(eggs)
spam
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are four rules to tell whether a variable is in a local scope or global scope:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;If a variable is being used in the global scope (that is, outside of all functions), then it is always a global variable.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If there is a global statement for that variable in a function, it is a global variable.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Otherwise, if the variable is used in an assignment statement in the function, it is a local variable.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;But if the variable is not used in an assignment statement, it is a global variable.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;exception-handling&#34;&gt;Exception Handling&lt;/h2&gt;

&lt;h3 id=&#34;basic-exception-handling&#34;&gt;Basic exception handling&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def spam(divideBy):
&amp;gt;&amp;gt;&amp;gt;     try:
&amp;gt;&amp;gt;&amp;gt;         return 42 / divideBy
&amp;gt;&amp;gt;&amp;gt;     except ZeroDivisionError as e:
&amp;gt;&amp;gt;&amp;gt;         print(&#39;Error: Invalid argument: {}&#39;.format(e))
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; print(spam(2))
&amp;gt;&amp;gt;&amp;gt; print(spam(12))
&amp;gt;&amp;gt;&amp;gt; print(spam(0))
&amp;gt;&amp;gt;&amp;gt; print(spam(1))
21.0
3.5
Error: Invalid argument: division by zero
None
42.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;final-code-in-exception-handling&#34;&gt;Final code in exception handling&lt;/h3&gt;

&lt;p&gt;Code inside the &lt;code&gt;finally&lt;/code&gt; section is always executed, no matter if an exception has been raised or
not, and even if an exception is not caught.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def spam(divideBy):
&amp;gt;&amp;gt;&amp;gt;     try:
&amp;gt;&amp;gt;&amp;gt;         return 42 / divideBy
&amp;gt;&amp;gt;&amp;gt;     except ZeroDivisionError as e:
&amp;gt;&amp;gt;&amp;gt;         print(&#39;Error: Invalid argument: {}&#39;.format(e))
&amp;gt;&amp;gt;&amp;gt;     finally:
&amp;gt;&amp;gt;&amp;gt;         print(&amp;quot;-- division finished --&amp;quot;)
&amp;gt;&amp;gt;&amp;gt; print(spam(12))
&amp;gt;&amp;gt;&amp;gt; print(spam(0))
21.0
-- division finished --
3.5
-- division finished --
Error: Invalid argument: division by zero
-- division finished --
None
-- division finished --
42.0
-- division finished --
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;lists&#34;&gt;Lists&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam = [&#39;cat&#39;, &#39;bat&#39;, &#39;rat&#39;, &#39;elephant&#39;]

&amp;gt;&amp;gt;&amp;gt; spam
[&#39;cat&#39;, &#39;bat&#39;, &#39;rat&#39;, &#39;elephant&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;getting-individual-values-in-a-list-with-indexes&#34;&gt;Getting Individual Values in a List with Indexes&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam = [&#39;cat&#39;, &#39;bat&#39;, &#39;rat&#39;, &#39;elephant&#39;]
&amp;gt;&amp;gt;&amp;gt; spam[0]
&#39;cat&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam[1]
&#39;bat&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam[2]
&#39;rat&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam[3]
&#39;elephant&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;negative-indexes&#34;&gt;Negative Indexes&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam = [&#39;cat&#39;, &#39;bat&#39;, &#39;rat&#39;, &#39;elephant&#39;]
&amp;gt;&amp;gt;&amp;gt; spam[-1]
&#39;elephant&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam[-3]
&#39;bat&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;The {} is afraid of the {}.&#39;.format(spam[-1], spam[-3])
&#39;The elephant is afraid of the bat.&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;getting-sublists-with-slices&#34;&gt;Getting Sublists with Slices&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam = [&#39;cat&#39;, &#39;bat&#39;, &#39;rat&#39;, &#39;elephant&#39;]
&amp;gt;&amp;gt;&amp;gt; spam[0:4]
[&#39;cat&#39;, &#39;bat&#39;, &#39;rat&#39;, &#39;elephant&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam[1:3]
[&#39;bat&#39;, &#39;rat&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam[0:-1]
[&#39;cat&#39;, &#39;bat&#39;, &#39;rat&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam = [&#39;cat&#39;, &#39;bat&#39;, &#39;rat&#39;, &#39;elephant&#39;]
&amp;gt;&amp;gt;&amp;gt; spam[:2]
[&#39;cat&#39;, &#39;bat&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam[1:]
[&#39;bat&#39;, &#39;rat&#39;, &#39;elephant&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Slicing the complete list will perform a copy:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam2 = spam[:]
[&#39;cat&#39;, &#39;bat&#39;, &#39;rat&#39;, &#39;elephant&#39;]
&amp;gt;&amp;gt;&amp;gt; spam.append(&#39;dog&#39;)
&amp;gt;&amp;gt;&amp;gt; spam
[&#39;cat&#39;, &#39;bat&#39;, &#39;rat&#39;, &#39;elephant&#39;, &#39;dog&#39;]
&amp;gt;&amp;gt;&amp;gt; spam2
[&#39;cat&#39;, &#39;bat&#39;, &#39;rat&#39;, &#39;elephant&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;getting-a-list-s-length-with-len&#34;&gt;Getting a List’s Length with len()&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam = [&#39;cat&#39;, &#39;dog&#39;, &#39;moose&#39;]
&amp;gt;&amp;gt;&amp;gt; len(spam)
3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;changing-values-in-a-list-with-indexes&#34;&gt;Changing Values in a List with Indexes&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam = [&#39;cat&#39;, &#39;bat&#39;, &#39;rat&#39;, &#39;elephant&#39;]
&amp;gt;&amp;gt;&amp;gt; spam[1] = &#39;aardvark&#39;

&amp;gt;&amp;gt;&amp;gt; spam
[&#39;cat&#39;, &#39;aardvark&#39;, &#39;rat&#39;, &#39;elephant&#39;]

&amp;gt;&amp;gt;&amp;gt; spam[2] = spam[1]

&amp;gt;&amp;gt;&amp;gt; spam
[&#39;cat&#39;, &#39;aardvark&#39;, &#39;aardvark&#39;, &#39;elephant&#39;]

&amp;gt;&amp;gt;&amp;gt; spam[-1] = 12345

&amp;gt;&amp;gt;&amp;gt; spam
[&#39;cat&#39;, &#39;aardvark&#39;, &#39;aardvark&#39;, 12345]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;list-concatenation-and-list-replication&#34;&gt;List Concatenation and List Replication&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; [1, 2, 3] + [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]
[1, 2, 3, &#39;A&#39;, &#39;B&#39;, &#39;C&#39;]

&amp;gt;&amp;gt;&amp;gt; [&#39;X&#39;, &#39;Y&#39;, &#39;Z&#39;] * 3
[&#39;X&#39;, &#39;Y&#39;, &#39;Z&#39;, &#39;X&#39;, &#39;Y&#39;, &#39;Z&#39;, &#39;X&#39;, &#39;Y&#39;, &#39;Z&#39;]

&amp;gt;&amp;gt;&amp;gt; spam = [1, 2, 3]

&amp;gt;&amp;gt;&amp;gt; spam = spam + [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]

&amp;gt;&amp;gt;&amp;gt; spam
[1, 2, 3, &#39;A&#39;, &#39;B&#39;, &#39;C&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;removing-values-from-lists-with-del-statements&#34;&gt;Removing Values from Lists with del Statements&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam = [&#39;cat&#39;, &#39;bat&#39;, &#39;rat&#39;, &#39;elephant&#39;]
&amp;gt;&amp;gt;&amp;gt; del spam[2]
&amp;gt;&amp;gt;&amp;gt; spam
[&#39;cat&#39;, &#39;bat&#39;, &#39;elephant&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; del spam[2]
&amp;gt;&amp;gt;&amp;gt; spam
[&#39;cat&#39;, &#39;bat&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;using-for-loops-with-lists&#34;&gt;Using for Loops with Lists&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; supplies = [&#39;pens&#39;, &#39;staplers&#39;, &#39;flame-throwers&#39;, &#39;binders&#39;]
&amp;gt;&amp;gt;&amp;gt; for i, supply in enumerate(supplies):
&amp;gt;&amp;gt;&amp;gt;     print(&#39;Index {} in supplies is: {}&#39;.format(str(i), supply))
Index 0 in supplies is: pens
Index 1 in supplies is: staplers
Index 2 in supplies is: flame-throwers
Index 3 in supplies is: binders
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;looping-through-multiple-lists-with-zip&#34;&gt;Looping Through Multiple Lists with zip()&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; name = [&#39;Pete&#39;, &#39;John&#39;, &#39;Elizabeth&#39;]
&amp;gt;&amp;gt;&amp;gt; age = [6, 23, 44]
&amp;gt;&amp;gt;&amp;gt; for n, a in zip(name, age):
&amp;gt;&amp;gt;&amp;gt;     print(&#39;{} is {} years old&#39;.format(n, a))
Pete is 6 years old
John is 23 years old
Elizabeth is 44 years old
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-in-and-not-in-operators&#34;&gt;The in and not in Operators&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;howdy&#39; in [&#39;hello&#39;, &#39;hi&#39;, &#39;howdy&#39;, &#39;heyas&#39;]
True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam = [&#39;hello&#39;, &#39;hi&#39;, &#39;howdy&#39;, &#39;heyas&#39;]
&amp;gt;&amp;gt;&amp;gt; &#39;cat&#39; in spam
False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;howdy&#39; not in spam
False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;cat&#39; not in spam
True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-multiple-assignment-trick&#34;&gt;The Multiple Assignment Trick&lt;/h3&gt;

&lt;p&gt;The multiple assignment trick is a shortcut that lets you assign multiple variables with the values in a list in one line of code. So instead of doing this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; cat = [&#39;fat&#39;, &#39;orange&#39;, &#39;loud&#39;]

&amp;gt;&amp;gt;&amp;gt; size = cat[0]

&amp;gt;&amp;gt;&amp;gt; color = cat[1]

&amp;gt;&amp;gt;&amp;gt; disposition = cat[2]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You could type this line of code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; cat = [&#39;fat&#39;, &#39;orange&#39;, &#39;loud&#39;]

&amp;gt;&amp;gt;&amp;gt; size, color, disposition = cat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The multiple assignment trick can also be used to swap the values in two variables:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a, b = &#39;Alice&#39;, &#39;Bob&#39;
&amp;gt;&amp;gt;&amp;gt; a, b = b, a
&amp;gt;&amp;gt;&amp;gt; print(a)
&#39;Bob&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(b)
&#39;Alice&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;augmented-assignment-operators&#34;&gt;Augmented Assignment Operators&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operator&lt;/th&gt;
&lt;th&gt;Equivalent&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;spam += 1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;spam = spam + 1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;spam -= 1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;spam = spam - 1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;spam *= 1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;spam = spam * 1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;spam /= 1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;spam = spam / 1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;spam %= 1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;spam = spam % 1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam = &#39;Hello&#39;
&amp;gt;&amp;gt;&amp;gt; spam += &#39; world!&#39;
&amp;gt;&amp;gt;&amp;gt; spam
&#39;Hello world!&#39;

&amp;gt;&amp;gt;&amp;gt; bacon = [&#39;Zophie&#39;]
&amp;gt;&amp;gt;&amp;gt; bacon *= 3
&amp;gt;&amp;gt;&amp;gt; bacon
[&#39;Zophie&#39;, &#39;Zophie&#39;, &#39;Zophie&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;finding-a-value-in-a-list-with-the-index-method&#34;&gt;Finding a Value in a List with the index() Method&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam = [&#39;Zophie&#39;, &#39;Pooka&#39;, &#39;Fat-tail&#39;, &#39;Pooka&#39;]

&amp;gt;&amp;gt;&amp;gt; spam.index(&#39;Pooka&#39;)
1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;adding-values-to-lists-with-the-append-and-insert-methods&#34;&gt;Adding Values to Lists with the append() and insert() Methods&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;append()&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam = [&#39;cat&#39;, &#39;dog&#39;, &#39;bat&#39;]

&amp;gt;&amp;gt;&amp;gt; spam.append(&#39;moose&#39;)

&amp;gt;&amp;gt;&amp;gt; spam
[&#39;cat&#39;, &#39;dog&#39;, &#39;bat&#39;, &#39;moose&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;insert()&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam = [&#39;cat&#39;, &#39;dog&#39;, &#39;bat&#39;]

&amp;gt;&amp;gt;&amp;gt; spam.insert(1, &#39;chicken&#39;)

&amp;gt;&amp;gt;&amp;gt; spam
[&#39;cat&#39;, &#39;chicken&#39;, &#39;dog&#39;, &#39;bat&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;removing-values-from-lists-with-remove&#34;&gt;Removing Values from Lists with remove()&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam = [&#39;cat&#39;, &#39;bat&#39;, &#39;rat&#39;, &#39;elephant&#39;]

&amp;gt;&amp;gt;&amp;gt; spam.remove(&#39;bat&#39;)

&amp;gt;&amp;gt;&amp;gt; spam
[&#39;cat&#39;, &#39;rat&#39;, &#39;elephant&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the value appears multiple times in the list, only the first instance of the value will be removed.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;sorting-the-values-in-a-list-with-the-sort-method&#34;&gt;Sorting the Values in a List with the sort() Method&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam = [2, 5, 3.14, 1, -7]
&amp;gt;&amp;gt;&amp;gt; spam.sort()
&amp;gt;&amp;gt;&amp;gt; spam
[-7, 1, 2, 3.14, 5]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam = [&#39;ants&#39;, &#39;cats&#39;, &#39;dogs&#39;, &#39;badgers&#39;, &#39;elephants&#39;]
&amp;gt;&amp;gt;&amp;gt; spam.sort()
&amp;gt;&amp;gt;&amp;gt; spam
[&#39;ants&#39;, &#39;badgers&#39;, &#39;cats&#39;, &#39;dogs&#39;, &#39;elephants&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also pass True for the reverse keyword argument to have sort() sort the values in reverse order:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam.sort(reverse=True)
&amp;gt;&amp;gt;&amp;gt; spam
[&#39;elephants&#39;, &#39;dogs&#39;, &#39;cats&#39;, &#39;badgers&#39;, &#39;ants&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you need to sort the values in regular alphabetical order, pass str. lower for the key keyword argument in the sort() method call:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam = [&#39;a&#39;, &#39;z&#39;, &#39;A&#39;, &#39;Z&#39;]
&amp;gt;&amp;gt;&amp;gt; spam.sort(key=str.lower)
&amp;gt;&amp;gt;&amp;gt; spam
[&#39;a&#39;, &#39;A&#39;, &#39;z&#39;, &#39;Z&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use the built-in function &lt;code&gt;sorted&lt;/code&gt; to return a new list:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam = [&#39;ants&#39;, &#39;cats&#39;, &#39;dogs&#39;, &#39;badgers&#39;, &#39;elephants&#39;]
&amp;gt;&amp;gt;&amp;gt; sorted(spam)
[&#39;ants&#39;, &#39;badgers&#39;, &#39;cats&#39;, &#39;dogs&#39;, &#39;elephants&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;tuple-data-type&#34;&gt;Tuple Data Type&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; eggs = (&#39;hello&#39;, 42, 0.5)
&amp;gt;&amp;gt;&amp;gt; eggs[0]
&#39;hello&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; eggs[1:3]
(42, 0.5)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; len(eggs)
3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The main way that tuples are different from lists is that tuples, like strings, are immutable.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;converting-types-with-the-list-and-tuple-functions&#34;&gt;Converting Types with the list() and tuple() Functions&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; tuple([&#39;cat&#39;, &#39;dog&#39;, 5])
(&#39;cat&#39;, &#39;dog&#39;, 5)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; list((&#39;cat&#39;, &#39;dog&#39;, 5))
[&#39;cat&#39;, &#39;dog&#39;, 5]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; list(&#39;hello&#39;)
[&#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;dictionaries-and-structuring-data&#34;&gt;Dictionaries and Structuring Data&lt;/h2&gt;

&lt;p&gt;Example Dictionary:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;myCat = {&#39;size&#39;: &#39;fat&#39;, &#39;color&#39;: &#39;gray&#39;, &#39;disposition&#39;: &#39;loud&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-keys-values-and-items-methods&#34;&gt;The keys(), values(), and items() Methods&lt;/h3&gt;

&lt;p&gt;values():&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam = {&#39;color&#39;: &#39;red&#39;, &#39;age&#39;: 42}
&amp;gt;&amp;gt;&amp;gt; for v in spam.values():
&amp;gt;&amp;gt;&amp;gt;     print(v)
red
42
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;keys():&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; for k in spam.keys():
&amp;gt;&amp;gt;&amp;gt;     print(k)
color
age
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;items():&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; for i in spam.items():
&amp;gt;&amp;gt;&amp;gt;     print(i)
(&#39;color&#39;, &#39;red&#39;)
(&#39;age&#39;, 42)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using the keys(), values(), and items() methods, a for loop can iterate over the keys, values, or key-value pairs in a dictionary, respectively.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&amp;gt;&amp;gt;&amp;gt; spam = {&#39;color&#39;: &#39;red&#39;, &#39;age&#39;: 42}
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; for k, v in spam.items():
&amp;gt;&amp;gt;&amp;gt;     print(&#39;Key: {} Value: {}&#39;.format(k, str(v)))
Key: age Value: 42
Key: color Value: red
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;checking-whether-a-key-or-value-exists-in-a-dictionary&#34;&gt;Checking Whether a Key or Value Exists in a Dictionary&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam = {&#39;name&#39;: &#39;Zophie&#39;, &#39;age&#39;: 7}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;name&#39; in spam.keys()
True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;Zophie&#39; in spam.values()
True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; # You can omit the call to keys() when checking for a key
&amp;gt;&amp;gt;&amp;gt; &#39;color&#39; in spam
False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;color&#39; not in spam
True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-get-method&#34;&gt;The get() Method&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; picnic_items = {&#39;apples&#39;: 5, &#39;cups&#39;: 2}

&amp;gt;&amp;gt;&amp;gt; &#39;I am bringing {} cups.&#39;.format(str(picnic_items.get(&#39;cups&#39;, 0)))
&#39;I am bringing 2 cups.&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;I am bringing {} eggs.&#39;.format(str(picnic_items.get(&#39;eggs&#39;, 0)))
&#39;I am bringing 0 eggs.&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-setdefault-method&#34;&gt;The setdefault() Method&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s consider this code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;spam = {&#39;name&#39;: &#39;Pooka&#39;, &#39;age&#39;: 5}

if &#39;color&#39; not in spam:
    spam[&#39;color&#39;] = &#39;black&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using &lt;code&gt;setdefault&lt;/code&gt; we could write the same code more succinctly:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam = {&#39;name&#39;: &#39;Pooka&#39;, &#39;age&#39;: 5}
&amp;gt;&amp;gt;&amp;gt; spam.setdefault(&#39;color&#39;, &#39;black&#39;)
&#39;black&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam
{&#39;color&#39;: &#39;black&#39;, &#39;age&#39;: 5, &#39;name&#39;: &#39;Pooka&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam.setdefault(&#39;color&#39;, &#39;white&#39;)
&#39;black&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam
{&#39;color&#39;: &#39;black&#39;, &#39;age&#39;: 5, &#39;name&#39;: &#39;Pooka&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;pretty-printing&#34;&gt;Pretty Printing&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pprint
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; message = &#39;It was a bright cold day in April, and the clocks were striking
&amp;gt;&amp;gt;&amp;gt; thirteen.&#39;
&amp;gt;&amp;gt;&amp;gt; count = {}
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; for character in message:
&amp;gt;&amp;gt;&amp;gt;     count.setdefault(character, 0)
&amp;gt;&amp;gt;&amp;gt;     count[character] = count[character] + 1
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; pprint.pprint(count)
{&#39; &#39;: 13,
 &#39;,&#39;: 1,
 &#39;.&#39;: 1,
 &#39;A&#39;: 1,
 &#39;I&#39;: 1,
 &#39;a&#39;: 4,
 &#39;b&#39;: 1,
 &#39;c&#39;: 3,
 &#39;d&#39;: 3,
 &#39;e&#39;: 5,
 &#39;g&#39;: 2,
 &#39;h&#39;: 3,
 &#39;i&#39;: 6,
 &#39;k&#39;: 2,
 &#39;l&#39;: 3,
 &#39;n&#39;: 4,
 &#39;o&#39;: 2,
 &#39;p&#39;: 1,
 &#39;r&#39;: 5,
 &#39;s&#39;: 3,
 &#39;t&#39;: 6,
 &#39;w&#39;: 2,
 &#39;y&#39;: 1}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;merge-two-dictionaries&#34;&gt;Merge two dictionaries&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# in Python 3.5+:
&amp;gt;&amp;gt;&amp;gt; x = {&#39;a&#39;: 1, &#39;b&#39;: 2}
&amp;gt;&amp;gt;&amp;gt; y = {&#39;b&#39;: 3, &#39;c&#39;: 4}
&amp;gt;&amp;gt;&amp;gt; z = {**x, **y}
&amp;gt;&amp;gt;&amp;gt; z
{&#39;c&#39;: 4, &#39;a&#39;: 1, &#39;b&#39;: 3}

# in Python 2.7
&amp;gt;&amp;gt;&amp;gt; z = dict(x, **y)
&amp;gt;&amp;gt;&amp;gt; z
{&#39;c&#39;: 4, &#39;a&#39;: 1, &#39;b&#39;: 3}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;sets&#34;&gt;sets&lt;/h2&gt;

&lt;p&gt;From the Python 3 &lt;a href=&#34;https://docs.python.org/3/tutorial/datastructures.html&#34; target=&#34;_blank&#34;&gt;documentation&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A set is an unordered collection with no duplicate elements. Basic uses include membership testing and eliminating duplicate entries. Set objects also support mathematical operations like union, intersection, difference, and symmetric difference.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;initializing-a-set&#34;&gt;Initializing a set&lt;/h3&gt;

&lt;p&gt;There are two ways to create sets: using curly braces &lt;code&gt;{}&lt;/code&gt; and the bult-in function &lt;code&gt;set()&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; s = {1, 2, 3}
&amp;gt;&amp;gt;&amp;gt; s = set([1, 2, 3])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When creating an empty set, be sure to not use the curly braces &lt;code&gt;{}&lt;/code&gt;  or you will get an empty dictionary instead.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; s = {}
&amp;gt;&amp;gt;&amp;gt; type(s)
&amp;lt;class &#39;dict&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;sets-unordered-collections-of-unique-elements&#34;&gt;sets: unordered collections of unique elements&lt;/h3&gt;

&lt;p&gt;A set automatically remove all the duplicate values.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; s = {1, 2, 3, 2, 3, 4}
&amp;gt;&amp;gt;&amp;gt; s
{1, 2, 3, 4}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And as an unordered data type, they can&amp;rsquo;t be indexed.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; s = {1, 2, 3}
&amp;gt;&amp;gt;&amp;gt; s[0]
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
TypeError: &#39;set&#39; object does not support indexing
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;set-add-and-update&#34;&gt;set add() and update()&lt;/h3&gt;

&lt;p&gt;Using the &lt;code&gt;add()&lt;/code&gt; method we can add a single element to the set.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; s = {1, 2, 3}
&amp;gt;&amp;gt;&amp;gt; s.add(4)
&amp;gt;&amp;gt;&amp;gt; s
{1, 2, 3, 4}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And with &lt;code&gt;update()&lt;/code&gt;, multiple ones .&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; s = {1, 2, 3}
&amp;gt;&amp;gt;&amp;gt; s.update([2, 3, 4, 5, 6])
&amp;gt;&amp;gt;&amp;gt; s
{1, 2, 3, 4, 5, 6}  # remember, sets automatically remove duplicates
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;set-remove-and-discard&#34;&gt;set remove() and discard()&lt;/h3&gt;

&lt;p&gt;Both methods will remove an element from the set, but &lt;code&gt;remove()&lt;/code&gt; will raise a &lt;code&gt;key error&lt;/code&gt; if the value doesn&amp;rsquo;t exist.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; s = {1, 2, 3}
&amp;gt;&amp;gt;&amp;gt; s.remove(3)
&amp;gt;&amp;gt;&amp;gt; s
{1, 2}
&amp;gt;&amp;gt;&amp;gt; s.remove(3)
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
KeyError: 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;discard()&lt;/code&gt; won&amp;rsquo;t raise any errors.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; s = {1, 2, 3}
&amp;gt;&amp;gt;&amp;gt; s.discard(3)
&amp;gt;&amp;gt;&amp;gt; s
{1, 2}
&amp;gt;&amp;gt;&amp;gt; s.discard(3)
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;set-union&#34;&gt;set union()&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;union()&lt;/code&gt; or &lt;code&gt;|&lt;/code&gt; will create a new set that contains all the elements from the sets provided.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; s1 = {1, 2, 3}
&amp;gt;&amp;gt;&amp;gt; s2 = {3, 4, 5}
&amp;gt;&amp;gt;&amp;gt; s1.union(s2)  # or &#39;s1 | s2&#39;
{1, 2, 3, 4, 5}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;set-intersection&#34;&gt;set  intersection&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;intersection&lt;/code&gt;  or &lt;code&gt;&amp;amp;&lt;/code&gt;  will return a set containing only the elements that are common to all of them.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; s1 = {1, 2, 3}
&amp;gt;&amp;gt;&amp;gt; s2 = {2, 3, 4}
&amp;gt;&amp;gt;&amp;gt; s3 = {3, 4, 5}
&amp;gt;&amp;gt;&amp;gt; s1.intersection(s2, s3)  # or &#39;s1 &amp;amp; s2 &amp;amp; s3&#39;
{3}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;set-difference&#34;&gt;set  difference&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;difference&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt; will return only the elements that are in one of the sets.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; s1 = {1, 2, 3}
&amp;gt;&amp;gt;&amp;gt; s2 = {2, 3, 4}
&amp;gt;&amp;gt;&amp;gt; s1.difference(s2)  # or &#39;s1 - s2&#39;
{1}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;set-symetric-difference&#34;&gt;set symetric_difference&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;symetric_difference&lt;/code&gt; or &lt;code&gt;^&lt;/code&gt; will return all the elements that are not common between them.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; s1 = {1, 2, 3}
&amp;gt;&amp;gt;&amp;gt; s2 = {2, 3, 4}
&amp;gt;&amp;gt;&amp;gt; s1.symmetric_difference(s2)  # or &#39;s1 ^ s2&#39;
{1, 4}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;itertools-module&#34;&gt;itertools Module&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;itertools&lt;/em&gt; module is a colection of tools intented to be fast and use memory efficiently when handling iterators (like &lt;a href=&#34;#lists&#34;&gt;lists&lt;/a&gt; or &lt;a href=&#34;#dictionaries-and-structuring-data&#34;&gt;dictionaries&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;From the official &lt;a href=&#34;https://docs.python.org/3/library/itertools.html&#34; target=&#34;_blank&#34;&gt;Python 3.x documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The module standardizes a core set of fast, memory efficient tools that are useful by themselves or in combination. Together, they form an “iterator algebra” making it possible to construct specialized tools succinctly and efficiently in pure Python.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;em&gt;itertools&lt;/em&gt; module comes in the standard library and must be imported.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://docs.python.org/3/library/operator.html&#34; target=&#34;_blank&#34;&gt;operator&lt;/a&gt; module will also be used. This module is not necessary when using itertools, but needed for some of the examples below.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;accumulate&#34;&gt;accumulate()&lt;/h3&gt;

&lt;p&gt;Makes an iterator that returns the results of a function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;itertools.accumulate(iterable[, func])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; data = [1, 2, 3, 4, 5]
&amp;gt;&amp;gt;&amp;gt; result = itertools.accumulate(data, operator.mul)
&amp;gt;&amp;gt;&amp;gt; for each in result:
&amp;gt;&amp;gt;&amp;gt;    print(each)
1
2
6
24
120
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The operator.mul takes two numbers and multiplies them:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;operator.mul(1, 2)
2
operator.mul(2, 3)
6
operator.mul(6, 4)
24
operator.mul(24, 5)
120
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Passing a function is optional:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; data = [5, 2, 6, 4, 5, 9, 1]
&amp;gt;&amp;gt;&amp;gt; result = itertools.accumulate(data)
&amp;gt;&amp;gt;&amp;gt; for each in result:
&amp;gt;&amp;gt;&amp;gt;    print(each)
5
7
13
17
22
31
32
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If no function is designated the items will be summed:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;5
5 + 2 = 7
7 + 6 = 13
13 + 4 = 17
17 + 5 = 22
22 + 9 = 31
31 + 1 = 32
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;combinations&#34;&gt;combinations()&lt;/h3&gt;

&lt;p&gt;Takes an iterable and a integer. This will create all the unique combination that have r members.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;itertools.combinations(iterable, r)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; shapes = [&#39;circle&#39;, &#39;triangle&#39;, &#39;square&#39;,]
&amp;gt;&amp;gt;&amp;gt; result = itertools.combinations(shapes, 2)
&amp;gt;&amp;gt;&amp;gt; for each in result:
&amp;gt;&amp;gt;&amp;gt;    print(each)
(&#39;circle&#39;, &#39;triangle&#39;)
(&#39;circle&#39;, &#39;square&#39;)
(&#39;triangle&#39;, &#39;square&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;combinations-with-replacement&#34;&gt;combinations_with_replacement()&lt;/h3&gt;

&lt;p&gt;Just like combinations(), but allows individual elements to be repeated more than once.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;itertools.combinations_with_replacement(iterable, r)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; shapes = [&#39;circle&#39;, &#39;triangle&#39;, &#39;square&#39;]
&amp;gt;&amp;gt;&amp;gt; result = itertools.combinations_with_replacement(shapes, 2)
&amp;gt;&amp;gt;&amp;gt; for each in result:
&amp;gt;&amp;gt;&amp;gt;    print(each)
(&#39;circle&#39;, &#39;circle&#39;)
(&#39;circle&#39;, &#39;triangle&#39;)
(&#39;circle&#39;, &#39;square&#39;)
(&#39;triangle&#39;, &#39;triangle&#39;)
(&#39;triangle&#39;, &#39;square&#39;)
(&#39;square&#39;, &#39;square&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;count&#34;&gt;count()&lt;/h3&gt;

&lt;p&gt;Makes an iterator that returns evenly spaced values starting with number start.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;itertools.count(start=0, step=1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; for i in itertools.count(10,3):
&amp;gt;&amp;gt;&amp;gt;    print(i)
&amp;gt;&amp;gt;&amp;gt;    if i &amp;gt; 20:
&amp;gt;&amp;gt;&amp;gt;        break
10
13
16
19
22
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;cycle&#34;&gt;cycle()&lt;/h3&gt;

&lt;p&gt;This function cycles through an iterator endlessly.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;itertools.cycle(iterable)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; colors = [&#39;red&#39;, &#39;orange&#39;, &#39;yellow&#39;, &#39;green&#39;, &#39;blue&#39;, &#39;violet&#39;]
&amp;gt;&amp;gt;&amp;gt; for color in itertools.cycle(colors):
&amp;gt;&amp;gt;&amp;gt;    print(color)
red
orange
yellow
green
blue
violet
red
orange
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When reached the end of the iterable it start over again from the beginning.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;chain&#34;&gt;chain()&lt;/h3&gt;

&lt;p&gt;Take a series of iterables and return them as one long iterable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;itertools.chain(*iterables)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; colors = [&#39;red&#39;, &#39;orange&#39;, &#39;yellow&#39;, &#39;green&#39;, &#39;blue&#39;]
&amp;gt;&amp;gt;&amp;gt; shapes = [&#39;circle&#39;, &#39;triangle&#39;, &#39;square&#39;, &#39;pentagon&#39;]
&amp;gt;&amp;gt;&amp;gt; result = itertools.chain(colors, shapes)
&amp;gt;&amp;gt;&amp;gt; for each in result:
&amp;gt;&amp;gt;&amp;gt;    print(each)
red
orange
yellow
green
blue
circle
triangle
square
pentagon
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;compress&#34;&gt;compress()&lt;/h3&gt;

&lt;p&gt;Filters one iterable with another.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;itertools.compress(data, selectors)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; shapes = [&#39;circle&#39;, &#39;triangle&#39;, &#39;square&#39;, &#39;pentagon&#39;]
&amp;gt;&amp;gt;&amp;gt; selections = [True, False, True, False]
&amp;gt;&amp;gt;&amp;gt; result = itertools.compress(shapes, selections)
&amp;gt;&amp;gt;&amp;gt; for each in result:
&amp;gt;&amp;gt;&amp;gt;    print(each)
circle
square
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;dropwhile&#34;&gt;dropwhile()&lt;/h3&gt;

&lt;p&gt;Make an iterator that drops elements from the iterable as long as the predicate is true; afterwards, returns every element.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;itertools.dropwhile(predicate, iterable)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]
&amp;gt;&amp;gt;&amp;gt; result = itertools.dropwhile(lambda x: x&amp;lt;5, data)
&amp;gt;&amp;gt;&amp;gt; for each in result:
&amp;gt;&amp;gt;&amp;gt;    print(each)
5
6
7
8
9
10
1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;filterfalse&#34;&gt;filterfalse()&lt;/h3&gt;

&lt;p&gt;Makes an iterator that filters elements from iterable returning only those for which the predicate is False.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;itertools.filterfalse(predicate, iterable)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
&amp;gt;&amp;gt;&amp;gt; result = itertools.filterfalse(lambda x: x&amp;lt;5, data)
&amp;gt;&amp;gt;&amp;gt; for each in result:
&amp;gt;&amp;gt;&amp;gt;    print(each)
5
6
7
8
9
10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;groupby&#34;&gt;groupby()&lt;/h3&gt;

&lt;p&gt;Simply put, this function groups things together.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;itertools.groupby(iterable, key=None)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; robots = [{
    &#39;name&#39;: &#39;blaster&#39;,
    &#39;faction&#39;: &#39;autobot&#39;
}, {
    &#39;name&#39;: &#39;galvatron&#39;,
    &#39;faction&#39;: &#39;decepticon&#39;
}, {
    &#39;name&#39;: &#39;jazz&#39;,
    &#39;faction&#39;: &#39;autobot&#39;
}, {
    &#39;name&#39;: &#39;metroplex&#39;,
    &#39;faction&#39;: &#39;autobot&#39;
}, {
    &#39;name&#39;: &#39;megatron&#39;,
    &#39;faction&#39;: &#39;decepticon&#39;
}, {
    &#39;name&#39;: &#39;starcream&#39;,
    &#39;faction&#39;: &#39;decepticon&#39;
}]
&amp;gt;&amp;gt;&amp;gt; for key, group in itertools.groupby(robots, key=lambda x: x[&#39;faction&#39;]):
&amp;gt;&amp;gt;&amp;gt;    print(key)
&amp;gt;&amp;gt;&amp;gt;    print(list(group))
autobot
[{&#39;name&#39;: &#39;blaster&#39;, &#39;faction&#39;: &#39;autobot&#39;}]
decepticon
[{&#39;name&#39;: &#39;galvatron&#39;, &#39;faction&#39;: &#39;decepticon&#39;}]
autobot
[{&#39;name&#39;: &#39;jazz&#39;, &#39;faction&#39;: &#39;autobot&#39;}, {&#39;name&#39;: &#39;metroplex&#39;, &#39;faction&#39;: &#39;autobot&#39;}]
decepticon
[{&#39;name&#39;: &#39;megatron&#39;, &#39;faction&#39;: &#39;decepticon&#39;}, {&#39;name&#39;: &#39;starcream&#39;, &#39;faction&#39;: &#39;decepticon&#39;}]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;islice&#34;&gt;islice()&lt;/h3&gt;

&lt;p&gt;This function is very much like slices. This allows you to cut out a piece of an iterable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;itertools.islice(iterable, start, stop[, step])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; colors = [&#39;red&#39;, &#39;orange&#39;, &#39;yellow&#39;, &#39;green&#39;, &#39;blue&#39;,]
&amp;gt;&amp;gt;&amp;gt; few_colors = itertools.islice(colors, 2)
&amp;gt;&amp;gt;&amp;gt; for each in few_colors:
&amp;gt;&amp;gt;&amp;gt;    print(each)
red
orange
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;permutations&#34;&gt;permutations()&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;itertools.permutations(iterable, r=None)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; alpha_data = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]
&amp;gt;&amp;gt;&amp;gt; result = itertools.permutations(alpha_data)
&amp;gt;&amp;gt;&amp;gt; for each in result:
&amp;gt;&amp;gt;&amp;gt;    print(each)
(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)
(&#39;a&#39;, &#39;c&#39;, &#39;b&#39;)
(&#39;b&#39;, &#39;a&#39;, &#39;c&#39;)
(&#39;b&#39;, &#39;c&#39;, &#39;a&#39;)
(&#39;c&#39;, &#39;a&#39;, &#39;b&#39;)
(&#39;c&#39;, &#39;b&#39;, &#39;a&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;product&#34;&gt;product()&lt;/h3&gt;

&lt;p&gt;Creates the cartesian products from a series of iterables.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; num_data = [1, 2, 3]
&amp;gt;&amp;gt;&amp;gt; alpha_data = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]
&amp;gt;&amp;gt;&amp;gt; result = itertools.product(num_data, alpha_data)
&amp;gt;&amp;gt;&amp;gt; for each in result:
    print(each)
(1, &#39;a&#39;)
(1, &#39;b&#39;)
(1, &#39;c&#39;)
(2, &#39;a&#39;)
(2, &#39;b&#39;)
(2, &#39;c&#39;)
(3, &#39;a&#39;)
(3, &#39;b&#39;)
(3, &#39;c&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;repeat&#34;&gt;repeat()&lt;/h3&gt;

&lt;p&gt;This function will repeat an object over and over again. Unless, there is a times argument.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;itertools.repeat(object[, times])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; for i in itertools.repeat(&amp;quot;spam&amp;quot;, 3):
    print(i)
spam
spam
spam
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;starmap&#34;&gt;starmap()&lt;/h3&gt;

&lt;p&gt;Makes an iterator that computes the function using arguments obtained from the iterable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;itertools.starmap(function, iterable)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; data = [(2, 6), (8, 4), (7, 3)]
&amp;gt;&amp;gt;&amp;gt; result = itertools.starmap(operator.mul, data)
&amp;gt;&amp;gt;&amp;gt; for each in result:
&amp;gt;&amp;gt;&amp;gt;    print(each)
12
32
21
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;takewhile&#34;&gt;takewhile()&lt;/h3&gt;

&lt;p&gt;The opposite of dropwhile(). Makes an iterator and returns elements from the iterable as long as the predicate is true.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;itertools.takwwhile(predicate, iterable)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]
&amp;gt;&amp;gt;&amp;gt; result = itertools.takewhile(lambda x: x&amp;lt;5, data)
&amp;gt;&amp;gt;&amp;gt; for each in result:
&amp;gt;&amp;gt;&amp;gt;    print(each)
1
2
3
4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;tee&#34;&gt;tee()&lt;/h3&gt;

&lt;p&gt;Return n independent iterators from a single iterable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;itertools.tee(iterable, n=2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; colors = [&#39;red&#39;, &#39;orange&#39;, &#39;yellow&#39;, &#39;green&#39;, &#39;blue&#39;]
&amp;gt;&amp;gt;&amp;gt; alpha_colors, beta_colors = itertools.tee(colors)
&amp;gt;&amp;gt;&amp;gt; for each in alpha_colors:
&amp;gt;&amp;gt;&amp;gt;    print(each)
red
orange
yellow
green
blue
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; colors = [&#39;red&#39;, &#39;orange&#39;, &#39;yellow&#39;, &#39;green&#39;, &#39;blue&#39;]
&amp;gt;&amp;gt;&amp;gt; alpha_colors, beta_colors = itertools.tee(colors)
&amp;gt;&amp;gt;&amp;gt; for each in beta_colors:
&amp;gt;&amp;gt;&amp;gt;    print(each)
red
orange
yellow
green
blue
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;zip-longest&#34;&gt;zip_longest()&lt;/h3&gt;

&lt;p&gt;Makes an iterator that aggregates elements from each of the iterables. If the iterables are of uneven length, missing values are filled-in with fillvalue. Iteration continues until the longest iterable is exhausted.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;itertools.zip_longest(*iterables, fillvalue=None)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; colors = [&#39;red&#39;, &#39;orange&#39;, &#39;yellow&#39;, &#39;green&#39;, &#39;blue&#39;,]
&amp;gt;&amp;gt;&amp;gt; data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,]
&amp;gt;&amp;gt;&amp;gt; for each in itertools.zip_longest(colors, data, fillvalue=None):
&amp;gt;&amp;gt;&amp;gt;    print(each)
(&#39;red&#39;, 1)
(&#39;orange&#39;, 2)
(&#39;yellow&#39;, 3)
(&#39;green&#39;, 4)
(&#39;blue&#39;, 5)
(None, 6)
(None, 7)
(None, 8)
(None, 9)
(None, 10)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;comprehensions&#34;&gt;Comprehensions&lt;/h2&gt;

&lt;h3 id=&#34;list-comprehension&#34;&gt;List comprehension&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = [1, 3, 5, 7, 9, 11]

&amp;gt;&amp;gt;&amp;gt; [i - 1 for i in a]
[0, 2, 4, 6, 8, 10]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;set-comprehension&#34;&gt;Set comprehension&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; b = {&amp;quot;abc&amp;quot;, &amp;quot;def&amp;quot;}
&amp;gt;&amp;gt;&amp;gt; {s.upper() for s in b}
{&amp;quot;ABC&amp;quot;, &amp;quot;DEF}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;dict-comprehension&#34;&gt;Dict comprehension&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; c = {&#39;name&#39;: &#39;Pooka&#39;, &#39;age&#39;: 5}
&amp;gt;&amp;gt;&amp;gt; {v: k for k, v in c.items()}
{&#39;Pooka&#39;: &#39;name&#39;, 5: &#39;age&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A List comprehension can be generated from a dictionary:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; c = {&#39;name&#39;: &#39;Pooka&#39;, &#39;first_name&#39;: &#39;Oooka&#39;}
&amp;gt;&amp;gt;&amp;gt; [&amp;quot;{}:{}&amp;quot;.format(k.upper(), v.upper()) for k, v in c.items()]
[&#39;NAME:POOKA&#39;, &#39;FIRST_NAME:OOOKA&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;manipulating-strings&#34;&gt;Manipulating Strings&lt;/h2&gt;

&lt;h3 id=&#34;escape-characters&#34;&gt;Escape Characters&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Escape character&lt;/th&gt;
&lt;th&gt;Prints as&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\&#39;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Single quote&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Double quote&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tab&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Newline (line break)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\\&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Backslash&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(&amp;quot;Hello there!\nHow are you?\nI\&#39;m doing fine.&amp;quot;)
Hello there!
How are you?
I&#39;m doing fine.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;raw-strings&#34;&gt;Raw Strings&lt;/h3&gt;

&lt;p&gt;A raw string completely ignores all escape characters and prints any backslash that appears in the string.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(r&#39;That is Carol\&#39;s cat.&#39;)
That is Carol\&#39;s cat.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: mostly used for regular expression definition (see &lt;code&gt;re&lt;/code&gt; package)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;multiline-strings-with-triple-quotes&#34;&gt;Multiline Strings with Triple Quotes&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(&#39;&#39;&#39;Dear Alice,
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; Eve&#39;s cat has been arrested for catnapping, cat burglary, and extortion.
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; Sincerely,
&amp;gt;&amp;gt;&amp;gt; Bob&#39;&#39;&#39;)
Dear Alice,

Eve&#39;s cat has been arrested for catnapping, cat burglary, and extortion.

Sincerely,
Bob
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To keep a nicer flow in your code, you can use the &lt;code&gt;dedent&lt;/code&gt; function from the &lt;code&gt;textwrap&lt;/code&gt; standard package.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from textwrap import dedent
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; def my_function():
&amp;gt;&amp;gt;&amp;gt;     print(&#39;&#39;&#39;
&amp;gt;&amp;gt;&amp;gt;         Dear Alice,
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt;         Eve&#39;s cat has been arrested for catnapping, cat burglary, and extortion.
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt;         Sincerely,
&amp;gt;&amp;gt;&amp;gt;         Bob
&amp;gt;&amp;gt;&amp;gt;         &#39;&#39;&#39;).strip()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This generates the same string than before.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;indexing-and-slicing-strings&#34;&gt;Indexing and Slicing Strings&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;H   e   l   l   o       w   o   r   l   d    !
0   1   2   3   4   5   6   7   8   9   10   11
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam = &#39;Hello world!&#39;

&amp;gt;&amp;gt;&amp;gt; spam[0]
&#39;H&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam[4]
&#39;o&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam[-1]
&#39;!&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Slicing:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&amp;gt;&amp;gt;&amp;gt; spam[0:5]
&#39;Hello&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam[:5]
&#39;Hello&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam[6:]
&#39;world!&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam[6:-1]
&#39;world&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam[:-1]
&#39;Hello world&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam[::-1]
&#39;!dlrow olleH&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam = &#39;Hello world!&#39;
&amp;gt;&amp;gt;&amp;gt; fizz = spam[0:5]
&amp;gt;&amp;gt;&amp;gt; fizz
&#39;Hello&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-in-and-not-in-operators-with-strings&#34;&gt;The in and not in Operators with Strings&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;Hello&#39; in &#39;Hello World&#39;
True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;Hello&#39; in &#39;Hello&#39;
True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;HELLO&#39; in &#39;Hello World&#39;
False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;&#39; in &#39;spam&#39;
True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;cats&#39; not in &#39;cats and dogs&#39;
False
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-in-and-not-in-operators-with-list&#34;&gt;The in and not in Operators with list&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = [1, 2, 3, 4]
&amp;gt;&amp;gt;&amp;gt; 5 in a
False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; 2 in a
True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-upper-lower-isupper-and-islower-string-methods&#34;&gt;The upper(), lower(), isupper(), and islower() String Methods&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;upper()&lt;/code&gt; and &lt;code&gt;lower()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam = &#39;Hello world!&#39;
&amp;gt;&amp;gt;&amp;gt; spam = spam.upper()
&amp;gt;&amp;gt;&amp;gt; spam
&#39;HELLO WORLD!&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam = spam.lower()
&amp;gt;&amp;gt;&amp;gt; spam
&#39;hello world!&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;isupper() and islower():&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam = &#39;Hello world!&#39;
&amp;gt;&amp;gt;&amp;gt; spam.islower()
False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam.isupper()
False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;HELLO&#39;.isupper()
True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;abc12345&#39;.islower()
True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;12345&#39;.islower()
False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;12345&#39;.isupper()
False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-isx-string-methods&#34;&gt;The isX String Methods&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;isalpha()&lt;/strong&gt; returns True if the string consists only of letters and is not blank.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;isalnum()&lt;/strong&gt; returns True if the string consists only of lettersand numbers and is not blank.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;isdecimal()&lt;/strong&gt; returns True if the string consists only ofnumeric characters and is not blank.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;isspace()&lt;/strong&gt; returns True if the string consists only of spaces,tabs, and new-lines and is not blank.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;istitle()&lt;/strong&gt; returns True if the string consists only of wordsthat begin with an uppercase letter followed by onlylowercase letters.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-startswith-and-endswith-string-methods&#34;&gt;The startswith() and endswith() String Methods&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;Hello world!&#39;.startswith(&#39;Hello&#39;)
True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;Hello world!&#39;.endswith(&#39;world!&#39;)
True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;abc123&#39;.startswith(&#39;abcdef&#39;)
False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;abc123&#39;.endswith(&#39;12&#39;)
False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;Hello world!&#39;.startswith(&#39;Hello world!&#39;)
True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;Hello world!&#39;.endswith(&#39;Hello world!&#39;)
True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-join-and-split-string-methods&#34;&gt;The join() and split() String Methods&lt;/h3&gt;

&lt;p&gt;join():&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;, &#39;.join([&#39;cats&#39;, &#39;rats&#39;, &#39;bats&#39;])
&#39;cats, rats, bats&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39; &#39;.join([&#39;My&#39;, &#39;name&#39;, &#39;is&#39;, &#39;Simon&#39;])
&#39;My name is Simon&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;ABC&#39;.join([&#39;My&#39;, &#39;name&#39;, &#39;is&#39;, &#39;Simon&#39;])
&#39;MyABCnameABCisABCSimon&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;split():&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;My name is Simon&#39;.split()
[&#39;My&#39;, &#39;name&#39;, &#39;is&#39;, &#39;Simon&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;MyABCnameABCisABCSimon&#39;.split(&#39;ABC&#39;)
[&#39;My&#39;, &#39;name&#39;, &#39;is&#39;, &#39;Simon&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;My name is Simon&#39;.split(&#39;m&#39;)
[&#39;My na&#39;, &#39;e is Si&#39;, &#39;on&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;justifying-text-with-rjust-ljust-and-center&#34;&gt;Justifying Text with rjust(), ljust(), and center()&lt;/h3&gt;

&lt;p&gt;rjust() and ljust():&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;Hello&#39;.rjust(10)
&#39;     Hello&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;Hello&#39;.rjust(20)
&#39;               Hello&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;Hello World&#39;.rjust(20)
&#39;         Hello World&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;Hello&#39;.ljust(10)
&#39;Hello     &#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An optional second argument to rjust() and ljust() will specify a fill character other than a space character. Enter the following into the interactive shell:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;Hello&#39;.rjust(20, &#39;*&#39;)
&#39;***************Hello&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;Hello&#39;.ljust(20, &#39;-&#39;)
&#39;Hello---------------&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;center():&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;Hello&#39;.center(20)
&#39;       Hello       &#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;Hello&#39;.center(20, &#39;=&#39;)
&#39;=======Hello========&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;removing-whitespace-with-strip-rstrip-and-lstrip&#34;&gt;Removing Whitespace with strip(), rstrip(), and lstrip()&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam = &#39;    Hello World     &#39;
&amp;gt;&amp;gt;&amp;gt; spam.strip()
&#39;Hello World&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam.lstrip()
&#39;Hello World &#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam.rstrip()
&#39;    Hello World&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; spam = &#39;SpamSpamBaconSpamEggsSpamSpam&#39;
&amp;gt;&amp;gt;&amp;gt; spam.strip(&#39;ampS&#39;)
&#39;BaconSpamEggs&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;copying-and-pasting-strings-with-the-pyperclip-module-need-pip-install&#34;&gt;Copying and Pasting Strings with the pyperclip Module (need pip install)&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pyperclip

&amp;gt;&amp;gt;&amp;gt; pyperclip.copy(&#39;Hello world!&#39;)

&amp;gt;&amp;gt;&amp;gt; pyperclip.paste()
&#39;Hello world!&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;string-formatting&#34;&gt;String Formatting&lt;/h2&gt;

&lt;h3 id=&#34;operator&#34;&gt;% operator&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; name = &#39;Pete&#39;
&amp;gt;&amp;gt;&amp;gt; &#39;Hello %s&#39; % name
&amp;quot;Hello Pete&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can use the &lt;code&gt;%x&lt;/code&gt; format specifier to convert an int value to a string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; num = 5
&amp;gt;&amp;gt;&amp;gt; &#39;I have %x apples&#39; % num
&amp;quot;I have 5 apples&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: For new code, using &lt;a href=&#34;#string-formatting-strformat&#34;&gt;str.format&lt;/a&gt; or &lt;a href=&#34;#formatted-string-literals-or-f-strings-python-36&#34;&gt;f-strings&lt;/a&gt; (Python 3.6+) is strongly recommended over the &lt;code&gt;%&lt;/code&gt; operator.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;string-formatting-str-format&#34;&gt;String Formatting (str.format)&lt;/h3&gt;

&lt;p&gt;Python 3 introduced a new way to do string formatting that was later back-ported to Python 2.7. This makes the syntax for string formatting more regular.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; name = &#39;John&#39;
&amp;gt;&amp;gt;&amp;gt; age = 20&#39;

&amp;gt;&amp;gt;&amp;gt; &amp;quot;Hello I&#39;m {}, my age is {}&amp;quot;.format(name, age)
&amp;quot;Hello I&#39;m John, my age is 20&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &amp;quot;Hello I&#39;m {0}, my age is {1}&amp;quot;.format(name, age)
&amp;quot;Hello I&#39;m John, my age is 20&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The official &lt;a href=&#34;https://docs.python.org/3/library/stdtypes.html?highlight=sprintf#printf-style-string-formatting&#34; target=&#34;_blank&#34;&gt;Python 3.x documentation&lt;/a&gt; recommend &lt;code&gt;str.format&lt;/code&gt; over the &lt;code&gt;%&lt;/code&gt; operator:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The formatting operations described here exhibit a variety of quirks that lead to a number of common errors (such as failing to display tuples and dictionaries correctly). Using the newer formatted string literals or the str.format() interface helps avoid these errors. These alternatives also provide more powerful, flexible and extensible approaches to formatting text.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;lazy-string-formatting&#34;&gt;Lazy string formatting&lt;/h3&gt;

&lt;p&gt;You would only use &lt;code&gt;%s&lt;/code&gt; string formatting on functions that can do lazy parameters evaluation,
the most common being logging:&lt;/p&gt;

&lt;p&gt;Prefer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; name = &amp;quot;alice&amp;quot;
&amp;gt;&amp;gt;&amp;gt; logging.debug(&amp;quot;User name: %s&amp;quot;, name)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Over:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; logging.debug(&amp;quot;User name: {}&amp;quot;.format(name))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; logging.debug(&amp;quot;User name: &amp;quot; + name)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;formatted-string-literals-or-f-strings-python-3-6&#34;&gt;Formatted String Literals or f-strings (Python 3.6+)&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; name = &#39;Elizabeth&#39;
&amp;gt;&amp;gt;&amp;gt; f&#39;Hello {name}!&#39;
&#39;Hello Elizabeth!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is even possible to do inline arithmetic with it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = 5
&amp;gt;&amp;gt;&amp;gt; b = 10
&amp;gt;&amp;gt;&amp;gt; f&#39;Five plus ten is {a + b} and not {2 * (a + b)}.&#39;
&#39;Five plus ten is 15 and not 30.&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;template-strings&#34;&gt;Template Strings&lt;/h3&gt;

&lt;p&gt;A simpler and less powerful mechanism, but it is recommended when handling format strings generated by users. Due to their reduced complexity template strings are a safer choice.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from string import Template
&amp;gt;&amp;gt;&amp;gt; name = &#39;Elizabeth&#39;
&amp;gt;&amp;gt;&amp;gt; t = Template(&#39;Hey $name!&#39;)
&amp;gt;&amp;gt;&amp;gt; t.substitute(name=name)
&#39;Hey Elizabeth!&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;regular-expressions&#34;&gt;Regular Expressions&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Import the regex module with &lt;code&gt;import re&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Create a Regex object with the &lt;code&gt;re.compile()&lt;/code&gt; function. (Remember to use a raw string.)&lt;/li&gt;
&lt;li&gt;Pass the string you want to search into the Regex object’s &lt;code&gt;search()&lt;/code&gt; method. This returns a &lt;code&gt;Match&lt;/code&gt; object.&lt;/li&gt;
&lt;li&gt;Call the Match object’s &lt;code&gt;group()&lt;/code&gt; method to return a string of the actual matched text.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All the regex functions in Python are in the re module:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import re
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;matching-regex-objects&#34;&gt;Matching Regex Objects&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; phone_num_regex = re.compile(r&#39;\d\d\d-\d\d\d-\d\d\d\d&#39;)

&amp;gt;&amp;gt;&amp;gt; mo = phone_num_regex.search(&#39;My number is 415-555-4242.&#39;)

&amp;gt;&amp;gt;&amp;gt; print(&#39;Phone number found: {}&#39;.format(mo.group()))
Phone number found: 415-555-4242
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;grouping-with-parentheses&#34;&gt;Grouping with Parentheses&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; phone_num_regex = re.compile(r&#39;(\d\d\d)-(\d\d\d-\d\d\d\d)&#39;)

&amp;gt;&amp;gt;&amp;gt; mo = phone_num_regex.search(&#39;My number is 415-555-4242.&#39;)

&amp;gt;&amp;gt;&amp;gt; mo.group(1)
&#39;415&#39;

&amp;gt;&amp;gt;&amp;gt; mo.group(2)
&#39;555-4242&#39;

&amp;gt;&amp;gt;&amp;gt; mo.group(0)
&#39;415-555-4242&#39;

&amp;gt;&amp;gt;&amp;gt; mo.group()
&#39;415-555-4242&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To retrieve all the groups at once: use the groups() method—note the plural form for the name.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; mo.groups()
(&#39;415&#39;, &#39;555-4242&#39;)

&amp;gt;&amp;gt;&amp;gt; area_code, main_number = mo.groups()

&amp;gt;&amp;gt;&amp;gt; print(area_code)
415

&amp;gt;&amp;gt;&amp;gt; print(main_number)
555-4242
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;matching-multiple-groups-with-the-pipe&#34;&gt;Matching Multiple Groups with the Pipe&lt;/h3&gt;

&lt;p&gt;The | character is called a pipe. You can use it anywhere you want to match one of many expressions. For example, the regular expression r&amp;rsquo;Batman|Tina Fey&amp;rsquo; will match either &amp;lsquo;Batman&amp;rsquo; or &amp;lsquo;Tina Fey&amp;rsquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; hero_regex = re.compile (r&#39;Batman|Tina Fey&#39;)

&amp;gt;&amp;gt;&amp;gt; mo1 = hero_regex.search(&#39;Batman and Tina Fey.&#39;)

&amp;gt;&amp;gt;&amp;gt; mo1.group()
&#39;Batman&#39;

&amp;gt;&amp;gt;&amp;gt; mo2 = hero_regex.search(&#39;Tina Fey and Batman.&#39;)

&amp;gt;&amp;gt;&amp;gt; mo2.group()
&#39;Tina Fey&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also use the pipe to match one of several patterns as part of your regex:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; bat_regex = re.compile(r&#39;Bat(man|mobile|copter|bat)&#39;)

&amp;gt;&amp;gt;&amp;gt; mo = bat_regex.search(&#39;Batmobile lost a wheel&#39;)

&amp;gt;&amp;gt;&amp;gt; mo.group()
&#39;Batmobile&#39;

&amp;gt;&amp;gt;&amp;gt; mo.group(1)
&#39;mobile&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;optional-matching-with-the-question-mark&#34;&gt;Optional Matching with the Question Mark&lt;/h3&gt;

&lt;p&gt;The ? character flags the group that precedes it as an optional part of the pattern.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; bat_regex = re.compile(r&#39;Bat(wo)?man&#39;)
&amp;gt;&amp;gt;&amp;gt; mo1 = bat_regex.search(&#39;The Adventures of Batman&#39;)
&amp;gt;&amp;gt;&amp;gt; mo1.group()
&#39;Batman&#39;

&amp;gt;&amp;gt;&amp;gt; mo2 = bat_regex.search(&#39;The Adventures of Batwoman&#39;)
&amp;gt;&amp;gt;&amp;gt; mo2.group()
&#39;Batwoman&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;matching-zero-or-more-with-the-star&#34;&gt;Matching Zero or More with the Star&lt;/h3&gt;

&lt;p&gt;The * (called the star or asterisk) means “match zero or more”—the group that precedes the star can occur any number of times in the text.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; bat_regex = re.compile(r&#39;Bat(wo)*man&#39;)
&amp;gt;&amp;gt;&amp;gt; mo1 = bat_regex.search(&#39;The Adventures of Batman&#39;)
&amp;gt;&amp;gt;&amp;gt; mo1.group()
&#39;Batman&#39;

&amp;gt;&amp;gt;&amp;gt; mo2 = bat_regex.search(&#39;The Adventures of Batwoman&#39;)
&amp;gt;&amp;gt;&amp;gt; mo2.group()
&#39;Batwoman&#39;

&amp;gt;&amp;gt;&amp;gt; mo3 = bat_regex.search(&#39;The Adventures of Batwowowowoman&#39;)
&amp;gt;&amp;gt;&amp;gt; mo3.group()
&#39;Batwowowowoman&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;matching-one-or-more-with-the-plus&#34;&gt;Matching One or More with the Plus&lt;/h3&gt;

&lt;p&gt;While * means “match zero or more,” the + (or plus) means “match one or more”. The group preceding a plus must appear at least once. It is not optional:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; bat_regex = re.compile(r&#39;Bat(wo)+man&#39;)
&amp;gt;&amp;gt;&amp;gt; mo1 = bat_regex.search(&#39;The Adventures of Batwoman&#39;)
&amp;gt;&amp;gt;&amp;gt; mo1.group()
&#39;Batwoman&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; mo2 = bat_regex.search(&#39;The Adventures of Batwowowowoman&#39;)
&amp;gt;&amp;gt;&amp;gt; mo2.group()
&#39;Batwowowowoman&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; mo3 = bat_regex.search(&#39;The Adventures of Batman&#39;)
&amp;gt;&amp;gt;&amp;gt; mo3 is None
True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;matching-specific-repetitions-with-curly-brackets&#34;&gt;Matching Specific Repetitions with Curly Brackets&lt;/h3&gt;

&lt;p&gt;If you have a group that you want to repeat a specific number of times, follow the group in your regex with a number in curly brackets. For example, the regex (Ha){3} will match the string &amp;lsquo;HaHaHa&amp;rsquo;, but it will not match &amp;lsquo;HaHa&amp;rsquo;, since the latter has only two repeats of the (Ha) group.&lt;/p&gt;

&lt;p&gt;Instead of one number, you can specify a range by writing a minimum, a comma, and a maximum in between the curly brackets. For example, the regex (Ha){3,5} will match &amp;lsquo;HaHaHa&amp;rsquo;, &amp;lsquo;HaHaHaHa&amp;rsquo;, and &amp;lsquo;HaHaHaHaHa&amp;rsquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; ha_regex = re.compile(r&#39;(Ha){3}&#39;)
&amp;gt;&amp;gt;&amp;gt; mo1 = ha_regex.search(&#39;HaHaHa&#39;)
&amp;gt;&amp;gt;&amp;gt; mo1.group()
&#39;HaHaHa&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; mo2 = ha_regex.search(&#39;Ha&#39;)
&amp;gt;&amp;gt;&amp;gt; mo2 is None
True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;greedy-and-nongreedy-matching&#34;&gt;Greedy and Nongreedy Matching&lt;/h3&gt;

&lt;p&gt;Python’s regular expressions are greedy by default, which means that in ambiguous situations they will match the longest string possible. The non-greedy version of the curly brackets, which matches the shortest string possible, has the closing curly bracket followed by a question mark.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; greedy_ha_regex = re.compile(r&#39;(Ha){3,5}&#39;)
&amp;gt;&amp;gt;&amp;gt; mo1 = greedy_ha_regex.search(&#39;HaHaHaHaHa&#39;)
&amp;gt;&amp;gt;&amp;gt; mo1.group()
&#39;HaHaHaHaHa&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; nongreedy_ha_regex = re.compile(r&#39;(Ha){3,5}?&#39;)
&amp;gt;&amp;gt;&amp;gt; mo2 = nongreedy_ha_regex.search(&#39;HaHaHaHaHa&#39;)
&amp;gt;&amp;gt;&amp;gt; mo2.group()
&#39;HaHaHa&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-findall-method&#34;&gt;The findall() Method&lt;/h3&gt;

&lt;p&gt;In addition to the search() method, Regex objects also have a findall() method. While search() will return a Match object of the first matched text in the searched string, the findall() method will return the strings of every match in the searched string.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; phone_num_regex = re.compile(r&#39;\d\d\d-\d\d\d-\d\d\d\d&#39;) # has no groups

&amp;gt;&amp;gt;&amp;gt; phone_num_regex.findall(&#39;Cell: 415-555-9999 Work: 212-555-0000&#39;)
[&#39;415-555-9999&#39;, &#39;212-555-0000&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To summarize what the findall() method returns, remember the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;When called on a regex with no groups, such as \d-\d\d\d-\d\d\d\d, the method findall() returns a list of ng matches, such as [&amp;lsquo;415-555-9999&amp;rsquo;, &amp;lsquo;212-555-0000&amp;rsquo;].&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When called on a regex that has groups, such as (\d\d\d)-d\d)-(\d\ d\d\d), the method findall() returns a list of es of strings (one string for each group), such as [(&amp;lsquo;415&amp;rsquo;, &amp;lsquo;, &amp;lsquo;9999&amp;rsquo;), (&amp;lsquo;212&amp;rsquo;, &amp;lsquo;555&amp;rsquo;, &amp;lsquo;0000&amp;rsquo;)].&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;making-your-own-character-classes&#34;&gt;Making Your Own Character Classes&lt;/h3&gt;

&lt;p&gt;There are times when you want to match a set of characters but the shorthand character classes (\d, \w, \s, and so on) are too broad. You can define your own character class using square brackets. For example, the character class [aeiouAEIOU] will match any vowel, both lowercase and uppercase.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; vowel_regex = re.compile(r&#39;[aeiouAEIOU]&#39;)

&amp;gt;&amp;gt;&amp;gt; vowel_regex.findall(&#39;Robocop eats baby food. BABY FOOD.&#39;)
[&#39;o&#39;, &#39;o&#39;, &#39;o&#39;, &#39;e&#39;, &#39;a&#39;, &#39;a&#39;, &#39;o&#39;, &#39;o&#39;, &#39;A&#39;, &#39;O&#39;, &#39;O&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also include ranges of letters or numbers by using a hyphen. For example, the character class [a-zA-Z0-9] will match all lowercase letters, uppercase letters, and numbers.&lt;/p&gt;

&lt;p&gt;By placing a caret character (^) just after the character class’s opening bracket, you can make a negative character class. A negative character class will match all the characters that are not in the character class. For example, enter the following into the interactive shell:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; consonant_regex = re.compile(r&#39;[^aeiouAEIOU]&#39;)

&amp;gt;&amp;gt;&amp;gt; consonant_regex.findall(&#39;Robocop eats baby food. BABY FOOD.&#39;)
[&#39;R&#39;, &#39;b&#39;, &#39;c&#39;, &#39;p&#39;, &#39; &#39;, &#39;t&#39;, &#39;s&#39;, &#39; &#39;, &#39;b&#39;, &#39;b&#39;, &#39;y&#39;, &#39; &#39;, &#39;f&#39;, &#39;d&#39;, &#39;.&#39;, &#39;
&#39;, &#39;B&#39;, &#39;B&#39;, &#39;Y&#39;, &#39; &#39;, &#39;F&#39;, &#39;D&#39;, &#39;.&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-caret-and-dollar-sign-characters&#34;&gt;The Caret and Dollar Sign Characters&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You can also use the caret symbol (^) at the start of a regex to indicate that a match must occur at the beginning of the searched text.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Likewise, you can put a dollar sign ($) at the end of the regex to indicate the string must end with this regex pattern.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;And you can use the ^ and $ together to indicate that the entire string must match the regex—that is, it’s not enough for a match to be made on some subset of the string.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The r&amp;rsquo;^Hello&amp;rsquo; regular expression string matches strings that begin with &amp;lsquo;Hello&amp;rsquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; begins_with_hello = re.compile(r&#39;^Hello&#39;)

&amp;gt;&amp;gt;&amp;gt; begins_with_hello.search(&#39;Hello world!&#39;)
&amp;lt;_sre.SRE_Match object; span=(0, 5), match=&#39;Hello&#39;&amp;gt;

&amp;gt;&amp;gt;&amp;gt; begins_with_hello.search(&#39;He said hello.&#39;) is None
True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The r&amp;rsquo;\d$&amp;rsquo; regular expression string matches strings that end with a numeric character from 0 to 9:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; whole_string_is_num = re.compile(r&#39;^\d+$&#39;)

&amp;gt;&amp;gt;&amp;gt; whole_string_is_num.search(&#39;1234567890&#39;)
&amp;lt;_sre.SRE_Match object; span=(0, 10), match=&#39;1234567890&#39;&amp;gt;

&amp;gt;&amp;gt;&amp;gt; whole_string_is_num.search(&#39;12345xyz67890&#39;) is None
True

&amp;gt;&amp;gt;&amp;gt; whole_string_is_num.search(&#39;12 34567890&#39;) is None
True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-wildcard-character&#34;&gt;The Wildcard Character&lt;/h3&gt;

&lt;p&gt;The . (or dot) character in a regular expression is called a wildcard and will match any character except for a newline:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; at_regex = re.compile(r&#39;.at&#39;)

&amp;gt;&amp;gt;&amp;gt; at_regex.findall(&#39;The cat in the hat sat on the flat mat.&#39;)
[&#39;cat&#39;, &#39;hat&#39;, &#39;sat&#39;, &#39;lat&#39;, &#39;mat&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;matching-everything-with-dot-star&#34;&gt;Matching Everything with Dot-Star&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; name_regex = re.compile(r&#39;First Name: (.*) Last Name: (.*)&#39;)

&amp;gt;&amp;gt;&amp;gt; mo = name_regex.search(&#39;First Name: Al Last Name: Sweigart&#39;)

&amp;gt;&amp;gt;&amp;gt; mo.group(1)
&#39;Al&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; mo.group(2)
&#39;Sweigart&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The dot-star uses greedy mode: It will always try to match as much text as possible. To match any and all text in a nongreedy fashion, use the dot, star, and question mark (.*?). The question mark tells Python to match in a nongreedy way:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; nongreedy_regex = re.compile(r&#39;&amp;lt;.*?&amp;gt;&#39;)
&amp;gt;&amp;gt;&amp;gt; mo = nongreedy_regex.search(&#39;&amp;lt;To serve man&amp;gt; for dinner.&amp;gt;&#39;)
&amp;gt;&amp;gt;&amp;gt; mo.group()
&#39;&amp;lt;To serve man&amp;gt;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; greedy_regex = re.compile(r&#39;&amp;lt;.*&amp;gt;&#39;)
&amp;gt;&amp;gt;&amp;gt; mo = greedy_regex.search(&#39;&amp;lt;To serve man&amp;gt; for dinner.&amp;gt;&#39;)
&amp;gt;&amp;gt;&amp;gt; mo.group()
&#39;&amp;lt;To serve man&amp;gt; for dinner.&amp;gt;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;matching-newlines-with-the-dot-character&#34;&gt;Matching Newlines with the Dot Character&lt;/h3&gt;

&lt;p&gt;The dot-star will match everything except a newline. By passing re.DOTALL as the second argument to re.compile(), you can make the dot character match all characters, including the newline character:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; no_newline_regex = re.compile(&#39;.*&#39;)
&amp;gt;&amp;gt;&amp;gt; no_newline_regex.search(&#39;Serve the public trust.\nProtect the innocent.\nUphold the law.&#39;).group()
&#39;Serve the public trust.&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; newline_regex = re.compile(&#39;.*&#39;, re.DOTALL)
&amp;gt;&amp;gt;&amp;gt; newline_regex.search(&#39;Serve the public trust.\nProtect the innocent.\nUphold the law.&#39;).group()
&#39;Serve the public trust.\nProtect the innocent.\nUphold the law.&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;review-of-regex-symbols&#34;&gt;Review of Regex Symbols&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Symbol&lt;/th&gt;
&lt;th&gt;Matches&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;?&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;zero or one of the preceding group.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;*&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;zero or more of the preceding group.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;one or more of the preceding group.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;{n}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;exactly n of the preceding group.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;{n,}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;n or more of the preceding group.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;{,m}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;0 to m of the preceding group.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;{n,m}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;at least n and at most m of the preceding p.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;{n,m}?&lt;/code&gt; or &lt;code&gt;*?&lt;/code&gt; or &lt;code&gt;+?&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;performs a nongreedy match of the preceding p.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;^spam&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;means the string must begin with spam.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;spam$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;means the string must end with spam.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;.&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;any character, except newline characters.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\d&lt;/code&gt;, &lt;code&gt;\w&lt;/code&gt;, and &lt;code&gt;\s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;a digit, word, or space character, respectively.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\D&lt;/code&gt;, &lt;code&gt;\W&lt;/code&gt;, and &lt;code&gt;\S&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;anything except a digit, word, or space acter, respectively.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[abc]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;any character between the brackets (such as a, b, ).&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[^abc]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;any character that isn’t between the brackets.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;case-insensitive-matching&#34;&gt;Case-Insensitive Matching&lt;/h3&gt;

&lt;p&gt;To make your regex case-insensitive, you can pass re.IGNORECASE or re.I as a second argument to re.compile():&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; robocop = re.compile(r&#39;robocop&#39;, re.I)

&amp;gt;&amp;gt;&amp;gt; robocop.search(&#39;Robocop is part man, part machine, all cop.&#39;).group()
&#39;Robocop&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; robocop.search(&#39;ROBOCOP protects the innocent.&#39;).group()
&#39;ROBOCOP&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; robocop.search(&#39;Al, why does your programming book talk about robocop so much?&#39;).group()
&#39;robocop&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;substituting-strings-with-the-sub-method&#34;&gt;Substituting Strings with the sub() Method&lt;/h3&gt;

&lt;p&gt;The sub() method for Regex objects is passed two arguments:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The first argument is a string to replace any matches.&lt;/li&gt;
&lt;li&gt;The second is the string for the regular expression.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The sub() method returns a string with the substitutions applied:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; names_regex = re.compile(r&#39;Agent \w+&#39;)

&amp;gt;&amp;gt;&amp;gt; names_regex.sub(&#39;CENSORED&#39;, &#39;Agent Alice gave the secret documents to Agent Bob.&#39;)
&#39;CENSORED gave the secret documents to CENSORED.&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; agent_names_regex = re.compile(r&#39;Agent (\w)\w*&#39;)

&amp;gt;&amp;gt;&amp;gt; agent_names_regex.sub(r&#39;\1****&#39;, &#39;Agent Alice told Agent Carol that Agent Eve knew Agent Bob was a double agent.&#39;)
A**** told C**** that E**** knew B**** was a double agent.&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;managing-complex-regexes&#34;&gt;Managing Complex Regexes&lt;/h3&gt;

&lt;p&gt;To tell the re.compile() function to ignore whitespace and comments inside the regular expression string, “verbose mode” can be enabled by passing the variable re.VERBOSE as the second argument to re.compile().&lt;/p&gt;

&lt;p&gt;Now instead of a hard-to-read regular expression like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;phone_regex = re.compile(r&#39;((\d{3}|\(\d{3}\))?(\s|-|\.)?\d{3}(\s|-|\.)\d{4}(\s*(ext|x|ext.)\s*\d{2,5})?)&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you can spread the regular expression over multiple lines with comments like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;phone_regex = re.compile(r&#39;&#39;&#39;(
    (\d{3}|\(\d{3}\))?            # area code
    (\s|-|\.)?                    # separator
    \d{3}                         # first 3 digits
    (\s|-|\.)                     # separator
    \d{4}                         # last 4 digits
    (\s*(ext|x|ext.)\s*\d{2,5})?  # extension
    )&#39;&#39;&#39;, re.VERBOSE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;handling-file-and-directory-paths&#34;&gt;Handling File and Directory Paths&lt;/h2&gt;

&lt;p&gt;There are two main modules in Python that deals with path manipulation.
One is the &lt;code&gt;os.path&lt;/code&gt; module and the other is the &lt;code&gt;pathlib&lt;/code&gt; module.
The &lt;code&gt;pathlib&lt;/code&gt; module was added in Python 3.4, offering an object-oriented way
to handle file system paths.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;backslash-on-windows-and-forward-slash-on-os-x-and-linux&#34;&gt;Backslash on Windows and Forward Slash on OS X and Linux&lt;/h3&gt;

&lt;p&gt;On Windows, paths are written using backslashes () as the separator between
folder names. On Unix based operating system such as macOS, Linux, and BSDs,
the forward slash (/) is used as the path separator. Joining paths can be
a headache if your code needs to work on different platforms.&lt;/p&gt;

&lt;p&gt;Fortunately, Python provides easy ways to handle this. We will showcase
how to deal with this with both &lt;code&gt;os.path.join&lt;/code&gt; and &lt;code&gt;pathlib.Path.joinpath&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;os.path.join&lt;/code&gt; on Windows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import os

&amp;gt;&amp;gt;&amp;gt; os.path.join(&#39;usr&#39;, &#39;bin&#39;, &#39;spam&#39;)
&#39;usr\\bin\\spam&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And using &lt;code&gt;pathlib&lt;/code&gt; on *nix:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from pathlib import Path

&amp;gt;&amp;gt;&amp;gt; print(Path(&#39;usr&#39;).joinpath(&#39;bin&#39;).joinpath(&#39;spam&#39;))
usr/bin/spam
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;pathlib&lt;/code&gt; also provides a shortcut to joinpath using the &lt;code&gt;/&lt;/code&gt; operator:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from pathlib import Path

&amp;gt;&amp;gt;&amp;gt; print(Path(&#39;usr&#39;) / &#39;bin&#39; / &#39;spam&#39;)
usr/bin/spam
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice the path separator is different between Windows and Unix based operating
system, that&amp;rsquo;s why you want to use one of the above methods instead of
adding strings together to join paths together.&lt;/p&gt;

&lt;p&gt;Joining paths is helpful if you need to create different file paths under
the same directory.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;os.path.join&lt;/code&gt; on Windows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; my_files = [&#39;accounts.txt&#39;, &#39;details.csv&#39;, &#39;invite.docx&#39;]

&amp;gt;&amp;gt;&amp;gt; for filename in my_files:
&amp;gt;&amp;gt;&amp;gt;     print(os.path.join(&#39;C:\\Users\\asweigart&#39;, filename))
C:\Users\asweigart\accounts.txt
C:\Users\asweigart\details.csv
C:\Users\asweigart\invite.docx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using &lt;code&gt;pathlib&lt;/code&gt; on *nix:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; my_files = [&#39;accounts.txt&#39;, &#39;details.csv&#39;, &#39;invite.docx&#39;]
&amp;gt;&amp;gt;&amp;gt; home = Path.home()
&amp;gt;&amp;gt;&amp;gt; for filename in my_files:
&amp;gt;&amp;gt;&amp;gt;     print(home / filename)
/home/asweigart/accounts.txt
/home/asweigart/details.csv
/home/asweigart/invite.docx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-current-working-directory&#34;&gt;The Current Working Directory&lt;/h3&gt;

&lt;p&gt;Using &lt;code&gt;os&lt;/code&gt; on Windows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import os

&amp;gt;&amp;gt;&amp;gt; os.getcwd()
&#39;C:\\Python34&#39;
&amp;gt;&amp;gt;&amp;gt; os.chdir(&#39;C:\\Windows\\System32&#39;)

&amp;gt;&amp;gt;&amp;gt; os.getcwd()
&#39;C:\\Windows\\System32&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using &lt;code&gt;pathlib&lt;/code&gt; on *nix:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from pathlib import Path
&amp;gt;&amp;gt;&amp;gt; from os import chdir

&amp;gt;&amp;gt;&amp;gt; print(Path.cwd())
/home/asweigart

&amp;gt;&amp;gt;&amp;gt; chdir(&#39;/usr/lib/python3.6&#39;)
&amp;gt;&amp;gt;&amp;gt; print(Path.cwd())
/usr/lib/python3.6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;creating-new-folders&#34;&gt;Creating New Folders&lt;/h3&gt;

&lt;p&gt;Using &lt;code&gt;os&lt;/code&gt; on Windows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import os
&amp;gt;&amp;gt;&amp;gt; os.makedirs(&#39;C:\\delicious\\walnut\\waffles&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using &lt;code&gt;pathlib&lt;/code&gt; on *nix:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from pathlib import Path
&amp;gt;&amp;gt;&amp;gt; cwd = Path.cwd()
&amp;gt;&amp;gt;&amp;gt; (cwd / &#39;delicious&#39; / &#39;walnut&#39; / &#39;waffles&#39;).mkdir()
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
  File &amp;quot;/usr/lib/python3.6/pathlib.py&amp;quot;, line 1226, in mkdir
    self._accessor.mkdir(self, mode)
  File &amp;quot;/usr/lib/python3.6/pathlib.py&amp;quot;, line 387, in wrapped
    return strfunc(str(pathobj), *args)
FileNotFoundError: [Errno 2] No such file or directory: &#39;/home/asweigart/delicious/walnut/waffles&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Oh no, we got a nasty error! The reason is that the &amp;lsquo;delicious&amp;rsquo; directory does
not exist, so we cannot make the &amp;lsquo;walnut&amp;rsquo; and the &amp;lsquo;waffles&amp;rsquo; directories under
it. To fix this, do:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from pathlib import Path
&amp;gt;&amp;gt;&amp;gt; cwd = Path.cwd()
&amp;gt;&amp;gt;&amp;gt; (cwd / &#39;delicious&#39; / &#39;walnut&#39; / &#39;waffles&#39;).mkdir(parents=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And all is good :)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;absolute-vs-relative-paths&#34;&gt;Absolute vs. Relative Paths&lt;/h3&gt;

&lt;p&gt;There are two ways to specify a file path.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An absolute path, which always begins with the root folder&lt;/li&gt;
&lt;li&gt;A relative path, which is relative to the program’s current working directory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are also the dot (.) and dot-dot (..) folders. These are not real folders but special names that can be used in a path. A single period (“dot”) for a folder name is shorthand for “this directory.” Two periods (“dot-dot”) means “the parent folder.”&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;handling-absolute-and-relative-paths&#34;&gt;Handling Absolute and Relative Paths&lt;/h3&gt;

&lt;p&gt;To see if a path is an absolute path:&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;os.path&lt;/code&gt; on *nix:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import os
&amp;gt;&amp;gt;&amp;gt; os.path.isabs(&#39;/&#39;)
True
&amp;gt;&amp;gt;&amp;gt; os.path.isabs(&#39;..&#39;)
False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using &lt;code&gt;pathlib&lt;/code&gt; on *nix:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from pathlib import Path
&amp;gt;&amp;gt;&amp;gt; Path(&#39;/&#39;).is_absolute()
True
&amp;gt;&amp;gt;&amp;gt; Path(&#39;..&#39;).is_absolute()
False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can extract an absolute path with both &lt;code&gt;os.path&lt;/code&gt; and &lt;code&gt;pathlib&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;os.path&lt;/code&gt; on *nix:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import os
&amp;gt;&amp;gt;&amp;gt; os.getcwd()
&#39;/home/asweigart&#39;
&amp;gt;&amp;gt;&amp;gt; os.path.abspath(&#39;..&#39;)
&#39;/home&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using &lt;code&gt;pathlib&lt;/code&gt; on *nix:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pathlib import Path
print(Path.cwd())
/home/asweigart
print(Path(&#39;..&#39;).resolve())
/home
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can get a relative path from a starting path to another path.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;os.path&lt;/code&gt; on *nix:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import os
&amp;gt;&amp;gt;&amp;gt; os.path.relpath(&#39;/etc/passwd&#39;, &#39;/&#39;)
&#39;etc/passwd&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using &lt;code&gt;pathlib&lt;/code&gt; on *nix:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from pathlib import Path
&amp;gt;&amp;gt;&amp;gt; print(Path(&#39;/etc/passwd&#39;).relative_to(&#39;/&#39;))
etc/passwd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;checking-path-validity&#34;&gt;Checking Path Validity&lt;/h3&gt;

&lt;p&gt;Checking if a file/directory exists:&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;os.path&lt;/code&gt; on *nix:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os
&amp;gt;&amp;gt;&amp;gt; os.path.exists(&#39;.&#39;)
True
&amp;gt;&amp;gt;&amp;gt; os.path.exists(&#39;setup.py&#39;)
True
&amp;gt;&amp;gt;&amp;gt; os.path.exists(&#39;/etc&#39;)
True
&amp;gt;&amp;gt;&amp;gt; os.path.exists(&#39;nonexistentfile&#39;)
False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using &lt;code&gt;pathlib&lt;/code&gt; on *nix:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pathlib import Path
&amp;gt;&amp;gt;&amp;gt; Path(&#39;.&#39;).exists()
True
&amp;gt;&amp;gt;&amp;gt; Path(&#39;setup.py&#39;).exists()
True
&amp;gt;&amp;gt;&amp;gt; Path(&#39;/etc&#39;).exists()
True
&amp;gt;&amp;gt;&amp;gt; Path(&#39;nonexistentfile&#39;).exists()
False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Checking if a path is a file:&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;os.path&lt;/code&gt; on *nix:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import os
&amp;gt;&amp;gt;&amp;gt; os.path.isfile(&#39;setup.py&#39;)
True
&amp;gt;&amp;gt;&amp;gt; os.path.isfile(&#39;/home&#39;)
False
&amp;gt;&amp;gt;&amp;gt; os.path.isfile(&#39;nonexistentfile&#39;)
False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using &lt;code&gt;pathlib&lt;/code&gt; on *nix:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from pathlib import Path
&amp;gt;&amp;gt;&amp;gt; Path(&#39;setup.py&#39;).is_file()
True
&amp;gt;&amp;gt;&amp;gt; Path(&#39;/home&#39;).is_file()
False
&amp;gt;&amp;gt;&amp;gt; Path(&#39;nonexistentfile&#39;).is_file()
False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Checking if a path is a directory:&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;os.path&lt;/code&gt; on *nix:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import os
&amp;gt;&amp;gt;&amp;gt; os.path.isdir(&#39;/&#39;)
True
&amp;gt;&amp;gt;&amp;gt; os.path.isdir(&#39;setup.py&#39;)
False
&amp;gt;&amp;gt;&amp;gt; os.path.isdir(&#39;/spam&#39;)
False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using &lt;code&gt;pathlib&lt;/code&gt; on *nix:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from pathlib import Path
&amp;gt;&amp;gt;&amp;gt; Path(&#39;/&#39;).is_dir()
True
&amp;gt;&amp;gt;&amp;gt; Path(&#39;setup.py&#39;).is_dir()
False
&amp;gt;&amp;gt;&amp;gt; Path(&#39;/spam&#39;).is_dir()
False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;finding-file-sizes-and-folder-contents&#34;&gt;Finding File Sizes and Folder Contents&lt;/h3&gt;

&lt;p&gt;Getting a file&amp;rsquo;s size in bytes:&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;os.path&lt;/code&gt; on Windows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import os
&amp;gt;&amp;gt;&amp;gt; os.path.getsize(&#39;C:\\Windows\\System32\\calc.exe&#39;)
776192
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using &lt;code&gt;pathlib&lt;/code&gt; on *nix:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from pathlib import Path
&amp;gt;&amp;gt;&amp;gt; stat = Path(&#39;/bin/python3.6&#39;).stat()
&amp;gt;&amp;gt;&amp;gt; print(stat) # stat contains some other information about the file as well
os.stat_result(st_mode=33261, st_ino=141087, st_dev=2051, st_nlink=2, st_uid=0,
--snip--
st_gid=0, st_size=10024, st_atime=1517725562, st_mtime=1515119809, st_ctime=1517261276)
&amp;gt;&amp;gt;&amp;gt; print(stat.st_size) # size in bytes
10024
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Listing directory contents using &lt;code&gt;os.listdir&lt;/code&gt; on Windows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import os
&amp;gt;&amp;gt;&amp;gt; os.listdir(&#39;C:\\Windows\\System32&#39;)
[&#39;0409&#39;, &#39;12520437.cpx&#39;, &#39;12520850.cpx&#39;, &#39;5U877.ax&#39;, &#39;aaclient.dll&#39;,
--snip--
&#39;xwtpdui.dll&#39;, &#39;xwtpw32.dll&#39;, &#39;zh-CN&#39;, &#39;zh-HK&#39;, &#39;zh-TW&#39;, &#39;zipfldr.dll&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Listing directory contents using &lt;code&gt;pathlib&lt;/code&gt; on *nix:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from pathlib import Path
&amp;gt;&amp;gt;&amp;gt; for f in Path(&#39;/usr/bin&#39;).iterdir():
&amp;gt;&amp;gt;&amp;gt;     print(f)
...
/usr/bin/tiff2rgba
/usr/bin/iconv
/usr/bin/ldd
/usr/bin/cache_restore
/usr/bin/udiskie
/usr/bin/unix2dos
/usr/bin/t1reencode
/usr/bin/epstopdf
/usr/bin/idle3
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To find the total size of all the files in this directory:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: Directories themselves also have a size! So you might want to
check for whether a path is a file or directory using the methods in the methods discussed in the above section!&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;os.path.getsize()&lt;/code&gt; and &lt;code&gt;os.listdir()&lt;/code&gt; together on Windows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import os
&amp;gt;&amp;gt;&amp;gt; total_size = 0

&amp;gt;&amp;gt;&amp;gt; for filename in os.listdir(&#39;C:\\Windows\\System32&#39;):
      total_size = total_size + os.path.getsize(os.path.join(&#39;C:\\Windows\\System32&#39;, filename))

&amp;gt;&amp;gt;&amp;gt; print(total_size)
1117846456
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using &lt;code&gt;pathlib&lt;/code&gt; on *nix:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from pathlib import Path
&amp;gt;&amp;gt;&amp;gt; total_size = 0

&amp;gt;&amp;gt;&amp;gt; for sub_path in Path(&#39;/usr/bin&#39;).iterdir():
...     total_size += sub_path.stat().st_size
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; print(total_size)
1903178911
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;copying-files-and-folders&#34;&gt;Copying Files and Folders&lt;/h3&gt;

&lt;p&gt;The shutil module provides functions for copying files, as well as entire folders.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import shutil, os

&amp;gt;&amp;gt;&amp;gt; os.chdir(&#39;C:\\&#39;)

&amp;gt;&amp;gt;&amp;gt; shutil.copy(&#39;C:\\spam.txt&#39;, &#39;C:\\delicious&#39;)
   &#39;C:\\delicious\\spam.txt&#39;

&amp;gt;&amp;gt;&amp;gt; shutil.copy(&#39;eggs.txt&#39;, &#39;C:\\delicious\\eggs2.txt&#39;)
   &#39;C:\\delicious\\eggs2.txt&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While shutil.copy() will copy a single file, shutil.copytree() will copy an entire folder and every folder and file contained in it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import shutil, os

&amp;gt;&amp;gt;&amp;gt; os.chdir(&#39;C:\\&#39;)

&amp;gt;&amp;gt;&amp;gt; shutil.copytree(&#39;C:\\bacon&#39;, &#39;C:\\bacon_backup&#39;)
&#39;C:\\bacon_backup&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;moving-and-renaming-files-and-folders&#34;&gt;Moving and Renaming Files and Folders&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import shutil
&amp;gt;&amp;gt;&amp;gt; shutil.move(&#39;C:\\bacon.txt&#39;, &#39;C:\\eggs&#39;)
&#39;C:\\eggs\\bacon.txt&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The destination path can also specify a filename. In the following example, the source file is moved and renamed:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; shutil.move(&#39;C:\\bacon.txt&#39;, &#39;C:\\eggs\\new_bacon.txt&#39;)
&#39;C:\\eggs\\new_bacon.txt&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If there is no eggs folder, then move() will rename bacon.txt to a file named eggs.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; shutil.move(&#39;C:\\bacon.txt&#39;, &#39;C:\\eggs&#39;)
&#39;C:\\eggs&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;permanently-deleting-files-and-folders&#34;&gt;Permanently Deleting Files and Folders&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Calling os.unlink(path) or Path.unlink() will delete the file at path.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Calling os.rmdir(path) or Path.rmdir() will delete the folder at path. This folder must be empty of any files or folders.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Calling shutil.rmtree(path) will remove the folder at path, and all files and folders it contains will also be deleted.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;safe-deletes-with-the-send2trash-module&#34;&gt;Safe Deletes with the send2trash Module&lt;/h3&gt;

&lt;p&gt;You can install this module by running pip install send2trash from a Terminal window.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import send2trash

&amp;gt;&amp;gt;&amp;gt; with open(&#39;bacon.txt&#39;, &#39;a&#39;) as bacon_file: # creates the file
...     bacon_file.write(&#39;Bacon is not a vegetable.&#39;)
25

&amp;gt;&amp;gt;&amp;gt; send2trash.send2trash(&#39;bacon.txt&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;walking-a-directory-tree&#34;&gt;Walking a Directory Tree&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import os
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; for folder_name, subfolders, filenames in os.walk(&#39;C:\\delicious&#39;):
&amp;gt;&amp;gt;&amp;gt;     print(&#39;The current folder is {}&#39;.format(folder_name))
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt;     for subfolder in subfolders:
&amp;gt;&amp;gt;&amp;gt;         print(&#39;SUBFOLDER OF {}: {}&#39;.format(folder_name, subfolder))
&amp;gt;&amp;gt;&amp;gt;     for filename in filenames:
&amp;gt;&amp;gt;&amp;gt;         print(&#39;FILE INSIDE {}: {}&#39;.format(folder_name, filename))
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt;     print(&#39;&#39;)
The current folder is C:\delicious
SUBFOLDER OF C:\delicious: cats
SUBFOLDER OF C:\delicious: walnut
FILE INSIDE C:\delicious: spam.txt

The current folder is C:\delicious\cats
FILE INSIDE C:\delicious\cats: catnames.txt
FILE INSIDE C:\delicious\cats: zophie.jpg

The current folder is C:\delicious\walnut
SUBFOLDER OF C:\delicious\walnut: waffles

The current folder is C:\delicious\walnut\waffles
FILE INSIDE C:\delicious\walnut\waffles: butter.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pathlib&lt;/code&gt; provides a lot more functionality than the ones listed above,
like getting file name, getting file extension, reading/writing a file without
manually opening it, etc. Check out the
&lt;a href=&#34;https://docs.python.org/3/library/pathlib.html&#34; target=&#34;_blank&#34;&gt;official documentation&lt;/a&gt;
if you want to know more!&lt;/p&gt;

&lt;h2 id=&#34;reading-and-writing-files&#34;&gt;Reading and Writing Files&lt;/h2&gt;

&lt;h3 id=&#34;the-file-reading-writing-process&#34;&gt;The File Reading/Writing Process&lt;/h3&gt;

&lt;p&gt;To read/write to a file in Python, you will want to use the &lt;code&gt;with&lt;/code&gt;
statement, which will close the file for you after you are done.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;opening-and-reading-files-with-the-open-function&#34;&gt;Opening and reading files with the open() function&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; with open(&#39;C:\\Users\\your_home_folder\\hello.txt&#39;) as hello_file:
...     hello_content = hello_file.read()
&amp;gt;&amp;gt;&amp;gt; hello_content
&#39;Hello World!&#39;

&amp;gt;&amp;gt;&amp;gt; # Alternatively, you can use the *readlines()* method to get a list of string values from the file, one string for each line of text:

&amp;gt;&amp;gt;&amp;gt; with open(&#39;sonnet29.txt&#39;) as sonnet_file:
...     sonnet_file.readlines()
[When, in disgrace with fortune and men&#39;s eyes,\n&#39;, &#39; I all alone beweep my
outcast state,\n&#39;, And trouble deaf heaven with my bootless cries,\n&#39;, And
look upon myself and curse my fate,&#39;]

&amp;gt;&amp;gt;&amp;gt; # You can also iterate through the file line by line:
&amp;gt;&amp;gt;&amp;gt; with open(&#39;sonnet29.txt&#39;) as sonnet_file:
...     for line in sonnet_file: # note the new line character will be included in the line
...         print(line, end=&#39;&#39;)

When, in disgrace with fortune and men&#39;s eyes,
I all alone beweep my outcast state,
And trouble deaf heaven with my bootless cries,
And look upon myself and curse my fate,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;writing-to-files&#34;&gt;Writing to Files&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; with open(&#39;bacon.txt&#39;, &#39;w&#39;) as bacon_file:
...     bacon_file.write(&#39;Hello world!\n&#39;)
13

&amp;gt;&amp;gt;&amp;gt; with open(&#39;bacon.txt&#39;, &#39;a&#39;) as bacon_file:
...     bacon_file.write(&#39;Bacon is not a vegetable.&#39;)
25

&amp;gt;&amp;gt;&amp;gt; with open(&#39;bacon.txt&#39;) as bacon_file:
...     content = bacon_file.read()

&amp;gt;&amp;gt;&amp;gt; print(content)
Hello world!
Bacon is not a vegetable.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;saving-variables-with-the-shelve-module&#34;&gt;Saving Variables with the shelve Module&lt;/h3&gt;

&lt;p&gt;To save variables:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import shelve

&amp;gt;&amp;gt;&amp;gt; cats = [&#39;Zophie&#39;, &#39;Pooka&#39;, &#39;Simon&#39;]
&amp;gt;&amp;gt;&amp;gt; with shelve.open(&#39;mydata&#39;) as shelf_file:
...     shelf_file[&#39;cats&#39;] = cats
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To open and read variables:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; with shelve.open(&#39;mydata&#39;) as shelf_file:
...     print(type(shelf_file))
...     print(shelf_file[&#39;cats&#39;])
&amp;lt;class &#39;shelve.DbfilenameShelf&#39;&amp;gt;
[&#39;Zophie&#39;, &#39;Pooka&#39;, &#39;Simon&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just like dictionaries, shelf values have keys() and values() methods that will return list-like values of the keys and values in the shelf. Since these methods return list-like values instead of true lists, you should pass them to the list() function to get them in list form.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; with shelve.open(&#39;mydata&#39;) as shelf_file:
...     print(list(shelf_file.keys()))
...     print(list(shelf_file.values()))
[&#39;cats&#39;]
[[&#39;Zophie&#39;, &#39;Pooka&#39;, &#39;Simon&#39;]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;saving-variables-with-the-pprint-pformat-function&#34;&gt;Saving Variables with the pprint.pformat() Function&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pprint

&amp;gt;&amp;gt;&amp;gt; cats = [{&#39;name&#39;: &#39;Zophie&#39;, &#39;desc&#39;: &#39;chubby&#39;}, {&#39;name&#39;: &#39;Pooka&#39;, &#39;desc&#39;: &#39;fluffy&#39;}]

&amp;gt;&amp;gt;&amp;gt; pprint.pformat(cats)
&amp;quot;[{&#39;desc&#39;: &#39;chubby&#39;, &#39;name&#39;: &#39;Zophie&#39;}, {&#39;desc&#39;: &#39;fluffy&#39;, &#39;name&#39;: &#39;Pooka&#39;}]&amp;quot;

&amp;gt;&amp;gt;&amp;gt; with open(&#39;myCats.py&#39;, &#39;w&#39;) as file_obj:
...     file_obj.write(&#39;cats = {}\n&#39;.format(pprint.pformat(cats)))
83
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;reading-zip-files&#34;&gt;Reading ZIP Files&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import zipfile, os

&amp;gt;&amp;gt;&amp;gt; os.chdir(&#39;C:\\&#39;)    # move to the folder with example.zip
&amp;gt;&amp;gt;&amp;gt; with zipfile.ZipFile(&#39;example.zip&#39;) as example_zip:
...     print(example_zip.namelist())
...     spam_info = example_zip.getinfo(&#39;spam.txt&#39;)
...     print(spam_info.file_size)
...     print(spam_info.compress_size)
...     print(&#39;Compressed file is %sx smaller!&#39; % (round(spam_info.file_size / spam_info.compress_size, 2)))

[&#39;spam.txt&#39;, &#39;cats/&#39;, &#39;cats/catnames.txt&#39;, &#39;cats/zophie.jpg&#39;]
13908
3828
&#39;Compressed file is 3.63x smaller!&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;extracting-from-zip-files&#34;&gt;Extracting from ZIP Files&lt;/h3&gt;

&lt;p&gt;The extractall() method for ZipFile objects extracts all the files and folders from a ZIP file into the current working directory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import zipfile, os

&amp;gt;&amp;gt;&amp;gt; os.chdir(&#39;C:\\&#39;)    # move to the folder with example.zip

&amp;gt;&amp;gt;&amp;gt; with zipfile.ZipFile(&#39;example.zip&#39;) as example_zip:
...     example_zip.extractall()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The extract() method for ZipFile objects will extract a single file from the ZIP file. Continue the interactive shell example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; with zipfile.ZipFile(&#39;example.zip&#39;) as example_zip:
...     print(example_zip.extract(&#39;spam.txt&#39;))
...     print(example_zip.extract(&#39;spam.txt&#39;, &#39;C:\\some\\new\\folders&#39;))
&#39;C:\\spam.txt&#39;
&#39;C:\\some\\new\\folders\\spam.txt&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;creating-and-adding-to-zip-files&#34;&gt;Creating and Adding to ZIP Files&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import zipfile

&amp;gt;&amp;gt;&amp;gt; with zipfile.ZipFile(&#39;new.zip&#39;, &#39;w&#39;) as new_zip:
...     new_zip.write(&#39;spam.txt&#39;, compress_type=zipfile.ZIP_DEFLATED)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code will create a new ZIP file named new.zip that has the compressed contents of spam.txt.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;json-yaml-and-configuration-files&#34;&gt;JSON, YAML and configuration files&lt;/h2&gt;

&lt;h3 id=&#34;json&#34;&gt;JSON&lt;/h3&gt;

&lt;p&gt;Open a JSON file with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import json
with open(&amp;quot;filename.json&amp;quot;, &amp;quot;r&amp;quot;) as f:
    content = json.loads(f.read())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Write a JSON file with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import json

content = {&amp;quot;name&amp;quot;: &amp;quot;Joe&amp;quot;, &amp;quot;age&amp;quot;: 20}
with open(&amp;quot;filename.json&amp;quot;, &amp;quot;w&amp;quot;) as f:
    f.write(json.dumps(content, indent=2))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;yaml&#34;&gt;YAML&lt;/h3&gt;

&lt;p&gt;Compared to JSON, YAML allows a much better humain maintainance and gives ability to add comments.
It is a convinient choice for configuration files where human will have to edit.&lt;/p&gt;

&lt;p&gt;There are two main librairies allowing to access to YAML files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/PyYAML&#34; target=&#34;_blank&#34;&gt;PyYaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/ruamel.yaml&#34; target=&#34;_blank&#34;&gt;Ruamel.yaml&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Install them using &lt;code&gt;pip install&lt;/code&gt; in your virtual environment.&lt;/p&gt;

&lt;p&gt;The first one it easier to use but the second one, Ruamel, implements much better the YAML
specification, and allow for example to modify a YAML content without altering comments.&lt;/p&gt;

&lt;p&gt;Open a YAML file with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from ruamel.yaml import YAML

with open(&amp;quot;filename.yaml&amp;quot;) as f:
    yaml=YAML()
    yaml.load(f)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;anyconfig&#34;&gt;Anyconfig&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://pypi.python.org/pypi/anyconfig&#34; target=&#34;_blank&#34;&gt;Anyconfig&lt;/a&gt; is a very handy package allowing to abstract completly the underlying configuration file format. It allows to load a Python dictionary from JSON, YAML, TOML, and so on.&lt;/p&gt;

&lt;p&gt;Install it with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install anyconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import anyconfig

conf1 = anyconfig.load(&amp;quot;/path/to/foo/conf.d/a.yml&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;debugging&#34;&gt;Debugging&lt;/h2&gt;

&lt;h3 id=&#34;raising-exceptions&#34;&gt;Raising Exceptions&lt;/h3&gt;

&lt;p&gt;Exceptions are raised with a raise statement. In code, a raise statement consists of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The raise keyword&lt;/li&gt;
&lt;li&gt;A call to the Exception() function&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A string with a helpful error message passed to the Exception() function&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; raise Exception(&#39;This is the error message.&#39;)
Traceback (most recent call last):
File &amp;quot;&amp;lt;pyshell#191&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
raise Exception(&#39;This is the error message.&#39;)
Exception: This is the error message.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Often it’s the code that calls the function, not the function itself, that knows how to handle an expection. So you will commonly see a raise statement inside a function and the try and except statements in the code calling the function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def box_print(symbol, width, height):
    if len(symbol) != 1:
      raise Exception(&#39;Symbol must be a single character string.&#39;)
    if width &amp;lt;= 2:
      raise Exception(&#39;Width must be greater than 2.&#39;)
    if height &amp;lt;= 2:
      raise Exception(&#39;Height must be greater than 2.&#39;)
    print(symbol * width)
    for i in range(height - 2):
        print(symbol + (&#39; &#39; * (width - 2)) + symbol)
    print(symbol * width)
for sym, w, h in ((&#39;*&#39;, 4, 4), (&#39;O&#39;, 20, 5), (&#39;x&#39;, 1, 3), (&#39;ZZ&#39;, 3, 3)):
    try:
        box_print(sym, w, h)
    except Exception as err:
        print(&#39;An exception happened: &#39; + str(err))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;getting-the-traceback-as-a-string&#34;&gt;Getting the Traceback as a String&lt;/h3&gt;

&lt;p&gt;The traceback is displayed by Python whenever a raised exception goes unhandled. But can also obtain it as a string by calling traceback.format_exc(). This function is useful if you want the information from an exception’s traceback but also want an except statement to gracefully handle the exception. You will need to import Python’s traceback module before calling this function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import traceback

&amp;gt;&amp;gt;&amp;gt; try:
&amp;gt;&amp;gt;&amp;gt;      raise Exception(&#39;This is the error message.&#39;)
&amp;gt;&amp;gt;&amp;gt; except:
&amp;gt;&amp;gt;&amp;gt;      with open(&#39;errorInfo.txt&#39;, &#39;w&#39;) as error_file:
&amp;gt;&amp;gt;&amp;gt;          error_file.write(traceback.format_exc())
&amp;gt;&amp;gt;&amp;gt;      print(&#39;The traceback info was written to errorInfo.txt.&#39;)
116
The traceback info was written to errorInfo.txt.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The 116 is the return value from the write() method, since 116 characters were written to the file. The traceback text was written to errorInfo.txt.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Traceback (most recent call last):
  File &amp;quot;&amp;lt;pyshell#28&amp;gt;&amp;quot;, line 2, in &amp;lt;module&amp;gt;
Exception: This is the error message.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;assertions&#34;&gt;Assertions&lt;/h3&gt;

&lt;p&gt;An assertion is a sanity check to make sure your code isn’t doing something obviously wrong. These sanity checks are performed by assert statements. If the sanity check fails, then an AssertionError exception is raised. In code, an assert statement consists of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The assert keyword&lt;/li&gt;
&lt;li&gt;A condition (that is, an expression that evaluates to True or False)&lt;/li&gt;
&lt;li&gt;A comma&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A string to display when the condition is False&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; pod_bay_door_status = &#39;open&#39;

&amp;gt;&amp;gt;&amp;gt; assert pod_bay_door_status == &#39;open&#39;, &#39;The pod bay doors need to be &amp;quot;open&amp;quot;.&#39;

&amp;gt;&amp;gt;&amp;gt; pod_bay_door_status = &#39;I\&#39;m sorry, Dave. I\&#39;m afraid I can\&#39;t do that.&#39;

&amp;gt;&amp;gt;&amp;gt; assert pod_bay_door_status == &#39;open&#39;, &#39;The pod bay doors need to be &amp;quot;open&amp;quot;.&#39;

Traceback (most recent call last):
File &amp;quot;&amp;lt;pyshell#10&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
assert pod_bay_door_status == &#39;open&#39;, &#39;The pod bay doors need to be &amp;quot;open&amp;quot;.&#39;
AssertionError: The pod bay doors need to be &amp;quot;open&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In plain English, an assert statement says, “I assert that this condition holds true, and if not, there is a bug somewhere in the program.” Unlike exceptions, your code should not handle assert statements with try and except; if an assert fails, your program should crash. By failing fast like this, you shorten the time between the original cause of the bug and when you first notice the bug. This will reduce the amount of code you will have to check before finding the code that’s causing the bug.&lt;/p&gt;

&lt;p&gt;Disabling Assertions&lt;/p&gt;

&lt;p&gt;Assertions can be disabled by passing the -O option when running Python.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;logging&#34;&gt;Logging&lt;/h3&gt;

&lt;p&gt;To enable the logging module to display log messages on your screen as your program runs, copy the following to the top of your program (but under the #! python shebang line):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import logging

logging.basicConfig(level=logging.DEBUG, format=&#39; %(asctime)s - %(levelname)s- %(message)s&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Say you wrote a function to calculate the factorial of a number. In mathematics, factorial 4 is 1 × 2 × 3 × 4, or 24. Factorial 7 is 1 × 2 × 3 × 4 × 5 × 6 × 7, or 5,040. Open a new file editor window and enter the following code. It has a bug in it, but you will also enter several log messages to help yourself figure out what is going wrong. Save the program as factorialLog.py.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import logging
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; logging.basicConfig(level=logging.DEBUG, format=&#39; %(asctime)s - %(levelname)s- %(message)s&#39;)
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; logging.debug(&#39;Start of program&#39;)
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; def factorial(n):
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt;     logging.debug(&#39;Start of factorial(%s)&#39; % (n))
&amp;gt;&amp;gt;&amp;gt;     total = 1
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt;     for i in range(1, n + 1):
&amp;gt;&amp;gt;&amp;gt;         total *= i
&amp;gt;&amp;gt;&amp;gt;         logging.debug(&#39;i is &#39; + str(i) + &#39;, total is &#39; + str(total))
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt;     logging.debug(&#39;End of factorial(%s)&#39; % (n))
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt;     return total
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; print(factorial(5))
&amp;gt;&amp;gt;&amp;gt; logging.debug(&#39;End of program&#39;)
2015-05-23 16:20:12,664 - DEBUG - Start of program
2015-05-23 16:20:12,664 - DEBUG - Start of factorial(5)
2015-05-23 16:20:12,665 - DEBUG - i is 0, total is 0
2015-05-23 16:20:12,668 - DEBUG - i is 1, total is 0
2015-05-23 16:20:12,670 - DEBUG - i is 2, total is 0
2015-05-23 16:20:12,673 - DEBUG - i is 3, total is 0
2015-05-23 16:20:12,675 - DEBUG - i is 4, total is 0
2015-05-23 16:20:12,678 - DEBUG - i is 5, total is 0
2015-05-23 16:20:12,680 - DEBUG - End of factorial(5)
0
2015-05-23 16:20:12,684 - DEBUG - End of program
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;logging-levels&#34;&gt;Logging Levels&lt;/h3&gt;

&lt;p&gt;Logging levels provide a way to categorize your log messages by importance. There are five logging levels, described in Table 10-1 from least to most important. Messages can be logged at each level using a different logging function.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Level&lt;/th&gt;
&lt;th&gt;Logging Function&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;logging.debug()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The lowest level. Used for small details. Usually you care about these messages only when diagnosing problems.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;INFO&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;logging.info()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Used to record information on general events in your program or confirm that things are working at their point in the program.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;WARNING&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;logging.warning()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Used to indicate a potential problem that doesn’t prevent the program from working but might do so in the future.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ERROR&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;logging.error()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Used to record an error that caused the program to fail to do something.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;CRITICAL&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;logging.critical()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The highest level. Used to indicate a fatal error that has caused or is about to cause the program to stop running entirely.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;disabling-logging&#34;&gt;Disabling Logging&lt;/h3&gt;

&lt;p&gt;After you’ve debugged your program, you probably don’t want all these log messages cluttering the screen. The logging.disable() function disables these so that you don’t have to go into your program and remove all the logging calls by hand.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import logging

&amp;gt;&amp;gt;&amp;gt; logging.basicConfig(level=logging.INFO, format=&#39; %(asctime)s -%(levelname)s - %(message)s&#39;)

&amp;gt;&amp;gt;&amp;gt; logging.critical(&#39;Critical error! Critical error!&#39;)
2015-05-22 11:10:48,054 - CRITICAL - Critical error! Critical error!

&amp;gt;&amp;gt;&amp;gt; logging.disable(logging.CRITICAL)

&amp;gt;&amp;gt;&amp;gt; logging.critical(&#39;Critical error! Critical error!&#39;)

&amp;gt;&amp;gt;&amp;gt; logging.error(&#39;Error! Error!&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;logging-to-a-file&#34;&gt;Logging to a File&lt;/h3&gt;

&lt;p&gt;Instead of displaying the log messages to the screen, you can write them to a text file. The logging.basicConfig() function takes a filename keyword argument, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import logging

logging.basicConfig(filename=&#39;myProgramLog.txt&#39;, level=logging.DEBUG, format=&#39;%(asctime)s - %(levelname)s - %(message)s&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;lambda-functions&#34;&gt;Lambda Functions&lt;/h2&gt;

&lt;p&gt;This function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def add(x, y):
        return x + y

&amp;gt;&amp;gt;&amp;gt; add(5, 3)
8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Is equivalent to the &lt;em&gt;lambda&lt;/em&gt; function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; add = lambda x, y: x + y
&amp;gt;&amp;gt;&amp;gt; add(5, 3)
8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s not even need to bind it to a name like add before:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; (lambda x, y: x + y)(5, 3)
8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Like regular nested functions, lambdas also work as lexical closures:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def make_adder(n):
        return lambda x: x + n

&amp;gt;&amp;gt;&amp;gt; plus_3 = make_adder(3)
&amp;gt;&amp;gt;&amp;gt; plus_5 = make_adder(5)

&amp;gt;&amp;gt;&amp;gt; plus_3(4)
7
&amp;gt;&amp;gt;&amp;gt; plus_5(4)
9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: lambda can only evaluate an expression, like a single line of code.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;ternary-conditional-operator&#34;&gt;Ternary Conditional Operator&lt;/h2&gt;

&lt;p&gt;Many programming languages have a ternary operator, which define a conditional expression. The most common usage is to make a terse simple conditional assignment statement. In other words, it offers one-line code to evaluate the first expression if the condition is true, otherwise it evaluates the second expression.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;expression1&amp;gt; if &amp;lt;condition&amp;gt; else &amp;lt;expression2&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; age = 15

&amp;gt;&amp;gt;&amp;gt; print(&#39;kid&#39; if age &amp;lt; 18 else &#39;adult&#39;)
kid
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ternary operators can be chained:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; age = 15

&amp;gt;&amp;gt;&amp;gt; print(&#39;kid&#39; if age &amp;lt; 13 else &#39;teenager&#39; if age &amp;lt; 18 else &#39;adult&#39;)
teenager
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code above is equivalent to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if age &amp;lt; 18:
    if age &amp;lt; 13:
        print(&#39;kid&#39;)
    else:
        print(&#39;teenager&#39;)
else:
    print(&#39;adult&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;args-and-kwargs&#34;&gt;args and kwargs&lt;/h2&gt;

&lt;p&gt;The names &lt;code&gt;args and kwargs&lt;/code&gt; are arbitrary - the important thing are the &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;**&lt;/code&gt; operators. They can mean:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In a function declaration, &lt;code&gt;*&lt;/code&gt; means “pack all remaining positional arguments into a tuple named &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt;”, while &lt;code&gt;**&lt;/code&gt; is the same for keyword arguments (except it uses a dictionary, not a tuple).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In a function call, &lt;code&gt;*&lt;/code&gt; means “unpack tuple or list named &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; to positional arguments at this position”, while &lt;code&gt;**&lt;/code&gt; is the same for keyword arguments.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For example you can make a function that you can use to call any other function, no matter what parameters it has:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def forward(f, *args, **kwargs):
    return f(*args, **kwargs)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inside forward, args is a tuple (of all positional arguments except the first one, because we specified it - the f), kwargs is a dict. Then we call f and unpack them so they become normal arguments to f.&lt;/p&gt;

&lt;p&gt;You use &lt;code&gt;*args&lt;/code&gt; when you have an indefinite amount of positional arguments.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def fruits(*args):
&amp;gt;&amp;gt;&amp;gt;    for fruit in args:
&amp;gt;&amp;gt;&amp;gt;       print(fruit)

&amp;gt;&amp;gt;&amp;gt; fruits(&amp;quot;apples&amp;quot;, &amp;quot;bananas&amp;quot;, &amp;quot;grapes&amp;quot;)

&amp;quot;apples&amp;quot;
&amp;quot;bananas&amp;quot;
&amp;quot;grapes&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similarly, you use &lt;code&gt;**kwargs&lt;/code&gt; when you have an indefinite number of keyword arguments.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def fruit(**kwargs):
&amp;gt;&amp;gt;&amp;gt;    for key, value in kwargs.items():
&amp;gt;&amp;gt;&amp;gt;        print(&amp;quot;{0}: {1}&amp;quot;.format(key, value))

&amp;gt;&amp;gt;&amp;gt; fruit(name = &amp;quot;apple&amp;quot;, color = &amp;quot;red&amp;quot;)

name: apple
color: red
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def show(arg1, arg2, *args, kwarg1=None, kwarg2=None, **kwargs):
&amp;gt;&amp;gt;&amp;gt;   print(arg1)
&amp;gt;&amp;gt;&amp;gt;   print(arg2)
&amp;gt;&amp;gt;&amp;gt;   print(args)
&amp;gt;&amp;gt;&amp;gt;   print(kwarg1)
&amp;gt;&amp;gt;&amp;gt;   print(kwarg2)
&amp;gt;&amp;gt;&amp;gt;   print(kwargs)

&amp;gt;&amp;gt;&amp;gt; data1 = [1,2,3]
&amp;gt;&amp;gt;&amp;gt; data2 = [4,5,6]
&amp;gt;&amp;gt;&amp;gt; data3 = {&#39;a&#39;:7,&#39;b&#39;:8,&#39;c&#39;:9}

&amp;gt;&amp;gt;&amp;gt; show(*data1,*data2, kwarg1=&amp;quot;python&amp;quot;,kwarg2=&amp;quot;cheatsheet&amp;quot;,**data3)
1
2
(3, 4, 5, 6)
python
cheatsheet
{&#39;a&#39;: 7, &#39;b&#39;: 8, &#39;c&#39;: 9}

&amp;gt;&amp;gt;&amp;gt; show(*data1, *data2, **data3)
1
2
(3, 4, 5, 6)
None
None
{&#39;a&#39;: 7, &#39;b&#39;: 8, &#39;c&#39;: 9}

# If you do not specify ** for kwargs
&amp;gt;&amp;gt;&amp;gt; show(*data1, *data2, *data3)
1
2
(3, 4, 5, 6, &amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;)
None
None
{}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;things-to-remember-args&#34;&gt;Things to Remember(args)&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Functions can accept a variable number of positional arguments by using &lt;code&gt;*args&lt;/code&gt; in the def statement.&lt;/li&gt;
&lt;li&gt;You can use the items from a sequence as the positional arguments for a function with the &lt;code&gt;*&lt;/code&gt; operator.&lt;/li&gt;
&lt;li&gt;Using the &lt;code&gt;*&lt;/code&gt; operator with a generator may cause your program to run out of memory and crash.&lt;/li&gt;
&lt;li&gt;Adding new positional parameters to functions that accept &lt;code&gt;*args&lt;/code&gt; can introduce hard-to-find bugs.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;things-to-remember-kwargs&#34;&gt;Things to Remember(kwargs)&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Function arguments can be specified by position or by keyword.&lt;/li&gt;
&lt;li&gt;Keywords make it clear what the purpose of each argument is when it would be confusing with only positional arguments.&lt;/li&gt;
&lt;li&gt;Keyword arguments with default values make it easy to add new behaviors to a function, especially when the function has existing callers.&lt;/li&gt;
&lt;li&gt;Optional keyword arguments should always be passed by keyword instead of by position.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;context-manager&#34;&gt;Context Manager&lt;/h2&gt;

&lt;p&gt;While Python&amp;rsquo;s context managers are widely used, few understand the purpose behind their use. These statements, commonly used with reading and writing files, assist the application in conserving system memory and improve resource management by ensuring specific resources are only in use for certain processes.&lt;/p&gt;

&lt;h3 id=&#34;with-statement&#34;&gt;with statement&lt;/h3&gt;

&lt;p&gt;A context manager is an object that is notified when a context (a block of code) starts and ends. You commonly use one with the with statement. It takes care of the notifying.&lt;/p&gt;

&lt;p&gt;For example, file objects are context managers. When a context ends, the file object is closed automatically:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; with open(filename) as f:
&amp;gt;&amp;gt;&amp;gt;     file_contents = f.read()

# the open_file object has automatically been closed.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Anything that ends execution of the block causes the context manager&amp;rsquo;s exit method to be called. This includes exceptions, and can be useful when an error causes you to prematurely exit from an open file or connection. Exiting a script without properly closing files/connections is a bad idea, that may cause data loss or other problems. By using a context manager you can ensure that precautions are always taken to prevent damage or loss in this way.&lt;/p&gt;

&lt;h3 id=&#34;writing-your-own-contextmanager-using-generator-syntax&#34;&gt;Writing your own contextmanager using generator syntax&lt;/h3&gt;

&lt;p&gt;It is also possible to write a context manager using generator syntax thanks to the &lt;code&gt;contextlib.contextmanager&lt;/code&gt; decorator:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import contextlib
&amp;gt;&amp;gt;&amp;gt; @contextlib.contextmanager
... def context_manager(num):
...     print(&#39;Enter&#39;)
...     yield num + 1
...     print(&#39;Exit&#39;)
&amp;gt;&amp;gt;&amp;gt; with context_manager(2) as cm:
...     # the following instructions are run when the &#39;yield&#39; point of the context
...     # manager is reached.
...     # &#39;cm&#39; will have the value that was yielded
...     print(&#39;Right in the middle with cm = {}&#39;.format(cm))
Enter
Right in the middle with cm = 3
Exit

&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;main-top-level-script-environment&#34;&gt;&lt;code&gt;__main__&lt;/code&gt; Top-level script environment&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;__main__&lt;/code&gt; is the name of the scope in which top-level code executes.
A module’s &lt;strong&gt;name&lt;/strong&gt; is set equal to &lt;code&gt;__main__&lt;/code&gt; when read from standard input, a script, or from an interactive prompt.&lt;/p&gt;

&lt;p&gt;A module can discover whether or not it is running in the main scope by checking its own &lt;code&gt;__name__&lt;/code&gt;, which allows a common idiom for conditionally executing code in a module when it is run as a script or with &lt;code&gt;python -m&lt;/code&gt; but not when it is imported:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; if __name__ == &amp;quot;__main__&amp;quot;:
...     # execute only if run as a script
...     main()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For a package, the same effect can be achieved by including a &lt;strong&gt;main&lt;/strong&gt;.py module, the contents of which will be executed when the module is run with -m&lt;/p&gt;

&lt;p&gt;For example we are developing script which is designed to be used as module, we should do:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; # Python program to execute function directly
&amp;gt;&amp;gt;&amp;gt; def add(a, b):
...     return a+b
...
&amp;gt;&amp;gt;&amp;gt; add(10, 20) # we can test it by calling the function save it as calculate.py
30
&amp;gt;&amp;gt;&amp;gt; # Now if we want to use that module by importing we have to comment out our call,
&amp;gt;&amp;gt;&amp;gt; # Instead we can write like this in calculate.py
&amp;gt;&amp;gt;&amp;gt; if __name__ == &amp;quot;__main__&amp;quot;:
...     add(3, 5)
...
&amp;gt;&amp;gt;&amp;gt; import calculate
&amp;gt;&amp;gt;&amp;gt; calculate.add(3, 5)
8
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;advantages&#34;&gt;Advantages&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Every Python module has it’s &lt;code&gt;__name__&lt;/code&gt; defined and if this is &lt;code&gt;__main__&lt;/code&gt;, it implies that the module is being run standalone by the user and we can do corresponding appropriate actions.&lt;/li&gt;
&lt;li&gt;If you import this script as a module in another script, the &lt;strong&gt;name&lt;/strong&gt; is set to the name of the script/module.&lt;/li&gt;
&lt;li&gt;Python files can act as either reusable modules, or as standalone programs.&lt;/li&gt;
&lt;li&gt;if &lt;code&gt;__name__ == “main”:&lt;/code&gt; is used to execute some code only if the file was run directly, and not imported.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;setup-py&#34;&gt;setup.py&lt;/h2&gt;

&lt;p&gt;The setup script is the centre of all activity in building, distributing, and installing modules using the Distutils. The main purpose of the setup script is to describe your module distribution to the Distutils, so that the various commands that operate on your modules do the right thing.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;setup.py&lt;/code&gt; file is at the heart of a Python project. It describes all of the metadata about your project. There a quite a few fields you can add to a project to give it a rich set of metadata describing the project. However, there are only three required fields: name, version, and packages. The name field must be unique if you wish to publish your package on the Python Package Index (PyPI). The version field keeps track of different releases of the project. The packages field describes where you’ve put the Python source code within your project.&lt;/p&gt;

&lt;p&gt;This allows you to easily install Python packages. Often it&amp;rsquo;s enough to write:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python setup.py install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and module will install itself.&lt;/p&gt;

&lt;p&gt;Our initial setup.py will also include information about the license and will re-use the README.txt file for the long_description field. This will look like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from distutils.core import setup
&amp;gt;&amp;gt;&amp;gt; setup(
...    name=&#39;pythonCheatsheet&#39;,
...    version=&#39;0.1&#39;,
...    packages=[&#39;pipenv&#39;,],
...    license=&#39;MIT&#39;,
...    long_description=open(&#39;README.txt&#39;).read(),
... )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Find more information visit &lt;a href=&#34;http://docs.python.org/install/index.html&#34; target=&#34;_blank&#34;&gt;http://docs.python.org/install/index.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;dataclasses&#34;&gt;Dataclasses&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Dataclasses&lt;/code&gt; are python classes but are suited for storing data objects.
This module provides a decorator and functions for automatically adding generated special methods such as &lt;code&gt;__init__()&lt;/code&gt; and &lt;code&gt;__repr__()&lt;/code&gt; to user-defined classes.&lt;/p&gt;

&lt;h3 id=&#34;features&#34;&gt;Features&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;They store data and represent a certain data type. Ex: A number. For people familiar with ORMs, a model instance is a data object. It represents a specific kind of entity. It holds attributes that define or represent the entity.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;They can be compared to other objects of the same type. Ex: A number can be greater than, less than, or equal to another number.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Python 3.7 provides a decorator dataclass that is used to convert a class into a dataclass.&lt;/p&gt;

&lt;p&gt;python 2.7&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; class Number:
...     def __init__(self, val):
...         self.val = val
...
&amp;gt;&amp;gt;&amp;gt; obj = Number(2)
&amp;gt;&amp;gt;&amp;gt; obj.val
2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;with dataclass&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; @dataclass
... class Number:
...     val: int
...
&amp;gt;&amp;gt;&amp;gt; obj = Number(2)
&amp;gt;&amp;gt;&amp;gt; obj.val
2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;default-values&#34;&gt;Default values&lt;/h3&gt;

&lt;p&gt;It is easy to add default values to the fields of your data class.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; @dataclass
... class Product:
...     name: str
...     count: int = 0
...     price: float = 0.0
...
&amp;gt;&amp;gt;&amp;gt; obj = Product(&amp;quot;Python&amp;quot;)
&amp;gt;&amp;gt;&amp;gt; obj.name
Python
&amp;gt;&amp;gt;&amp;gt; obj.count
0
&amp;gt;&amp;gt;&amp;gt; obj.price
0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;type-hints&#34;&gt;Type hints&lt;/h3&gt;

&lt;p&gt;It is mandatory to define the data type in dataclass. However, If you don&amp;rsquo;t want specify the datatype then, use &lt;code&gt;typing.Any&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from dataclasses import dataclass
&amp;gt;&amp;gt;&amp;gt; from typing import Any

&amp;gt;&amp;gt;&amp;gt; @dataclass
... class WithoutExplicitTypes:
...    name: Any
...    value: Any = 42
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;virtual-environment&#34;&gt;Virtual Environment&lt;/h2&gt;

&lt;p&gt;The use of a Virtual Environment is to test python code in encapsulated environments and to also avoid filling the base Python installation with libraries we might use for only one project.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;virtualenv&#34;&gt;virtualenv&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install virtualenv&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install virtualenv
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install virtualenvwrapper-win (Windows)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install virtualenvwrapper-win
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Make a Virtual Environment&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkvirtualenv HelloWold
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Anything we install now will be specific to this project. And available to the projects we connect to this environment.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Set Project Directory&lt;/p&gt;

&lt;p&gt;To bind our virtualenv with our current working directory we simply enter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;setprojectdir .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Deactivate&lt;/p&gt;

&lt;p&gt;To move onto something else in the command line type ‘deactivate’ to deactivate your environment.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;deactivate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice how the parenthesis disappear.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Workon&lt;/p&gt;

&lt;p&gt;Open up the command prompt and type ‘workon HelloWold’ to activate the environment and move into your root project folder&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;workon HelloWold
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;poetry&#34;&gt;poetry&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://poetry.eustace.io/&#34; target=&#34;_blank&#34;&gt;Poetry&lt;/a&gt; is a tool for dependency management and packaging in Python. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install Poetry&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install --user poetry
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a new project&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;poetry new my-project
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will create a my-project directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my-project
├── pyproject.toml
├── README.rst
├── poetry_demo
│   └── __init__.py
└── tests
    ├── __init__.py
    └── test_poetry_demo.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The pyproject.toml file will orchestrate your project and its dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[tool.poetry]
name = &amp;quot;my-project&amp;quot;
version = &amp;quot;0.1.0&amp;quot;
description = &amp;quot;&amp;quot;
authors = [&amp;quot;your name &amp;lt;your@mail.com&amp;gt;&amp;quot;]

[tool.poetry.dependencies]
python = &amp;quot;*&amp;quot;

[tool.poetry.dev-dependencies]
pytest = &amp;quot;^3.4&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Packages&lt;/p&gt;

&lt;p&gt;To add dependencies to your project, you can specify them in the tool.poetry.dependencies section:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[tool.poetry.dependencies]
pendulum = &amp;quot;^1.4&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, instead of modifying the pyproject.toml file by hand, you can use the add command and it will automatically find a suitable version constraint.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ poetry add pendulum
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To install the dependencies listed in the pyproject.toml:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;poetry install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To remove dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;poetry remove pendulum
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For more information, check the &lt;a href=&#34;https://poetry.eustace.io/docs/&#34; target=&#34;_blank&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;pipenv&#34;&gt;pipenv&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://pipenv.readthedocs.io/en/latest/&#34; target=&#34;_blank&#34;&gt;Pipenv&lt;/a&gt; is a tool that aims to bring the best of all packaging worlds (bundler, composer, npm, cargo, yarn, etc.) to the Python world. Windows is a first-class citizen, in our world.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install pipenv&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install pipenv
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enter your Project directory and install the Packages for your project&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd my_project
pipenv install &amp;lt;package&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pipenv will install your package and create a Pipfile for you in your project’s directory. The Pipfile is used to track which dependencies your project needs in case you need to re-install them.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Uninstall Packages&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pipenv uninstall &amp;lt;package&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Activate the Virtual Environment associated with your Python project&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pipenv shell
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Exit the Virtual Environment&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;exit
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Find more information and a video in &lt;a href=&#34;https://docs.pipenv.org/&#34; target=&#34;_blank&#34;&gt;docs.pipenv.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;anaconda&#34;&gt;anaconda&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://anaconda.org/&#34; target=&#34;_blank&#34;&gt;Anaconda&lt;/a&gt; is another popular tool to manage python packages.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Where packages, notebooks, projects and environments are shared.
Your place for free public conda package hosting.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Make a Virtual Environment&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;conda create -n HelloWorld
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To use the Virtual Environment, activate it by:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;conda activate HelloWorld
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Anything installed now will be specific to the project HelloWorld&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Exit the Virtual Environment&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;conda deactivate
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;#python-cheatsheet&#34;&gt;&lt;em&gt;Return to the Top&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python Package Index.</title>
      <link>https://dragon-library.github.io/coding/tutorials/post/python/tutorials/package_index/</link>
      <pubDate>Sun, 24 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/coding/tutorials/post/python/tutorials/package_index/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;featured.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;While  &lt;a href=&#34;https://docs.python.org/3.8/reference/index.html#reference-index&#34; target=&#34;_blank&#34;&gt;The Python Language Reference&lt;/a&gt;  describes the exact syntax and semantics of the Python language, this library reference manual describes the standard library that is distributed with Python. It also describes some of the optional components that are commonly included in Python distributions.&lt;/p&gt;

&lt;p&gt;Python’s standard library is very extensive, offering a wide range of facilities as indicated by the long table of contents listed below. The library contains built-in modules (written in C) that provide access to system functionality such as file I/O that would otherwise be inaccessible to Python programmers, as well as modules written in Python that provide standardized solutions for many problems that occur in everyday programming. Some of these modules are explicitly designed to encourage and enhance the portability of Python programs by abstracting away platform-specifics into platform-neutral APIs.&lt;/p&gt;

&lt;p&gt;The Python installers for the Windows platform usually include the entire standard library and often also include many additional components. For Unix-like operating systems Python is normally provided as a collection of packages, so it may be necessary to use the packaging tools provided with the operating system to obtain some or all of the optional components.&lt;/p&gt;

&lt;p&gt;In addition to the standard library, there is a growing collection of several thousand components (from individual programs and modules to packages and entire application development frameworks), available from the  &lt;a href=&#34;https://pypi.org/&#34; target=&#34;_blank&#34;&gt;Python Package Index&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3.8/library/intro.html&#34; target=&#34;_blank&#34;&gt;Introduction&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3.8/library/intro.html#notes-on-availability&#34; target=&#34;_blank&#34;&gt;Notes on availability&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/functions&#34; target=&#34;_blank&#34;&gt;Built-in Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/constants&#34; target=&#34;_blank&#34;&gt;Built-in Constants&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/constants#constants-added-by-the-site-module&#34; target=&#34;_blank&#34;&gt;Constants added by the  &lt;code&gt;site&lt;/code&gt;  module&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/stdtypes&#34; target=&#34;_blank&#34;&gt;Built-in Types&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/stdtypes#truth-value-testing&#34; target=&#34;_blank&#34;&gt;Truth Value Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/stdtypes#boolean-operations-and-or-not&#34; target=&#34;_blank&#34;&gt;Boolean Operations —  &lt;code&gt;and&lt;/code&gt;,  &lt;code&gt;or&lt;/code&gt;,  &lt;code&gt;not&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/stdtypes#comparisons&#34; target=&#34;_blank&#34;&gt;Comparisons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/stdtypes#numeric-types-int-float-complex&#34; target=&#34;_blank&#34;&gt;Numeric Types —  &lt;code&gt;int&lt;/code&gt;,  &lt;code&gt;float&lt;/code&gt;,  &lt;code&gt;complex&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/stdtypes#iterator-types&#34; target=&#34;_blank&#34;&gt;Iterator Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/stdtypes#sequence-types-list-tuple-range&#34; target=&#34;_blank&#34;&gt;Sequence Types —  &lt;code&gt;list&lt;/code&gt;,  &lt;code&gt;tuple&lt;/code&gt;,  &lt;code&gt;range&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/stdtypes#text-sequence-type-str&#34; target=&#34;_blank&#34;&gt;Text Sequence Type —  &lt;code&gt;str&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/stdtypes#binary-sequence-types-bytes-bytearray-memoryview&#34; target=&#34;_blank&#34;&gt;Binary Sequence Types —  &lt;code&gt;bytes&lt;/code&gt;,  &lt;code&gt;bytearray&lt;/code&gt;,  &lt;code&gt;memoryview&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/stdtypes#set-types-set-frozenset&#34; target=&#34;_blank&#34;&gt;Set Types —  &lt;code&gt;set&lt;/code&gt;,  &lt;code&gt;frozenset&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/stdtypes#mapping-types-dict&#34; target=&#34;_blank&#34;&gt;Mapping Types —  &lt;code&gt;dict&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/stdtypes#context-manager-types&#34; target=&#34;_blank&#34;&gt;Context Manager Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/stdtypes#other-built-in-types&#34; target=&#34;_blank&#34;&gt;Other Built-in Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/stdtypes#special-attributes&#34; target=&#34;_blank&#34;&gt;Special Attributes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/exceptions&#34; target=&#34;_blank&#34;&gt;Built-in Exceptions&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/exceptions#base-classes&#34; target=&#34;_blank&#34;&gt;Base classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/exceptions#concrete-exceptions&#34; target=&#34;_blank&#34;&gt;Concrete exceptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/exceptions#warnings&#34; target=&#34;_blank&#34;&gt;Warnings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/exceptions#exception-hierarchy&#34; target=&#34;_blank&#34;&gt;Exception hierarchy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/text&#34; target=&#34;_blank&#34;&gt;Text Processing Services&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/string&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;string&lt;/code&gt;  — Common string operations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/re&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;re&lt;/code&gt;  — Regular expression operations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/difflib&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;difflib&lt;/code&gt;  — Helpers for computing deltas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/textwrap&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;textwrap&lt;/code&gt;  — Text wrapping and filling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/unicodedata&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;unicodedata&lt;/code&gt;  — Unicode Database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/stringprep&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;stringprep&lt;/code&gt;  — Internet String Preparation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/readline&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;readline&lt;/code&gt;  — GNU readline interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/rlcompleter&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;rlcompleter&lt;/code&gt;  — Completion function for GNU readline&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/binary&#34; target=&#34;_blank&#34;&gt;Binary Data Services&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/struct&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;struct&lt;/code&gt;  — Interpret bytes as packed binary data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/codecs&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;codecs&lt;/code&gt;  — Codec registry and base classes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/datatypes&#34; target=&#34;_blank&#34;&gt;Data Types&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/datetime&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;datetime&lt;/code&gt;  — Basic date and time types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/calendar&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;calendar&lt;/code&gt;  — General calendar-related functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/collections&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;collections&lt;/code&gt;  — Container datatypes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/collections.abc&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;collections.abc&lt;/code&gt;  — Abstract Base Classes for Containers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/heapq&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;heapq&lt;/code&gt;  — Heap queue algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/bisect&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;bisect&lt;/code&gt;  — Array bisection algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/array&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;array&lt;/code&gt;  — Efficient arrays of numeric values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/weakref&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;weakref&lt;/code&gt;  — Weak references&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/types&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;types&lt;/code&gt;  — Dynamic type creation and names for built-in types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/copy&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;copy&lt;/code&gt;  — Shallow and deep copy operations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/pprint&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;pprint&lt;/code&gt;  — Data pretty printer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/reprlib&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;reprlib&lt;/code&gt;  — Alternate  &lt;code&gt;repr()&lt;/code&gt;  implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/enum&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;enum&lt;/code&gt;  — Support for enumerations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/numeric&#34; target=&#34;_blank&#34;&gt;Numeric and Mathematical Modules&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/numbers&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;numbers&lt;/code&gt;  — Numeric abstract base classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/math&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;math&lt;/code&gt;  — Mathematical functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/cmath&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;cmath&lt;/code&gt;  — Mathematical functions for complex numbers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/decimal&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;decimal&lt;/code&gt;  — Decimal fixed point and floating point arithmetic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/fractions&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;fractions&lt;/code&gt;  — Rational numbers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/random&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;random&lt;/code&gt;  — Generate pseudo-random numbers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/statistics&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;statistics&lt;/code&gt;  — Mathematical statistics functions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/functional&#34; target=&#34;_blank&#34;&gt;Functional Programming Modules&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/itertools&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;itertools&lt;/code&gt;  — Functions creating iterators for efficient looping&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/functools&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;functools&lt;/code&gt;  — Higher-order functions and operations on callable objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/operator&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;operator&lt;/code&gt;  — Standard operators as functions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/filesys&#34; target=&#34;_blank&#34;&gt;File and Directory Access&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/pathlib&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;pathlib&lt;/code&gt;  — Object-oriented filesystem paths&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/os.path&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;os.path&lt;/code&gt;  — Common pathname manipulations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/fileinput&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;fileinput&lt;/code&gt;  — Iterate over lines from multiple input streams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/stat&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;stat&lt;/code&gt;  — Interpreting  &lt;code&gt;stat()&lt;/code&gt;  results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/filecmp&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;filecmp&lt;/code&gt;  — File and Directory Comparisons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/tempfile&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;tempfile&lt;/code&gt;  — Generate temporary files and directories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/glob&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;glob&lt;/code&gt;  — Unix style pathname pattern expansion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/fnmatch&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;fnmatch&lt;/code&gt;  — Unix filename pattern matching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/linecache&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;linecache&lt;/code&gt;  — Random access to text lines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/shutil&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;shutil&lt;/code&gt;  — High-level file operations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/persistence&#34; target=&#34;_blank&#34;&gt;Data Persistence&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/pickle&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;pickle&lt;/code&gt;  — Python object serialization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/copyreg&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;copyreg&lt;/code&gt;  — Register  &lt;code&gt;pickle&lt;/code&gt;  support functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/shelve&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;shelve&lt;/code&gt;  — Python object persistence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/marshal&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;marshal&lt;/code&gt;  — Internal Python object serialization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/dbm&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;dbm&lt;/code&gt;  — Interfaces to Unix “databases”&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/sqlite3&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;sqlite3&lt;/code&gt;  — DB-API 2.0 interface for SQLite databases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/archiving&#34; target=&#34;_blank&#34;&gt;Data Compression and Archiving&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/zlib&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;zlib&lt;/code&gt;  — Compression compatible with  &lt;strong&gt;gzip&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/gzip&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;gzip&lt;/code&gt;  — Support for  &lt;strong&gt;gzip&lt;/strong&gt;  files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/bz2&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;bz2&lt;/code&gt;  — Support for  &lt;strong&gt;bzip2&lt;/strong&gt;  compression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/lzma&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;lzma&lt;/code&gt;  — Compression using the LZMA algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/zipfile&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;zipfile&lt;/code&gt;  — Work with ZIP archives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/tarfile&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;tarfile&lt;/code&gt;  — Read and write tar archive files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/fileformats&#34; target=&#34;_blank&#34;&gt;File Formats&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/csv&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;csv&lt;/code&gt;  — CSV File Reading and Writing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/configparser&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;configparser&lt;/code&gt;  — Configuration file parser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/netrc&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;netrc&lt;/code&gt;  — netrc file processing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/xdrlib&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;xdrlib&lt;/code&gt;  — Encode and decode XDR data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/plistlib&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;plistlib&lt;/code&gt;  — Generate and parse Mac OS X  &lt;code&gt;.plist&lt;/code&gt;  files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/crypto&#34; target=&#34;_blank&#34;&gt;Cryptographic Services&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/hashlib&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;hashlib&lt;/code&gt;  — Secure hashes and message digests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/hmac&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;hmac&lt;/code&gt;  — Keyed-Hashing for Message Authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/secrets&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;secrets&lt;/code&gt;  — Generate secure random numbers for managing secrets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/allos&#34; target=&#34;_blank&#34;&gt;Generic Operating System Services&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/os&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;os&lt;/code&gt;  — Miscellaneous operating system interfaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/io&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;io&lt;/code&gt;  — Core tools for working with streams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/time&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;time&lt;/code&gt;  — Time access and conversions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/argparse&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;argparse&lt;/code&gt;  — Parser for command-line options, arguments and sub-commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/getopt&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;getopt&lt;/code&gt;  — C-style parser for command line options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/logging&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;logging&lt;/code&gt;  — Logging facility for Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/logging.config&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;logging.config&lt;/code&gt;  — Logging configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/logging.handlers&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;logging.handlers&lt;/code&gt;  — Logging handlers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/getpass&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;getpass&lt;/code&gt;  — Portable password input&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/curses&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;curses&lt;/code&gt;  — Terminal handling for character-cell displays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/curses#module-curses.textpad&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;curses.textpad&lt;/code&gt;  — Text input widget for curses programs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/curses.ascii&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;curses.ascii&lt;/code&gt;  — Utilities for ASCII characters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/curses.panel&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;curses.panel&lt;/code&gt;  — A panel stack extension for curses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/platform&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;platform&lt;/code&gt;  — Access to underlying platform’s identifying data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/errno&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;errno&lt;/code&gt;  — Standard errno system symbols&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/ctypes&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;ctypes&lt;/code&gt;  — A foreign function library for Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/concurrency&#34; target=&#34;_blank&#34;&gt;Concurrent Execution&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/threading&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;threading&lt;/code&gt;  — Thread-based parallelism&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/multiprocessing&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;multiprocessing&lt;/code&gt;  — Process-based parallelism&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/multiprocessing.shared_memory&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;multiprocessing.shared_memory&lt;/code&gt;  — Provides shared memory for direct access across processes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/concurrent&#34; target=&#34;_blank&#34;&gt;The  &lt;code&gt;concurrent&lt;/code&gt;  package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/concurrent.futures&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;concurrent.futures&lt;/code&gt;  — Launching parallel tasks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/subprocess&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;subprocess&lt;/code&gt;  — Subprocess management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/sched&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;sched&lt;/code&gt;  — Event scheduler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/queue&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;queue&lt;/code&gt;  — A synchronized queue class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/_thread&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;_thread&lt;/code&gt;  — Low-level threading API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/_dummy_thread&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;_dummy_thread&lt;/code&gt;  — Drop-in replacement for the  &lt;code&gt;_thread&lt;/code&gt;  module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/dummy_threading&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;dummy_threading&lt;/code&gt;  — Drop-in replacement for the  &lt;code&gt;threading&lt;/code&gt;  module&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/contextvars&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;contextvars&lt;/code&gt;  — Context Variables&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/contextvars#context-variables&#34; target=&#34;_blank&#34;&gt;Context Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/contextvars#manual-context-management&#34; target=&#34;_blank&#34;&gt;Manual Context Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/contextvars#asyncio-support&#34; target=&#34;_blank&#34;&gt;asyncio support&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/ipc&#34; target=&#34;_blank&#34;&gt;Networking and Interprocess Communication&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/asyncio&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;asyncio&lt;/code&gt;  — Asynchronous I/O&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/socket&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;socket&lt;/code&gt;  — Low-level networking interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/ssl&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;ssl&lt;/code&gt;  — TLS/SSL wrapper for socket objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/select&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;select&lt;/code&gt;  — Waiting for I/O completion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/selectors&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;selectors&lt;/code&gt;  — High-level I/O multiplexing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/asyncore&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;asyncore&lt;/code&gt;  — Asynchronous socket handler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/asynchat&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;asynchat&lt;/code&gt;  — Asynchronous socket command/response handler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/signal&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;signal&lt;/code&gt;  — Set handlers for asynchronous events&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/mmap&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;mmap&lt;/code&gt;  — Memory-mapped file support&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/netdata&#34; target=&#34;_blank&#34;&gt;Internet Data Handling&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/email&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;email&lt;/code&gt;  — An email and MIME handling package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/json&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;json&lt;/code&gt;  — JSON encoder and decoder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/mailcap&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;mailcap&lt;/code&gt;  — Mailcap file handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/mailbox&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;mailbox&lt;/code&gt;  — Manipulate mailboxes in various formats&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/mimetypes&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;mimetypes&lt;/code&gt;  — Map filenames to MIME types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/base64&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;base64&lt;/code&gt;  — Base16, Base32, Base64, Base85 Data Encodings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/binhex&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;binhex&lt;/code&gt;  — Encode and decode binhex4 files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/binascii&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;binascii&lt;/code&gt;  — Convert between binary and ASCII&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/quopri&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;quopri&lt;/code&gt;  — Encode and decode MIME quoted-printable data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/uu&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;uu&lt;/code&gt;  — Encode and decode uuencode files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/markup&#34; target=&#34;_blank&#34;&gt;Structured Markup Processing Tools&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;html&lt;/code&gt;  — HyperText Markup Language support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/html.parser&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;html.parser&lt;/code&gt;  — Simple HTML and XHTML parser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/html.entities&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;html.entities&lt;/code&gt;  — Definitions of HTML general entities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/xml&#34; target=&#34;_blank&#34;&gt;XML Processing Modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/xml.etree.elementtree&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;xml.etree.ElementTree&lt;/code&gt;  — The ElementTree XML API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/xml.dom&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;xml.dom&lt;/code&gt;  — The Document Object Model API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/xml.dom.minidom&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;xml.dom.minidom&lt;/code&gt;  — Minimal DOM implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/xml.dom.pulldom&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;xml.dom.pulldom&lt;/code&gt;  — Support for building partial DOM trees&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/xml.sax&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;xml.sax&lt;/code&gt;  — Support for SAX2 parsers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/xml.sax.handler&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;xml.sax.handler&lt;/code&gt;  — Base classes for SAX handlers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/xml.sax.utils&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;xml.sax.saxutils&lt;/code&gt;  — SAX Utilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/xml.sax.reader&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;xml.sax.xmlreader&lt;/code&gt;  — Interface for XML parsers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/pyexpat&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;xml.parsers.expat&lt;/code&gt;  — Fast XML parsing using Expat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/internet&#34; target=&#34;_blank&#34;&gt;Internet Protocols and Support&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/webbrowser&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;webbrowser&lt;/code&gt;  — Convenient Web-browser controller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/cgi&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;cgi&lt;/code&gt;  — Common Gateway Interface support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/cgitb&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;cgitb&lt;/code&gt;  — Traceback manager for CGI scripts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/wsgiref&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;wsgiref&lt;/code&gt;  — WSGI Utilities and Reference Implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/urllib&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;urllib&lt;/code&gt;  — URL handling modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/urllib.request&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;urllib.request&lt;/code&gt;  — Extensible library for opening URLs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/urllib.request#module-urllib.response&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;urllib.response&lt;/code&gt;  — Response classes used by urllib&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/urllib.parse&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;urllib.parse&lt;/code&gt;  — Parse URLs into components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/urllib.error&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;urllib.error&lt;/code&gt;  — Exception classes raised by urllib.request&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/urllib.robotparser&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;urllib.robotparser&lt;/code&gt;  — Parser for robots.txt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/http&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;http&lt;/code&gt;  — HTTP modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/http.client&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;http.client&lt;/code&gt;  — HTTP protocol client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/ftplib&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;ftplib&lt;/code&gt;  — FTP protocol client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/poplib&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;poplib&lt;/code&gt;  — POP3 protocol client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/imaplib&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;imaplib&lt;/code&gt;  — IMAP4 protocol client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/nntplib&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;nntplib&lt;/code&gt;  — NNTP protocol client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/smtplib&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;smtplib&lt;/code&gt;  — SMTP protocol client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/smtpd&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;smtpd&lt;/code&gt;  — SMTP Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/telnetlib&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;telnetlib&lt;/code&gt;  — Telnet client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/uuid&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;uuid&lt;/code&gt;  — UUID objects according to  &lt;strong&gt;RFC 4122&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/socketserver&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;socketserver&lt;/code&gt;  — A framework for network servers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/http.server&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;http.server&lt;/code&gt;  — HTTP servers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/http.cookies&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;http.cookies&lt;/code&gt;  — HTTP state management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/http.cookiejar&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;http.cookiejar&lt;/code&gt;  — Cookie handling for HTTP clients&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/xmlrpc&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;xmlrpc&lt;/code&gt;  — XMLRPC server and client modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/xmlrpc.client&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;xmlrpc.client&lt;/code&gt;  — XML-RPC client access&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/xmlrpc.server&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;xmlrpc.server&lt;/code&gt;  — Basic XML-RPC servers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/ipaddress&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;ipaddress&lt;/code&gt;  — IPv4/IPv6 manipulation library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/mm&#34; target=&#34;_blank&#34;&gt;Multimedia Services&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/audioop&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;audioop&lt;/code&gt;  — Manipulate raw audio data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/aifc&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;aifc&lt;/code&gt;  — Read and write AIFF and AIFC files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3.8/library/sunau.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;sunau&lt;/code&gt;  — Read and write Sun AU files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/wave&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;wave&lt;/code&gt;  — Read and write WAV files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/chunk&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;chunk&lt;/code&gt;  — Read IFF chunked data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/colorsys&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;colorsys&lt;/code&gt;  — Conversions between color systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/imghdr&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;imghdr&lt;/code&gt;  — Determine the type of an image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/sndhdr&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;sndhdr&lt;/code&gt;  — Determine type of sound file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/ossaudiodev&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;ossaudiodev&lt;/code&gt;  — Access to OSS-compatible audio devices&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/i18n&#34; target=&#34;_blank&#34;&gt;Internationalization&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/gettext&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;gettext&lt;/code&gt;  — Multilingual internationalization services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/locale&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;locale&lt;/code&gt;  — Internationalization services&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/frameworks&#34; target=&#34;_blank&#34;&gt;Program Frameworks&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/turtle&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;turtle&lt;/code&gt;  — Turtle graphics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/cmd&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;cmd&lt;/code&gt;  — Support for line-oriented command interpreters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/shlex&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;shlex&lt;/code&gt;  — Simple lexical analysis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/tk&#34; target=&#34;_blank&#34;&gt;Graphical User Interfaces with Tk&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/tkinter&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;tkinter&lt;/code&gt;  — Python interface to Tcl/Tk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/tkinter.ttk&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;tkinter.ttk&lt;/code&gt;  — Tk themed widgets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/tkinter.tix&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;tkinter.tix&lt;/code&gt;  — Extension widgets for Tk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/tkinter.scrolledtext&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;tkinter.scrolledtext&lt;/code&gt;  — Scrolled Text Widget&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/idle&#34; target=&#34;_blank&#34;&gt;IDLE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/othergui&#34; target=&#34;_blank&#34;&gt;Other Graphical User Interface Packages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/development&#34; target=&#34;_blank&#34;&gt;Development Tools&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/typing&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;typing&lt;/code&gt;  — Support for type hints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/pydoc&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;pydoc&lt;/code&gt;  — Documentation generator and online help system&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/doctest&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;doctest&lt;/code&gt;  — Test interactive Python examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/unittest&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;unittest&lt;/code&gt;  — Unit testing framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/unittest.mock&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;unittest.mock&lt;/code&gt;  — mock object library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3.8/library/unittest.mock-examples.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;unittest.mock&lt;/code&gt;  — getting started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3.8/library/2to3.html&#34; target=&#34;_blank&#34;&gt;2to3 - Automated Python 2 to 3 code translation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/test&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;test&lt;/code&gt;  — Regression tests package for Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/test#module-test.support&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;test.support&lt;/code&gt;  — Utilities for the Python test suite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/test#module-test.support.script_helper&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;test.support.script_helper&lt;/code&gt;  — Utilities for the Python execution tests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/debug&#34; target=&#34;_blank&#34;&gt;Debugging and Profiling&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/audit_events&#34; target=&#34;_blank&#34;&gt;Audit events table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/bdb&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;bdb&lt;/code&gt;  — Debugger framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/faulthandler&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;faulthandler&lt;/code&gt;  — Dump the Python traceback&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/pdb&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;pdb&lt;/code&gt;  — The Python Debugger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/profile&#34; target=&#34;_blank&#34;&gt;The Python Profilers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/timeit&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;timeit&lt;/code&gt;  — Measure execution time of small code snippets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/trace&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;trace&lt;/code&gt;  — Trace or track Python statement execution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/tracemalloc&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;tracemalloc&lt;/code&gt;  — Trace memory allocations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/distribution&#34; target=&#34;_blank&#34;&gt;Software Packaging and Distribution&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/distutils&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;distutils&lt;/code&gt;  — Building and installing Python modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/ensurepip&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;ensurepip&lt;/code&gt;  — Bootstrapping the  &lt;code&gt;pip&lt;/code&gt;  installer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/venv&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;venv&lt;/code&gt;  — Creation of virtual environments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/zipapp&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;zipapp&lt;/code&gt;  — Manage executable Python zip archives&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/python&#34; target=&#34;_blank&#34;&gt;Python Runtime Services&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/sys&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;sys&lt;/code&gt;  — System-specific parameters and functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/sysconfig&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;sysconfig&lt;/code&gt;  — Provide access to Python’s configuration information&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/builtins&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;builtins&lt;/code&gt;  — Built-in objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/__main__&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;__main__&lt;/code&gt;  — Top-level script environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/warnings&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;warnings&lt;/code&gt;  — Warning control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/dataclasses&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;dataclasses&lt;/code&gt;  — Data Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/contextlib&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;contextlib&lt;/code&gt;  — Utilities for  &lt;code&gt;with&lt;/code&gt;-statement contexts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/abc&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;abc&lt;/code&gt;  — Abstract Base Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/atexit&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;atexit&lt;/code&gt;  — Exit handlers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/traceback&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;traceback&lt;/code&gt;  — Print or retrieve a stack traceback&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/__future__&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;__future__&lt;/code&gt;  — Future statement definitions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/gc&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;gc&lt;/code&gt;  — Garbage Collector interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/inspect&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;inspect&lt;/code&gt;  — Inspect live objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/site&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;site&lt;/code&gt;  — Site-specific configuration hook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/custominterp&#34; target=&#34;_blank&#34;&gt;Custom Python Interpreters&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/code&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;code&lt;/code&gt;  — Interpreter base classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/codeop&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;codeop&lt;/code&gt;  — Compile Python code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/modules&#34; target=&#34;_blank&#34;&gt;Importing Modules&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/zipimport&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;zipimport&lt;/code&gt;  — Import modules from Zip archives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/pkgutil&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;pkgutil&lt;/code&gt;  — Package extension utility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/modulefinder&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;modulefinder&lt;/code&gt;  — Find modules used by a script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/runpy&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;runpy&lt;/code&gt;  — Locating and executing Python modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/importlib&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;importlib&lt;/code&gt;  — The implementation of  &lt;code&gt;import&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/importlib.metadata&#34; target=&#34;_blank&#34;&gt;Using importlib.metadata&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/language&#34; target=&#34;_blank&#34;&gt;Python Language Services&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/parser&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;parser&lt;/code&gt;  — Access Python parse trees&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/ast&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;ast&lt;/code&gt;  — Abstract Syntax Trees&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/symtable&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;symtable&lt;/code&gt;  — Access to the compiler’s symbol tables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/symbol&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;symbol&lt;/code&gt;  — Constants used with Python parse trees&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/token&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;token&lt;/code&gt;  — Constants used with Python parse trees&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/keyword&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;keyword&lt;/code&gt;  — Testing for Python keywords&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/tokenize&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;tokenize&lt;/code&gt;  — Tokenizer for Python source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/tabnanny&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;tabnanny&lt;/code&gt;  — Detection of ambiguous indentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/pyclbr&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;pyclbr&lt;/code&gt;  — Python class browser support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/py_compile&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;py_compile&lt;/code&gt;  — Compile Python source files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/compileall&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;compileall&lt;/code&gt;  — Byte-compile Python libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/dis&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;dis&lt;/code&gt;  — Disassembler for Python bytecode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/pickletools&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;pickletools&lt;/code&gt;  — Tools for pickle developers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/misc&#34; target=&#34;_blank&#34;&gt;Miscellaneous Services&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3.8/library/formatter.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;formatter&lt;/code&gt;  — Generic output formatting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/windows&#34; target=&#34;_blank&#34;&gt;MS Windows Specific Services&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/msilib&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;msilib&lt;/code&gt;  — Read and write Microsoft Installer files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/msvcrt&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;msvcrt&lt;/code&gt;  — Useful routines from the MS VC++ runtime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/winreg&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;winreg&lt;/code&gt;  — Windows registry access&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/winsound&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;winsound&lt;/code&gt;  — Sound-playing interface for Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/unix&#34; target=&#34;_blank&#34;&gt;Unix Specific Services&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/posix&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;posix&lt;/code&gt;  — The most common POSIX system calls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/pwd&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;pwd&lt;/code&gt;  — The password database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/spwd&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;spwd&lt;/code&gt;  — The shadow password database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/grp&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;grp&lt;/code&gt;  — The group database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/crypt&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;crypt&lt;/code&gt;  — Function to check Unix passwords&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/termios&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;termios&lt;/code&gt;  — POSIX style tty control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/tty&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;tty&lt;/code&gt;  — Terminal control functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/pty&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;pty&lt;/code&gt;  — Pseudo-terminal utilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/fcntl&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;fcntl&lt;/code&gt;  — The  &lt;code&gt;fcntl&lt;/code&gt;  and  &lt;code&gt;ioctl&lt;/code&gt;  system calls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/pipes&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;pipes&lt;/code&gt;  — Interface to shell pipelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/resource&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;resource&lt;/code&gt;  — Resource usage information&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/nis&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;nis&lt;/code&gt;  — Interface to Sun’s NIS (Yellow Pages)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/syslog&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;syslog&lt;/code&gt;  — Unix syslog library routines&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/superseded&#34; target=&#34;_blank&#34;&gt;Superseded Modules&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/optparse&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;optparse&lt;/code&gt;  — Parser for command line options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devdocs.io/python~3.8/library/imp&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;imp&lt;/code&gt;  — Access the  import  internals&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3.8/library/undoc.html&#34; target=&#34;_blank&#34;&gt;Undocumented Modules&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3.8/library/undoc.html#platform-specific-modules&#34; target=&#34;_blank&#34;&gt;Platform specific modules&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Reference : &lt;a href=&#34;https://devdocs.io/python~3.8/&#34; target=&#34;_blank&#34;&gt;devdocs.io&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>File Handling Functions Explained.</title>
      <link>https://dragon-library.github.io/coding/tutorials/post/python/tutorials/file-handling-functions/</link>
      <pubDate>Thu, 07 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/coding/tutorials/post/python/tutorials/file-handling-functions/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/size/w2000/2020/05/Python-File-Handling-1.png&#34; alt=&#34;enter image description here&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;welcome&#34;&gt;Welcome&lt;/h2&gt;

&lt;p&gt;Hi! If you want to learn how to work with files in Python, then this article is for you. Working with files is an important skill that every Python developer should learn, so let&amp;rsquo;s get started.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In this article, you will learn:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to open a file.&lt;/li&gt;
&lt;li&gt;How to read a file.&lt;/li&gt;
&lt;li&gt;How to create a file.&lt;/li&gt;
&lt;li&gt;How to modify a file.&lt;/li&gt;
&lt;li&gt;How to close a file.&lt;/li&gt;
&lt;li&gt;How to open files for multiple operations.&lt;/li&gt;
&lt;li&gt;How to work with file object methods.&lt;/li&gt;
&lt;li&gt;How to delete files.&lt;/li&gt;
&lt;li&gt;How to work with context managers and why they are useful.&lt;/li&gt;
&lt;li&gt;How to handle exceptions that could be raised when you work with files.&lt;/li&gt;
&lt;li&gt;and more!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Let&amp;rsquo;s begin! 🔅&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;working-with-files-basic-syntax&#34;&gt;Working with Files: Basic Syntax&lt;/h2&gt;

&lt;p&gt;One of the most important functions that you will need to use as you work with files in Python is  &lt;code&gt;**open()**&lt;/code&gt;&lt;strong&gt;,&lt;/strong&gt;  a built-in function that opens a file and allows your program to use it and work with it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is the basic syntax&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/05/image-48.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;💡  &lt;strong&gt;Tip:&lt;/strong&gt;  These are the two most commonly used arguments to call this function. There are six additional optional arguments. To learn more about them, please read  &lt;a href=&#34;https://docs.python.org/3/library/functions.html#open&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt;  in the documentation.&lt;/p&gt;

&lt;h3 id=&#34;first-parameter-file&#34;&gt;First Parameter: File&lt;/h3&gt;

&lt;p&gt;The first parameter of the  &lt;code&gt;open()&lt;/code&gt;  function is  &lt;code&gt;**file**&lt;/code&gt;, the absolute or relative path to the file that you are trying to work with.&lt;/p&gt;

&lt;p&gt;We usually use a relative path, which indicates where the file is located relative to the location of the script (Python file) that is calling the  &lt;code&gt;open()&lt;/code&gt;  function.&lt;/p&gt;

&lt;p&gt;For example, the path in this function call:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;open(&amp;quot;names.txt&amp;quot;) # The relative path is &amp;quot;names.txt&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Only contains the name of the file. This can be used when the file that you are trying to open is in the same directory or folder as the Python script, like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/05/image-7.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;But if the file is within a nested folder, like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/05/image-9.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The names.txt file is in the &amp;laquo;data&amp;raquo; folder&lt;/p&gt;

&lt;p&gt;Then we need to use a specific path to tell the function that the file is within another folder.&lt;/p&gt;

&lt;p&gt;In this example, this would be the path:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;open(&amp;quot;data/names.txt&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that we are writing  &lt;code&gt;data/&lt;/code&gt;  first (the name of the folder followed by a  &lt;code&gt;/&lt;/code&gt;) and then  &lt;code&gt;names.txt&lt;/code&gt;  (the name of the file with the extension).&lt;/p&gt;

&lt;p&gt;💡  &lt;strong&gt;Tip:&lt;/strong&gt; The three letters  &lt;code&gt;.txt&lt;/code&gt;  that follow the dot in  &lt;code&gt;names.txt&lt;/code&gt;  is the &amp;laquo;extension&amp;raquo; of the file, or its type. In this case,  &lt;code&gt;.txt&lt;/code&gt;  indicates that it&amp;rsquo;s a text file.&lt;/p&gt;

&lt;h3 id=&#34;second-parameter-mode&#34;&gt;Second Parameter: Mode&lt;/h3&gt;

&lt;p&gt;The second parameter of the  &lt;code&gt;open()&lt;/code&gt;  function is the  &lt;code&gt;**mode**&lt;/code&gt;, a string with one character. That single character basically tells Python what you are planning to do with the file in your program.&lt;/p&gt;

&lt;p&gt;Modes available are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Read (&lt;code&gt;&amp;quot;r&amp;quot;&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Append (&lt;code&gt;&amp;quot;a&amp;quot;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Write (&lt;code&gt;&amp;quot;w&amp;quot;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Create (&lt;code&gt;&amp;quot;x&amp;quot;&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also choose to open the file in:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Text mode (&lt;code&gt;&amp;quot;t&amp;quot;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Binary mode (&lt;code&gt;&amp;quot;b&amp;quot;&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To use text or binary mode, you would need to add these characters to the main mode. For example:  &lt;code&gt;&amp;quot;wb&amp;quot;&lt;/code&gt;  means writing in binary mode.&lt;/p&gt;

&lt;p&gt;💡  &lt;strong&gt;Tip:&lt;/strong&gt;  The default modes are read (&lt;code&gt;&amp;quot;r&amp;quot;&lt;/code&gt;) and text (&lt;code&gt;&amp;quot;t&amp;quot;&lt;/code&gt;), which means &amp;laquo;open for reading text&amp;raquo; (&lt;code&gt;&amp;quot;rt&amp;quot;&lt;/code&gt;), so you don&amp;rsquo;t need to specify them in  &lt;code&gt;**open()**&lt;/code&gt;  if you want to use them because they are assigned by default. You can simply write  &lt;code&gt;open(&amp;lt;file&amp;gt;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why Modes?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It really makes sense for Python to grant only certain permissions based what you are planning to do with the file, right? Why should Python allow your program to do more than necessary? This is basically why modes exist.&lt;/p&gt;

&lt;p&gt;Think about it — allowing a program to do more than necessary can problematic. For example, if you only need to read the content of a file, it can be dangerous to allow your program to modify it unexpectedly, which could potentially introduce bugs.&lt;/p&gt;

&lt;h2 id=&#34;how-to-read-a-file&#34;&gt;How to Read a File&lt;/h2&gt;

&lt;p&gt;Now that you know more about the arguments that the  &lt;code&gt;**open()**&lt;/code&gt;  function takes, let&amp;rsquo;s see how you can open a file and store it in a variable to use it in your program.&lt;/p&gt;

&lt;p&gt;This is the basic syntax:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/05/image-41.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We are simply assigning the value returned to a variable. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;names_file = open(&amp;quot;data/names.txt&amp;quot;, &amp;quot;r&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I know you might be asking: what type of value is returned by  &lt;code&gt;**open()**&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Well,  &lt;strong&gt;a&lt;/strong&gt;  &lt;strong&gt;file object&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s talk a little bit about them.&lt;/p&gt;

&lt;h3 id=&#34;file-objects&#34;&gt;File Objects&lt;/h3&gt;

&lt;p&gt;According to the  &lt;a href=&#34;https://docs.python.org/3/glossary.html#term-file-object&#34; target=&#34;_blank&#34;&gt;Python Documentation&lt;/a&gt;, a  &lt;strong&gt;file object&lt;/strong&gt;  is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An object exposing a file-oriented API (with methods such as read() or write()) to an underlying resource.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is basically telling us that a file object is an object that lets us work and interact with existing files in our Python program.&lt;/p&gt;

&lt;p&gt;File objects have attributes, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: the name of the file.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;closed&lt;/strong&gt;:  &lt;code&gt;True&lt;/code&gt;  if the file is closed.  &lt;code&gt;False&lt;/code&gt;  otherwise.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mode&lt;/strong&gt;: the mode used to open the file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/05/image-57.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = open(&amp;quot;data/names.txt&amp;quot;, &amp;quot;a&amp;quot;)
print(f.mode) # Output: &amp;quot;a&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s see how you can access the content of a file through a file object.&lt;/p&gt;

&lt;h3 id=&#34;methods-to-read-a-file&#34;&gt;Methods to Read a File&lt;/h3&gt;

&lt;p&gt;For us to be able to work file objects, we need to have a way to &amp;laquo;interact&amp;raquo; with them in our program and that is exactly what methods do. Let&amp;rsquo;s see some of them.&lt;/p&gt;

&lt;h3 id=&#34;read&#34;&gt;&lt;strong&gt;Read()&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The first method that you need to learn about is  &lt;strong&gt;&lt;code&gt;read()&lt;/code&gt;&lt;/strong&gt;,  which  &lt;strong&gt;returns the entire content of the file as a string.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/05/image-11.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here we have an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = open(&amp;quot;data/names.txt&amp;quot;)
print(f.read())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Nora
Gino
Timmy
William
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use the  &lt;code&gt;type()&lt;/code&gt;  function to confirm that the value returned by  &lt;code&gt;f.read()&lt;/code&gt;  is a string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-pytohn&#34;&gt;print(type(f.read()))

# Output
&amp;lt;class &#39;str&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yes, it&amp;rsquo;s a string!&lt;/p&gt;

&lt;p&gt;In this case, the entire file was printed because we did not specify a maximum number of bytes, but we can do this as well.&lt;/p&gt;

&lt;p&gt;Here we have an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = open(&amp;quot;data/names.txt&amp;quot;)
print(f.read(3))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The value returned is limited to this number of bytes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Nor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;📌  &lt;strong&gt;Important:&lt;/strong&gt;  You need to  &lt;strong&gt;close&lt;/strong&gt; a file after the task has been completed to free the resources associated to the file. To do this, you need to call the  &lt;code&gt;**close()**&lt;/code&gt;  method, like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/05/image-22.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;readline-vs-readlines&#34;&gt;Readline() vs. Readlines()&lt;/h3&gt;

&lt;p&gt;You can read a file line by line with these two methods. They are slightly different, so let&amp;rsquo;s see them in detail.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;**readline()**&lt;/code&gt;  reads  &lt;strong&gt;one line&lt;/strong&gt; of the file until it reaches the end of that line. A trailing newline character (&lt;code&gt;\n&lt;/code&gt;) is kept in the string.&lt;/p&gt;

&lt;p&gt;💡  &lt;strong&gt;Tip:&lt;/strong&gt;  Optionally, you can pass the size, the maximum number of characters that you want to include in the resulting string.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/05/image-19.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = open(&amp;quot;data/names.txt&amp;quot;)
print(f.readline())
f.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Nora

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the first line of the file.&lt;/p&gt;

&lt;p&gt;In contrast,  &lt;code&gt;**readlines()**&lt;/code&gt;  returns a  &lt;strong&gt;list with all the lines&lt;/strong&gt;  of the file as individual elements (strings). This is the syntax:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/05/image-21.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = open(&amp;quot;data/names.txt&amp;quot;)
print(f.readlines())
f.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[&#39;Nora\n&#39;, &#39;Gino\n&#39;, &#39;Timmy\n&#39;, &#39;William&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that there is a  &lt;code&gt;\n&lt;/code&gt;  (newline character) at the end of each string, except the last one.&lt;/p&gt;

&lt;p&gt;💡  &lt;strong&gt;Tip:&lt;/strong&gt;  You can get the same list with  &lt;code&gt;list(f)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can work with this list in your program by assigning it to a variable or using it in a loop:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = open(&amp;quot;data/names.txt&amp;quot;)

for line in f.readlines():
    # Do something with each line
    
f.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can also iterate over  &lt;code&gt;f&lt;/code&gt;  directly (the file object) in a loop:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = open(&amp;quot;data/names.txt&amp;quot;, &amp;quot;r&amp;quot;)

for line in f:
	# Do something with each line

f.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Those are the main methods used to read file objects. Now let&amp;rsquo;s see how you can create files.&lt;/p&gt;

&lt;h2 id=&#34;how-to-create-a-file&#34;&gt;How to Create a File&lt;/h2&gt;

&lt;p&gt;If you need to create a file &amp;laquo;dynamically&amp;raquo; using Python, you can do it with the  &lt;code&gt;&amp;quot;x&amp;quot;&lt;/code&gt;  mode.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see how. This is the basic syntax:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/05/image-58.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an example. This is my current working directory:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/05/image-29.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If I run this line of code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = open(&amp;quot;new_file.txt&amp;quot;, &amp;quot;x&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A new file with that name is created:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/05/image-30.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;With this mode, you can create a file and then write to it dynamically using methods that you will learn in just a few moments.&lt;/p&gt;

&lt;p&gt;💡  &lt;strong&gt;Tip:&lt;/strong&gt;  The file will be initially empty until you modify it.&lt;/p&gt;

&lt;p&gt;A curious thing is that if you try to run this line again and a file with that name already exists, you will see this error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Traceback (most recent call last):
  File &amp;quot;&amp;lt;path&amp;gt;&amp;quot;, line 8, in &amp;lt;module&amp;gt;
    f = open(&amp;quot;new_file.txt&amp;quot;, &amp;quot;x&amp;quot;)
FileExistsError: [Errno 17] File exists: &#39;new_file.txt&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;According to the  &lt;a href=&#34;https://docs.python.org/3/library/exceptions.html#FileExistsError&#34; target=&#34;_blank&#34;&gt;Python Documentation&lt;/a&gt;, this exception (runtime error) is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Raised when trying to create a file or directory which already exists.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now that you know how to create a file, let&amp;rsquo;s see how you can modify it.&lt;/p&gt;

&lt;h2 id=&#34;how-to-modify-a-file&#34;&gt;How to Modify a File&lt;/h2&gt;

&lt;p&gt;To modify (write to) a file, you need to use the  &lt;code&gt;**write()**&lt;/code&gt;  method. You have two ways to do it (append or write) based on the mode that you choose to open it with. Let&amp;rsquo;s see them in detail.&lt;/p&gt;

&lt;h3 id=&#34;append&#34;&gt;Append&lt;/h3&gt;

&lt;p&gt;&amp;laquo;Appending&amp;raquo; means adding something to the end of another thing. The  &lt;code&gt;&amp;quot;a&amp;quot;&lt;/code&gt;  mode allows you to open a file to append some content to it.&lt;/p&gt;

&lt;p&gt;For example, if we have this file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/05/image-43.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And we want to add a new line to it, we can open it using the  &lt;code&gt;**&amp;quot;a&amp;quot;**&lt;/code&gt;  mode (append) and then, call the  &lt;code&gt;**write()**&lt;/code&gt;  method, passing the content that we want to append as argument.&lt;/p&gt;

&lt;p&gt;This is the basic syntax to call the  &lt;code&gt;**write()**&lt;/code&gt;  method:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/05/image-52.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = open(&amp;quot;data/names.txt&amp;quot;, &amp;quot;a&amp;quot;)
f.write(&amp;quot;\nNew Line&amp;quot;)
f.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;💡  &lt;strong&gt;Tip:&lt;/strong&gt;  Notice that I&amp;rsquo;m adding  &lt;code&gt;\n&lt;/code&gt;  before the line to indicate that I want the new line to appear as a separate line, not as a continuation of the existing line.&lt;/p&gt;

&lt;p&gt;This is the file now, after running the script:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/05/image-45.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;💡  &lt;strong&gt;Tip:&lt;/strong&gt;  The new line might not be displayed in the file until &lt;strong&gt;&lt;code&gt;f.close()&lt;/code&gt;&lt;/strong&gt;  runs.&lt;/p&gt;

&lt;h3 id=&#34;write&#34;&gt;Write&lt;/h3&gt;

&lt;p&gt;Sometimes, you may want to delete the content of a file and replace it entirely with new content. You can do this with the  &lt;code&gt;**write()**&lt;/code&gt;  method if you open the file with the  &lt;code&gt;**&amp;quot;w&amp;quot;**&lt;/code&gt;  mode.&lt;/p&gt;

&lt;p&gt;Here we have this text file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/05/image-43.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If I run this script:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = open(&amp;quot;data/names.txt&amp;quot;, &amp;quot;w&amp;quot;)
f.write(&amp;quot;New Content&amp;quot;)
f.close()

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the result:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/05/image-46.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, opening a file with the  &lt;code&gt;**&amp;quot;w&amp;quot;**&lt;/code&gt;  mode and then writing to it replaces the existing content.&lt;/p&gt;

&lt;p&gt;💡  &lt;strong&gt;Tip:&lt;/strong&gt;  The  &lt;code&gt;**write()**&lt;/code&gt;  method returns the number of characters written.&lt;/p&gt;

&lt;p&gt;If you want to write several lines at once, you can use the  &lt;code&gt;**writelines()**&lt;/code&gt;  method, which takes a list of strings. Each string represents a line to be added to the file.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an example. This is the initial file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/05/image-43.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If we run this script:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = open(&amp;quot;data/names.txt&amp;quot;, &amp;quot;a&amp;quot;)
f.writelines([&amp;quot;\nline1&amp;quot;, &amp;quot;\nline2&amp;quot;, &amp;quot;\nline3&amp;quot;])
f.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The lines are added to the end of the file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/05/image-47.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;open-file-for-multiple-operations&#34;&gt;Open File For Multiple Operations&lt;/h3&gt;

&lt;p&gt;Now you know how to create, read, and write to a file, but what if you want to do more than one thing in the same program? Let&amp;rsquo;s see what happens if we try to do this with the modes that you have learned so far:&lt;/p&gt;

&lt;p&gt;If you open a file in  &lt;code&gt;&amp;quot;r&amp;quot;&lt;/code&gt;  mode (read), and then try to write to it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = open(&amp;quot;data/names.txt&amp;quot;)
f.write(&amp;quot;New Content&amp;quot;) # Trying to write
f.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will get this error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Traceback (most recent call last):
  File &amp;quot;&amp;lt;path&amp;gt;&amp;quot;, line 9, in &amp;lt;module&amp;gt;
    f.write(&amp;quot;New Content&amp;quot;)
io.UnsupportedOperation: not writable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similarly, if you open a file in  &lt;code&gt;&amp;quot;w&amp;quot;&lt;/code&gt;  mode (write), and then try to read it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = open(&amp;quot;data/names.txt&amp;quot;, &amp;quot;w&amp;quot;)
print(f.readlines()) # Trying to read
f.write(&amp;quot;New Content&amp;quot;)
f.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will see this error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Traceback (most recent call last):
  File &amp;quot;&amp;lt;path&amp;gt;&amp;quot;, line 14, in &amp;lt;module&amp;gt;
    print(f.readlines())
io.UnsupportedOperation: not readable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The same will occur with the  &lt;code&gt;&amp;quot;a&amp;quot;&lt;/code&gt;  (append) mode.&lt;/p&gt;

&lt;p&gt;How can we solve this? To be able to read a file and perform another operation in the same program, you need to add the  &lt;code&gt;&amp;quot;+&amp;quot;&lt;/code&gt;  symbol to the mode, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = open(&amp;quot;data/names.txt&amp;quot;, &amp;quot;w+&amp;quot;) # Read + Write
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = open(&amp;quot;data/names.txt&amp;quot;, &amp;quot;a+&amp;quot;) # Read + Append
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = open(&amp;quot;data/names.txt&amp;quot;, &amp;quot;r+&amp;quot;) # Read + Write
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Very useful, right? This is probably what you will use in your programs, but be sure to include only the modes that you need to avoid potential bugs.&lt;/p&gt;

&lt;p&gt;Sometimes files are no longer needed. Let&amp;rsquo;s see how you can delete files using Python.&lt;/p&gt;

&lt;h2 id=&#34;how-to-delete-files&#34;&gt;How to Delete Files&lt;/h2&gt;

&lt;p&gt;To remove a file using Python, you need to import a module called  &lt;code&gt;**os**&lt;/code&gt;  which contains functions that interact with your operating system.&lt;/p&gt;

&lt;p&gt;💡 &lt;strong&gt;Tip:&lt;/strong&gt;  A  &lt;strong&gt;module&lt;/strong&gt; is a Python file with related variables, functions, and classes.&lt;/p&gt;

&lt;p&gt;Particularly, you need the  &lt;code&gt;**remove()**&lt;/code&gt;  function. This function takes the path to the file as argument and deletes the file automatically.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/05/image-56.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see an example. We want to remove the file called  &lt;code&gt;sample_file.txt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/05/image-34.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To do it, we write this code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os
os.remove(&amp;quot;sample_file.txt&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;The first line:  &lt;code&gt;import os&lt;/code&gt;  is called an &amp;laquo;import statement&amp;raquo;. This statement is written at the top of your file and it gives you access to the functions defined in the  &lt;code&gt;os&lt;/code&gt;  module.&lt;/li&gt;
&lt;li&gt;The second line:  &lt;code&gt;os.remove(&amp;quot;sample_file.txt&amp;quot;)&lt;/code&gt;  removes the file specified.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;💡  &lt;strong&gt;Tip:&lt;/strong&gt;  you can use an absolute or a relative path.&lt;/p&gt;

&lt;p&gt;Now that you know how to delete files, let&amp;rsquo;s see an interesting tool&amp;hellip; Context Managers!&lt;/p&gt;

&lt;h2 id=&#34;meet-context-managers&#34;&gt;Meet Context Managers&lt;/h2&gt;

&lt;p&gt;Context Managers are Python constructs that will make your life much easier. By using them, you don&amp;rsquo;t need to remember to close a file at the end of your program and you have access to the file in the particular part of the program that you choose.&lt;/p&gt;

&lt;h3 id=&#34;syntax&#34;&gt;Syntax&lt;/h3&gt;

&lt;p&gt;This is an example of a context manager used to work with files:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/05/image-33.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;💡  &lt;strong&gt;Tip:&lt;/strong&gt; The body of the context manager has to be indented, just like we indent loops, functions, and classes. If the code is not indented, it will not be considered part of the context manager.&lt;/p&gt;

&lt;p&gt;When the body of the context manager has been completed, the file closes automatically.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;with open(&amp;quot;&amp;lt;path&amp;gt;&amp;quot;, &amp;quot;&amp;lt;mode&amp;gt;&amp;quot;) as &amp;lt;var&amp;gt;:
    # Working with the file...

# The file is closed here!
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;Here&amp;rsquo;s an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;with open(&amp;quot;data/names.txt&amp;quot;, &amp;quot;r+&amp;quot;) as f:
    print(f.readlines()) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This context manager opens the  &lt;code&gt;names.txt&lt;/code&gt;  file for read/write operations and assigns that file object to the variable  &lt;code&gt;f&lt;/code&gt;. This variable is used in the body of the context manager to refer to the file object.&lt;/p&gt;

&lt;h3 id=&#34;trying-to-read-it-again&#34;&gt;Trying to Read it Again&lt;/h3&gt;

&lt;p&gt;After the body has been completed, the file is automatically closed, so it can&amp;rsquo;t be read without opening it again. But wait! We have a line that tries to read it again, right here below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;with open(&amp;quot;data/names.txt&amp;quot;, &amp;quot;r+&amp;quot;) as f:
    print(f.readlines())

print(f.readlines()) # Trying to read the file again, outside of the context manager
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s see what happens:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Traceback (most recent call last):
  File &amp;quot;&amp;lt;path&amp;gt;&amp;quot;, line 21, in &amp;lt;module&amp;gt;
    print(f.readlines())
ValueError: I/O operation on closed file.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This error is thrown because we are trying to read a closed file. Awesome, right? The context manager does all the heavy work for us, it is readable, and concise.&lt;/p&gt;

&lt;h2 id=&#34;how-to-handle-exceptions-when-working-with-files&#34;&gt;How to Handle Exceptions When Working With Files&lt;/h2&gt;

&lt;p&gt;When you&amp;rsquo;re working with files, errors can occur. Sometimes you may not have the necessary permissions to modify or access a file, or a file might not even exist. As a programmer, you need to foresee these circumstances and handle them in your program to avoid sudden crashes that could definitely affect the user experience.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see some of the most common exceptions (runtime errors) that you might find when you work with files:&lt;/p&gt;

&lt;h3 id=&#34;filenotfounderror&#34;&gt;FileNotFoundError&lt;/h3&gt;

&lt;p&gt;According to the  &lt;a href=&#34;https://docs.python.org/3/library/exceptions.html#FileNotFoundError&#34; target=&#34;_blank&#34;&gt;Python Documentation&lt;/a&gt;, this exception is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Raised when a file or directory is requested but doesn’t exist.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example, if the file that you&amp;rsquo;re trying to open doesn&amp;rsquo;t exist in your current working directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = open(&amp;quot;names.txt&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will see this error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Traceback (most recent call last):
  File &amp;quot;&amp;lt;path&amp;gt;&amp;quot;, line 8, in &amp;lt;module&amp;gt;
    f = open(&amp;quot;names.txt&amp;quot;)
FileNotFoundError: [Errno 2] No such file or directory: &#39;names.txt&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s break this error down this line by line:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;File &amp;quot;&amp;lt;path&amp;gt;&amp;quot;, line 8, in &amp;lt;module&amp;gt;&lt;/code&gt;. This line tells you that the error was raised when the code on the file located in  &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt;  was running. Specifically, when  &lt;code&gt;line 8&lt;/code&gt;  was executed in  &lt;code&gt;&amp;lt;module&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f = open(&amp;quot;names.txt&amp;quot;)&lt;/code&gt;. This is the line that caused the error.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FileNotFoundError: [Errno 2] No such file or directory: &#39;names.txt&#39;&lt;/code&gt;  . This line says that a  &lt;code&gt;FileNotFoundError&lt;/code&gt;  exception was raised because the file or directory  &lt;code&gt;names.txt&lt;/code&gt;  doesn&amp;rsquo;t exist.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;💡  &lt;strong&gt;Tip:&lt;/strong&gt; Python is very descriptive with the error messages, right? This is a huge advantage during the process of debugging.&lt;/p&gt;

&lt;h3 id=&#34;permissionerror&#34;&gt;PermissionError&lt;/h3&gt;

&lt;p&gt;This is another common exception when working with files. According to the  &lt;a href=&#34;https://docs.python.org/3/library/exceptions.html#PermissionError&#34; target=&#34;_blank&#34;&gt;Python Documentation&lt;/a&gt;, this exception is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Raised when trying to run an operation without the adequate access rights - for example filesystem permissions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This exception is raised when you are trying to read or modify a file that don&amp;rsquo;t have permission to access. If you try to do so, you will see this error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Traceback (most recent call last):
  File &amp;quot;&amp;lt;path&amp;gt;&amp;quot;, line 8, in &amp;lt;module&amp;gt;
    f = open(&amp;quot;&amp;lt;file_path&amp;gt;&amp;quot;)
PermissionError: [Errno 13] Permission denied: &#39;data&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;isadirectoryerror&#34;&gt;IsADirectoryError&lt;/h3&gt;

&lt;p&gt;According to the  &lt;a href=&#34;https://docs.python.org/3/library/exceptions.html#IsADirectoryError&#34; target=&#34;_blank&#34;&gt;Python Documentation&lt;/a&gt;, this exception is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Raised when a file operation is requested on a directory.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This particular exception is raised when you try to open or work on a directory instead of a file, so be really careful with the path that you pass as argument.&lt;/p&gt;

&lt;h3 id=&#34;how-to-handle-exceptions&#34;&gt;How to Handle Exceptions&lt;/h3&gt;

&lt;p&gt;To handle these exceptions, you can use a  &lt;strong&gt;try/except&lt;/strong&gt;  statement. With this statement, you can &amp;laquo;tell&amp;raquo; your program what to do in case something unexpected happens.&lt;/p&gt;

&lt;p&gt;This is the basic syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;try:
	# Try to run this code
except &amp;lt;type_of_exception&amp;gt;:
	# If an exception of this type is raised, stop the process and jump to this block
    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here you can see an example with  &lt;code&gt;FileNotFoundError&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;try:
    f = open(&amp;quot;names.txt&amp;quot;)
except FileNotFoundError:
    print(&amp;quot;The file doesn&#39;t exist&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This basically says:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Try to open the file  &lt;code&gt;names.txt&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If a  &lt;code&gt;FileNotFoundError&lt;/code&gt;  is thrown, don&amp;rsquo;t crash! Simply print a descriptive statement for the user.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;💡  &lt;strong&gt;Tip:&lt;/strong&gt;  You can choose how to handle the situation by writing the appropriate code in the  &lt;code&gt;except&lt;/code&gt;  block. Perhaps you could create a new file if it doesn&amp;rsquo;t exist already.&lt;/p&gt;

&lt;p&gt;To close the file automatically after the task (regardless of whether an exception was raised or not in the  &lt;code&gt;try&lt;/code&gt;  block) you can add the  &lt;code&gt;finally&lt;/code&gt;  block.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;try:
	# Try to run this code
except &amp;lt;exception&amp;gt;:
	# If this exception is raised, stop the process immediately and jump to this block
finally: 
	# Do this after running the code, even if an exception was raised
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;try:
    f = open(&amp;quot;names.txt&amp;quot;)
except FileNotFoundError:
    print(&amp;quot;The file doesn&#39;t exist&amp;quot;)
finally:
    f.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are many ways to customize the try/except/finally statement and you can even add an  &lt;code&gt;else&lt;/code&gt;  block to run a block of code only if no exceptions were raised in the  &lt;code&gt;try&lt;/code&gt;  block.&lt;/p&gt;

&lt;p&gt;💡 &lt;strong&gt;Tip:&lt;/strong&gt;  To learn more about exception handling in Python, you may like to read my article:  &lt;a href=&#34;https://www.freecodecamp.org/news/exception-handling-python/&#34; target=&#34;_blank&#34;&gt;&amp;laquo;How to Handle Exceptions in Python: A Detailed Visual Introduction&amp;raquo;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;in-summary&#34;&gt;In Summary&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You can create, read, write, and delete files using Python.&lt;/li&gt;
&lt;li&gt;File objects have their own set of methods that you can use to work with them in your program.&lt;/li&gt;
&lt;li&gt;Context Managers help you work with files and manage them by closing them automatically when a task has been completed.&lt;/li&gt;
&lt;li&gt;Exception handling is key in Python. Common exceptions when you are working with files include  &lt;code&gt;FileNotFoundError&lt;/code&gt;,  &lt;code&gt;PermissionError&lt;/code&gt;  and  &lt;code&gt;IsADirectoryError&lt;/code&gt;. They can be handled using try/except/else/finally.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Reference : &lt;a href=&#34;https://www.freecodecamp.org/news/python-write-to-file-open-read-append-and-other-file-handling-functions-explained/&#34; target=&#34;_blank&#34;&gt;freeCodeCamp&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Regular Expressions</title>
      <link>https://dragon-library.github.io/coding/tutorials/post/python/tutorials/regular-expressions/</link>
      <pubDate>Wed, 15 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/coding/tutorials/post/python/tutorials/regular-expressions/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;featured.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Regular expressions are essentially a highly specialized programming language embedded inside Python that empowers you to specify the rules for the set of possible strings that you want to match.&lt;/p&gt;

&lt;p&gt;In Python you need the  &lt;strong&gt;re&lt;/strong&gt;  module for regular expressions usage. The grammar overview is on the bottom of this page.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Related course:&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://gum.co/dcsp&#34; target=&#34;_blank&#34;&gt;Python Programming Bootcamp: Go from zero to hero&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-match-function&#34;&gt;The Match function&lt;/h2&gt;

&lt;p&gt;The match function is defined as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;re.match(pattern, string)  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The parameters are:.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameters&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;pattern&lt;/td&gt;
&lt;td&gt;a regular expression&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;the input string&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;If you want to match a string to a numberic sequence of exactly five, you can use this code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;#!/usr/bin/python  
import re  
  
input = raw_input(&amp;quot;Enter an input string:&amp;quot;)  
m = re.match(&#39;\d{5}\Z&#39;,input)  
  
if m:  
 print(&amp;quot;True&amp;quot;)  
else:  
 print(&amp;quot;False&amp;quot;)  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example outputs:&lt;/p&gt;

&lt;h2 id=&#34;email-validation-regex&#34;&gt;Email validation regex&lt;/h2&gt;

&lt;p&gt;We can use the same function to validate  &lt;em&gt;email address&lt;/em&gt;. The grammar rules are seen in re.compile and in the grammar table.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;String	Match
12345	True
12358	True
55555	True
123	False
123K5	False
5555555	False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;#!/usr/bin/python  
import re  
  
input = raw_input(&amp;quot;Enter an input string:&amp;quot;)  
m = re.match(&#39;[^@]+@[^@]+\.[^@]+&#39;,input)  
  
if m:  
 print(&amp;quot;True&amp;quot;)  
else:  
 print(&amp;quot;False&amp;quot;)  
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-search-function&#34;&gt;The Search Function&lt;/h2&gt;

&lt;p&gt;The search function is defined as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;re.search(pattern, string)  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The parameters are:&lt;br /&gt;
Parameter   Description.&lt;br /&gt;
pattern a regular expression, defines the string to be searched
string  the search space&lt;/p&gt;

&lt;p&gt;To search if an e-mail address is in a string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;#!/usr/bin/python  
import re  
  
input = &amp;quot;Contact me by test@example.com or at the office.&amp;quot;  
  
m = re.search(&#39;[^@]+@[^@]+\.[^@]+&#39;,input)  
  
if m:  
 print(&amp;quot;String found.&amp;quot;)  
else:  
 print(&amp;quot;Nothing found.&amp;quot;)  
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;regular-expression-examples&#34;&gt;Regular Expression Examples&lt;/h2&gt;

&lt;p&gt;A few examples of regular expressions:&lt;/p&gt;

&lt;h2 id=&#34;regular-expression-grammar&#34;&gt;Regular Expression Grammar&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Example&lt;/th&gt;
&lt;th&gt;Regex&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;IP address&lt;/td&gt;
&lt;td&gt;(([2][5][0-5].)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Email&lt;/td&gt;
&lt;td&gt;[^@]+@[^@]+.[^@]+&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Date&lt;/td&gt;
&lt;td&gt;MM/DD/YY (\d+/\d+/\d+)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Integer (positive)&lt;/td&gt;
&lt;td&gt;(?&amp;lt;![-.])\b[0-9]+\b(?!.[0-9])&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Integer&lt;/td&gt;
&lt;td&gt;[+-]?(?&amp;lt;!.)\b[0-9]+\b(?!.[0-9])&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Float&lt;/td&gt;
&lt;td&gt;(?&amp;lt;=&amp;gt;)\d+.\d+&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Hexadecimal&lt;/td&gt;
&lt;td&gt;\s–([0-9a-fA-F]+)(?:–)?\s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Overview of the regex grammar:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Regex&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;\d&lt;/td&gt;
&lt;td&gt;Matches any decimal digit; this is equivalent to the class [0-9]&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;\D&lt;/td&gt;
&lt;td&gt;Matches any non-digit character; this is equivalent to the class [^0-9].&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;\s&lt;/td&gt;
&lt;td&gt;Matches any whitespace character; this is equivalent to the class [ \t\n\r\f\v].&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;\S&lt;/td&gt;
&lt;td&gt;Matches any non-whitespace character; this is equivalent to the class [^ \t\n\r\f\v].&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;\w&lt;/td&gt;
&lt;td&gt;Matches any alphanumeric character; this is equivalent to the class [a-zA-Z0-9_].&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;\W&lt;/td&gt;
&lt;td&gt;Matches any non-alphanumeric character; this is equivalent to the class [^a-zA-Z0-9_].&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;\Z&lt;/td&gt;
&lt;td&gt;Matches only at end of string&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;[..]&lt;/td&gt;
&lt;td&gt;Match single character in brackets&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;[^..]&lt;/td&gt;
&lt;td&gt;Match any single character not in brackets&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;.&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Match any character except newline&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;$&lt;/td&gt;
&lt;td&gt;Match the end of the string&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;*&lt;/td&gt;
&lt;td&gt;Match 0 or more repetitions&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;+&lt;/td&gt;
&lt;td&gt;1 or more repetitions&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;{m}&lt;/td&gt;
&lt;td&gt;Exactly m copies of the previous RE should be matched.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;`&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;?&lt;/td&gt;
&lt;td&gt;0 or 1 repetitions of the preceding RE&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;[a-z]&lt;/td&gt;
&lt;td&gt;Any lowercase character&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;[A-Z]&lt;/td&gt;
&lt;td&gt;Any uppercase character&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;[a-zA-Z]&lt;/td&gt;
&lt;td&gt;Any character&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;[0-9]&lt;/td&gt;
&lt;td&gt;Any digit&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;Reference : &lt;a href=&#34;https://pythonspot.com/regular-expressions/&#34; target=&#34;_blank&#34;&gt;pythonspot.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Python List Append VS Python List Extend</title>
      <link>https://dragon-library.github.io/coding/tutorials/post/python/tutorials/list_append/</link>
      <pubDate>Sun, 22 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/coding/tutorials/post/python/tutorials/list_append/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/size/w2000/2020/03/Image---Append-vs-Extend-1.png&#34; alt=&#34;Python List Append VS Python List Extend – The Difference Explained with Array Method Examples&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;welcome&#34;&gt;👋 Welcome&lt;/h2&gt;

&lt;p&gt;If you want to learn how to work with  &lt;code&gt;.append()&lt;/code&gt;  and  &lt;code&gt;.extend()&lt;/code&gt;  and understand their differences, then you have come to the right place. They are powerful list methods that you will definitely use in your Python projects.&lt;/p&gt;

&lt;p&gt;In this article, you will learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How and when to use the  &lt;code&gt;.append()&lt;/code&gt;  method.&lt;/li&gt;
&lt;li&gt;How and when to use the  &lt;code&gt;.extend()&lt;/code&gt;  method.&lt;/li&gt;
&lt;li&gt;Their main differences.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s begin 🔅&lt;/p&gt;

&lt;h2 id=&#34;append&#34;&gt;🔸 Append&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s see how the  &lt;code&gt;.append()&lt;/code&gt;  method works behind the scenes.&lt;/p&gt;

&lt;h3 id=&#34;use-cases&#34;&gt;Use Cases&lt;/h3&gt;

&lt;p&gt;You should use this method when you want to  &lt;strong&gt;add a single item to the end&lt;/strong&gt;  of a list.&lt;/p&gt;

&lt;p&gt;💡 &lt;strong&gt;Tips:&lt;/strong&gt; You can add items of any data type since lists can have elements of different data types.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/03/image-105.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;syntax-and-arguments&#34;&gt;Syntax and Arguments&lt;/h3&gt;

&lt;p&gt;To call the  &lt;code&gt;.append()&lt;/code&gt;  method, you will need to use this syntax:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/03/image-104.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;From Left to Right:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The list that will be modified. This is usually a variable that references a list.&lt;/li&gt;
&lt;li&gt;A dot, followed by the name of the method  &lt;code&gt;.append()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Within parentheses, the item that will be added to the end of the list.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;💡  &lt;strong&gt;Tips:&lt;/strong&gt; The dot is very important. This is called &amp;laquo;dot notation&amp;raquo;. The dot basically says &amp;laquo;call this method on this particular list&amp;raquo;, so the effect of the method will be applied to the list that is located before the dot.&lt;/p&gt;

&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;

&lt;p&gt;Here&amp;rsquo;s an example of how to use  &lt;code&gt;.append()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Define the list
&amp;gt;&amp;gt;&amp;gt; nums = [1, 2, 3, 4]

# Add the integer 5 to the end of the existing list
&amp;gt;&amp;gt;&amp;gt; nums.append(5)

# See the updated value of the list
&amp;gt;&amp;gt;&amp;gt; nums
[1, 2, 3, 4, 5]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;💡  &lt;strong&gt;Tips:&lt;/strong&gt;  When you use  &lt;code&gt;.append()&lt;/code&gt;  the original list is modified. The method does not create a copy of the list – it mutates the original list in memory.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s pretend that we are conducting a research and that we want to analyze the data collected using Python. We need to add a new measurement to the existing list of values.&lt;/p&gt;

&lt;p&gt;How do we do it? We use the  &lt;code&gt;.append()&lt;/code&gt;  method!&lt;/p&gt;

&lt;p&gt;You can see it right here:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Existing list
&amp;gt;&amp;gt;&amp;gt; nums = [5.6, 7.44, 6.75, 4.56, 2.3]

# Add the float (decimal number) to the end of the existing list
&amp;gt;&amp;gt;&amp;gt; nums.append(7.34)

# See the updated value of the list
&amp;gt;&amp;gt;&amp;gt; nums
[5.6, 7.44, 6.75, 4.56, 2.3, 7.34]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;equivalent-to&#34;&gt;Equivalent to&amp;hellip;&lt;/h3&gt;

&lt;p&gt;If you are familiar with string, list, or tuple slicing, what  &lt;code&gt;.append()&lt;/code&gt;  really does behind the scenes is equivalent to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a[len(a):] = [x]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this example, you can see that they are equivalent.&lt;/p&gt;

&lt;p&gt;Using  &lt;code&gt;.append()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; nums = [5.6, 7.44, 6.75, 4.56, 2.3]
&amp;gt;&amp;gt;&amp;gt; nums.append(4.52)
&amp;gt;&amp;gt;&amp;gt; nums
[5.6, 7.44, 6.75, 4.56, 2.3, 4.52]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using list slicing:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; nums = [5.6, 7.44, 6.75, 4.56, 2.3]
&amp;gt;&amp;gt;&amp;gt; nums[len(nums):] = [4.52]
&amp;gt;&amp;gt;&amp;gt; nums
[5.6, 7.44, 6.75, 4.56, 2.3, 4.52]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;appending-a-sequence&#34;&gt;Appending a Sequence&lt;/h3&gt;

&lt;p&gt;Now, what do you think about this example? What do you think will be output?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; nums = [5.6, 7.44, 6.75, 4.56, 2.3]
&amp;gt;&amp;gt;&amp;gt; nums.append([5.67, 7.67, 3.44])
&amp;gt;&amp;gt;&amp;gt; nums
# OUTPUT?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Are you ready? This will be the output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[5.6, 7.44, 6.75, 4.56, 2.3, [5.67, 7.67, 3.44]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You might be asking, why was the full list added as a single item? It&amp;rsquo;s because the  &lt;code&gt;.append()&lt;/code&gt;  method adds the entire item to the end of the list. If the item is a sequence such as a list, dictionary, or tuple, the entire sequence will be added as a single item of the existing list.&lt;/p&gt;

&lt;p&gt;Here we have another example (below). In this case, the item is a tuple and it is added as a single item of the list, not as individual items:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; names = [&amp;quot;Lulu&amp;quot;, &amp;quot;Nora&amp;quot;, &amp;quot;Gino&amp;quot;, &amp;quot;Bryan&amp;quot;]
&amp;gt;&amp;gt;&amp;gt; names.append((&amp;quot;Emily&amp;quot;, &amp;quot;John&amp;quot;))
&amp;gt;&amp;gt;&amp;gt; names
[&#39;Lulu&#39;, &#39;Nora&#39;, &#39;Gino&#39;, &#39;Bryan&#39;, (&#39;Emily&#39;, &#39;John&#39;)]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;extend&#34;&gt;🔸 Extend&lt;/h2&gt;

&lt;p&gt;Now let&amp;rsquo;s dive into the functionality of the  &lt;code&gt;.extend()&lt;/code&gt;  method.&lt;/p&gt;

&lt;h3 id=&#34;use-cases-1&#34;&gt;Use Cases&lt;/h3&gt;

&lt;p&gt;You should use this method if you need to  &lt;strong&gt;append several items to a list as individual items&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let me illustrate the importance of this method with a familiar friend that you just learned: the  &lt;code&gt;.append()&lt;/code&gt;  method. Based on what you&amp;rsquo;ve learned so far, if we wanted to add several  &lt;strong&gt;individual&lt;/strong&gt; items to a list using  &lt;code&gt;.append()&lt;/code&gt;, we would need to use  &lt;code&gt;.append()&lt;/code&gt;  several times, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# List that we want to modify
&amp;gt;&amp;gt;&amp;gt; nums = [5.6, 7.44, 6.75, 4.56, 2.3]

# Appending the items
&amp;gt;&amp;gt;&amp;gt; nums.append(2.3)
&amp;gt;&amp;gt;&amp;gt; nums.append(9.6)
&amp;gt;&amp;gt;&amp;gt; nums.append(4.564)
&amp;gt;&amp;gt;&amp;gt; nums.append(7.56)

# Updated list
&amp;gt;&amp;gt;&amp;gt; nums
[5.6, 7.44, 6.75, 4.56, 2.3, 2.3, 9.6, 4.564, 7.56]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;m sure that you are probably thinking that this would not be very efficient, right? What if I need to add thousands or millions of values? I cannot write thousands or millions of lines for this simple task. That would take forever!&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s see an alternative. We can store the values that we want to add in a separate list and then use a for loop to call  &lt;code&gt;.append()&lt;/code&gt;  as many times as needed:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# List that we want to modify
&amp;gt;&amp;gt;&amp;gt; nums = [5.6, 7.44, 6.75, 4.56, 2.3]

# Values that we want to add
&amp;gt;&amp;gt;&amp;gt; new_values = [2.3, 9.6, 4.564, 7.56]

# For loop that is going to append the value
&amp;gt;&amp;gt;&amp;gt; for num in new_values:
	nums.append(num)

# Updated value of the list
&amp;gt;&amp;gt;&amp;gt; nums
[5.6, 7.44, 6.75, 4.56, 2.3, 2.3, 9.6, 4.564, 7.56]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is more efficient, right? We are only writing a few lines. But there is an even more efficient, readable, and compact way to achieve the same purpose:  &lt;code&gt;.extend()&lt;/code&gt;!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; nums = [5.6, 7.44, 6.75, 4.56, 2.3]
&amp;gt;&amp;gt;&amp;gt; new_values = [2.3, 9.6, 4.564, 7.56]

# This is where the magic occurs! No more for loops
&amp;gt;&amp;gt;&amp;gt; nums.extend(new_values)

# The list was updated with individual values
&amp;gt;&amp;gt;&amp;gt; nums
[5.6, 7.44, 6.75, 4.56, 2.3, 2.3, 9.6, 4.564, 7.56]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s see how this method works behind the scenes.&lt;/p&gt;

&lt;h3 id=&#34;syntax-and-arguments-1&#34;&gt;Syntax and Arguments&lt;/h3&gt;

&lt;p&gt;To call the  &lt;code&gt;.extend()&lt;/code&gt;  method, you will need to use this syntax:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/03/image-110.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;From Left to Right:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The list that will be modified. This is usually a variable that refers to the list.&lt;/li&gt;
&lt;li&gt;A dot  &lt;code&gt;.&lt;/code&gt;  (So far, everything is exactly the same as before).&lt;/li&gt;
&lt;li&gt;The name of the method  &lt;code&gt;extend&lt;/code&gt;. (Now things start to change&amp;hellip;).&lt;/li&gt;
&lt;li&gt;Within parentheses, an  &lt;strong&gt;iterable&lt;/strong&gt; (list, tuple, dictionary, set, or string) that contains the items that will be added as individual elements of the list.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;💡 &lt;strong&gt;Tips:&lt;/strong&gt;  According to the  &lt;a href=&#34;https://docs.python.org/3/glossary.html&#34; target=&#34;_blank&#34;&gt;Python documentation&lt;/a&gt;, an iterable is defined as &amp;laquo;an object capable of returning its members one at a time&amp;raquo;. Iterables can be used in a for loop and because they return their elements one at a time, we can &amp;laquo;do something&amp;raquo; with each one of them, one per iteration.&lt;/p&gt;

&lt;h3 id=&#34;behind-the-scenes&#34;&gt;Behind the Scenes&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s see how  &lt;code&gt;.extend()&lt;/code&gt;  works behind the scenes. Here we have an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# List that will be modified
&amp;gt;&amp;gt;&amp;gt; a = [1, 2, 3, 4]

# Sequence of values that we want to add to the list a
&amp;gt;&amp;gt;&amp;gt; b = [5, 6, 7]

# Calling .extend()
&amp;gt;&amp;gt;&amp;gt; a.extend(b)

# See the updated list. Now the list a has the values 5, 6, and 7
&amp;gt;&amp;gt;&amp;gt; a
[1, 2, 3, 4, 5, 6, 7]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can think of  &lt;code&gt;.extend()&lt;/code&gt;  as a method that appends the individual elements of the iterable in the same order as they appear.&lt;/p&gt;

&lt;p&gt;In this case, we have a list  &lt;code&gt;a = [1, 2, 3, 4]&lt;/code&gt;  as illustrated in the diagram below. We also have a list  &lt;code&gt;b = [5, 6, 7]&lt;/code&gt;  that contains the sequence of values that we want to add. The method takes each element of  &lt;code&gt;b&lt;/code&gt;  and appends it to list  &lt;code&gt;a&lt;/code&gt;  in the same order.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/03/image-106.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Step 1. First element is appended.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/03/image-107.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Step 2. Second element appended.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/03/image-108.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Step 3. Third element appended&lt;/p&gt;

&lt;p&gt;After this process is completed, we have the updated list  &lt;code&gt;a&lt;/code&gt;  and we can work with the values as individual elements of  &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.freecodecamp.org/news/content/images/2020/03/image-109.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;💡  &lt;strong&gt;Tips:&lt;/strong&gt;  The list  &lt;code&gt;b&lt;/code&gt;  used to extend list  &lt;code&gt;a&lt;/code&gt;  remains intact after this process. You can work with it after the call to  &lt;code&gt;.extend()&lt;/code&gt;. Here is the proof:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = [1, 2, 3, 4]
&amp;gt;&amp;gt;&amp;gt; b = [5, 6, 7]
&amp;gt;&amp;gt;&amp;gt; a.extend(b)
&amp;gt;&amp;gt;&amp;gt; a
[1, 2, 3, 4, 5, 6, 7]

# List b is intact!
&amp;gt;&amp;gt;&amp;gt; b
[5, 6, 7]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;examples-1&#34;&gt;Examples&lt;/h3&gt;

&lt;p&gt;You may be curious to know how the  &lt;code&gt;.extend()&lt;/code&gt;  method works when you pass different types of iterables. Let&amp;rsquo;s see how in the following examples:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For tuples:&lt;/strong&gt;&lt;br /&gt;
The process works exactly the same if you pass a tuple. The individual elements of the tuple are appended one by one in the order that they appear.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# List that will be extended
&amp;gt;&amp;gt;&amp;gt; a = [1, 2, 3, 4]

# Values that will be added (the iterable is a tuple!)
&amp;gt;&amp;gt;&amp;gt; b = (1, 2, 3, 4)

# Method call
&amp;gt;&amp;gt;&amp;gt; a.extend(b)

# The value of the list a was updated
&amp;gt;&amp;gt;&amp;gt; a
[1, 2, 3, 4, 1, 2, 3, 4]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;For sets:&lt;/strong&gt;&lt;br /&gt;
The same occurs if you pass a set. The elements of the set are appended one by one.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# List that will be extended
&amp;gt;&amp;gt;&amp;gt; a = [1, 2, 3, 4]

# Values that will be appended (the iterable is a set!)
&amp;gt;&amp;gt;&amp;gt; c = {5, 6, 7}

# Method call
&amp;gt;&amp;gt;&amp;gt; a.extend(c)

# The value of a was updated
&amp;gt;&amp;gt;&amp;gt; a
[1, 2, 3, 4, 5, 6, 7]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;For strings:&lt;/strong&gt;&lt;br /&gt;
Strings work a little bit different with the  &lt;code&gt;.extend()&lt;/code&gt;  method. Each character of the string is considered an &amp;laquo;item&amp;raquo;, so the characters are appended one by one in the order that they appear in the string.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# List that will be extended
&amp;gt;&amp;gt;&amp;gt; a = [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;]

# String that will be used to extend the list
&amp;gt;&amp;gt;&amp;gt; b = &amp;quot;Hello, World!&amp;quot;

# Method call
&amp;gt;&amp;gt;&amp;gt; a.extend(b)

# The value of a was updated
&amp;gt;&amp;gt;&amp;gt; a
[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39;,&#39;, &#39; &#39;, &#39;W&#39;, &#39;o&#39;, &#39;r&#39;, &#39;l&#39;, &#39;d&#39;, &#39;!&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;For dictionaries:&lt;/strong&gt;&lt;br /&gt;
Dictionaries have a particular behavior when you pass them as arguments to  &lt;code&gt;.extend()&lt;/code&gt;. In this case, the  &lt;strong&gt;keys&lt;/strong&gt; of the dictionary are appended one by one. The values of the corresponding key-value pairs are not appended.&lt;/p&gt;

&lt;p&gt;In this example (below), the keys are &amp;laquo;d&amp;raquo;, &amp;laquo;e&amp;raquo;, and &amp;laquo;f&amp;raquo;. These values are appended to the list  &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# List that will be extended
&amp;gt;&amp;gt;&amp;gt; a = [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;]

# Dictionary that will be used to extend the list
&amp;gt;&amp;gt;&amp;gt; b = {&amp;quot;d&amp;quot;: 5, &amp;quot;e&amp;quot;: 6, &amp;quot;f&amp;quot;: 7}

# Method call
&amp;gt;&amp;gt;&amp;gt; a.extend(b)

# The value of a was updated
&amp;gt;&amp;gt;&amp;gt; a
[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;equivalent-to-1&#34;&gt;Equivalent to&amp;hellip;&lt;/h3&gt;

&lt;p&gt;What  &lt;code&gt;.extend()&lt;/code&gt;  does is equivalent to  &lt;code&gt;a[len(a):] = iterable&lt;/code&gt;. Here we have an example to illustrate that they are equivalent:&lt;/p&gt;

&lt;p&gt;Using  &lt;code&gt;.extend()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# List that will be extended
&amp;gt;&amp;gt;&amp;gt; a = [1, 2, 3, 4]

# Values that will be appended
&amp;gt;&amp;gt;&amp;gt; b = (6, 7, 8)

# Method call
&amp;gt;&amp;gt;&amp;gt; a.extend(b)

# The list was updated
&amp;gt;&amp;gt;&amp;gt; a
[1, 2, 3, 4, 6, 7, 8]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using list slicing:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# List that will be extended
&amp;gt;&amp;gt;&amp;gt; a = [1, 2, 3, 4]

# Values that will be appended
&amp;gt;&amp;gt;&amp;gt; b = (6, 7, 8)

# Assignment statement. Assign the iterable b as the final portion of the list a
&amp;gt;&amp;gt;&amp;gt; a[len(a):] = b

# The value of a was updated
&amp;gt;&amp;gt;&amp;gt; a
[1, 2, 3, 4, 6, 7, 8]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The result is the same, but using  &lt;code&gt;.extend()&lt;/code&gt;  is much more readable and compact, right? Python truly offers amazing tools to improve our workflow.&lt;/p&gt;

&lt;h2 id=&#34;summary-of-their-differences&#34;&gt;🔸 Summary of their Differences&lt;/h2&gt;

&lt;p&gt;Now that you know how to work with  &lt;code&gt;.append()&lt;/code&gt;  and  &lt;code&gt;.extend()&lt;/code&gt;, let&amp;rsquo;s see a summary of their key differences:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Effect&lt;/strong&gt;:  &lt;code&gt;.append()&lt;/code&gt;  adds a single element to the end of the list while  &lt;code&gt;.extend()&lt;/code&gt;  can add multiple individual elements to the end of the list.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Argument&lt;/strong&gt;:  &lt;code&gt;.append()&lt;/code&gt;  takes a single element as argument while  &lt;code&gt;.extend()&lt;/code&gt;  takes an iterable as argument (list, tuple, dictionaries, sets, strings).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;I really hope that you liked my article and found it helpful.&lt;/strong&gt; Now you can work with  &lt;code&gt;.append()&lt;/code&gt;  and  &lt;code&gt;.extend()&lt;/code&gt;  in your Python projects.  &lt;a href=&#34;https://www.udemy.com/user/estefania-cn/&#34; target=&#34;_blank&#34;&gt;Check out my online courses&lt;/a&gt;. Follow me on  &lt;a href=&#34;https://twitter.com/EstefaniaCassN&#34; target=&#34;_blank&#34;&gt;Twitter&lt;/a&gt;. 👍&lt;/p&gt;

&lt;p&gt;Reference : &lt;a href=&#34;https://www.freecodecamp.org/news/python-list-append-vs-python-list-extend/&#34; target=&#34;_blank&#34;&gt;freeCodeCamp&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python Lists Explained</title>
      <link>https://dragon-library.github.io/coding/tutorials/post/python/tutorials/python-lists-explained/</link>
      <pubDate>Fri, 31 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/coding/tutorials/post/python/tutorials/python-lists-explained/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://images.unsplash.com/photo-1507925921958-8a62f3d1a50d?ixlib=rb-1.2.1&amp;amp;q=80&amp;amp;fm=jpg&amp;amp;crop=entropy&amp;amp;cs=tinysrgb&amp;amp;w=2000&amp;amp;fit=max&amp;amp;ixid=eyJhcHBfaWQiOjExNzczfQ&#34; alt=&#34;Python Lists Explained: Len, Pop, Index, and List Comprehension&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Lists in Python are similar to arrays in JavaScript. They are one of the built in data types in Python used to store collections of data.&lt;/p&gt;

&lt;h2 id=&#34;basic-usage&#34;&gt;Basic usage&lt;/h2&gt;

&lt;h3 id=&#34;how-to-create-a-list&#34;&gt;How to create a list&lt;/h3&gt;

&lt;p&gt;An empty  &lt;code&gt;list&lt;/code&gt;  is created using a pair of square brackets:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; empty_list = []
&amp;gt;&amp;gt;&amp;gt; type(empty_list)
&amp;lt;class &#39;list&#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; len(empty_list)
0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A  &lt;code&gt;list&lt;/code&gt;  can be created with elements by enclosing a comma separated list of elements with square brackets. Lists allow for the elements to be of different types (heterogeneous) but are most commonly of a single type (homogeneous):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; homogeneous_list = [1, 1, 2, 3, 5, 8]
&amp;gt;&amp;gt;&amp;gt; type(homogeneous_list)
&amp;lt;class &#39;list&#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; print(homogeneous_list)
[1, 1, 2, 3, 5, 8]
&amp;gt;&amp;gt;&amp;gt; len(homogeneous_list)
6
&amp;gt;&amp;gt;&amp;gt; heterogeneous_list = [1, &amp;quot;Hello Campers!&amp;quot;]
&amp;gt;&amp;gt;&amp;gt; print(heterogeneous_list)
[1, &amp;quot;Hello Campers!&amp;quot;]
&amp;gt;&amp;gt;&amp;gt; len(heterogeneous_list)
2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The  &lt;code&gt;list&lt;/code&gt;  constructor can also be used to create a  &lt;code&gt;list&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; empty_list = list()                            # Creates an empty list
&amp;gt;&amp;gt;&amp;gt; print(empty_list)
[]
&amp;gt;&amp;gt;&amp;gt; list_from_iterable = list(&amp;quot;Hello campers!&amp;quot;)    # Creates a list from an iterable.
&amp;gt;&amp;gt;&amp;gt; print(list_from_iterable)
[&#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39; &#39;, &#39;c&#39;, &#39;a&#39;, &#39;m&#39;, &#39;p&#39;, &#39;e&#39;, &#39;r&#39;, &#39;s&#39;, &#39;!&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also use List Comprehension to create lists, which we&amp;rsquo;ll cover later in the article.&lt;/p&gt;

&lt;h3 id=&#34;access-elements-in-a-list&#34;&gt;Access elements in a list&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; my_list = [1, 2, 9, 16, 25]
&amp;gt;&amp;gt;&amp;gt; print(my_list)
[1, 2, 9, 16, 25]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Zero indexed&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; my_list[0]
1
&amp;gt;&amp;gt;&amp;gt; my_list[1]
2
&amp;gt;&amp;gt;&amp;gt; my_list[2]
9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Wrap around indexing&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; my_list[-1]
25
&amp;gt;&amp;gt;&amp;gt; my_list[-2]
16
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Unpacking lists for python-3&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(*my_list)
1 2 9 16 25
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;lists-are-mutable&#34;&gt;Lists are mutable&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;lists&lt;/code&gt;  are mutable containers. Mutable containers are containers that allow changes to which objects are contained by the container.&lt;/p&gt;

&lt;p&gt;Elements from a  &lt;code&gt;list&lt;/code&gt;  may be extracted and re-arranged using another  &lt;code&gt;list&lt;/code&gt;  as index.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; my_list = [1, 2, 9, 16, 25, 34, 53, 21]
&amp;gt;&amp;gt;&amp;gt; my_index = [5, 2, 0]
&amp;gt;&amp;gt;&amp;gt; my_new_list = [my_list[i] for i in my_index]
&amp;gt;&amp;gt;&amp;gt; print(my_new_list)
[34, 9, 1]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;list-methods&#34;&gt;List methods&lt;/h2&gt;

&lt;h3 id=&#34;len&#34;&gt;&lt;code&gt;len()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The  &lt;code&gt;len()&lt;/code&gt;  method returns the length of an object, whether that be a list, a string, tuple, or dictionary.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;len()&lt;/code&gt;  takes one argument, which can be a sequence (such as a string, bytes, tuple, list, or range) or collection (such as a dictionary, set, or frozen set).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;list1 = [123, &#39;xyz&#39;, &#39;zara&#39;] # list
print(len(list1)) # prints 3 as there are 3 elements in the list1

str1 = &#39;basketball&#39; # string
print(len(str1)) # prints 10 as the str1 is made of 10 characters

tuple1 = (2, 3, 4, 5) # tuple 
print(len(tuple1)) # prints 4 as there are 4 elements in the tuple1

dict1 = {&#39;name&#39;: &#39;John&#39;, &#39;age&#39;: 4, &#39;score&#39;: 45} # dictionary
print(len(dict1)) # prints 3 as there are 3 key and value pairs in the dict1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;index&#34;&gt;&lt;code&gt;index()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;index()&lt;/code&gt;  returns the the first occurrence/index of the element in the list given as an argument to the function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;numbers = [1, 2, 2, 3, 9, 5, 6, 10]
words = [&amp;quot;I&amp;quot;, &amp;quot;love&amp;quot;, &amp;quot;Python&amp;quot;, &amp;quot;I&amp;quot;, &amp;quot;love&amp;quot;]

print(numbers.index(9)) # 4
print(numbers.index(2)) # 1
print(words.index(&amp;quot;I&amp;quot;)) # 0
print(words.index(&amp;quot;am&amp;quot;)) # returns a ValueError as &#39;am&#39; is not in the `words` list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here the first output is very obvious, but the second and third might seem confusing at first. But remember  &lt;code&gt;index()&lt;/code&gt;  returns the first occurrence of the element and hence in this case  &lt;code&gt;1&lt;/code&gt;  and  &lt;code&gt;0&lt;/code&gt;  are the indices where  &lt;code&gt;2&lt;/code&gt;  and  &lt;code&gt;&amp;quot;I&amp;quot;&lt;/code&gt;  occur first in the lists respectively.&lt;/p&gt;

&lt;p&gt;Also, if an element is not found in the list, a  &lt;code&gt;ValueError&lt;/code&gt;  is returned as in the case of indexing  &lt;code&gt;&amp;quot;am&amp;quot;&lt;/code&gt;  in the  &lt;code&gt;words&lt;/code&gt;  list.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Optional arguments&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can also use optional arguments to limit your search to a particular sub-sequence of the list:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;words = [&amp;quot;I&amp;quot;, &amp;quot;am&amp;quot;, &amp;quot;a&amp;quot;, &amp;quot;I&amp;quot;, &amp;quot;am&amp;quot;, &amp;quot;Pythonista&amp;quot;]

print(words.index(&amp;quot;am&amp;quot;, 2, 5)) # 4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Although the element is searched between the indices 2 (inclusive) and 5 (not inclusive), the returned index is computed relative to the beginning of the full list rather than the start argument.&lt;/p&gt;

&lt;h3 id=&#34;pop&#34;&gt;&lt;code&gt;pop()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The  &lt;code&gt;pop()&lt;/code&gt;  method removes and returns the last element from a list.&lt;/p&gt;

&lt;p&gt;There is an optional parameter which is the index of the element to be removed from the list. If no index is specified,  &lt;code&gt;pop()&lt;/code&gt;  removes and returns the last item in the list.&lt;/p&gt;

&lt;p&gt;If the index passed to the  &lt;code&gt;pop()&lt;/code&gt;  method is not in the range, it throws the  &lt;code&gt;IndexError: pop index out of range&lt;/code&gt;  exception.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;cities = [&#39;New York&#39;, &#39;Dallas&#39;, &#39;San Antonio&#39;, &#39;Houston&#39;, &#39;San Francisco&#39;];

print &amp;quot;City popped is: &amp;quot;, cities.pop() # City popped is: San Francisco
print &amp;quot;City at index 2 is  : &amp;quot;, cities.pop(2) # City at index 2 is: San Antonio
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Basic stack functionality&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The  &lt;code&gt;pop()&lt;/code&gt;  method is often used in conjunction with  &lt;code&gt;append()&lt;/code&gt;  to implement basic stack functionality in a Python application:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;stack = []

for i in range(5):
    stack.append(i)

while len(stack):
    print(stack.pop())
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;list-comprehension&#34;&gt;List Comprehension&lt;/h3&gt;

&lt;p&gt;List Comprehension is a way of looping through a list to produce a new list based on some conditions. It can be confusing at first but once you are acclimated to the syntax it is very powerful and quick.&lt;/p&gt;

&lt;p&gt;The first step in learning how to use list comprehension is to look at the traditional way of looping through a list. The following is a simple example that returns a new list of even numbers.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Example list for demonstration
some_list = [1, 2, 5, 7, 8, 10]

# Empty list that will be populate with a loop
even_list = []

for number in some_list:
  if number % 2 == 0:
    even_list.append(number)

# even_list now equals [2, 8, 10]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First a list is created with some numbers. You then create an empty list that will hold your results from the loop. In the loop you check to see if each number is divisible by 2 and if so you add it the the  &lt;code&gt;even_list&lt;/code&gt;. This took 5 lines of code not including comments and white space which isn’t much in this example.&lt;/p&gt;

&lt;p&gt;Now for the list comprehension example.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Example list for demonstration
some_list = [1, 2, 5, 7, 8, 10]

# List Comprehension
even_list = [number for number in some_list if number % 2 == 0]

# even_list now equals [2, 8, 10]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another example, with the same two steps: The following will create a list of numbers that correspond to the numbers in  &lt;code&gt;my_starting_list&lt;/code&gt;  multiplied by 7.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;my_starting_list = [1, 2, 3, 4, 5, 6, 7, 8]
my_new_list = []

for item in my_starting_list:
my_new_list.append(item * 7)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When this code is run, the final value of  &lt;code&gt;my_new_list&lt;/code&gt;  is:  &lt;code&gt;[7, 14, 21, 28, 35, 42, 49, 56]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A developer using list comprehension could achieve the same result using the following list comprehension, which results in the same  &lt;code&gt;my_new_list&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;my_starting_list = [1, 2, 3, 4, 5, 6, 7, 8]

my_new_list = [item * 7 for item in my_starting_list]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A simple formula to write in a list comprehension way is:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;my_list = [{operation with input n} for n in {python iterable}]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Replace  &lt;code&gt;{operation with input n}&lt;/code&gt;  with however you want to change the item returned from the iterable. The above example uses  &lt;code&gt;n * 7&lt;/code&gt;  but the operation can be as simple or as complex as necessary.&lt;/p&gt;

&lt;p&gt;Replace  &lt;code&gt;{python iterable}&lt;/code&gt;  with any iterable. Sequence types will be most common. A list was used in the above example, but tuples and ranges are also common.&lt;/p&gt;

&lt;p&gt;List comprehension adds an element from an existing list to a new list if some condition is met. It is neater, but is also much faster in most cases. In some cases, list comprehension may hinder readability, so the developer must weigh their options when choosing to use list comprehension.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Examples of list comprehension with conditionals&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The flow of control in list comprehensions can be controlled using conditionals. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;only_even_list = [i for i in range(13) if i%2==0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is equivalent to the following loop:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;only_even_list = list()
for i in range(13):
  if i%2 == 0:
    only_even_list.append(i)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;List comprehension can also contain nested if conditions. Consider the following loop:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;divisible = list()
for i in range(50):
  if i%2 == 0:
    if i%3 == 0:
      divisible.append(i)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using list comprehension this can be written as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;divisible = [i for i in range(50) if i%2==0 if i%3==0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If-Else statement can also be used along with list comprehension.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;list_1 = [i if i%2==0 else i*-1 for i in range(10)]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;more-information&#34;&gt;&lt;strong&gt;More Information:&lt;/strong&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/python-example/&#34; target=&#34;_blank&#34;&gt;The Best Python Code Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Reference : &lt;a href=&#34;https://www.freecodecamp.org/news/python-lists-explained-len-pop-index-and-list-comprehension/&#34; target=&#34;_blank&#34;&gt;freeCodeCamp&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Python Virtual Environments Explained with Examples</title>
      <link>https://dragon-library.github.io/coding/tutorials/post/python/tutorials/virtual-environments/</link>
      <pubDate>Fri, 31 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/coding/tutorials/post/python/tutorials/virtual-environments/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;featured.jpg&#34; alt=&#34;Python Virtual Environments Explained with Examples&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Virtual environments can be described as isolated installation directories. This isolation allows you to localized the installation of your project’s dependencies, without forcing you to install them system-wide.&lt;/p&gt;

&lt;p&gt;Imagine you have two applications, App1 and App2. Both use the package Pak, but require different versions. If you install Pak version 2.3 for App1, you would not be able to run App2 because it requires version 3.1.&lt;/p&gt;

&lt;p&gt;This is where virtual environments come in handy.&lt;/p&gt;

&lt;p&gt;Benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can have multiple environments, with multiple sets of packages, without conflicts among them. This way, different projects’ requirements can be satisfied at the same time.&lt;/li&gt;
&lt;li&gt;You can easily release your project with its own dependent modules.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are two ways you can create Python virtual environments.&lt;/p&gt;

&lt;h2 id=&#34;virtualenv&#34;&gt;&lt;strong&gt;Virtualenv&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;[virtualenv](https://virtualenv.pypa.io/en/stable/)&lt;/code&gt;  is a tool used to create isolated Python environments. It creates a folder which contains all the necessary executables to use the packages that a Python project would need.&lt;/p&gt;

&lt;p&gt;You can install it with  &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;pip install virtualenv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Verify the installation with the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;virtualenv --version
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;create-an-environment&#34;&gt;&lt;strong&gt;Create an Environment&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;To create a virtual environment use:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;virtualenv --no-site-packages my-env
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This creates a folder in the current directory with the name of the environment (&lt;code&gt;my-env/&lt;/code&gt;). This folder contains the directories for installing modules and Python executables.&lt;/p&gt;

&lt;p&gt;You can also specify the Python version you want to work with. Just use the argument  &lt;code&gt;--python=/path/to/python/version&lt;/code&gt;. For instance,  &lt;code&gt;python2.7&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;virtualenv --python=/usr/bin/python2.7 my-env
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;list-environments&#34;&gt;&lt;strong&gt;List Environments&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;You can list the available environments with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;lsvirtualenv
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;activate-an-environment&#34;&gt;&lt;strong&gt;Activate an Environment&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Before you can start using the environment you need to activate it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;source my-env/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This ensures that only packages under  &lt;code&gt;my-env/&lt;/code&gt;  are used.&lt;/p&gt;

&lt;p&gt;You will notice that the name of the environment is shown on the left of the prompt. This way you can see which is the active environment.&lt;/p&gt;

&lt;h3 id=&#34;install-packages&#34;&gt;&lt;strong&gt;Install Packages&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;You can install packages one by one, or by setting a  &lt;code&gt;requirements.txt&lt;/code&gt;  file for your project.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;pip install some-package
pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to create a  &lt;code&gt;requirements.txt&lt;/code&gt;  file from the already installed packages, run the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;pip freeze &amp;gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The file will contain the list of all the packages installed in the current environment, and their respective versions. This will help you release your project with its own dependent modules.&lt;/p&gt;

&lt;h3 id=&#34;deactivate-an-environment&#34;&gt;&lt;strong&gt;Deactivate an Environment&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;If you are done working with the virtual environment you can deactivate it with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;deactivate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This puts you back to the system’s default Python interpreter with all its installed libraries.&lt;/p&gt;

&lt;h3 id=&#34;delete-an-environment&#34;&gt;&lt;strong&gt;Delete an Environment&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Simply delete the environment folder.&lt;/p&gt;

&lt;h2 id=&#34;conda&#34;&gt;&lt;strong&gt;Conda&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://conda.io/docs/index.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;Conda&lt;/code&gt;&lt;/a&gt;  is a package, dependency and environment management for many languages, including Python.&lt;/p&gt;

&lt;p&gt;To install Conda, follow these  &lt;a href=&#34;https://conda.io/docs/user-guide/install/index.html&#34; target=&#34;_blank&#34;&gt;instructions&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;create-an-environment-1&#34;&gt;&lt;strong&gt;Create an Environment&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;To create a virtual environment use:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;conda create --name my-env
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Conda will create the corresponding folder inside the Conda installation directory.&lt;/p&gt;

&lt;p&gt;You can also specify which version of Python you want to work with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;conda create --name my-env python=3.6
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;list-environments-1&#34;&gt;&lt;strong&gt;List Environments&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;You can list all the available environments with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;conda info --envs
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;activate-an-environment-1&#34;&gt;&lt;strong&gt;Activate an Environment&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Before you can start using the environment you need to activate it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;source activate my-env
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;install-packages-1&#34;&gt;&lt;strong&gt;Install Packages&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The same as with  &lt;code&gt;virtualenv&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;deactivate-an-environment-1&#34;&gt;&lt;strong&gt;Deactivate an Environment&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;If you are done working with the virtual environment you can deactivate it with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;source deactivate
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;remove-an-environment&#34;&gt;&lt;strong&gt;Remove an Environment&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;If you want to remove an environment from Conda use:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;conda remove --name my-env
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Reference : &lt;a href=&#34;https://www.freecodecamp.org/news/python-virtual-environments-explained-with-examples/&#34; target=&#34;_blank&#34;&gt;freeCodeCamp&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Python String Methods Explained with Examples.</title>
      <link>https://dragon-library.github.io/coding/tutorials/post/python/tutorials/string-strip-method/</link>
      <pubDate>Thu, 30 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/coding/tutorials/post/python/tutorials/string-strip-method/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;featured.jpg&#34; alt=&#34;Python String Methods Explained with Examples&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;string-find-method&#34;&gt;&lt;strong&gt;String Find Method&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;There are two options for finding a substring within a string in Python,  &lt;code&gt;find()&lt;/code&gt;  and  &lt;code&gt;rfind()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Each will return the position that the substring is found at. The difference between the two is that  &lt;code&gt;find()&lt;/code&gt;  returns the lowest position, and  &lt;code&gt;rfind()&lt;/code&gt;  returns the highest position.&lt;/p&gt;

&lt;p&gt;Optional start and end arguments can be provided to limit the search for the substring to within portions of the string.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt;&amp;gt;&amp;gt; string = &amp;quot;Don&#39;t you call me a mindless philosopher, you overweight glob of grease!&amp;quot;
&amp;gt;&amp;gt;&amp;gt; string.find(&#39;you&#39;)
6
&amp;gt;&amp;gt;&amp;gt; string.rfind(&#39;you&#39;)
42
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the substring is not found, -1 is returned.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt;&amp;gt;&amp;gt; string = &amp;quot;Don&#39;t you call me a mindless philosopher, you overweight glob of grease!&amp;quot;
&amp;gt;&amp;gt;&amp;gt; string.find(&#39;you&#39;, 43)  # find &#39;you&#39; in string anywhere from position 43 to the end of the string
-1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More Information:&lt;/p&gt;

&lt;p&gt;String methods  &lt;a href=&#34;https://docs.python.org/3/library/stdtypes.html#string-methods&#34; target=&#34;_blank&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;string-join-method&#34;&gt;&lt;strong&gt;String Join Method&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;The  &lt;code&gt;str.join(iterable)&lt;/code&gt;  method is used to join all elements in an  &lt;code&gt;iterable&lt;/code&gt;  with a specified string  &lt;code&gt;str&lt;/code&gt;. If the iterable contains any non-string values, it raises a TypeError exception.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;iterable&lt;/code&gt;: All iterables of string. Could a list of strings, tuple of string or even a plain string.&lt;/p&gt;

&lt;h4 id=&#34;examples&#34;&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Join a ist of strings with  &lt;code&gt;&amp;quot;:&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print &amp;quot;:&amp;quot;.join([&amp;quot;freeCodeCamp&amp;quot;, &amp;quot;is&amp;quot;, &amp;quot;fun&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;freeCodeCamp:is:fun
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Join a tuple of strings with  &lt;code&gt;&amp;quot; and &amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print &amp;quot; and &amp;quot;.join([&amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;C&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;A and B and C
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Insert a  &lt;code&gt;&amp;quot; &amp;quot;&lt;/code&gt;  after every character in a string&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print &amp;quot; &amp;quot;.join(&amp;quot;freeCodeCamp&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;f r e e C o d e C a m p
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Joining with empty string.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;list1 = [&#39;p&#39;,&#39;r&#39;,&#39;o&#39;,&#39;g&#39;,&#39;r&#39;,&#39;a&#39;,&#39;m&#39;]  
print(&amp;quot;&amp;quot;.join(list1))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;program
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Joining with sets.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;test =  {&#39;2&#39;, &#39;1&#39;, &#39;3&#39;}
s = &#39;, &#39;
print(s.join(test))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;2, 3, 1
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;more-information&#34;&gt;&lt;strong&gt;More Information:&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.python.org/2/library/stdtypes.html#str.join&#34; target=&#34;_blank&#34;&gt;Python Documentation on String Join&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;string-replace-method&#34;&gt;&lt;strong&gt;String Replace Method&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;The  &lt;code&gt;str.replace(old, new, max)&lt;/code&gt;  method is used to replace the substring  &lt;code&gt;old&lt;/code&gt;  with the string  &lt;code&gt;new&lt;/code&gt;  for a total of  &lt;code&gt;max&lt;/code&gt;  times. This method returns a new copy of the string with the replacement. The original string  &lt;code&gt;str&lt;/code&gt;  is unchanged.&lt;/p&gt;

&lt;h4 id=&#34;examples-1&#34;&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Replace all occurrences of  &lt;code&gt;&amp;quot;is&amp;quot;&lt;/code&gt;  with  &lt;code&gt;&amp;quot;WAS&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;string = &amp;quot;This is nice. This is good.&amp;quot;
newString = string.replace(&amp;quot;is&amp;quot;,&amp;quot;WAS&amp;quot;)
print(newString)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Output&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ThWAS WAS nice. ThWAS WAS good.
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Replace the first 2 occurrences of  &lt;code&gt;&amp;quot;is&amp;quot;&lt;/code&gt;  with  &lt;code&gt;&amp;quot;WAS&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;string = &amp;quot;This is nice. This is good.&amp;quot;
newString = string.replace(&amp;quot;is&amp;quot;,&amp;quot;WAS&amp;quot;, 2)
print(newString)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Output&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ThWAS WAS nice. This is good.
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;more-information-1&#34;&gt;&lt;strong&gt;More Information:&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Read more about string replacement in the  &lt;a href=&#34;https://docs.python.org/2/library/string.html#string.replace&#34; target=&#34;_blank&#34;&gt;Python docs&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;string-strip-method&#34;&gt;&lt;strong&gt;String Strip Method&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;There are three options for stripping characters from a string in Python,  &lt;code&gt;lstrip()&lt;/code&gt;,  &lt;code&gt;rstrip()&lt;/code&gt;  and  &lt;code&gt;strip()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Each will return a copy of the string with characters removed, at from the beginning, the end or both beginning and end. If no arguments are given the default is to strip whitespace characters.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; string = &#39;   Hello, World!    &#39;
&amp;gt;&amp;gt;&amp;gt; strip_beginning = string.lstrip()
&amp;gt;&amp;gt;&amp;gt; strip_beginning
&#39;Hello, World!    &#39;
&amp;gt;&amp;gt;&amp;gt; strip_end = string.rstrip()
&amp;gt;&amp;gt;&amp;gt; strip_end
&#39;   Hello, World!&#39;
&amp;gt;&amp;gt;&amp;gt; strip_both = string.strip()
&amp;gt;&amp;gt;&amp;gt; strip_both
&#39;Hello, World!&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An optional argument can be provided as a string containing all characters you wish to strip.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; url = &#39;www.example.com/&#39;
&amp;gt;&amp;gt;&amp;gt; url.strip(&#39;w./&#39;)
&#39;example.com&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, do notice that only the first  &lt;code&gt;.&lt;/code&gt;  got stripped from the string. This is because the  &lt;code&gt;strip&lt;/code&gt;  function only strips the argument characters that lie at the left or rightmost. Since w comes before the first  &lt;code&gt;.&lt;/code&gt;  they get stripped together, whereas ‘com’ is present in the right end before the  &lt;code&gt;.&lt;/code&gt;  after stripping  &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;string-split-method&#34;&gt;String Split Method&lt;/h2&gt;

&lt;p&gt;The  &lt;code&gt;split()&lt;/code&gt;  function is commonly used for string splitting in Python.&lt;/p&gt;

&lt;h4 id=&#34;the-split-method&#34;&gt;&lt;strong&gt;The  &lt;code&gt;split()&lt;/code&gt;  method&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Template:  &lt;code&gt;string.split(separator, maxsplit)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;separator&lt;/code&gt;: The delimiter string. You split the string based on this character. For eg. it could be ” ”, ”:”, ”;” etc&lt;/p&gt;

&lt;p&gt;&lt;code&gt;maxsplit&lt;/code&gt;: The number of times to split the string based on the  &lt;code&gt;separator&lt;/code&gt;. If not specified or -1, the string is split based on all occurrences of the  &lt;code&gt;separator&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This method returns a list of substrings delimited by the  &lt;code&gt;separator&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;examples-2&#34;&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Split string on space: ” ”&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;string = &amp;quot;freeCodeCamp is fun.&amp;quot;
print(string.split(&amp;quot; &amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[&#39;freeCodeCamp&#39;, &#39;is&#39;, &#39;fun.&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Split string on comma: ”,”&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;string = &amp;quot;freeCodeCamp,is fun, and informative&amp;quot;
print(string.split(&amp;quot;,&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[&#39;freeCodeCamp&#39;, &#39;is fun&#39;, &#39; and informative&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No  &lt;code&gt;separator&lt;/code&gt;  specified&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;string = &amp;quot;freeCodeCamp is fun and informative&amp;quot;
print(string.split())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[&#39;freeCodeCamp&#39;, &#39;is&#39;, &#39;fun&#39;, &#39;and&#39;, &#39;informative&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: If no  &lt;code&gt;separator&lt;/code&gt;  is specified, then the string is stripped of  *&lt;strong&gt;&lt;em&gt;all&lt;/em&gt;&lt;/strong&gt;*  whitespace&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;string = &amp;quot;freeCodeCamp        is     fun and    informative&amp;quot;
print(string.split())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[&#39;freeCodeCamp&#39;, &#39;is&#39;, &#39;fun&#39;, &#39;and&#39;, &#39;informative&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Split string using  &lt;code&gt;maxsplit&lt;/code&gt;. Here we split the string on ” ” twice:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;string = &amp;quot;freeCodeCamp is fun and informative&amp;quot;
print(string.split(&amp;quot; &amp;quot;, 2))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[&#39;freeCodeCamp&#39;, &#39;is&#39;, &#39;fun and informative&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;more-information-2&#34;&gt;&lt;strong&gt;More Information&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Check out the  &lt;a href=&#34;https://www.freecodecamp.org/news/the-string-strip-method-in-python-explained/&#34; target=&#34;_blank&#34;&gt;Python docs on string splitting&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Reference : &lt;a href=&#34;https://www.freecodecamp.org/news/the-string-strip-method-in-python-explained/&#34; target=&#34;_blank&#34;&gt;freeCodeCamp&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Python Function Guide</title>
      <link>https://dragon-library.github.io/coding/tutorials/post/python/tutorials/python-function-guide/</link>
      <pubDate>Tue, 28 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/coding/tutorials/post/python/tutorials/python-function-guide/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://images.unsplash.com/photo-1555949963-aa79dcee981c?ixlib=rb-1.2.1&amp;amp;q=80&amp;amp;fm=jpg&amp;amp;crop=entropy&amp;amp;cs=tinysrgb&amp;amp;w=2000&amp;amp;fit=max&amp;amp;ixid=eyJhcHBfaWQiOjExNzczfQ&#34; alt=&#34;Python Function Guide with Examples&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;introduction-to-functions-in-python&#34;&gt;Introduction to Functions in Python&lt;/h2&gt;

&lt;p&gt;A function allows you to define a reusable block of code that can be executed many times within your program.&lt;/p&gt;

&lt;p&gt;Functions allow you to create more modular and  &lt;a href=&#34;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&#34; target=&#34;_blank&#34;&gt;DRY&lt;/a&gt;  solutions to complex problems.&lt;/p&gt;

&lt;p&gt;While Python already provides many built-in functions such as  &lt;code&gt;print()&lt;/code&gt;  and  &lt;code&gt;len()&lt;/code&gt;, you can also define your own functions to use within your projects.&lt;/p&gt;

&lt;p&gt;One of the great advantages of using functions in your code is that it reduces the overall number of lines of code in your project.&lt;/p&gt;

&lt;h3 id=&#34;syntax&#34;&gt;&lt;strong&gt;Syntax&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;In Python, a function definition has the following features:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The keyword  &lt;code&gt;def&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;a function name&lt;/li&gt;
&lt;li&gt;paranthesis’()’, and within paranthesis input parameters,although the input parameters are optional.&lt;/li&gt;
&lt;li&gt;a colon ’:’&lt;/li&gt;
&lt;li&gt;some block of code to execute&lt;/li&gt;

&lt;li&gt;&lt;p&gt;a return statement (optional)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# a function with no parameters or returned values
def sayHello():
print(&amp;quot;Hello!&amp;quot;)

sayHello()  # calls the function, &#39;Hello!&#39; is printed to the console

# a function with a parameter
def helloWithName(name):
print(&amp;quot;Hello &amp;quot; + name + &amp;quot;!&amp;quot;)

helloWithName(&amp;quot;Ada&amp;quot;)  # calls the function, &#39;Hello Ada!&#39; is printed to the console

# a function with multiple parameters with a return statement
def multiply(val1, val2):
return val1 * val2

multiply(3, 5)  # prints 15 to the console
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Functions are blocks of code that can be reused simply by calling the function. This enables simple, elegant code reuse without explicitly re-writing sections of code. This makes code both more readable, makes for easier debugging, and limits typing errors.&lt;/p&gt;

&lt;p&gt;Functions in Python are created using the  &lt;code&gt;def&lt;/code&gt;  keyword, followed by a function name and function parameters inside parentheses.&lt;/p&gt;

&lt;p&gt;A function always returns a value,The  &lt;code&gt;return&lt;/code&gt;  keyword is used by the function to return a value, if you don’t want to return any value, the default value  &lt;code&gt;None&lt;/code&gt;  will returned.&lt;/p&gt;

&lt;p&gt;The function name is used to call the function, passing the needed parameters inside parentheses.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# this is a basic sum function
def sum(a, b):
  return a + b

result = sum(1, 2)
# result = 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can define default values for the parameters, that way Python will interpretate that the value of that parameter is the default one if none is given.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def sum(a, b=3):
  return a + b

result = sum(1)
# result = 4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can pass the parameters in the order you want, using the name of the parameter.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;result = sum(b=2, a=2)
# result = 4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, it is not possible to pass a keyword argument before a non-keyword one&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;result = sum(3, b=2)
#result = 5
result2 = sum(b=2, 3)
#Will raise SyntaxError
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Functions are also Objects, so you can assign them to a variable, and use that variable like a function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;s = sum
result = s(1, 2)
# result = 3
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;notes&#34;&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;If a function definition includes parameters, you must provide the same number of parameters when you call the function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(multiply(3))  # TypeError: multiply() takes exactly 2 arguments (0 given)

print(multiply(&#39;a&#39;, 5))  # &#39;aaaaa&#39; printed to the console

print(multiply(&#39;a&#39;, &#39;b&#39;))  # TypeError: Python can&#39;t multiply two strings
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The block of code that the function will run includes all statements indented within the function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def myFunc():
print(&#39;this will print&#39;)
print(&#39;so will this&#39;)

x = 7
# the assignment of x is not a part of the function since it is not indented
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Variables defined within a function only exist within the scope of that function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def double(num):
x = num * 2
return x

print(x)  # error - x is not defined
print(double(4))  # prints 8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Python interprets the function block only when the function is called and not when the function is defined.So even if the function definition block contains some sort of error, the python interpreter will point that out only when the function is called.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s look at some specific functions with examples.&lt;/p&gt;

&lt;h2 id=&#34;max-function&#34;&gt;max() function&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;max()&lt;/code&gt;  is a built-in function in Python 3. It returns the largest item in an iterable or the largest of two or more arguments.&lt;/p&gt;

&lt;h3 id=&#34;arguments&#34;&gt;Arguments&lt;/h3&gt;

&lt;p&gt;This function takes two or more numbers or any kind of iterable as an argument. While giving an iterable as an argument we must make sure that all the elements in the iterable are of the same type. This means that we cannot pass a list which has both string and integer values stored in it. Syntax: max(iterable, *iterables[,key, default]) max(arg1, arg2, *args[, key])&lt;/p&gt;

&lt;p&gt;Valid Arguments:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;max(2, 3)
max([1, 2, 3])
max(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Invalid Arguments:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;max(2, &#39;a&#39;)
max([1, 2, 3, &#39;a&#39;])
max([])
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;return-value&#34;&gt;Return Value&lt;/h3&gt;

&lt;p&gt;The largest item in the iterable is returned. If two or more positional arguments are provided, the largest of the positional arguments is returned. If the iterable is empty and default is not provided, a  &lt;code&gt;ValueError&lt;/code&gt;  is raised.&lt;/p&gt;

&lt;h3 id=&#34;code-sample&#34;&gt;Code Sample&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(max(2, 3)) # Returns 3 as 3 is the largest of the two values
print(max(2, 3, 23)) # Returns 23 as 23 is the largest of all the values

list1 = [1, 2, 4, 5, 54]
print(max(list1)) # Returns 54 as 54 is the largest value in the list

list2 = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39; ]
print(max(list2)) # Returns &#39;c&#39; as &#39;c&#39; is the largest in the list because c has ascii value larger then &#39;a&#39; ,&#39;b&#39;.

list3 = [1, 2, &#39;abc&#39;, &#39;xyz&#39;]
print(max(list3)) # Gives TypeError as values in the list are of different type

#Fix the TypeError mentioned above first before moving on to next step

list4 = []
print(max(list4)) # Gives ValueError as the argument is empty
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://repl.it/CVok&#34; target=&#34;_blank&#34;&gt;Run Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/library/functions.html#max&#34; target=&#34;_blank&#34;&gt;Official Docs&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;min-function&#34;&gt;min() function&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;min()&lt;/code&gt;  is a built-in function in Python 3. It returns the smallest item in an iterable or the smallest of two or more arguments.&lt;/p&gt;

&lt;h3 id=&#34;arguments-1&#34;&gt;Arguments&lt;/h3&gt;

&lt;p&gt;This function takes two or more numbers or any kind of iterable as an argument. While giving an iterable as an argument we must make sure that all the elements in the iterable are of the same type. This means that we cannot pass a list which has both string and integer values stored in it.&lt;/p&gt;

&lt;p&gt;Valid Arguments:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;min(2, 3)
min([1, 2, 3])
min(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Invalid Arguments:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;min(2, &#39;a&#39;)
min([1, 2, 3, &#39;a&#39;])
min([])
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;return-value-1&#34;&gt;Return Value&lt;/h3&gt;

&lt;p&gt;The smallest item in the iterable is returned. If two or more positional arguments are provided, the smallest of the positional arguments&lt;br /&gt;
is returned. If the iterable is empty and default is not provided, a ValueError is raised.&lt;/p&gt;

&lt;h3 id=&#34;code-sample-1&#34;&gt;Code Sample&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(min(2, 3)) # Returns 2 as 2 is the smallest of the two values
print(min(2, 3, -1)) # Returns -1 as -1 is the smallest of the two values

list1 = [1, 2, 4, 5, -54]
print(min(list1)) # Returns -54 as -54 is the smallest value in the list

list2 = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39; ]
print(min(list2)) # Returns &#39;a&#39; as &#39;a&#39; is the smallest in the list in alphabetical order

list3 = [1, 2, &#39;abc&#39;, &#39;xyz&#39;]
print(min(list3)) # Gives TypeError as values in the list are of different type

#Fix the TypeError mentioned above first before moving on to next step

list4 = []
print(min(list4)) # Gives ValueError as the argument is empty
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://repl.it/CVir/4&#34; target=&#34;_blank&#34;&gt;Run Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/library/functions.html#min&#34; target=&#34;_blank&#34;&gt;Official Docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;divmod()&lt;/code&gt;  is a built-in function in Python 3, which returns the quotient and remainder when dividing the number  &lt;code&gt;a&lt;/code&gt;  by the number  &lt;code&gt;b&lt;/code&gt;. It takes two numbers as arguments  &lt;code&gt;a&lt;/code&gt;  &amp;amp;  &lt;code&gt;b&lt;/code&gt;. The argument can’t be a complex number.&lt;/p&gt;

&lt;h3 id=&#34;argument&#34;&gt;Argument&lt;/h3&gt;

&lt;p&gt;It takes two arguments  &lt;code&gt;a&lt;/code&gt;  &amp;amp;  &lt;code&gt;b&lt;/code&gt;  - an integer, or a decimal number.It can’t be a complex number.&lt;/p&gt;

&lt;h3 id=&#34;return-value-2&#34;&gt;Return Value&lt;/h3&gt;

&lt;p&gt;The return value will be the pair of positive numbers consisting of quotient and remainder obtained by dividing  &lt;code&gt;a&lt;/code&gt;  by  &lt;code&gt;b&lt;/code&gt;. In case of mixed operand types, rules for binary arithmetic operators will be applied.&lt;br /&gt;
For  *&lt;strong&gt;&lt;em&gt;Integer number arguments&lt;/em&gt;&lt;/strong&gt;*, return value will be same as  &lt;code&gt;(a // b, a % b)&lt;/code&gt;.&lt;br /&gt;
For  *&lt;strong&gt;&lt;em&gt;Decimal number arguments&lt;/em&gt;&lt;/strong&gt;*, return value will be same as  &lt;code&gt;(q, a % b)&lt;/code&gt;, where  &lt;code&gt;q&lt;/code&gt;  is usually  *&lt;strong&gt;&lt;em&gt;math.floor(a / b)&lt;/em&gt;&lt;/strong&gt;*  but may be 1 less than that.&lt;/p&gt;

&lt;h3 id=&#34;code-sample-2&#34;&gt;Code Sample&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(divmod(5,2)) # prints (2,1)
print(divmod(13.5,2.5)) # prints (5.0, 1.0)
q,r = divmod(13.5,2.5)  # Assigns q=quotient &amp;amp; r= remainder
print(q) # prints 5.0 because math.floor(13.5/2.5) = 5.0
print(r) # prints 1.0 because (13.5 % 2.5) = 1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://repl.it/FGLK/0&#34; target=&#34;_blank&#34;&gt;REPL It!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/library/functions.html#divmod&#34; target=&#34;_blank&#34;&gt;Official Docs&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;hex-x-function&#34;&gt;Hex(x) function&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;hex(x)&lt;/code&gt;  is a built-in function in Python 3 to convert an integer number to a lowercase  &lt;a href=&#34;https://www.mathsisfun.com/hexadecimals.html&#34; target=&#34;_blank&#34;&gt;hexadecimal&lt;/a&gt;  string prefixed with “0x”.&lt;/p&gt;

&lt;h3 id=&#34;argument-1&#34;&gt;Argument&lt;/h3&gt;

&lt;p&gt;This function takes one argument,  &lt;code&gt;x&lt;/code&gt;, that should be of integer type.&lt;/p&gt;

&lt;h3 id=&#34;return&#34;&gt;Return&lt;/h3&gt;

&lt;p&gt;This function returns a lowercase hexadecimal string prefixed with “0x”.&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(hex(16))    # prints  0x10
print(hex(-298))  # prints -0x12a
print(hex(543))   # prints  0x21f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://repl.it/CV0S&#34; target=&#34;_blank&#34;&gt;Run Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/library/functions.html#hex&#34; target=&#34;_blank&#34;&gt;Official Documentation&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;len-function&#34;&gt;len() function&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;len()&lt;/code&gt;  is a built-in function in Python 3. This method returns the length (the number of items) of an object. It takes one argument  &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;arguments-2&#34;&gt;Arguments&lt;/h3&gt;

&lt;p&gt;It takes one argument,  &lt;code&gt;x&lt;/code&gt;. This argument may be a sequence (such as a string, bytes, tuple, list, or range) or a collection (such as a dictionary, set, or frozen set).&lt;/p&gt;

&lt;h3 id=&#34;return-value-3&#34;&gt;Return Value&lt;/h3&gt;

&lt;p&gt;This function returns the number of elements in the argument which is passed to the  &lt;code&gt;len()&lt;/code&gt;  function.&lt;/p&gt;

&lt;h3 id=&#34;code-sample-3&#34;&gt;Code Sample&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;list1 = [123, &#39;xyz&#39;, &#39;zara&#39;] # list
print(len(list1)) # prints 3 as there are 3 elements in the list1

str1 = &#39;basketball&#39; # string
print(len(str1)) # prints 10 as the str1 is made of 10 characters

tuple1 = (2, 3, 4, 5) # tuple 
print(len(tuple1)) # prints 4 as there are 4 elements in the tuple1

dict1 = {&#39;name&#39;: &#39;John&#39;, &#39;age&#39;: 4, &#39;score&#39;: 45} # dictionary
print(len(dict1)) # prints 3 as there are 3 key and value pairs in the dict1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://repl.it/CUmt/15&#34; target=&#34;_blank&#34;&gt;Run Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/library/functions.html#len&#34; target=&#34;_blank&#34;&gt;Official Docs&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;ord-function&#34;&gt;&lt;strong&gt;Ord function&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ord()&lt;/code&gt;  is a built-in function in Python 3, to convert the string representing one Unicode character into integer representing the Unicode code of the character.&lt;/p&gt;

&lt;h4 id=&#34;examples&#34;&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; ord(&#39;d&#39;)
100
&amp;gt;&amp;gt;&amp;gt; ord(&#39;1&#39;)
49
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;chr-function&#34;&gt;chr function&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;chr()&lt;/code&gt;  is a built-in function in Python 3, to convert the integer representing the Unicode code into a string representing a corresponding character.&lt;/p&gt;

&lt;h4 id=&#34;examples-1&#34;&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; chr(49)
&#39;1&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One thing is to be noted that, if the integer value passed to  &lt;code&gt;chr()&lt;/code&gt;  is out of range then, a ValueError will be raised.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; chr(-10)
&#39;Traceback (most recent call last):
  File &amp;quot;&amp;lt;pyshell#24&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
    chr(-1)
ValueError: chr() arg not in range(0x110000)&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;input-functions&#34;&gt;input() functions&lt;/h2&gt;

&lt;p&gt;Many a time, in a program we need some input from the user. Taking inputs from the user makes the program feel interactive. In Python 3, to take input from the user we have a function  &lt;code&gt;input()&lt;/code&gt;. If the input function is called, the program flow will be stopped until the user has given an input and has ended the input with the return key. Let’s see some examples:&lt;/p&gt;

&lt;p&gt;When we just want to take the input:&lt;/p&gt;

&lt;p&gt;inp = input()&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://repl.it/CUqX/0&#34; target=&#34;_blank&#34;&gt;Run Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To give a prompt with a message:&lt;/p&gt;

&lt;p&gt;prompt_with_message = input(’‘)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://repl.it/CUqX/1&#34; target=&#34;_blank&#34;&gt;Run Code&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;When we want to take an integer input:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;number = int(input(&#39;Please enter a number: &#39;))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;https://repl.it/CUqX/2&#34; target=&#34;_blank&#34;&gt;Run Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you enter a non integer value then Python will throw an error  &lt;code&gt;ValueError&lt;/code&gt;.  *&lt;strong&gt;&lt;em&gt;So whenever you use this, please make sure that you catch it too.&lt;/em&gt;&lt;/strong&gt;*  Otherwise, your program will stop unexpectedly after the prompt.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;number = int(input(&#39;Please enter a number: &#39;))
# Please enter a number: as
# Enter a string and it will throw this error
# ValueError: invalid literal for int() with base 10 &#39;as&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;When we want a string input:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;string = str(input(&#39;Please enter a string: &#39;))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;https://repl.it/CUqX/3&#34; target=&#34;_blank&#34;&gt;Run Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Though, inputs are stored by default as a string. Using the  &lt;code&gt;str()&lt;/code&gt;  function makes it clear to the code-reader that the input is going to be a ‘string’. It is a good practice to mention what type of input will be taken beforehand.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/library/functions.html#input&#34; target=&#34;_blank&#34;&gt;Official Docs&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;how-to-call-a-function-in-python&#34;&gt;How to call a function in Python&lt;/h2&gt;

&lt;p&gt;A function definition statement does not execute the function. Executing (calling) a function is done by using the name of the function followed by parenthesis enclosing required arguments (if any).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def say_hello():
...     print(&#39;Hello&#39;)
...
&amp;gt;&amp;gt;&amp;gt; say_hello()
Hello
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The execution of a function introduces a new symbol table used for the local variables of the function. More precisely, all variable assignments in a function store the value in the local symbol table; whereas variable references first look in the local symbol table, then in the local symbol tables of enclosing functions, then in the global symbol table, and finally in the table of built-in names. Thus, global variables cannot be directly assigned a value within a function (unless named in a global statement), although they may be referenced.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = 1
&amp;gt;&amp;gt;&amp;gt; b = 10
&amp;gt;&amp;gt;&amp;gt; def fn():
...     print(a)    # local a is not assigned, no enclosing function, global a referenced.
...     b = 20      # local b is assigned in the local symbol table for the function.
...     print(b)    # local b is referenced.
...
&amp;gt;&amp;gt;&amp;gt; fn()
1
20
&amp;gt;&amp;gt;&amp;gt; b               # global b is not changed by the function call.
10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The actual parameters (arguments) to a function call are introduced in the local symbol table of the called function when it is called; thus, arguments are passed using call by value (where the value is always an object reference, not the value of the object). When a function calls another function, a new local symbol table is created for that call.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def greet(s):
...     s = &amp;quot;Hello &amp;quot; + s    # s in local symbol table is reassigned.
...     print(s)
...
&amp;gt;&amp;gt;&amp;gt; person = &amp;quot;Bob&amp;quot;
&amp;gt;&amp;gt;&amp;gt; greet(person)
Hello Bob
&amp;gt;&amp;gt;&amp;gt; person                  # person used to call remains bound to original object, &#39;Bob&#39;.
&#39;Bob&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The arguments used to call a function cannot be reassigned by the function, but arguments that reference mutable objects can have their values changed:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def fn(arg):
...     arg.append(1)
...
&amp;gt;&amp;gt;&amp;gt; a = [1, 2, 3]
&amp;gt;&amp;gt;&amp;gt; fn(a)
&amp;gt;&amp;gt;&amp;gt; a
[1, 2, 3, 1]
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Reference : &lt;a href=&#34;https://www.freecodecamp.org/news/python-function-guide-with-examples/&#34; target=&#34;_blank&#34;&gt;freeCodeCamp&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Lambda Expressions in Python.</title>
      <link>https://dragon-library.github.io/coding/tutorials/post/python/tutorials/lambda-expressions/</link>
      <pubDate>Sat, 04 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/coding/tutorials/post/python/tutorials/lambda-expressions/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;featured.jpg&#34; alt=&#34;Lambda Expressions in Python&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;lambda-expressions&#34;&gt;&lt;strong&gt;Lambda Expressions&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Lambda Expressions are ideally used when we need to do something simple and are more interested in getting the job done quickly rather than formally naming the function. Lambda expressions are also known as anonymous functions.&lt;/p&gt;

&lt;p&gt;Lambda Expressions in Python are a short way to declare small and anonymous functions (it is not necessary to provide a name for lambda functions).&lt;/p&gt;

&lt;p&gt;Lambda functions behave just like regular functions declared with the  &lt;code&gt;def&lt;/code&gt;  keyword. They come in handy when you want to define a small function in a concise way. They can contain only one expression, so they are not best suited for functions with control-flow statements.&lt;/p&gt;

&lt;h3 id=&#34;syntax-of-a-lambda-function&#34;&gt;Syntax of a Lambda Function&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;lambda arguments: expression&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Lambda functions can have any number of arguments but only one expression.&lt;/p&gt;

&lt;h3 id=&#34;example-code&#34;&gt;Example code&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# Lambda function to calculate square of a number
square = lambda x: x ** 2
print(square(3)) # Output: 9

# Traditional function to calculate square of a number
def square1(num):
  return num ** 2
print(square(5)) # Output: 25
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above lambda example,  &lt;code&gt;lambda x: x ** 2&lt;/code&gt;  yields an anonymous function object which can be associated with any name. So, we associated the function object with  &lt;code&gt;square&lt;/code&gt;. So from now on we can call the  &lt;code&gt;square&lt;/code&gt;  object like any traditional function, for example  &lt;code&gt;square(10)&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;examples-of-lambda-functions&#34;&gt;&lt;strong&gt;Examples of lambda functions&lt;/strong&gt;&lt;/h2&gt;

&lt;h3 id=&#34;beginner&#34;&gt;&lt;strong&gt;Beginner&lt;/strong&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;lambda_func = lambda x: x**2 # Function that takes an integer and returns its square
lambda_func(3) # Returns 9
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;intermediate&#34;&gt;&lt;strong&gt;Intermediate&lt;/strong&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;lambda_func = lambda x: True if x**2 &amp;gt;= 10 else False
lambda_func(3) # Returns False
lambda_func(4) # Returns True
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;complex&#34;&gt;&lt;strong&gt;Complex&lt;/strong&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;my_dict = {&amp;quot;A&amp;quot;: 1, &amp;quot;B&amp;quot;: 2, &amp;quot;C&amp;quot;: 3}
sorted(my_dict, key=lambda x: my_dict[x]%3) # Returns [&#39;C&#39;, &#39;A&#39;, &#39;B&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;use-case&#34;&gt;Use-case&lt;/h2&gt;

&lt;p&gt;Let’s say you want to filter out odd numbers from a  &lt;code&gt;list&lt;/code&gt;. You could use a  &lt;code&gt;for&lt;/code&gt;  loop:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
filtered = []

for num in my_list:
     if num % 2 != 0:
         filtered.append(num)

print(filtered)      # Python 2: print filtered
# [1, 3, 5, 7, 9]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or you could write this as a one liner with list-comprehensions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;filtered = [x for x in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] if x % 2 != 0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But you might be tempted to use the built-in  &lt;code&gt;filter&lt;/code&gt;  function. Why? The first example is a bit too verbose and the one-liner can be harder to understand. But  &lt;code&gt;filter&lt;/code&gt;  offers the best of both words. What is more, the built-in functions are usually faster.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

filtered = filter(lambda x: x % 2 != 0, my_list)

list(filtered)
# [1, 3, 5, 7, 9]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NOTE: in Python 3 built in functions return generator objects, so you have to call  &lt;code&gt;list&lt;/code&gt;. In Python 2, on the other hand, they return a  &lt;code&gt;list&lt;/code&gt;,  &lt;code&gt;tuple&lt;/code&gt;or  &lt;code&gt;string&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So what happened? You told  &lt;code&gt;filter&lt;/code&gt;  to take each element in  &lt;code&gt;my_list&lt;/code&gt;  and apply the lambda expressions. The values that return  &lt;code&gt;False&lt;/code&gt;  are filtered out.&lt;/p&gt;

&lt;h4 id=&#34;more-information&#34;&gt;&lt;strong&gt;More Information:&lt;/strong&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3/reference/expressions.html#lambda&#34; target=&#34;_blank&#34;&gt;Official Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Reference : &lt;a href=&#34;https://www.freecodecamp.org/news/lambda-expressions-in-python/&#34; target=&#34;_blank&#34;&gt;freeCodeCamp&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Regular Expressions Explained</title>
      <link>https://dragon-library.github.io/coding/tutorials/post/python/tutorials/regular-expressions-explained/</link>
      <pubDate>Sun, 07 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/coding/tutorials/post/python/tutorials/regular-expressions-explained/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;featured.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.thedataschool.co.uk/natalia-miteva/regex-what-why-and-how/&#34; target=&#34;_blank&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I bet you all have encountered regular expressions at some points. They are very powerful tools that are universally supported in many platforms, including programming languages like Python, R, Java, SQL, Scala.&lt;/p&gt;

&lt;p&gt;As a data scientist/developer, having a solid understanding of Regex can help you perform various data munging and text mining tasks very easily. Personally, I use them for lots of random stuffs, mostly when I have to work with text data or do Natural Language Processing projects.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/687/1*ZXTb1lt1LYysa1yki__0Aw.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Regular expressions can seem intimidating at first, but they are very rewarding once you grasp the basics and apply them to your work properly.&lt;/p&gt;

&lt;h1 id=&#34;what-is-regular-expression-regex&#34;&gt;What is Regular Expression (RegEx)?&lt;/h1&gt;

&lt;p&gt;A regular expression or regex is a text string that defines a  &lt;em&gt;search pattern.&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;quot;\w+&amp;quot; # this is a regex
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Typically, these patterns are used for four main tasks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Find&lt;/strong&gt;  text within a larger body of text&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Validate&lt;/strong&gt;  that a string conforms to a desired format&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Replace&lt;/strong&gt; or  &lt;strong&gt;insert&lt;/strong&gt; text&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Split&lt;/strong&gt;  strings&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s take a quick look at some common regex patterns before we apply them to our codes.&lt;/p&gt;

&lt;h1 id=&#34;common-patterns&#34;&gt;Common Patterns&lt;/h1&gt;

&lt;p&gt;Earlier, we have this regex example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;\w+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;“w” here means  &lt;em&gt;word&lt;/em&gt;. “+” means  &lt;em&gt;one or more.&lt;/em&gt; The backlash character “\” is the escape character for regular expressions.  This regex matches word characters, including ASCII letter, digit, or underscore. Now, suppose we want to match the first word we can find in a string. First, we import the  &lt;code&gt;re&lt;/code&gt; module.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;import re
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we define a pattern, and use the function  &lt;code&gt;re.match()&lt;/code&gt;  to match the first word it finds:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# define a regex pattern  
word_regex = &#39;\w+&#39;re.match(word_regex, &#39;hello world!&#39;) _# this matches the first word it finds  
_&amp;gt;&amp;gt;&amp;gt;&amp;lt;re.Match object; span=(0, 2), match=&#39;hi&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some common patterns:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;w&lt;/strong&gt;  matches word characters&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;d&lt;/strong&gt;  matches digits, while  &lt;strong&gt;D&lt;/strong&gt;  matches non-digit characters&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;s&lt;/strong&gt;  matches whitespace characters, while  &lt;strong&gt;S&lt;/strong&gt;  matches non-whitespace characters&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.&lt;/strong&gt;  (dot) matches any letter or symbol (wildcard)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[a-z]&lt;/strong&gt;  matches lowercase group. The bracket [] matches characters in it&lt;/li&gt;
&lt;li&gt;Use  &lt;strong&gt;()&lt;/strong&gt;  to define a group&lt;/li&gt;
&lt;li&gt;Use  &lt;strong&gt;[]&lt;/strong&gt;  to define explicit character ranges&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now as you already have some regex patterns in hand, let’s move on to some important functions.&lt;/p&gt;

&lt;h2 id=&#34;the-match-function&#34;&gt;The match() function&lt;/h2&gt;

&lt;p&gt;This function matches  &lt;em&gt;pattern&lt;/em&gt;  to  &lt;em&gt;string&lt;/em&gt;. It returns a  &lt;strong&gt;match&lt;/strong&gt;  object on success,  &lt;strong&gt;&lt;em&gt;None&lt;/em&gt;&lt;/strong&gt;  on failure.
The match function is defined as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;re.match(&#39;\w+&#39;, &#39;hello world!&#39;)  
&amp;gt;&amp;gt;&amp;gt;&amp;lt;re.Match object; span=(0, 5), match=&#39;hello&#39;&amp;gt;
The match function is defined as:
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-findall-function&#34;&gt;The findall() function&lt;/h2&gt;

&lt;p&gt;This function returns a list of all instances of the pattern in the string. Matches are returned in the order left-to-right of the original string.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;re.findall(&#39;[A-Z]\w+&#39;, &#39;hello World!&#39;)  
&amp;gt;&amp;gt;&amp;gt;[&#39;World&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;The search() function&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The  &lt;strong&gt;search()&lt;/strong&gt;  function scans through string, looking for instances of the pattern in the string. It returns a  &lt;strong&gt;match&lt;/strong&gt;  object on success,  &lt;strong&gt;&lt;em&gt;None&lt;/em&gt;&lt;/strong&gt;  on failure. This function is like the match() function, but it goes through the whole string. See  &lt;a href=&#34;https://docs.python.org/3/library/re.html#search-vs-match&#34; target=&#34;_blank&#34;&gt;search() vs match()&lt;/a&gt;  for more details.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;re.search(&#39;ef&#39;, &#39;abcdef&#39;)  
&amp;gt;&amp;gt;&amp;gt;&amp;lt;re.Match object; span=(4, 6), match=&#39;ef&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;The split() function&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This function splits  &lt;em&gt;string&lt;/em&gt;  by the occurrences of  &lt;em&gt;pattern.&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;re.split(&#39;\s+&#39;, &#39;hello world this is andre&#39;)  
&amp;gt;&amp;gt;&amp;gt;[&#39;hello&#39;, &#39;world&#39;, &#39;this&#39;, &#39;is&#39;, &#39;andre&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;random-thoughts&#34;&gt;Random Thoughts&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/60/1*rD8bpKAGWGct2ThM2jKOaw.png?q=20&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/921/1*rD8bpKAGWGct2ThM2jKOaw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Who else loves Regex?&lt;/p&gt;

&lt;p&gt;I love regular expressions. However, it is important to remember that while regex are very powerful tools, it is extraordinarily easy to overuse them. A few things to note:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Start small. Use them responsibly. Break it down into smaller regexes if needed. You would not want to end up with one huge multiple-line regex. It decreases visibility of your codes and is just not worth it.&lt;/li&gt;
&lt;li&gt;Comment your regex! No one wants to waste time staring at your 20-line monster regex trying to figure out what it means.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;In this article, you have learned the main concept of regex, common patterns, and how to apply regex using  &lt;strong&gt;re&lt;/strong&gt;  functions. Regex is a small computer language of their own, and it requires practice too. Here are my favorite resources to get you started:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.rexegg.com/regex-quickstart.html&#34; target=&#34;_blank&#34;&gt;https://www.rexegg.com/regex-quickstart.html&lt;/a&gt;: your go-to regex cheatsheet&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.regular-expressions.info/&#34; target=&#34;_blank&#34;&gt;https://www.regular-expressions.info&lt;/a&gt;: another comprehensive regex tutorial site&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://regexr.com/&#34; target=&#34;_blank&#34;&gt;https://regexr.com&lt;/a&gt;: an online tool to learn, build, and test your regex&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pythex.org/&#34; target=&#34;_blank&#34;&gt;https://pythex.org&lt;/a&gt;: a Python regular expression editor. A quick way to test regular expressions as you write them&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3/library/re.html&#34; target=&#34;_blank&#34;&gt;https://docs.python.org/3/library/re.html&lt;/a&gt;: official Python docs on regex&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;This is my first post on Towards Data Science. Leave comments if you have any suggestions for how to improve this post. Follow me up at  &lt;a href=&#34;https://medium.com/@andreduong07&#34; target=&#34;_blank&#34;&gt;Medium&lt;/a&gt;  or connect with me on  &lt;a href=&#34;https://www.linkedin.com/in/andreduong/&#34; target=&#34;_blank&#34;&gt;LinkedIn&lt;/a&gt;  for more quality content!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Reference : &lt;a href=&#34;https://towardsdatascience.com/regular-expressions-explained-c9bce508e672&#34; target=&#34;_blank&#34;&gt;towardsdatascience.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>The CSS Handbook</title>
      <link>https://dragon-library.github.io/coding/tutorials/post/css-handbook/</link>
      <pubDate>Wed, 24 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://dragon-library.github.io/coding/tutorials/post/css-handbook/</guid>
      <description>

&lt;p&gt;-&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/1*aeXtrs9UI4WniMd1miDIDw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I wrote this article to help you quickly learn CSS and get familiar with the advanced CSS topics.&lt;/p&gt;

&lt;p&gt;CSS is often quickly dismissed as an easy thing to learn by developers, or one thing you just pick up when you need to quickly style a page or app. Due to this reason, it’s often learned on-the-fly, or we learn things in isolation right when we have to use them. This can be a huge source of frustration when we find that the tool does not simply do what we want.&lt;/p&gt;

&lt;p&gt;This article will help you get up to speed with CSS and get an overview of the main modern features you can use to style your pages and apps.&lt;/p&gt;

&lt;p&gt;I hope to help you get comfortable with CSS and get you quickly up to speed with using this awesome tool that lets you create stunning designs on the Web.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://flaviocopes.com/page/css-handbook&#34; target=&#34;_blank&#34;&gt;Click here to get a PDF / ePub / Mobi version of this post to read offline&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CSS, a shorthand for Cascading Style Sheets, is one of the main building blocks of the Web. Its history goes back to the 90’s, and along with HTML it has changed a lot since its humble beginnings.&lt;/p&gt;

&lt;p&gt;As I’ve been creating websites since before CSS existed, I have seen its evolution.&lt;/p&gt;

&lt;p&gt;CSS is an amazing tool, and in the last few years it has grown a lot, introducing many fantastic features like CSS Grid, Flexbox and CSS Custom Properties.&lt;/p&gt;

&lt;p&gt;This handbook is aimed at a vast audience.&lt;/p&gt;

&lt;p&gt;First, the beginner. I explain CSS from zero in a succinct but comprehensive way, so you can use this book to learn CSS from the basics.&lt;/p&gt;

&lt;p&gt;Then, the professional. CSS is often considered like a secondary thing to learn, especially by JavaScript developers. They know CSS is not a real programming language, they are programmers and therefore they should not bother learning CSS the right way. I wrote this book for you, too.&lt;/p&gt;

&lt;p&gt;Next, the person that knows CSS from a few years but hasn’t had the opportunity to learn the new things in it. We’ll talk extensively about the new features of CSS, the ones that are going to build the web of the next decade.&lt;/p&gt;

&lt;p&gt;CSS has improved a lot in the past few years and it’s evolving fast.&lt;/p&gt;

&lt;p&gt;Even if you don’t write CSS for a living, knowing how CSS works can help save you some headaches when you need to understand it from time to time, for example while tweaking a web page.&lt;/p&gt;

&lt;p&gt;Thank you for getting this ebook. My goal with it is to give you a quick yet comprehensive overview of CSS.&lt;/p&gt;

&lt;p&gt;Flavio&lt;/p&gt;

&lt;p&gt;You can reach me via email at  &lt;a href=&#34;mailto:flavio@flaviocopes.com&#34; target=&#34;_blank&#34;&gt;flavio@flaviocopes.com&lt;/a&gt;, on Twitter  &lt;a href=&#34;https://twitter.com/flaviocopes&#34; target=&#34;_blank&#34;&gt;@flaviocopes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My website is  &lt;a href=&#34;https://flaviocopes.com/&#34; target=&#34;_blank&#34;&gt;flaviocopes.com&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#introduction-to-css&#34; target=&#34;_blank&#34;&gt;INTRODUCTION TO CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#a-brief-history-of-css&#34; target=&#34;_blank&#34;&gt;A BRIEF HISTORY OF CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#adding-css-to-an-html-page&#34; target=&#34;_blank&#34;&gt;ADDING CSS TO AN HTML PAGE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#selectors&#34; target=&#34;_blank&#34;&gt;SELECTORS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#cascade&#34; target=&#34;_blank&#34;&gt;CASCADE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#specificity&#34; target=&#34;_blank&#34;&gt;SPECIFICITY&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#inheritance&#34; target=&#34;_blank&#34;&gt;INHERITANCE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#import&#34; target=&#34;_blank&#34;&gt;IMPORT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#attribute-selectors&#34; target=&#34;_blank&#34;&gt;ATTRIBUTE SELECTORS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#pseudo-classes&#34; target=&#34;_blank&#34;&gt;PSEUDO-CLASSES&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#pseudo-elements&#34; target=&#34;_blank&#34;&gt;PSEUDO-ELEMENTS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#colors&#34; target=&#34;_blank&#34;&gt;COLORS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#units&#34; target=&#34;_blank&#34;&gt;UNITS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#url&#34; target=&#34;_blank&#34;&gt;URL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#calc&#34; target=&#34;_blank&#34;&gt;CALC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#backgrounds&#34; target=&#34;_blank&#34;&gt;BACKGROUNDS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#comments&#34; target=&#34;_blank&#34;&gt;COMMENTS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#custom-properties&#34; target=&#34;_blank&#34;&gt;CUSTOM PROPERTIES&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#fonts&#34; target=&#34;_blank&#34;&gt;FONTS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#typography&#34; target=&#34;_blank&#34;&gt;TYPOGRAPHY&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#box-model&#34; target=&#34;_blank&#34;&gt;BOX MODEL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#border&#34; target=&#34;_blank&#34;&gt;BORDER&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#padding&#34; target=&#34;_blank&#34;&gt;PADDING&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#margin&#34; target=&#34;_blank&#34;&gt;MARGIN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#box-sizing&#34; target=&#34;_blank&#34;&gt;BOX SIZING&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#display&#34; target=&#34;_blank&#34;&gt;DISPLAY&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#positioning&#34; target=&#34;_blank&#34;&gt;POSITIONING&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#floating-and-clearing&#34; target=&#34;_blank&#34;&gt;FLOATING AND CLEARING&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#z-index&#34; target=&#34;_blank&#34;&gt;Z-INDEX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#css-grid&#34; target=&#34;_blank&#34;&gt;CSS GRID&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#flexbox&#34; target=&#34;_blank&#34;&gt;FLEXBOX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#tables&#34; target=&#34;_blank&#34;&gt;TABLES&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#centering&#34; target=&#34;_blank&#34;&gt;CENTERING&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#lists&#34; target=&#34;_blank&#34;&gt;LISTS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#media-queries-and-responsive-design&#34; target=&#34;_blank&#34;&gt;MEDIA QUERIES AND RESPONSIVE DESIGN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#feature-queries&#34; target=&#34;_blank&#34;&gt;FEATURE QUERIES&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#filters&#34; target=&#34;_blank&#34;&gt;FILTERS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#transforms&#34; target=&#34;_blank&#34;&gt;TRANSFORMS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#transitions&#34; target=&#34;_blank&#34;&gt;TRANSITIONS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#animations&#34; target=&#34;_blank&#34;&gt;ANIMATIONS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#normalizing-css&#34; target=&#34;_blank&#34;&gt;NORMALIZING CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#error-handling&#34; target=&#34;_blank&#34;&gt;ERROR HANDLING&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#vendor-prefixes&#34; target=&#34;_blank&#34;&gt;VENDOR PREFIXES&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#css-for-print&#34; target=&#34;_blank&#34;&gt;CSS FOR PRINT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/#wrapping-up&#34; target=&#34;_blank&#34;&gt;WRAPPING UP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;introduction-to-css&#34;&gt;INTRODUCTION TO CSS&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;  (an abbreviation of  &lt;strong&gt;Cascading Style Sheets&lt;/strong&gt;) is the language that we use to style an HTML file, and tell the browser how should it render the elements on the page.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;In this book I talk exclusively about styling HTML documents, although CSS can be used to style other things too.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A CSS file contains several CSS rules.&lt;/p&gt;

&lt;p&gt;Each rule is composed by 2 parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the  &lt;strong&gt;selector&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;the  &lt;strong&gt;declaration block&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The selector is a string that identifies one or more elements on the page, following a special syntax that we’ll soon talk about extensively.&lt;/p&gt;

&lt;p&gt;The declaration block contains one or more  &lt;strong&gt;declarations&lt;/strong&gt;, in turn composed by a  &lt;strong&gt;property&lt;/strong&gt;  and  &lt;strong&gt;value&lt;/strong&gt;pair.&lt;/p&gt;

&lt;p&gt;Those are all the things we have in CSS.&lt;/p&gt;

&lt;p&gt;Carefully organising properties, associating them values, and attaching those to specific elements of the page using a selector is the whole argument of this ebook.&lt;/p&gt;

&lt;h4 id=&#34;how-does-css-look-like&#34;&gt;How does CSS look like&lt;/h4&gt;

&lt;p&gt;A CSS  &lt;strong&gt;rule set&lt;/strong&gt;  has one part called  &lt;strong&gt;selector&lt;/strong&gt;, and the other part called  &lt;strong&gt;declaration&lt;/strong&gt;. The declaration contains various  &lt;strong&gt;rules&lt;/strong&gt;, each composed by a  &lt;strong&gt;property&lt;/strong&gt;, and a  &lt;strong&gt;value&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In this example,  &lt;code&gt;p&lt;/code&gt;  is the selector, and applies one rule which sets the value  &lt;code&gt;20px&lt;/code&gt;  to the  &lt;code&gt;font-size&lt;/code&gt;  property:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p {
  font-size: 20px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Multiple rules are stacked one after the other:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p {
  font-size: 20px;
}

a {
  color: blue;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A selector can target one or more items:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p, a {
  font-size: 20px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and it can target HTML tags, like above, or HTML elements that contain a certain class attribute with  &lt;code&gt;.my-class&lt;/code&gt;, or HTML elements that have a specific  &lt;code&gt;id&lt;/code&gt;  attribute with  &lt;code&gt;#my-id&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;More advanced selectors allow you to choose items whose attribute matches a specific value, or also items which respond to pseudo-classes (more on that later)&lt;/p&gt;

&lt;h4 id=&#34;semicolons&#34;&gt;Semicolons&lt;/h4&gt;

&lt;p&gt;Every CSS rule terminates with a semicolon. Semicolons are  &lt;strong&gt;not&lt;/strong&gt;  optional, except after the last rule. But I suggest to always use them for consistency and to avoid errors if you add another property and forget to add the semicolon on the previous line.&lt;/p&gt;

&lt;h4 id=&#34;formatting-and-indentation&#34;&gt;Formatting and indentation&lt;/h4&gt;

&lt;p&gt;There is no fixed rule for formatting. This CSS is valid:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p
      {
  font-size:           20px   ;
                      }
                      
a{color:blue;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;but a pain to see. Stick to some conventions, like the ones you see in the examples above: stick selectors and the closing brackets to the left, indent 2 spaces for each rule, have the opening bracket on the same line of the selector, separated by one space.&lt;/p&gt;

&lt;p&gt;Correct and consistent use of spacing and indentation is a visual aid in understanding your code.&lt;/p&gt;

&lt;h3 id=&#34;a-brief-history-of-css&#34;&gt;A BRIEF HISTORY OF CSS&lt;/h3&gt;

&lt;p&gt;Before moving on, I want to give you a brief recap of the history of CSS.&lt;/p&gt;

&lt;p&gt;CSS was grown out of the necessity of styling web pages. Before CSS was introduced, people wanted a way to style their web pages, which looked all very similar and “academic” back in the day. You couldn’t do much in terms of personalisation.&lt;/p&gt;

&lt;p&gt;HTML 3.2 introduced the option of defining colors inline as HTML element attributes, and presentational tags like  &lt;code&gt;center&lt;/code&gt;  and  &lt;code&gt;font&lt;/code&gt;, but that escalated quickly into a far from ideal situation.&lt;/p&gt;

&lt;p&gt;CSS let us move everything presentation-related from the HTML to the CSS, so that HTML could get back being the format that defines the structure of the document, rather than how things should look in the browser.&lt;/p&gt;

&lt;p&gt;CSS is continuously evolving, and CSS you used 5 years ago might just be outdated, as new idiomatic CSS techniques emerged and browsers changed.&lt;/p&gt;

&lt;p&gt;It’s hard to imagine the times when CSS was born and how different the web was.&lt;/p&gt;

&lt;p&gt;At the time, we had several competing browsers, the main ones being Internet Explorer or Netscape Navigator.&lt;/p&gt;

&lt;p&gt;Pages were styled by using HTML, with special presentational tags like  &lt;code&gt;bold&lt;/code&gt;  and special attributes, most of which are now deprecated.&lt;/p&gt;

&lt;p&gt;This meant you had a limited amount of customisation opportunities.&lt;/p&gt;

&lt;p&gt;The bulk of the styling decisions were left to the browser.&lt;/p&gt;

&lt;p&gt;Also, you built a site specifically for one of them, because each one introduced different non-standard tags to give more power and opportunities.&lt;/p&gt;

&lt;p&gt;Soon people realised the need for a way to style pages, in a way that would work across all browsers.&lt;/p&gt;

&lt;p&gt;After the initial idea proposed in 1994, CSS got its first release in 1996, when the CSS Level 1 (“CSS 1”) recommendation was published.&lt;/p&gt;

&lt;p&gt;CSS Level 2 (“CSS 2”) got published in 1998.&lt;/p&gt;

&lt;p&gt;Since then, work began on CSS Level 3. The CSS Working Group decided to split every feature and work on it separately, in modules.&lt;/p&gt;

&lt;p&gt;Browsers weren’t especially fast at implementing CSS. We had to wait until 2002 to have the first browser implement the full CSS specification: IE for Mac, as nicely described in this CSS Tricks post:  &lt;a href=&#34;https://css-tricks.com/look-back-history-css/&#34; target=&#34;_blank&#34;&gt;https://css-tricks.com/look-back-history-css/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Internet Explorer implemented the box model incorrectly right from the start, which led to years of pain trying to have the same style applied consistently across browsers. We had to use various tricks and hacks to make browsers render things as we wanted.&lt;/p&gt;

&lt;p&gt;Today things are much, much better. We can just use the CSS standards without thinking about quirks, most of the time, and CSS has never been more powerful.&lt;/p&gt;

&lt;p&gt;We don’t have official release numbers for CSS any more now, but the CSS Working Group releases a “snapshot” of the modules that are currently considered stable and ready to be included in browsers. This is the latest snapshot, from 2018:  &lt;a href=&#34;https://www.w3.org/TR/css-2018/&#34; target=&#34;_blank&#34;&gt;https://www.w3.org/TR/css-2018/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CSS Level 2 is still the base for the CSS we write today, and we have many more features built on top of it.&lt;/p&gt;

&lt;h3 id=&#34;adding-css-to-an-html-page&#34;&gt;ADDING CSS TO AN HTML PAGE&lt;/h3&gt;

&lt;p&gt;CSS is attached to an HTML page in different ways.&lt;/p&gt;

&lt;h4 id=&#34;1-using-the-link-tag&#34;&gt;1: Using the  &lt;code&gt;link&lt;/code&gt;  tag&lt;/h4&gt;

&lt;p&gt;The  &lt;code&gt;link&lt;/code&gt;  tag is the way to include a CSS file. This is the preferred way to use CSS as it&amp;rsquo;s intended to be used: one CSS file is included by all the pages of your site, and changing one line on that file affects the presentation of all the pages in the site.&lt;/p&gt;

&lt;p&gt;To use this method, you add a  &lt;code&gt;link&lt;/code&gt;  tag with the  &lt;code&gt;href&lt;/code&gt;  attribute pointing to the CSS file you want to include. You add it inside the  &lt;code&gt;head&lt;/code&gt;  tag of the site (not inside the  &lt;code&gt;body&lt;/code&gt;  tag):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;myfile.css&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The  &lt;code&gt;rel&lt;/code&gt;  and  &lt;code&gt;type&lt;/code&gt;  attributes are required too, as they tell the browser which kind of file we are linking to.&lt;/p&gt;

&lt;h4 id=&#34;2-using-the-style-tag&#34;&gt;2: using the  &lt;code&gt;style&lt;/code&gt;  tag&lt;/h4&gt;

&lt;p&gt;Instead of using the  &lt;code&gt;link&lt;/code&gt;  tag to point to separate stylesheet containing our CSS, we can add the CSS directly inside a  &lt;code&gt;style&lt;/code&gt;  tag. This is the syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;style&amp;gt;
...our CSS...
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using this method we can avoid creating a separate CSS file. I find this is a good way to experiment before “formalising” CSS to a separate file, or to add a special line of CSS just to a file.&lt;/p&gt;

&lt;h4 id=&#34;3-inline-styles&#34;&gt;3: inline styles&lt;/h4&gt;

&lt;p&gt;Inline styles are the third way to add CSS to a page. We can add a  &lt;code&gt;style&lt;/code&gt;  attribute to any HTML tag, and add CSS into it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div style=&amp;quot;&amp;quot;&amp;gt;...&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div style=&amp;quot;background-color: yellow&amp;quot;&amp;gt;...&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;selectors&#34;&gt;SELECTORS&lt;/h3&gt;

&lt;p&gt;A selector allows us to associate one or more declarations to one or more elements on the page.&lt;/p&gt;

&lt;h4 id=&#34;basic-selectors&#34;&gt;Basic selectors&lt;/h4&gt;

&lt;p&gt;Suppose we have a  &lt;code&gt;p&lt;/code&gt;  element on the page, and we want to display the words into it using the yellow color.&lt;/p&gt;

&lt;p&gt;We can  &lt;strong&gt;target&lt;/strong&gt;  that element using this selector  &lt;code&gt;p&lt;/code&gt;, which targets all the element using the  &lt;code&gt;p&lt;/code&gt;  tag in the page. A simple CSS rule to achieve what we want is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p {
  color: yellow;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Every HTML tag has a corresponding selector, for example:  &lt;code&gt;div&lt;/code&gt;,  &lt;code&gt;span&lt;/code&gt;,  &lt;code&gt;img&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If a selector matches multiple elements, all the elements in the page will be affected by the change.&lt;/p&gt;

&lt;p&gt;HTML elements have 2 attributes which are very commonly used within CSS to associate styling to a specific element on the page:  &lt;code&gt;class&lt;/code&gt;  and  &lt;code&gt;id&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There is one big difference between those two: inside an HTML document you can repeat the same  &lt;code&gt;class&lt;/code&gt;  value across multiple elements, but you can only use an  &lt;code&gt;id&lt;/code&gt;  once. As a corollary, using classes you can select an element with 2 or more specific class names, something not possible using ids.&lt;/p&gt;

&lt;p&gt;Classes are identified using the  &lt;code&gt;.&lt;/code&gt;  symbol, while ids using the  &lt;code&gt;#&lt;/code&gt;  symbol.&lt;/p&gt;

&lt;p&gt;Example using a class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;&amp;lt;p class=&amp;quot;dog-name&amp;quot;&amp;gt;
  Roger
&amp;lt;/p&amp;gt;

.dog-name {
  color: yellow;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example using an id:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;&amp;lt;p id=&amp;quot;dog-name&amp;quot;&amp;gt;
  Roger
&amp;lt;/p&amp;gt;

#dog-name {
  color: yellow;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;combining-selectors&#34;&gt;Combining selectors&lt;/h4&gt;

&lt;p&gt;So far we’ve seen how to target an element, a class or an id. Let’s introduce more powerful selectors.&lt;/p&gt;

&lt;h4 id=&#34;targeting-an-element-with-a-class-or-id&#34;&gt;Targeting an element with a class or id&lt;/h4&gt;

&lt;p&gt;You can target a specific element that has a class, or id, attached.&lt;/p&gt;

&lt;p&gt;Example using a class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;&amp;lt;p class=&amp;quot;dog-name&amp;quot;&amp;gt;
  Roger
&amp;lt;/p&amp;gt;

p.dog-name {
  color: yellow;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example using an id:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;&amp;lt;p id=&amp;quot;dog-name&amp;quot;&amp;gt;
  Roger
&amp;lt;/p&amp;gt;

p#dog-name {
  color: yellow;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Why would you want to do that, if the class or id already provides a way to target that element? You might have to do that to have more specificity. We’ll see what that means later.&lt;/p&gt;

&lt;h4 id=&#34;targeting-multiple-classes&#34;&gt;Targeting multiple classes&lt;/h4&gt;

&lt;p&gt;You can target an element with a specific class using  &lt;code&gt;.class-name&lt;/code&gt;, as you saw previously. You can target an element with 2 (or more) classes by combining the class names separated with a dot, without spaces.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;&amp;lt;p class=&amp;quot;dog-name roger&amp;quot;&amp;gt;
  Roger
&amp;lt;/p&amp;gt;

.dog-name.roger {
  color: yellow;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;combining-classes-and-ids&#34;&gt;Combining classes and ids&lt;/h4&gt;

&lt;p&gt;In the same way, you can combine a class and an id.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;&amp;lt;p class=&amp;quot;dog-name&amp;quot; id=&amp;quot;roger&amp;quot;&amp;gt;
  Roger
&amp;lt;/p&amp;gt;

.dog-name#roger {
  color: yellow;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;grouping-selectors&#34;&gt;Grouping selectors&lt;/h4&gt;

&lt;p&gt;You can combine selectors to apply the same declarations to multiple selectors. To do so, you separate them with a comma.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;&amp;lt;p&amp;gt;
  My dog name is:
&amp;lt;/p&amp;gt;
&amp;lt;span class=&amp;quot;dog-name&amp;quot;&amp;gt;
  Roger
&amp;lt;/span&amp;gt;

p, .dog-name {
  color: yellow;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can add spaces in those declarations to make them more clear:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p,
.dog-name {
  color: yellow;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;follow-the-document-tree-with-selectors&#34;&gt;Follow the document tree with selectors&lt;/h4&gt;

&lt;p&gt;We’ve seen how to target an element in the page by using a tag name, a class or an id.&lt;/p&gt;

&lt;p&gt;You can create a more specific selector by combining multiple items to follow the document tree structure. For example, if you have a  &lt;code&gt;span&lt;/code&gt;  tag nested inside a  &lt;code&gt;p&lt;/code&gt;  tag, you can target that one without applying the style to a  &lt;code&gt;span&lt;/code&gt;  tag not included in a  &lt;code&gt;p&lt;/code&gt;  tag:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;&amp;lt;span&amp;gt;
  Hello!
&amp;lt;/span&amp;gt;
&amp;lt;p&amp;gt;
  My dog name is:
  &amp;lt;span class=&amp;quot;dog-name&amp;quot;&amp;gt;
    Roger
  &amp;lt;/span&amp;gt;
&amp;lt;/p&amp;gt;

p span {
  color: yellow;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See how we used a space between the two tokens  &lt;code&gt;p&lt;/code&gt;  and  &lt;code&gt;span&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This works even if the element on the right is multiple levels deep.&lt;/p&gt;

&lt;p&gt;To make the dependency strict on the first level, you can use the  &lt;code&gt;&amp;gt;&lt;/code&gt;  symbol between the two tokens:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p &amp;gt; span {
  color: yellow;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case, if a  &lt;code&gt;span&lt;/code&gt;  is not a first children of the  &lt;code&gt;p&lt;/code&gt;  element, it&amp;rsquo;s not going to have the new color applied.&lt;/p&gt;

&lt;p&gt;Direct children will have the style applied:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;p&amp;gt;
  &amp;lt;span&amp;gt;
    This is yellow
  &amp;lt;/span&amp;gt;
  &amp;lt;strong&amp;gt;
    &amp;lt;span&amp;gt;
      This is not yellow
    &amp;lt;/span&amp;gt;
  &amp;lt;/strong&amp;gt;
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Adjacent sibling selectors let us style an element only if preceded by a specific element. We do so using the  &lt;code&gt;+&lt;/code&gt;  operator:&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p + span {
  color: yellow;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will assign the color yellow to all span elements preceded by a  &lt;code&gt;p&lt;/code&gt;  element:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;p&amp;gt;This is a paragraph&amp;lt;/p&amp;gt;
&amp;lt;span&amp;gt;This is a yellow span&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have a lot more selectors we can use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;attribute selectors&lt;/li&gt;
&lt;li&gt;pseudo class selectors&lt;/li&gt;
&lt;li&gt;pseudo element selectors&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’ll find all about them in the next sections.&lt;/p&gt;

&lt;h3 id=&#34;cascade&#34;&gt;CASCADE&lt;/h3&gt;

&lt;p&gt;Cascade is a fundamental concept of CSS. After all, it’s in the name itself, the first C of CSS — Cascading Style Sheets — it must be an important thing.&lt;/p&gt;

&lt;p&gt;What does it mean?&lt;/p&gt;

&lt;p&gt;Cascade is the process, or algorithm, that determines the properties applied to each element on the page. Trying to converge from a list of CSS rules that are defined in various places.&lt;/p&gt;

&lt;p&gt;It does so taking in consideration:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;specificity&lt;/li&gt;
&lt;li&gt;importance&lt;/li&gt;
&lt;li&gt;inheritance&lt;/li&gt;
&lt;li&gt;order in the file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It also takes care of resolving conflicts.&lt;/p&gt;

&lt;p&gt;Two or more competing CSS rules for the same property applied to the same element need to be elaborated according to the CSS spec, to determine which one needs to be applied.&lt;/p&gt;

&lt;p&gt;Even if you just have one CSS file loaded by your page, there is other CSS that is going to be part of the process. We have the browser (user agent) CSS. Browsers come with a default set of rules, all different between browsers.&lt;/p&gt;

&lt;p&gt;Then your CSS comes into play.&lt;/p&gt;

&lt;p&gt;Then the browser applies any user stylesheet, which might also be applied by browser extensions.&lt;/p&gt;

&lt;p&gt;All those rules come into play while rendering the page.&lt;/p&gt;

&lt;p&gt;We’ll now see the concepts of specificity and inheritance.&lt;/p&gt;

&lt;h3 id=&#34;specificity&#34;&gt;SPECIFICITY&lt;/h3&gt;

&lt;p&gt;What happens when an element is targeted by multiple rules, with different selectors, that affect the same property?&lt;/p&gt;

&lt;p&gt;For example, let’s talk about this element:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;p class=&amp;quot;dog-name&amp;quot;&amp;gt;
  Roger
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can have&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.dog-name {
  color: yellow;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and another rule that targets  &lt;code&gt;p&lt;/code&gt;, which sets the color to another value:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p {
  color: red;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And another rule that targets  &lt;code&gt;p.dog-name&lt;/code&gt;. Which rule is going to take precedence over the others, and why?&lt;/p&gt;

&lt;p&gt;Enter specificity.  &lt;strong&gt;The more specific rule will win&lt;/strong&gt;. If two or more rules have the  &lt;strong&gt;same specificity, the one that appears last wins&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Sometimes what is more specific in practice is a bit confusing to beginners. I would say it’s also confusing to experts that do not look at those rules that frequently, or simply overlook them.&lt;/p&gt;

&lt;h4 id=&#34;how-to-calculate-specificity&#34;&gt;How to calculate specificity&lt;/h4&gt;

&lt;p&gt;Specificity is calculated using a convention.&lt;/p&gt;

&lt;p&gt;We have 4 slots, and each one of them starts at 0:  &lt;code&gt;0 0 0 0 0&lt;/code&gt;. The slot at the left is the most important, and the rightmost one is the least important.&lt;/p&gt;

&lt;p&gt;Like it works for numbers in the decimal system:  &lt;code&gt;1 0 0 0&lt;/code&gt;  is higher than  &lt;code&gt;0 1 0 0&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;slot-1&#34;&gt;Slot 1&lt;/h4&gt;

&lt;p&gt;The first slot, the rightmost one, is the least important.&lt;/p&gt;

&lt;p&gt;We increase this value when we have an  &lt;strong&gt;element selector&lt;/strong&gt;. An element is a tag name. If you have more than one element selector in the rule, you increment accordingly the value stored in this slot.&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p {}                    /* 0 0 0 1 */
span {}                 /* 0 0 0 1 */
p span {}               /* 0 0 0 2 */
p &amp;gt; span {}             /* 0 0 0 2 */
div p &amp;gt; span {}         /* 0 0 0 3 */
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;slot-2&#34;&gt;Slot 2&lt;/h4&gt;

&lt;p&gt;The second slot is incremented by 3 things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;class selectors&lt;/li&gt;
&lt;li&gt;pseudo-class selectors&lt;/li&gt;
&lt;li&gt;attribute selectors&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Every time a rule meets one of those, we increment the value of the second column from the right.&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.name {}                 /* 0 0 1 0 */
.users .name {}          /* 0 0 2 0 */
[href$=&#39;.pdf&#39;] {}        /* 0 0 1 0 */
:hover {}                /* 0 0 1 0 */
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course slot 2 selectors can be combined with slot 1 selectors:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;div .name {}             /* 0 0 1 1 */
a[href$=&#39;.pdf&#39;] {}       /* 0 0 1 1 */
.pictures img:hover {}   /* 0 0 2 1 */
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One nice trick with classes is that you can repeat the same class and increase the specificity. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.name {}              /* 0 0 1 0 */
.name.name {}         /* 0 0 2 0 */
.name.name.name {}    /* 0 0 3 0 */
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;slot-3&#34;&gt;Slot 3&lt;/h4&gt;

&lt;p&gt;Slot 3 holds the most important thing that can affect your CSS specificity in a CSS file: the  &lt;code&gt;id&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Every element can have an  &lt;code&gt;id&lt;/code&gt;  attribute assigned, and we can use that in our stylesheet to target the element.&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;#name {}                    /* 0 1 0 0 */
.user #name {}              /* 0 1 1 0 */
#name span {}               /* 0 1 0 1 */
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;slot-4&#34;&gt;Slot 4&lt;/h4&gt;

&lt;p&gt;Slot 4 is affected by inline styles. Any inline style will have precedence over any rule defined in an external CSS file, or inside the  &lt;code&gt;style&lt;/code&gt;  tag in the page header.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;p style=&amp;quot;color: red&amp;quot;&amp;gt;Test&amp;lt;/p&amp;gt; /* 1 0 0 0 */
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even if any other rule in the CSS defines the color, this inline style rule is going to be applied. Except for one case — if  &lt;code&gt;!important&lt;/code&gt;  is used, which fills the slot 5.&lt;/p&gt;

&lt;h4 id=&#34;importance&#34;&gt;Importance&lt;/h4&gt;

&lt;p&gt;Specificity does not matter if a rule ends with  &lt;code&gt;!important&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p {
  font-size: 20px!important;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That rule will take precedence over any rule with more specificity&lt;/p&gt;

&lt;p&gt;Adding  &lt;code&gt;!important&lt;/code&gt;  in a CSS rule is going to make that rule more important than any other rule, according to the specificity rules. The only way another rule can take precedence is to have  &lt;code&gt;!important&lt;/code&gt;  as well, and have higher specificity in the other less important slots.&lt;/p&gt;

&lt;h4 id=&#34;tips&#34;&gt;Tips&lt;/h4&gt;

&lt;p&gt;In general you should use the amount of specificity you need, but not more. In this way, you can craft other selectors to overwrite the rules set by preceding rules without going mad.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;!important&lt;/code&gt;  is a highly debated tool that CSS offers us. Many CSS experts advocate against using it. I find myself using it especially when trying out some style and a CSS rule has so much specificity that I need to use  &lt;code&gt;!important&lt;/code&gt;  to make the browser apply my new CSS.&lt;/p&gt;

&lt;p&gt;But generally,  &lt;code&gt;!important&lt;/code&gt;  should have no place in your CSS files.&lt;/p&gt;

&lt;p&gt;Using the  &lt;code&gt;id&lt;/code&gt;  attribute to style CSS is also debated a lot, since it has a very high specificity. A good alternative is to use classes instead, which have less specificity, and so they are easier to work with, and they are more powerful (you can have multiple classes for an element, and a class can be reused multiple times).&lt;/p&gt;

&lt;h4 id=&#34;tools-to-calculate-the-specificity&#34;&gt;Tools to calculate the specificity&lt;/h4&gt;

&lt;p&gt;You can use the site  &lt;a href=&#34;https://specificity.keegan.st/&#34; target=&#34;_blank&#34;&gt;https://specificity.keegan.st/&lt;/a&gt;  to perform the specificity calculation for you automatically.&lt;/p&gt;

&lt;p&gt;It’s useful especially if you are trying to figure things out, as it can be a nice feedback tool.&lt;/p&gt;

&lt;h3 id=&#34;inheritance&#34;&gt;INHERITANCE&lt;/h3&gt;

&lt;p&gt;When you set some properties on a selector in CSS, they are inherited by all the children of that selector.&lt;/p&gt;

&lt;p&gt;I said  &lt;em&gt;some&lt;/em&gt;, because not all properties show this behaviour.&lt;/p&gt;

&lt;p&gt;This happens because some properties make sense to be inherited. This helps us write CSS much more concisely, since we don’t have to explicitly set that property again on every single child.&lt;/p&gt;

&lt;p&gt;Some other properties make more sense to  &lt;em&gt;not&lt;/em&gt;  be inherited.&lt;/p&gt;

&lt;p&gt;Think about fonts: you don’t need to apply the  &lt;code&gt;font-family&lt;/code&gt;  to every single tag of your page. You set the  &lt;code&gt;body&lt;/code&gt;  tag font, and every child inherits it, along with other properties.&lt;/p&gt;

&lt;p&gt;The  &lt;code&gt;background-color&lt;/code&gt;  property, on the other hand, makes little sense to be inherited.&lt;/p&gt;

&lt;h4 id=&#34;properties-that-inherit&#34;&gt;Properties that inherit&lt;/h4&gt;

&lt;p&gt;Here is a list of the properties that do inherit. The list is non-comprehensive, but those rules are just the most popular ones you’ll likely use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;border-collapse&lt;/li&gt;
&lt;li&gt;border-spacing&lt;/li&gt;
&lt;li&gt;caption-side&lt;/li&gt;
&lt;li&gt;color&lt;/li&gt;
&lt;li&gt;cursor&lt;/li&gt;
&lt;li&gt;direction&lt;/li&gt;
&lt;li&gt;empty-cells&lt;/li&gt;
&lt;li&gt;font-family&lt;/li&gt;
&lt;li&gt;font-size&lt;/li&gt;
&lt;li&gt;font-style&lt;/li&gt;
&lt;li&gt;font-variant&lt;/li&gt;
&lt;li&gt;font-weight&lt;/li&gt;
&lt;li&gt;font-size-adjust&lt;/li&gt;
&lt;li&gt;font-stretch&lt;/li&gt;
&lt;li&gt;font&lt;/li&gt;
&lt;li&gt;letter-spacing&lt;/li&gt;
&lt;li&gt;line-height&lt;/li&gt;
&lt;li&gt;list-style-image&lt;/li&gt;
&lt;li&gt;list-style-position&lt;/li&gt;
&lt;li&gt;list-style-type&lt;/li&gt;
&lt;li&gt;list-style&lt;/li&gt;
&lt;li&gt;orphans&lt;/li&gt;
&lt;li&gt;quotes&lt;/li&gt;
&lt;li&gt;tab-size&lt;/li&gt;
&lt;li&gt;text-align&lt;/li&gt;
&lt;li&gt;text-align-last&lt;/li&gt;
&lt;li&gt;text-decoration-color&lt;/li&gt;
&lt;li&gt;text-indent&lt;/li&gt;
&lt;li&gt;text-justify&lt;/li&gt;
&lt;li&gt;text-shadow&lt;/li&gt;
&lt;li&gt;text-transform&lt;/li&gt;
&lt;li&gt;visibility&lt;/li&gt;
&lt;li&gt;white-space&lt;/li&gt;
&lt;li&gt;widows&lt;/li&gt;
&lt;li&gt;word-break&lt;/li&gt;
&lt;li&gt;word-spacing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I got it from this  &lt;a href=&#34;https://www.sitepoint.com/css-inheritance-introduction/&#34; target=&#34;_blank&#34;&gt;nice Sitepoint article&lt;/a&gt;  on CSS inheritance.&lt;/p&gt;

&lt;h4 id=&#34;forcing-properties-to-inherit&#34;&gt;Forcing properties to inherit&lt;/h4&gt;

&lt;p&gt;What if you have a property that’s not inherited by default, and you want it to, in a child?&lt;/p&gt;

&lt;p&gt;In the children, you set the property value to the special keyword  &lt;code&gt;inherit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;body {
    background-color: yellow;
}

p {
  background-color: inherit;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;forcing-properties-to-not-inherit&#34;&gt;Forcing properties to NOT inherit&lt;/h4&gt;

&lt;p&gt;On the contrary, you might have a property inherited and you want to avoid so.&lt;/p&gt;

&lt;p&gt;You can use the  &lt;code&gt;revert&lt;/code&gt;  keyword to revert it. In this case, the value is reverted to the original value the browser gave it in its default stylesheet.&lt;/p&gt;

&lt;p&gt;In practice this is rarely used, and most of the times you’ll just set another value for the property to overwrite that inherited value.&lt;/p&gt;

&lt;h4 id=&#34;other-special-values&#34;&gt;Other special values&lt;/h4&gt;

&lt;p&gt;In addition to the  &lt;code&gt;inherit&lt;/code&gt;  and  &lt;code&gt;revert&lt;/code&gt;  special keywords we just saw, you can also set any property to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;initial&lt;/code&gt;: use the default browser stylesheet if available. If not, and if the property inherits by default, inherit the value. Otherwise do nothing.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unset&lt;/code&gt;: if the property inherits by default, inherit. Otherwise do nothing.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;import&#34;&gt;IMPORT&lt;/h3&gt;

&lt;p&gt;From any CSS file you can import another CSS file using the  &lt;code&gt;@import&lt;/code&gt;  directive.&lt;/p&gt;

&lt;p&gt;Here is how you use it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;@import url(myfile.css)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;url() can manage absolute or relative URLs.&lt;/p&gt;

&lt;p&gt;One important thing you need to know is that  &lt;code&gt;@import&lt;/code&gt;  directives must be put before any other CSS in the file, or they will be ignored.&lt;/p&gt;

&lt;p&gt;You can use media descriptors to only load a CSS file on the specific media:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;@import url(myfile.css) all;
@import url(myfile-screen.css) screen;
@import url(myfile-print.css) print;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;attribute-selectors&#34;&gt;ATTRIBUTE SELECTORS&lt;/h3&gt;

&lt;p&gt;We already introduced several of the basic CSS selectors: using element selectors, class, id, how to combine them, how to target multiple classes, how to style several selectors in the same rule, how to follow the page hierarchy with child and direct child selectors, and adjacent siblings.&lt;/p&gt;

&lt;p&gt;In this section we’ll analyze attribute selectors, and we’ll talk about pseudo class and pseudo element selectors in the next 2 sections.&lt;/p&gt;

&lt;h4 id=&#34;attribute-presence-selectors&#34;&gt;Attribute presence selectors&lt;/h4&gt;

&lt;p&gt;The first selector type is the attribute presence selector.&lt;/p&gt;

&lt;p&gt;We can check if an element  &lt;strong&gt;has&lt;/strong&gt;  an attribute using the  &lt;code&gt;[]&lt;/code&gt;  syntax.  &lt;code&gt;p[id]&lt;/code&gt;  will select all  &lt;code&gt;p&lt;/code&gt;  tags in the page that have an  &lt;code&gt;id&lt;/code&gt;  attribute, regardless of its value:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p[id] {
  /* ... */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;exact-attribute-value-selectors&#34;&gt;Exact attribute value selectors&lt;/h4&gt;

&lt;p&gt;Inside the brackets you can check the attribute value using  &lt;code&gt;=&lt;/code&gt;, and the CSS will be applied only if the attribute matches the exact value specified:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p[id=&amp;quot;my-id&amp;quot;] {
  /* ... */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;match-an-attribute-value-portion&#34;&gt;Match an attribute value portion&lt;/h4&gt;

&lt;p&gt;While  &lt;code&gt;=&lt;/code&gt;  lets us check for exact value, we have other operators:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*=&lt;/code&gt;  checks if the attribute contains the partial&lt;/li&gt;
&lt;li&gt;&lt;code&gt;^=&lt;/code&gt;  checks if the attribute starts with the partial&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$=&lt;/code&gt;  checks if the attribute ends with the partial&lt;/li&gt;
&lt;li&gt;&lt;code&gt;|=&lt;/code&gt;  checks if the attribute starts with the partial and it&amp;rsquo;s followed by a dash (common in classes, for example), or just contains the partial&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~=&lt;/code&gt;  checks if the partial is contained in the attribute, but separated by spaces from the rest&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All the checks we mentioned are  &lt;strong&gt;case sensitive&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you add an  &lt;code&gt;i&lt;/code&gt;  just before the closing bracket, the check will be case insensitive. It&amp;rsquo;s supported in many browsers but not in all, check  &lt;a href=&#34;https://caniuse.com/#feat=css-case-insensitive&#34; target=&#34;_blank&#34;&gt;https://caniuse.com/#feat=css-case-insensitive&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;pseudo-classes&#34;&gt;PSEUDO-CLASSES&lt;/h3&gt;

&lt;p&gt;Pseudo classes are predefined keywords that are used to select an element based on its  &lt;strong&gt;state&lt;/strong&gt;, or to target a specific child.&lt;/p&gt;

&lt;p&gt;They start with a  &lt;strong&gt;single colon&lt;/strong&gt;  &lt;code&gt;:&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;They can be used as part of a selector, and they are very useful to style active or visited links, for example, change the style on hover, focus, or target the first child, or odd rows. Very handy in many cases.&lt;/p&gt;

&lt;p&gt;These are the most popular pseudo classes you will likely use:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/ACo1IxL9QFOQvDYkMigh3FXw717fjM2ChP3w&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s do an example. A common one, actually. You want to style a link, so you create a CSS rule to target the  &lt;code&gt;a&lt;/code&gt;  element:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;a {
  color: yellow;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Things seem to work fine, until you click one link. The link goes back to the predefined color (blue) when you click it. Then when you open the link and go back to the page, now the link is blue.&lt;/p&gt;

&lt;p&gt;Why does that happen?&lt;/p&gt;

&lt;p&gt;Because the link when clicked changes state, and goes in the  &lt;code&gt;:active&lt;/code&gt;  state. And when it&amp;rsquo;s been visited, it is in the  &lt;code&gt;:visited&lt;/code&gt;  state. Forever, until the user clears the browsing history.&lt;/p&gt;

&lt;p&gt;So, to correctly make the link yellow across all states, you need to write&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;a,
a:visited,
a:active {
  color: yellow;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;:nth-child()&lt;/code&gt;  deserves a special mention. It can be used to target odd or even children with  &lt;code&gt;:nth-child(odd)&lt;/code&gt;  and  &lt;code&gt;:nth-child(even)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It is commonly used in lists to color odd lines differently from even lines:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;ul:nth-child(odd) {
  color: white;
    background-color: black;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also use it to target the first 3 children of an element with  &lt;code&gt;:nth-child(-n+3)&lt;/code&gt;. Or you can style 1 in every 5 elements with  &lt;code&gt;:nth-child(5n)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Some pseudo classes are just used for printing, like  &lt;code&gt;:first&lt;/code&gt;,  &lt;code&gt;:left&lt;/code&gt;,  &lt;code&gt;:right&lt;/code&gt;, so you can target the first page, all the left pages, and all the right pages, which are usually styled slightly differently.&lt;/p&gt;

&lt;h3 id=&#34;pseudo-elements&#34;&gt;PSEUDO-ELEMENTS&lt;/h3&gt;

&lt;h4 id=&#34;pseudo-elements-are-used-to-style-a-specific-part-of-an-element&#34;&gt;Pseudo-elements are used to style a specific part of an element.&lt;/h4&gt;

&lt;p&gt;They start with a double colon  &lt;code&gt;::&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Sometimes you will spot them in the wild with a single colon, but this is only a syntax supported for backwards compatibility reasons. You should use 2 colons to distinguish them from pseudo-classes.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;::before&lt;/code&gt;  and  &lt;code&gt;::after&lt;/code&gt;  are probably the most used pseudo-elements. They are used to add content before or after an element, like icons for example.&lt;/p&gt;

&lt;p&gt;Here’s the list of the pseudo-elements:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/9FIuV0uCcudGyplaJcgQAEqK7sTSwhRCIZYd&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s do an example. Say you want to make the first line of a paragraph slightly bigger in font size, a common thing in typography:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p::first-line {
  font-size: 2rem;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or maybe you want the first letter to be bolder:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p::first-letter {
  font-weight: bolder;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;::after&lt;/code&gt;  and  &lt;code&gt;::before&lt;/code&gt;  are a bit less intuitive. I remember using them when I had to add icons using CSS.&lt;/p&gt;

&lt;p&gt;You specify the  &lt;code&gt;content&lt;/code&gt;  property to insert any kind of content after or before an element:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p::before {
  content: url(/myimage.png);
}

.myElement::before {
    content: &amp;quot;Hey Hey!&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;colors&#34;&gt;COLORS&lt;/h3&gt;

&lt;p&gt;By default an HTML page is rendered by web browsers quite sadly in terms of the colors used.&lt;/p&gt;

&lt;p&gt;We have a white background, black color, and blue links. That’s it.&lt;/p&gt;

&lt;p&gt;Luckily CSS gives us the ability to add colors to our designs.&lt;/p&gt;

&lt;p&gt;We have these properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;color&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;background-color&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-color&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of them accept a  &lt;strong&gt;color value&lt;/strong&gt;, which can be in different forms.&lt;/p&gt;

&lt;h4 id=&#34;named-colors&#34;&gt;Named colors&lt;/h4&gt;

&lt;p&gt;First, we have CSS keywords that define colors. CSS started with 16, but today there is a huge number of colors names:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;aliceblue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;antiquewhite&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aqua&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aquamarine&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;azure&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;beige&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bisque&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;black&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;blanchedalmond&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;blue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;blueviolet&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;brown&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;burlywood&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cadetblue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chartreuse&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chocolate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coral&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cornflowerblue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cornsilk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;crimson&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cyan&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;darkblue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;darkcyan&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;darkgoldenrod&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;darkgray&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;darkgreen&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;darkgrey&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;darkkhaki&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;darkmagenta&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;darkolivegreen&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;darkorange&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;darkorchid&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;darkred&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;darksalmon&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;darkseagreen&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;darkslateblue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;darkslategray&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;darkslategrey&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;darkturquoise&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;darkviolet&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deeppink&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deepskyblue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dimgray&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dimgrey&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dodgerblue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;firebrick&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;floralwhite&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;forestgreen&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fuchsia&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gainsboro&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ghostwhite&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gold&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;goldenrod&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gray&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;green&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;greenyellow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grey&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;honeydew&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hotpink&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;indianred&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;indigo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ivory&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;khaki&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lavender&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lavenderblush&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lawngreen&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lemonchiffon&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lightblue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lightcoral&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lightcyan&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lightgoldenrodyellow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lightgray&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lightgreen&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lightgrey&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lightpink&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lightsalmon&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lightseagreen&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lightskyblue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lightslategray&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lightslategrey&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lightsteelblue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lightyellow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lime&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;limegreen&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;linen&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;magenta&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;maroon&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mediumaquamarine&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mediumblue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mediumorchid&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mediumpurple&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mediumseagreen&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mediumslateblue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mediumspringgreen&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mediumturquoise&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mediumvioletred&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;midnightblue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mintcream&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mistyrose&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;moccasin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;navajowhite&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;navy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;oldlace&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;olive&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;olivedrab&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;orange&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;orangered&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;orchid&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;palegoldenrod&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;palegreen&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;paleturquoise&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;palevioletred&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;papayawhip&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;peachpuff&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;peru&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pink&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;plum&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;powderblue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;purple&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rebeccapurple&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;red&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rosybrown&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;royalblue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;saddlebrown&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;salmon&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sandybrown&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;seagreen&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;seashell&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sienna&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;silver&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;skyblue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;slateblue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;slategray&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;slategrey&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;snow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;springgreen&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;steelblue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tan&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;teal&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thistle&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tomato&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;turquoise&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;violet&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wheat&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;white&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;whitesmoke&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yellow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yellowgreen&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;plus  &lt;code&gt;tranparent&lt;/code&gt;, and  &lt;code&gt;currentColor&lt;/code&gt;  which points to the  &lt;code&gt;color&lt;/code&gt;  property, for example it’s useful to make the  &lt;code&gt;border-color&lt;/code&gt;  inherit it.&lt;/p&gt;

&lt;p&gt;They are defined in the  &lt;a href=&#34;https://www.w3.org/TR/css-color-4/&#34; target=&#34;_blank&#34;&gt;CSS Color Module, Level 4&lt;/a&gt;. They are case insensitive.&lt;/p&gt;

&lt;p&gt;Wikipedia has a  &lt;a href=&#34;https://en.wikipedia.org/wiki/Web_colors&#34; target=&#34;_blank&#34;&gt;nice table&lt;/a&gt;  which lets you pick the perfect color by its name.&lt;/p&gt;

&lt;p&gt;Named colors are not the only option.&lt;/p&gt;

&lt;h3 id=&#34;rgb-and-rgba&#34;&gt;RGB and RGBa&lt;/h3&gt;

&lt;p&gt;You can use the  &lt;code&gt;rgb()&lt;/code&gt;  function to calculate a color from its RGB notation, which sets the color based on its red-green-blue parts. From 0 to 255:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p {
  color: rgb(255, 255, 255); /* white */
    background-color: rgb(0, 0, 0); /* black */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;rgba()&lt;/code&gt;  lets you add the alpha channel to enter a transparent part. That can be a number from 0 to 1:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p {
    background-color: rgb(0, 0, 0, 0.5);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;hexadecimal-notation&#34;&gt;Hexadecimal notation&lt;/h4&gt;

&lt;p&gt;Another option is to express the RGB parts of the colors in the hexadecimal notation, which is composed by 3 blocks.&lt;/p&gt;

&lt;p&gt;Black, which is  &lt;code&gt;rgb(0,0,0)&lt;/code&gt;  is expressed as  &lt;code&gt;#000000&lt;/code&gt;  or  &lt;code&gt;#000&lt;/code&gt;  (we can shortcut the 2 numbers to 1 if they are equal).&lt;/p&gt;

&lt;p&gt;White,  &lt;code&gt;rgb(255,255,255)&lt;/code&gt;  can be expressed as  &lt;code&gt;#ffffff&lt;/code&gt;  or  &lt;code&gt;#fff&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The hexadecimal notation lets us express a number from 0 to 255 in just 2 digits, since they can go from 0 to “15” (f).&lt;/p&gt;

&lt;p&gt;We can add the alpha channel by adding 1 or 2 more digits at the end, for example  &lt;code&gt;#00000033&lt;/code&gt;. Not all browsers support the shortened notation, so use all 6 digits to express the RGB part.&lt;/p&gt;

&lt;h4 id=&#34;hsl-and-hsla&#34;&gt;HSL and HSLa&lt;/h4&gt;

&lt;p&gt;This is a more recent addition to CSS.&lt;/p&gt;

&lt;p&gt;HSL = Hue Saturation Lightness.&lt;/p&gt;

&lt;p&gt;In this notation, black is  &lt;code&gt;hsl(0, 0%, 0%)&lt;/code&gt;  and white is  &lt;code&gt;hsl(0, 0%, 100%)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you are more familiar with HSL than RGB because of your past knowledge, you can definitely use that.&lt;/p&gt;

&lt;p&gt;You also have  &lt;code&gt;hsla()&lt;/code&gt;  which adds the alpha channel to the mix, again a number from 0 to 1:  &lt;code&gt;hsl(0, 0%, 0%, 0.5)&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;units&#34;&gt;UNITS&lt;/h3&gt;

&lt;p&gt;One of the things you’ll use every day in CSS are units. They are used to set lengths, paddings, margins, align elements and so on.&lt;/p&gt;

&lt;p&gt;Things like  &lt;code&gt;px&lt;/code&gt;,  &lt;code&gt;em&lt;/code&gt;,  &lt;code&gt;rem&lt;/code&gt;, or percentages.&lt;/p&gt;

&lt;p&gt;They are everywhere. There are some obscure ones, too. We’ll go through each of them in this section.&lt;/p&gt;

&lt;h4 id=&#34;pixels&#34;&gt;Pixels&lt;/h4&gt;

&lt;p&gt;The most widely used measurement unit. A pixel does not actually correlate to a physical pixel on your screen, as that varies, a lot, by device (think high-DPI devices vs non-retina devices).&lt;/p&gt;

&lt;p&gt;There is a convention that make this unit work consistently across devices.&lt;/p&gt;

&lt;h4 id=&#34;percentages&#34;&gt;Percentages&lt;/h4&gt;

&lt;p&gt;Another very useful measure, percentages let you specify values in percentages of that parent element’s corresponding property.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.parent {
  width: 400px;
}

.child {
  width: 50%; /* = 200px */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;real-world-measurement-units&#34;&gt;Real-world measurement units&lt;/h4&gt;

&lt;p&gt;We have those measurement units which are translated from the outside world. Mostly useless on screen, they can be useful for print stylesheets. They are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cm&lt;/code&gt;  a centimeter (maps to 37.8 pixels)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mm&lt;/code&gt;  a millimeter (0.1cm)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;q&lt;/code&gt;  a quarter of a millimeter&lt;/li&gt;
&lt;li&gt;&lt;code&gt;in&lt;/code&gt;  an inch (maps to 96 pixels)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pt&lt;/code&gt;  a point (1 inch = 72 points)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pc&lt;/code&gt;  a pica (1 pica = 12 points)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;relative-units&#34;&gt;Relative units&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;em&lt;/code&gt;  is the value assigned to that element&amp;rsquo;s  &lt;code&gt;font-size&lt;/code&gt;, therefore its exact value changes between elements. It does not change depending on the font used, just on the font size. In typography this measures the width of the  &lt;code&gt;m&lt;/code&gt;  letter.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rem&lt;/code&gt;  is similar to  &lt;code&gt;em&lt;/code&gt;, but instead of varying on the current element font size, it uses the root element (&lt;code&gt;html&lt;/code&gt;) font size. You set that font size once, and  &lt;code&gt;rem&lt;/code&gt;  will be a consistent measure across all the page.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ex&lt;/code&gt;  is like  &lt;code&gt;em&lt;/code&gt;, but inserted of measuring the width of  &lt;code&gt;m&lt;/code&gt;, it measures the height of the  &lt;code&gt;x&lt;/code&gt;  letter. It can change depending on the font used, and on the font size.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ch&lt;/code&gt;  is like  &lt;code&gt;ex&lt;/code&gt;  but instead of measuring the height of  &lt;code&gt;x&lt;/code&gt;  it measures the width of  &lt;code&gt;0&lt;/code&gt;  (zero).&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;viewport-units&#34;&gt;Viewport units&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vw&lt;/code&gt;  the  &lt;strong&gt;viewport width unit&lt;/strong&gt;  represents a percentage of the viewport width.  &lt;code&gt;50vw&lt;/code&gt;  means 50% of the viewport width.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vh&lt;/code&gt;  the  &lt;strong&gt;viewport height unit&lt;/strong&gt;  represents a percentage of the viewport height.  &lt;code&gt;50vh&lt;/code&gt;  means 50% of the viewport height.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vmin&lt;/code&gt;  the  &lt;strong&gt;viewport minimum unit&lt;/strong&gt;  represents the minimum between the height or width in terms of percentage.  &lt;code&gt;30vmin&lt;/code&gt;  is the 30% of the current width or height, depending which one is smaller&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vmax&lt;/code&gt;  the  &lt;strong&gt;viewport maximum unit&lt;/strong&gt;  represents the maximum between the height or width in terms of percentage.  &lt;code&gt;30vmax&lt;/code&gt;  is the 30% of the current width or height, depending which one is bigger&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;fraction-units&#34;&gt;Fraction units&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;fr&lt;/code&gt;  are fraction units, and they are used in CSS Grid to divide space into fractions.&lt;/p&gt;

&lt;p&gt;We’ll talk about them in the context of CSS Grid later on.&lt;/p&gt;

&lt;h3 id=&#34;url&#34;&gt;URL&lt;/h3&gt;

&lt;p&gt;When we talk about background images,  &lt;code&gt;@import&lt;/code&gt;, and more, we use the  &lt;code&gt;url()&lt;/code&gt;  function to load a resource:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;div {
  background-image: url(test.png);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case I used a relative URL, which searches the file in the folder where the CSS file is defined.&lt;/p&gt;

&lt;p&gt;I could go one level back&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;div {
  background-image: url(../test.png);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or go into a folder&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;div {
  background-image: url(subfolder/test.png);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or I could load a file starting from the root of the domain where the CSS is hosted:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;div {
  background-image: url(/test.png);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or I could use an absolute URL to load an external resource:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;div {
  background-image: url(https://mysite.com/test.png);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;calc&#34;&gt;CALC&lt;/h3&gt;

&lt;p&gt;The  &lt;code&gt;calc()&lt;/code&gt;  function lets you perform basic math operations on values, and it&amp;rsquo;s especially useful when you need to add or subtract a length value from a percentage.&lt;/p&gt;

&lt;p&gt;This is how it works:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;div {
    max-width: calc(80% - 100px)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It returns a length value, so it can be used anywhere you expect a pixel value.&lt;/p&gt;

&lt;p&gt;You can perform&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;additions using  &lt;code&gt;+&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;subtractions using  &lt;code&gt;-&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;multiplication using  &lt;code&gt;*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;division using  &lt;code&gt;/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;One caveat: with addition and subtraction, the space around the operator is mandatory, otherwise it does not work as expected.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;div {
    max-width: calc(50% / 3)
}

div {
    max-width: calc(50% + 3px)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;backgrounds&#34;&gt;BACKGROUNDS&lt;/h3&gt;

&lt;p&gt;The background of an element can be changed using several CSS properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;background-color&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;background-image&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;background-clip&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;background-position&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;background-origin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;background-repeat&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;background-attachment&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;background-size&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and the shorthand property  &lt;code&gt;background&lt;/code&gt;, which allows us to shorten definitions and group them on a single line.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;background-color&lt;/code&gt;  accepts a color value, which can be one of the color keywords, or an  &lt;code&gt;rgb&lt;/code&gt;  or  &lt;code&gt;hsl&lt;/code&gt;  value:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p {
  background-color: yellow;
}

div {
  background-color: #333;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instead of using a color, you can use an image as background to an element, by specifying the image location URL:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;div {
  background-image: url(image.png);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;background-clip&lt;/code&gt;  lets you determine the area used by the background image, or color. The default value is  &lt;code&gt;border-box&lt;/code&gt;, which extends up to the border outer edge.&lt;/p&gt;

&lt;p&gt;Other values are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;padding-box&lt;/code&gt;  to extend the background up to the padding edge, without the border&lt;/li&gt;
&lt;li&gt;&lt;code&gt;content-box&lt;/code&gt;  to extend the background up to the content edge, without the padding&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inherit&lt;/code&gt;  to apply the value of the parent&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When using an image as background you will want to set the position of the image placement using the  &lt;code&gt;background-position&lt;/code&gt;  property:  &lt;code&gt;left&lt;/code&gt;,  &lt;code&gt;right&lt;/code&gt;,  &lt;code&gt;center&lt;/code&gt;  are all valid values for the X axis, and  &lt;code&gt;top&lt;/code&gt;,  &lt;code&gt;bottom&lt;/code&gt;  for the Y axis:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;div {
  background-position: top right;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the image is smaller than the background, you need to set the behavior using  &lt;code&gt;background-repeat&lt;/code&gt;. Should it  &lt;code&gt;repeat-x&lt;/code&gt;,  &lt;code&gt;repeat-y&lt;/code&gt;  or  &lt;code&gt;repeat&lt;/code&gt;  on all the axes? This last one is the default value. Another value is  &lt;code&gt;no-repeat&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;background-origin&lt;/code&gt;  lets you choose where the background should be applied: to the entire element including padding (default) using  &lt;code&gt;padding-box&lt;/code&gt;, to the entire element including the border using  &lt;code&gt;border-box&lt;/code&gt;, to the element without the padding using  &lt;code&gt;content-box&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With  &lt;code&gt;background-attachment&lt;/code&gt;  we can attach the background to the viewport, so that scrolling will not affect the background:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;div {
  background-attachment: fixed;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default the value is  &lt;code&gt;scroll&lt;/code&gt;. There is another value,  &lt;code&gt;local&lt;/code&gt;. The best way to visualize their behavior is  &lt;a href=&#34;https://codepen.io/BernLeech/pen/mMNKJV&#34; target=&#34;_blank&#34;&gt;this Codepen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The last background property is  &lt;code&gt;background-size&lt;/code&gt;. We can use 3 keywords:  &lt;code&gt;auto&lt;/code&gt;,  &lt;code&gt;cover&lt;/code&gt;  and  &lt;code&gt;contain&lt;/code&gt;.  &lt;code&gt;auto&lt;/code&gt;  is the default.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cover&lt;/code&gt;  expands the image until the entire element is covered by the background.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;contain&lt;/code&gt;  stops expanding the background image when one dimension (x or y) covers the whole smallest edge of the image, so it&amp;rsquo;s fully contained into the element.&lt;/p&gt;

&lt;p&gt;You can also specify a length value, and if so it sets the width of the background image (and the height is automatically defined):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;div {
  background-size: 100%;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you specify 2 values, one is the width and the second is the height:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;div {
  background-size: 800px 600px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The shorthand property  &lt;code&gt;background&lt;/code&gt;  allows to shorten definitions and group them on a single line.&lt;/p&gt;

&lt;p&gt;This is an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;div {
  background: url(bg.png) top left no-repeat;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you use an image, and the image could not be loaded, you can set a fallback color:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;div {
  background: url(image.png) yellow;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also set a gradient as background:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;div {
  background: linear-gradient(#fff, #333);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;comments&#34;&gt;COMMENTS&lt;/h3&gt;

&lt;p&gt;CSS gives you the ability to write comments in a CSS file, or in the  &lt;code&gt;style&lt;/code&gt;  tag in the page header&lt;/p&gt;

&lt;p&gt;The format is the  &lt;code&gt;/* this is a comment */&lt;/code&gt;  C-style (or JavaScript-style, if you prefer) comments.&lt;/p&gt;

&lt;p&gt;This is a multiline comment. Until you add the closing  &lt;code&gt;*/&lt;/code&gt;  token, the all the lines found after the opening one are commented.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;#name { display: block; } /* Nice rule! */

/* #name { display: block; } */

#name {
    display: block; /*
    color: red;
    */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CSS does not have inline comments, like  &lt;code&gt;//&lt;/code&gt;  in C or JavaScript.&lt;/p&gt;

&lt;p&gt;Pay attention though — if you add  &lt;code&gt;//&lt;/code&gt;  before a rule, the rule will not be applied, looking like the comment worked. In reality, CSS detected a syntax error and due to how it works it ignored the line with the error, and went straight to the next line.&lt;/p&gt;

&lt;p&gt;Knowing this approach lets you purposefully write inline comments, although you have to be careful because you can’t add random text like you can in a block comment.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;// Nice rule!
#name { display: block; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case, due to how CSS works, the  &lt;code&gt;#name&lt;/code&gt;  rule is actually commented out. You can find more details  &lt;a href=&#34;https://www.xanthir.com/b4U10&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;  if you find this interesting. To avoid shooting yourself in the foot, just avoid using inline comments and rely on block comments.&lt;/p&gt;

&lt;h3 id=&#34;custom-properties&#34;&gt;CUSTOM PROPERTIES&lt;/h3&gt;

&lt;p&gt;In the last few years CSS preprocessors have had a lot of success. It was very common for greenfield projects to start with Less or Sass. And it’s still a very popular technology.&lt;/p&gt;

&lt;p&gt;The main benefits of those technologies are, in my opinion:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They allow you to nest selectors&lt;/li&gt;
&lt;li&gt;The provide an easy imports functionality&lt;/li&gt;
&lt;li&gt;They give you variables&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Modern CSS has a new powerful feature called  &lt;strong&gt;CSS Custom Properties&lt;/strong&gt;, also commonly known as  &lt;strong&gt;CSS Variables&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;CSS is not a programming language like  &lt;a href=&#34;https://flaviocopes.com/javascript/&#34; target=&#34;_blank&#34;&gt;JavaScript&lt;/a&gt;, Python, PHP, Ruby or Go where variables are key to do something useful. CSS is very limited in what it can do, and it’s mainly a declarative syntax to tell browsers how they should display an HTML page.&lt;/p&gt;

&lt;p&gt;But a variable is a variable: a name that refers to a value, and variables in CSS help reduce repetition and inconsistencies in your CSS, by centralizing the values definition.&lt;/p&gt;

&lt;p&gt;And it introduces a unique feature that CSS preprocessors won’t ever have:  &lt;strong&gt;you can access and change the value of a CSS Variable programmatically using JavaScript&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&#34;the-basics-of-using-variables&#34;&gt;The basics of using variables&lt;/h4&gt;

&lt;p&gt;A CSS Variable is defined with a special syntax, prepending  &lt;strong&gt;two dashes&lt;/strong&gt;  to a name (&lt;code&gt;--variable-name&lt;/code&gt;), then a colon and a value. Like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;:root {
  --primary-color: yellow;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(more on  &lt;code&gt;:root&lt;/code&gt;  later)&lt;/p&gt;

&lt;p&gt;You can access the variable value using  &lt;code&gt;var()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p {
  color: var(--primary-color)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The variable value can be any valid CSS value, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;:root {
  --default-padding: 30px 30px 20px 20px;
  --default-color: red;
  --default-background: #fff;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;create-variables-inside-any-element&#34;&gt;Create variables inside any element&lt;/h4&gt;

&lt;p&gt;CSS Variables can be defined inside any element. Some examples:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;:root {
  --default-color: red;
}

body {
  --default-color: red;
}

main {
  --default-color: red;
}

p {
  --default-color: red;
}

span {
  --default-color: red;
}

a:hover {
  --default-color: red;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What changes in those different examples is the  &lt;strong&gt;scope&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&#34;variables-scope&#34;&gt;Variables scope&lt;/h4&gt;

&lt;p&gt;Adding variables to a selector makes them available to all the children of it.&lt;/p&gt;

&lt;p&gt;In the example above you saw the use of  &lt;code&gt;:root&lt;/code&gt;  when defining a CSS variable:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;:root {
  --primary-color: yellow;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;:root&lt;/code&gt;  is a CSS pseudo-class that identifies the root element of a tree.&lt;/p&gt;

&lt;p&gt;In the context of an HTML document, using the  &lt;code&gt;:root&lt;/code&gt;  selector points to the  &lt;code&gt;html&lt;/code&gt;  element, except that  &lt;code&gt;:root&lt;/code&gt;  has higher specificity (takes priority).&lt;/p&gt;

&lt;p&gt;In the context of an SVG image,  &lt;code&gt;:root&lt;/code&gt;  points to the  &lt;code&gt;svg&lt;/code&gt;  tag.&lt;/p&gt;

&lt;p&gt;Adding a CSS custom property to  &lt;code&gt;:root&lt;/code&gt;  makes it available to all the elements in the page.&lt;/p&gt;

&lt;p&gt;If you add a variable inside a  &lt;code&gt;.container&lt;/code&gt;  selector, it&amp;rsquo;s only going to be available to children of  &lt;code&gt;.container&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.container {
  --secondary-color: yellow;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and using it outside of this element is not going to work.&lt;/p&gt;

&lt;p&gt;Variables can be  &lt;strong&gt;reassigned&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;:root {
  --primary-color: yellow;
}

.container {
  --primary-color: blue;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Outside  &lt;code&gt;.container&lt;/code&gt;,  &lt;code&gt;--primary-color&lt;/code&gt;  will be  &lt;em&gt;yellow&lt;/em&gt;, but inside it will be  &lt;em&gt;blue&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;You can also assign or overwrite a variable inside the HTML using  &lt;strong&gt;inline styles&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;main style=&amp;quot;--primary-color: orange;&amp;quot;&amp;gt;
  &amp;lt;!-- ... --&amp;gt;
&amp;lt;/main&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;CSS Variables follow the normal CSS cascading rules, with precedence set according to specificity.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;interacting-with-a-css-variable-value-using-javascript&#34;&gt;Interacting with a CSS Variable value using JavaScript&lt;/h4&gt;

&lt;p&gt;The coolest thing with CSS Variables is the ability to access and edit them using JavaScript.&lt;/p&gt;

&lt;p&gt;Here’s how you set a variable value using plain JavaScript:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const element = document.getElementById(&#39;my-element&#39;)
element.style.setProperty(&#39;--variable-name&#39;, &#39;a-value&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code below can be used to access a variable value instead, in case the variable is defined on  &lt;code&gt;:root&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const styles = getComputedStyle(document.documentElement)
const value = String(styles.getPropertyValue(&#39;--variable-name&#39;)).trim()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or, to get the style applied to a specific element, in case of variables set with a different scope:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const element = document.getElementById(&#39;my-element&#39;)
const styles = getComputedStyle(element)
const value = String(styles.getPropertyValue(&#39;--variable-name&#39;)).trim()
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;handling-invalid-values&#34;&gt;Handling invalid values&lt;/h4&gt;

&lt;p&gt;If a variable is assigned to a property which does not accept the variable value, it’s considered invalid.&lt;/p&gt;

&lt;p&gt;For example you might pass a pixel value to a  &lt;code&gt;position&lt;/code&gt;  property, or a rem value to a color property.&lt;/p&gt;

&lt;p&gt;In this case the line is considered invalid and is ignored.&lt;/p&gt;

&lt;h4 id=&#34;browser-support&#34;&gt;Browser support&lt;/h4&gt;

&lt;p&gt;Browser support for CSS Variables is  &lt;strong&gt;very good&lt;/strong&gt;,  &lt;a href=&#34;https://www.caniuse.com/#feat=css-variables&#34; target=&#34;_blank&#34;&gt;according to Can I Use&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;CSS Variables are here to stay, and you can use them today if you don’t need to support Internet Explorer and old versions of the other browsers.&lt;/p&gt;

&lt;p&gt;If you need to support older browsers you can use libraries like  &lt;a href=&#34;https://flaviocopes.com/postcss/&#34; target=&#34;_blank&#34;&gt;PostCSS&lt;/a&gt;  or  &lt;a href=&#34;http://www.myth.io/&#34; target=&#34;_blank&#34;&gt;Myth&lt;/a&gt;, but you’ll lose the ability to interact with variables via JavaScript or the Browser Developer Tools, as they are transpiled to good old variable-less CSS (and as such, you lose most of the power of CSS Variables).&lt;/p&gt;

&lt;h4 id=&#34;css-variables-are-case-sensitive&#34;&gt;CSS Variables are case sensitive&lt;/h4&gt;

&lt;p&gt;This variable:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;--width: 100px;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is different than this one:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;--Width: 100px;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;math-in-css-variables&#34;&gt;Math in CSS Variables&lt;/h4&gt;

&lt;p&gt;To do math in CSS Variables, you need to use  &lt;code&gt;calc()&lt;/code&gt;, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;:root {
  --default-left-padding: calc(10px * 2);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;media-queries-with-css-variables&#34;&gt;Media queries with CSS Variables&lt;/h4&gt;

&lt;p&gt;Nothing special here. CSS Variables normally apply to media queries:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;body {
  --width: 500px;
}

@media screen and (max-width: 1000px) and (min-width: 700px) {
  --width: 800px;
}

.container {
  width: var(--width);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;setting-a-fallback-value-for-var&#34;&gt;Setting a fallback value for var()&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;var()&lt;/code&gt;  accepts a second parameter, which is the default fallback value when the variable value is not set:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.container {
  margin: var(--default-margin, 30px);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;fonts&#34;&gt;FONTS&lt;/h3&gt;

&lt;p&gt;At the dawn of the web you only had a handful of fonts you could choose from.&lt;/p&gt;

&lt;p&gt;Thankfully today you can load any kind of font on your pages.&lt;/p&gt;

&lt;p&gt;CSS has gained many nice capabilities over the years in regards to fonts.&lt;/p&gt;

&lt;p&gt;The  &lt;code&gt;font&lt;/code&gt;  property is the shorthand for a number of properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;font-family&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;font-weight&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;font-stretch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;font-style&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;font-size&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s see each one of them and then we’ll cover  &lt;code&gt;font&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then we’ll talk about how to load custom fonts, using  &lt;code&gt;@import&lt;/code&gt;  or  &lt;code&gt;@font-face&lt;/code&gt;, or by loading a font stylesheet.&lt;/p&gt;

&lt;h4 id=&#34;font-family&#34;&gt;&lt;code&gt;font-family&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Sets the font  &lt;em&gt;family&lt;/em&gt;  that the element will use.&lt;/p&gt;

&lt;p&gt;Why “family”? Because what we know as a font is actually composed of several sub-fonts which provide all the style (bold, italic, light..) we need.&lt;/p&gt;

&lt;p&gt;Here’s an example from my Mac’s Font Book app — the Fira Code font family hosts several dedicated fonts underneath:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/3eSWEQuM-orkdVa7xATJ5p9sH2Te-clkilVI&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This property lets you select a specific font, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;body {
  font-family: Helvetica;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can set multiple values, so the second option will be used if the first cannot be used for some reason (if it’s not found on the machine, or the network connection to download the font failed, for example):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;body {
  font-family: Helvetica, Arial;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I used some specific fonts up to now, ones we call  &lt;strong&gt;Web Safe Fonts&lt;/strong&gt;, as they are pre-installed on different operating systems.&lt;/p&gt;

&lt;p&gt;We divide them in Serif, Sans-Serif, and Monospace fonts. Here’s a list of some of the most popular ones:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Serif&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Georgia&lt;/li&gt;
&lt;li&gt;Palatino&lt;/li&gt;
&lt;li&gt;Times New Roman&lt;/li&gt;
&lt;li&gt;Times&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Sans-Serif&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Arial&lt;/li&gt;
&lt;li&gt;Helvetica&lt;/li&gt;
&lt;li&gt;Verdana&lt;/li&gt;
&lt;li&gt;Geneva&lt;/li&gt;
&lt;li&gt;Tahoma&lt;/li&gt;
&lt;li&gt;Lucida Grande&lt;/li&gt;
&lt;li&gt;Impact&lt;/li&gt;
&lt;li&gt;Trebuchet MS&lt;/li&gt;
&lt;li&gt;Arial Black&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Monospace&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Courier New&lt;/li&gt;
&lt;li&gt;Courier&lt;/li&gt;
&lt;li&gt;Lucida Console&lt;/li&gt;
&lt;li&gt;Monaco&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can use all of those as  &lt;code&gt;font-family&lt;/code&gt;  properties, but they are not guaranteed to be there for every system. Others exist, too, with a varying level of support.&lt;/p&gt;

&lt;p&gt;You can also use generic names:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sans-serif&lt;/code&gt;  a font without ligatures&lt;/li&gt;
&lt;li&gt;&lt;code&gt;serif&lt;/code&gt;  a font with ligatures&lt;/li&gt;
&lt;li&gt;&lt;code&gt;monospace&lt;/code&gt;  a font especially good for code&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cursive&lt;/code&gt;  used to simulate handwritten pieces&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fantasy&lt;/code&gt;  the name says it all&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those are typically used at the end of a  &lt;code&gt;font-family&lt;/code&gt;  definition, to provide a fallback value in case nothing else can be applied:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;body {
  font-family: Helvetica, Arial, sans-serif;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;font-weight&#34;&gt;&lt;code&gt;font-weight&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;This property sets the width of a font. You can use those predefined values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;normal&lt;/li&gt;
&lt;li&gt;bold&lt;/li&gt;
&lt;li&gt;bolder (relative to the parent element)&lt;/li&gt;
&lt;li&gt;lighter (relative to the parent element)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Or using the numeric keywords&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;100&lt;/li&gt;
&lt;li&gt;200&lt;/li&gt;
&lt;li&gt;300&lt;/li&gt;
&lt;li&gt;400, mapped to  &lt;code&gt;normal&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;500&lt;/li&gt;
&lt;li&gt;600&lt;/li&gt;
&lt;li&gt;700 mapped to  &lt;code&gt;bold&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;800&lt;/li&gt;
&lt;li&gt;900&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;where 100 is the lightest font, and 900 is the boldest.&lt;/p&gt;

&lt;p&gt;Some of those numeric values might not map to a font, because that must be provided in the font family. When one is missing, CSS makes that number be at least as bold as the preceding one, so you might have numbers that point to the same font.&lt;/p&gt;

&lt;h4 id=&#34;font-stretch&#34;&gt;&lt;code&gt;font-stretch&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Allows you to choose a narrow or wide face of the font, if available.&lt;/p&gt;

&lt;p&gt;This is important: the font must be equipped with different faces.&lt;/p&gt;

&lt;p&gt;Values allowed are, from narrower to wider:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ultra-condensed&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extra-condensed&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;condensed&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;semi-condensed&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;normal&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;semi-expanded&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;expanded&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extra-expanded&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ultra-expanded&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;font-style&#34;&gt;&lt;code&gt;font-style&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Allows you to apply an italic style to a font:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p {
  font-style: italic;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This property also allows the values  &lt;code&gt;oblique&lt;/code&gt;  and  &lt;code&gt;normal&lt;/code&gt;. There is very little, if any, difference between using  &lt;code&gt;italic&lt;/code&gt;  and  &lt;code&gt;oblique&lt;/code&gt;. The first is easier to me, as HTML already offers an  &lt;code&gt;i&lt;/code&gt;  element which means italic.&lt;/p&gt;

&lt;h4 id=&#34;font-size&#34;&gt;&lt;code&gt;font-size&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;This property is used to determine the size of fonts.&lt;/p&gt;

&lt;p&gt;You can pass 2 kinds of values:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;a length value, like  &lt;code&gt;px&lt;/code&gt;,  &lt;code&gt;em&lt;/code&gt;,  &lt;code&gt;rem&lt;/code&gt;  etc, or a percentage&lt;/li&gt;
&lt;li&gt;a predefined value keyword&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the second case, the values you can use are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;xx-small&lt;/li&gt;
&lt;li&gt;x-small&lt;/li&gt;
&lt;li&gt;small&lt;/li&gt;
&lt;li&gt;medium&lt;/li&gt;
&lt;li&gt;large&lt;/li&gt;
&lt;li&gt;x-large&lt;/li&gt;
&lt;li&gt;xx-large&lt;/li&gt;
&lt;li&gt;smaller (relative to the parent element)&lt;/li&gt;
&lt;li&gt;larger (relative to the parent element)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p {
  font-size: 20px;
}

li {
  font-size: medium;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;font-variant&#34;&gt;&lt;code&gt;font-variant&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;This property was originally used to change the text to small caps, and it had just 3 valid values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;normal&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inherit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;small-caps&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Small caps means the text is rendered in “smaller caps” beside its uppercase letters.&lt;/p&gt;

&lt;h4 id=&#34;font&#34;&gt;&lt;code&gt;font&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;The  &lt;code&gt;font&lt;/code&gt;  property lets you apply different font properties in a single one, reducing the clutter.&lt;/p&gt;

&lt;p&gt;We must at least set 2 properties,  &lt;code&gt;font-size&lt;/code&gt;  and  &lt;code&gt;font-family&lt;/code&gt;, the others are optional:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;body {
  font: 20px Helvetica;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we add other properties, they need to be put in the correct order.&lt;/p&gt;

&lt;p&gt;This is the order:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;font: &amp;lt;font-stretch&amp;gt; &amp;lt;font-style&amp;gt; &amp;lt;font-variant&amp;gt; &amp;lt;font-weight&amp;gt; &amp;lt;font-size&amp;gt; &amp;lt;line-height&amp;gt; &amp;lt;font-family&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;body {
  font: italic bold 20px Helvetica;
}

section {
  font: small-caps bold 20px Helvetica;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;loading-custom-fonts-using-font-face&#34;&gt;Loading custom fonts using  &lt;code&gt;@font-face&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;@font-face&lt;/code&gt;  lets you add a new font family name, and map it to a file that holds a font.&lt;/p&gt;

&lt;p&gt;This font will be downloaded by the browser and used in the page, and it’s been such a fundamental change to typography on the web — we can now use any font we want.&lt;/p&gt;

&lt;p&gt;We can add  &lt;code&gt;@font-face&lt;/code&gt;  declarations directly into our CSS, or link to a CSS dedicated to importing the font.&lt;/p&gt;

&lt;p&gt;In our CSS file we can also use  &lt;code&gt;@import&lt;/code&gt;  to load that CSS file.&lt;/p&gt;

&lt;p&gt;A  &lt;code&gt;@font-face&lt;/code&gt;  declaration contains several properties we use to define the font, including  &lt;code&gt;src&lt;/code&gt;, the URI (one or more URIs) to the font. This follows the same-origin policy, which means fonts can only be downloaded form the current origin (domain + port + protocol).&lt;/p&gt;

&lt;p&gt;Fonts are usually in the formats&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;woff&lt;/code&gt;  (Web Open Font Format)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;woff2&lt;/code&gt;  (Web Open Font Format 2.0)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eot&lt;/code&gt;  (Embedded Open Type)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;otf&lt;/code&gt;  (OpenType Font)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ttf&lt;/code&gt;  (TrueType Font)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following properties allow us to define the properties to the font we are going to load, as we saw above:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;font-family&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;font-weight&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;font-style&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;font-stretch&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;a-note-on-performance&#34;&gt;A note on performance&lt;/h4&gt;

&lt;p&gt;Of course loading a font has performance implications which you must consider when creating the design of your page.&lt;/p&gt;

&lt;h3 id=&#34;typography&#34;&gt;TYPOGRAPHY&lt;/h3&gt;

&lt;p&gt;We already talked about fonts, but there’s more to styling text.&lt;/p&gt;

&lt;p&gt;In this section we’ll talk about the following properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;text-transform&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text-decoration&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text-align&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vertical-align&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;line-height&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text-indent&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text-align-last&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;word-spacing&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;letter-spacing&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text-shadow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;white-space&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tab-size&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;writing-mode&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hyphens&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text-orientation&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;direction&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;line-break&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;word-break&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;overflow-wrap&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;text-transform&#34;&gt;&lt;code&gt;text-transform&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;This property can transform the case of an element.&lt;/p&gt;

&lt;p&gt;There are 4 valid values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;capitalize&lt;/code&gt;  to uppercase the first letter of each word&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uppercase&lt;/code&gt;  to uppercase all the text&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lowercase&lt;/code&gt;  to lowercase all the text&lt;/li&gt;
&lt;li&gt;&lt;code&gt;none&lt;/code&gt;  to disable transforming the text, used to avoid inheriting the property&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p {
  text-transform: uppercase;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;text-decoration&#34;&gt;&lt;code&gt;text-decoration&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;This property is sed to add decorations to the text, including&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;underline&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;overline&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;line-through&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;blink&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;none&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p {
  text-decoration: underline;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also set the style of the decoration, and the color.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p {
  text-decoration: underline dashed yellow;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Valid style values are  &lt;code&gt;solid&lt;/code&gt;,  &lt;code&gt;double&lt;/code&gt;,  &lt;code&gt;dotted&lt;/code&gt;,  &lt;code&gt;dashed&lt;/code&gt;,  &lt;code&gt;wavy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can do all in one line, or use the specific properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;text-decoration-line&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text-decoration-color&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text-decoration-style&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p {
  text-decoration-line: underline;
  text-decoration-color: yellow;
  text-decoration-style: dashed;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;text-align&#34;&gt;&lt;code&gt;text-align&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;By default text align has the  &lt;code&gt;start&lt;/code&gt;  value, meaning the text starts at the &amp;laquo;start&amp;raquo;, origin 0, 0 of the box that contains it. This means top left in left-to-right languages, and top right in right-to-left languages.&lt;/p&gt;

&lt;p&gt;Possible values are  &lt;code&gt;start&lt;/code&gt;,  &lt;code&gt;end&lt;/code&gt;,  &lt;code&gt;left&lt;/code&gt;,  &lt;code&gt;right&lt;/code&gt;,  &lt;code&gt;center&lt;/code&gt;,  &lt;code&gt;justify&lt;/code&gt;  (nice to have a consistent spacing at the line ends):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p {
  text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;vertical-align&#34;&gt;&lt;code&gt;vertical-align&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Determines how inline elements are vertically aligned.&lt;/p&gt;

&lt;p&gt;We have several values for this property. First we can assign a length or percentage value. Those are used to align the text in a position higher or lower (using negative values) than the baseline of the parent element.&lt;/p&gt;

&lt;p&gt;Then we have the keywords:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;baseline&lt;/code&gt;  (the default), aligns the baseline to the baseline of the parent element&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sub&lt;/code&gt;  makes an element subscripted, simulating the  &lt;code&gt;sub&lt;/code&gt;  HTML element result&lt;/li&gt;
&lt;li&gt;&lt;code&gt;super&lt;/code&gt;  makes an element superscripted, simulating the  &lt;code&gt;sup&lt;/code&gt;  HTML element result&lt;/li&gt;
&lt;li&gt;&lt;code&gt;top&lt;/code&gt;  align the top of the element to the top of the line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text-top&lt;/code&gt;  align the top of the element to the top of the parent element font&lt;/li&gt;
&lt;li&gt;&lt;code&gt;middle&lt;/code&gt;  align the middle of the element to the middle of the line of the parent&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bottom&lt;/code&gt;  align the bottom of the element to the bottom of the line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text-bottom&lt;/code&gt;  align the bottom of the element to the bottom of the parent element font&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;line-height&#34;&gt;&lt;code&gt;line-height&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;This allows you to change the height of a line. Each line of text has a certain font height, but then there is additional spacing vertically between the lines. That’s the line height:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p {
  line-height: 0.9rem;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;text-indent&#34;&gt;&lt;code&gt;text-indent&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Indent the first line of a paragraph by a set length, or a percentage of the paragraph width:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p {
  text-indent: -10px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;text-align-last&#34;&gt;&lt;code&gt;text-align-last&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;By default the last line of a paragraph is aligned following the  &lt;code&gt;text-align&lt;/code&gt;  value. Use this property to change that behavior:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p {
  text-align-last: right;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;word-spacing&#34;&gt;&lt;code&gt;word-spacing&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Modifies the spacing between each word.&lt;/p&gt;

&lt;p&gt;You can use the  &lt;code&gt;normal&lt;/code&gt;  keyword, to reset inherited values, or use a length value:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p {
  word-spacing: 2px;
}

span {
  word-spacing: -0.2em;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;letter-spacing&#34;&gt;&lt;code&gt;letter-spacing&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Modifies the spacing between each letter.&lt;/p&gt;

&lt;p&gt;You can use the  &lt;code&gt;normal&lt;/code&gt;  keyword, to reset inherited values, or use a length value:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p {
  letter-spacing: 0.2px;
}

span {
  letter-spacing: -0.2em;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;text-shadow&#34;&gt;&lt;code&gt;text-shadow&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Apply a shadow to the text. By default the text has now shadow.&lt;/p&gt;

&lt;p&gt;This property accepts an optional color, and a set of values that set&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the X offset of the shadow from the text&lt;/li&gt;
&lt;li&gt;the Y offset of the shadow from the text&lt;/li&gt;
&lt;li&gt;the blur radius&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the color is not specified, the shadow will use the text color.&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p {
  text-shadow: 0.2px 2px;
}

span {
  text-shadow: yellow 0.2px 2px 3px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;white-space&#34;&gt;&lt;code&gt;white-space&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Sets how CSS handles the white space, new lines and tabs inside an element.&lt;/p&gt;

&lt;p&gt;Valid values that collapse white space are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;normal&lt;/code&gt;  collapses white space. Adds new lines when necessary as the text reaches the container end&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nowrap&lt;/code&gt;  collapses white space. Does not add a new line when the text reaches the end of the container, and suppresses any line break added to the text&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pre-line&lt;/code&gt;  collapses white space. Adds new lines when necessary as the text reaches the container end&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Valid values that preserve white space are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pre&lt;/code&gt;  preserves white space. Does not add a new line when the text reaches the end of the container, but preserves line break added to the text&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pre-wrap&lt;/code&gt;  preserves white space. Adds new lines when necessary as the text reaches the container end&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;tab-size&#34;&gt;&lt;code&gt;tab-size&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Sets the width of the tab character. By default it’s 8, and you can set an integer value that sets the character spaces it takes, or a length value:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p {
  tab-size: 2;
}

span {
  tab-size: 4px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;writing-mode&#34;&gt;&lt;code&gt;writing-mode&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Defines whether lines of text are laid out horizontally or vertically, and the direction in which blocks progress.&lt;/p&gt;

&lt;p&gt;The values you can use are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;horizontal-tb&lt;/code&gt;  (default)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vertical-rl&lt;/code&gt;  content is laid out vertically. New lines are put on the left of the previous&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vertical-lr&lt;/code&gt;  content is laid out vertically. New lines are put on the right of the previous&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;hyphens&#34;&gt;&lt;code&gt;hyphens&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Determines if hyphens should be automatically added when going to a new line.&lt;/p&gt;

&lt;p&gt;Valid values are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;none&lt;/code&gt;  (default)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;manual&lt;/code&gt;  only add an hyphen when there is already a visible hyphen or a hidden hyphen (a special character)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;  add hyphens when determined the text can have a hyphen.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;text-orientation&#34;&gt;&lt;code&gt;text-orientation&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;When  &lt;code&gt;writing-mode&lt;/code&gt;  is in a vertical mode, determines the orientation of the text.&lt;/p&gt;

&lt;p&gt;Valid values are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mixed&lt;/code&gt;  is the default, and if a language is vertical (like Japanese) it preserves that orientation, while rotating text written in western languages&lt;/li&gt;
&lt;li&gt;&lt;code&gt;upright&lt;/code&gt;  makes all text be vertically oriented&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sideways&lt;/code&gt;  makes all text horizontally oriented&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;direction&#34;&gt;&lt;code&gt;direction&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Sets the direction of the text. Valid values are  &lt;code&gt;ltr&lt;/code&gt;  and  &lt;code&gt;rtl&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p {
  direction: rtl;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;word-break&#34;&gt;&lt;code&gt;word-break&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;This property specifies how to break lines within words.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;normal&lt;/code&gt;  (default) means the text is only broken between words, not inside a word&lt;/li&gt;
&lt;li&gt;&lt;code&gt;break-all&lt;/code&gt;  the browser can break a word (but no hyphens are added)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;keep-all&lt;/code&gt;  suppress soft wrapping. Mostly used for CJK (Chinese/Japanese/Korean) text.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Speaking of CJK text, the property  &lt;code&gt;line-break&lt;/code&gt;  is used to determine how text lines break. I&amp;rsquo;m not an expert with those languages, so I will avoid covering it.&lt;/p&gt;

&lt;h4 id=&#34;overflow-wrap&#34;&gt;&lt;code&gt;overflow-wrap&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;If a word is too long to fit a line, it can overflow outside of the container.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;This property is also known as  &lt;code&gt;word-wrap&lt;/code&gt;, although that is non-standard (but still works as an alias)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is the default behavior (&lt;code&gt;overflow-wrap: normal;&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;We can use:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p {
  overflow-wrap: break-word;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to break it at the exact length of the line, or&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p {
  overflow-wrap: anywhere;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;if the browser sees there’s a soft wrap opportunity somewhere earlier. No hyphens are added, in any case.&lt;/p&gt;

&lt;p&gt;This property is very similar to  &lt;code&gt;word-break&lt;/code&gt;. We might want to choose this one on western languages, while  &lt;code&gt;word-break&lt;/code&gt;  has special treatment for non-western languages.&lt;/p&gt;

&lt;h3 id=&#34;box-model&#34;&gt;BOX MODEL&lt;/h3&gt;

&lt;p&gt;Every CSS element is essentially a box. Every element is a generic box.&lt;/p&gt;

&lt;p&gt;The box model explains the sizing of the elements based on a few CSS properties.&lt;/p&gt;

&lt;p&gt;From the inside to the outside, we have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the content area&lt;/li&gt;
&lt;li&gt;padding&lt;/li&gt;
&lt;li&gt;border&lt;/li&gt;
&lt;li&gt;margin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The best way to visualize the box model is to open the browser DevTools and check how it is displayed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/xj9Q5XeqWTDKdl2roL0mkiHGXxRfGnAs4MhI&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here you can see how Firefox tells me the properties of a  &lt;code&gt;span&lt;/code&gt;  element I highlighted. I right-clicked on it, pressed Inspect Element, and went to the Layout panel of the DevTools.&lt;/p&gt;

&lt;p&gt;See, the light blue space is the content area. Surrounding it there is the padding, then the border and finally the margin.&lt;/p&gt;

&lt;p&gt;By default, if you set a width (or height) on the element, that is going to be applied to the  &lt;strong&gt;content area&lt;/strong&gt;. All the padding, border, and margin calculations are done outside of the value, so you have to keep this in mind when you do your calculation.&lt;/p&gt;

&lt;p&gt;Later you’ll see how you can change this behavior using Box Sizing.&lt;/p&gt;

&lt;h3 id=&#34;border&#34;&gt;BORDER&lt;/h3&gt;

&lt;p&gt;The border is a thin layer between padding and margin. By editing the border, you can make elements draw their perimeter on screen.&lt;/p&gt;

&lt;p&gt;You can work on borders by using those properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;border-style&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-color&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-width&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The property  &lt;code&gt;border&lt;/code&gt;  can be used as a shorthand for all those properties.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;border-radius&lt;/code&gt;  is used to create rounded corners.&lt;/p&gt;

&lt;p&gt;You also have the ability to use images as borders, an ability given to you by  &lt;code&gt;border-image&lt;/code&gt;  and its specific separate properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;border-image-source&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-image-slice&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-image-width&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-image-outset&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-image-repeat&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s start with  &lt;code&gt;border-style&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;the-border-style&#34;&gt;The border style&lt;/h4&gt;

&lt;p&gt;The  &lt;code&gt;border-style&lt;/code&gt;  property lets you choose the style of the border. The options you can use are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dotted&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dashed&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;solid&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;double&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;groove&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ridge&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inset&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;outset&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;none&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hidden&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/lCWsi0wfQU30QoiDD6GsvfRrWx-4DurGOMeX&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Check out  &lt;a href=&#34;https://codepen.io/flaviocopes/pen/yraaxq&#34; target=&#34;_blank&#34;&gt;this Codepen&lt;/a&gt;  for a live example.&lt;/p&gt;

&lt;p&gt;The default for the style is  &lt;code&gt;none&lt;/code&gt;, so to make the border appear at all you need to change it to something else.  &lt;code&gt;solid&lt;/code&gt;  is a good choice most of the time.&lt;/p&gt;

&lt;p&gt;You can set a different style for each edge using the properties&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;border-top-style&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-right-style&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-bottom-style&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-left-style&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;or you can use  &lt;code&gt;border-style&lt;/code&gt;  with multiple values to define them, using the usual Top-Right-Bottom-Left order:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;p {
  border-style: solid dotted solid dotted;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;the-border-width&#34;&gt;The border width&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;border-width&lt;/code&gt;  is used to set the width of the border.&lt;/p&gt;

&lt;p&gt;You can use one of the pre-defined values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;thin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;medium&lt;/code&gt;  (the default value)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thick&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;or express a value in pixels, em or rem or any other valid length value.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p {
  border-width: 2px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can set the width of each edge (Top-Right-Bottom-Left) separately by using 4 values:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p {
  border-width: 2px 1px 2px 1px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or you can use the specific edge properties  &lt;code&gt;border-top-width&lt;/code&gt;,  &lt;code&gt;border-right-width&lt;/code&gt;,  &lt;code&gt;border-bottom-width&lt;/code&gt;,  &lt;code&gt;border-left-width&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;the-border-color&#34;&gt;The border color&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;border-color&lt;/code&gt;  is used to set the color of the border.&lt;/p&gt;

&lt;p&gt;If you don’t set a color, the border by default is colored using the color of the text in the element.&lt;/p&gt;

&lt;p&gt;You can pass any valid color value to  &lt;code&gt;border-color&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p {
  border-color: yellow;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can set the color of each edge (Top-Right-Bottom-Left) separately by using 4 values:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p {
  border-color: black red yellow blue;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or you can use the specific edge properties  &lt;code&gt;border-top-color&lt;/code&gt;,  &lt;code&gt;border-right-color&lt;/code&gt;,  &lt;code&gt;border-bottom-color&lt;/code&gt;,  &lt;code&gt;border-left-color&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;the-border-shorthand-property&#34;&gt;The border shorthand property&lt;/h4&gt;

&lt;p&gt;Those 3 properties mentioned,  &lt;code&gt;border-width&lt;/code&gt;,  &lt;code&gt;border-style&lt;/code&gt;  and  &lt;code&gt;border-color&lt;/code&gt;  can be set using the shorthand property  &lt;code&gt;border&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p {
  border: 2px black solid;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also use the edge-specific properties  &lt;code&gt;border-top&lt;/code&gt;,  &lt;code&gt;border-right&lt;/code&gt;,  &lt;code&gt;border-bottom&lt;/code&gt;,  &lt;code&gt;border-left&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p {
  border-left: 2px black solid;
  border-right: 3px red dashed;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;the-border-radius&#34;&gt;The border radius&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;border-radius&lt;/code&gt;  is used to set rounded corners to the border. You need to pass a value that will be used as the radius of the circle that will be used to round the border.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p {
  border-radius: 3px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also use the edge-specific properties  &lt;code&gt;border-top-left-radius&lt;/code&gt;,  &lt;code&gt;border-top-right-radius&lt;/code&gt;,  &lt;code&gt;border-bottom-left-radius&lt;/code&gt;,  &lt;code&gt;border-bottom-right-radius&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;using-images-as-borders&#34;&gt;Using images as borders&lt;/h4&gt;

&lt;p&gt;One very cool thing with borders is the ability to use images to style them. This lets you go very creative with borders.&lt;/p&gt;

&lt;p&gt;We have 5 properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;border-image-source&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-image-slice&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-image-width&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-image-outset&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-image-repeat&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and the shorthand  &lt;code&gt;border-image&lt;/code&gt;. I won&amp;rsquo;t go in much details here as images as borders would need a more in-depth coverage as what I can do in this little chapter. I recommend reading the  &lt;a href=&#34;https://css-tricks.com/almanac/properties/b/border-image/&#34; target=&#34;_blank&#34;&gt;CSS Tricks almanac entry on border-image&lt;/a&gt;  for more information.&lt;/p&gt;

&lt;h3 id=&#34;padding&#34;&gt;PADDING&lt;/h3&gt;

&lt;p&gt;The  &lt;code&gt;padding&lt;/code&gt;  CSS property is commonly used in CSS to add space in the inner side of an element.&lt;/p&gt;

&lt;p&gt;Remember:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;margin&lt;/code&gt;  adds space outside an element border&lt;/li&gt;
&lt;li&gt;&lt;code&gt;padding&lt;/code&gt;  adds space inside an element border&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;specific-padding-properties&#34;&gt;Specific padding properties&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;padding&lt;/code&gt;  has 4 related properties that alter the padding of a single edge at once:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;padding-top&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;padding-right&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;padding-bottom&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;padding-left&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The usage of those is very simple and cannot be confused, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;padding-left: 30px;
padding-right: 3em;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;using-the-padding-shorthand&#34;&gt;Using the  &lt;code&gt;padding&lt;/code&gt;  shorthand&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;padding&lt;/code&gt;  is a shorthand to specify multiple padding values at the same time, and depending on the number of values entered, it behaves differently.&lt;/p&gt;

&lt;h4 id=&#34;1-value&#34;&gt;1 value&lt;/h4&gt;

&lt;p&gt;Using a single value applies that to  &lt;strong&gt;all&lt;/strong&gt;  the paddings: top, right, bottom, left.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;padding: 20px;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;2-values&#34;&gt;2 values&lt;/h4&gt;

&lt;p&gt;Using 2 values applies the first to  &lt;strong&gt;bottom &amp;amp; top&lt;/strong&gt;, and the second to  &lt;strong&gt;left &amp;amp; right&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;padding: 20px 10px;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-values&#34;&gt;3 values&lt;/h4&gt;

&lt;p&gt;Using 3 values applies the first to  &lt;strong&gt;top&lt;/strong&gt;, the second to  &lt;strong&gt;left &amp;amp; right&lt;/strong&gt;, the third to  &lt;strong&gt;bottom&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;padding: 20px 10px 30px;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;4-values&#34;&gt;4 values&lt;/h4&gt;

&lt;p&gt;Using 4 values applies the first to  &lt;strong&gt;top&lt;/strong&gt;, the second to  &lt;strong&gt;right&lt;/strong&gt;, the third to  &lt;strong&gt;bottom&lt;/strong&gt;, the fourth to  &lt;strong&gt;left&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;padding: 20px 10px 5px 0px;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, the order is  &lt;em&gt;top-right-bottom-left&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&#34;values-accepted&#34;&gt;Values accepted&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;padding&lt;/code&gt;  accepts values expressed in any kind of length unit, the most common ones are px, em, rem, but  &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/length&#34; target=&#34;_blank&#34;&gt;many others exist&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;margin&#34;&gt;MARGIN&lt;/h3&gt;

&lt;p&gt;The  &lt;code&gt;margin&lt;/code&gt;  CSS property is commonly used in CSS to add space around an element.&lt;/p&gt;

&lt;p&gt;Remember:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;margin&lt;/code&gt;  adds space outside an element border&lt;/li&gt;
&lt;li&gt;&lt;code&gt;padding&lt;/code&gt;  adds space inside an element border&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;specific-margin-properties&#34;&gt;Specific margin properties&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;margin&lt;/code&gt;  has 4 related properties that alter the margin of a single edge at once:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;margin-top&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;margin-right&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;margin-bottom&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;margin-left&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The usage of those is very simple and cannot be confused, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;margin-left: 30px;
margin-right: 3em;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;using-the-margin-shorthand&#34;&gt;Using the  &lt;code&gt;margin&lt;/code&gt;  shorthand&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;margin&lt;/code&gt;  is a shorthand to specify multiple margins at the same time, and depending on the number of values entered, it behaves differently.&lt;/p&gt;

&lt;h4 id=&#34;1-value-1&#34;&gt;1 value&lt;/h4&gt;

&lt;p&gt;Using a single value applies that to  &lt;strong&gt;all&lt;/strong&gt;  the margins: top, right, bottom, left.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;margin: 20px;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;2-values-1&#34;&gt;2 values&lt;/h4&gt;

&lt;p&gt;Using 2 values applies the first to  &lt;strong&gt;bottom &amp;amp; top&lt;/strong&gt;, and the second to  &lt;strong&gt;left &amp;amp; right&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;margin: 20px 10px;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-values-1&#34;&gt;3 values&lt;/h4&gt;

&lt;p&gt;Using 3 values applies the first to  &lt;strong&gt;top&lt;/strong&gt;, the second to  &lt;strong&gt;left &amp;amp; right&lt;/strong&gt;, the third to  &lt;strong&gt;bottom&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;margin: 20px 10px 30px;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;4-values-1&#34;&gt;4 values&lt;/h4&gt;

&lt;p&gt;Using 4 values applies the first to  &lt;strong&gt;top&lt;/strong&gt;, the second to  &lt;strong&gt;right&lt;/strong&gt;, the third to  &lt;strong&gt;bottom&lt;/strong&gt;, the fourth to  &lt;strong&gt;left&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;margin: 20px 10px 5px 0px;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, the order is  &lt;em&gt;top-right-bottom-left&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&#34;values-accepted-1&#34;&gt;Values accepted&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;margin&lt;/code&gt;  accepts values expressed in any kind of length unit, the most common ones are px, em, rem, but  &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/length&#34; target=&#34;_blank&#34;&gt;many others exist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It also accepts percentage values, and the special value  &lt;code&gt;auto&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;using-auto-to-center-elements&#34;&gt;Using  &lt;code&gt;auto&lt;/code&gt;  to center elements&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;auto&lt;/code&gt;  can be used to tell the browser to select automatically a margin, and it&amp;rsquo;s most commonly used to center an element in this way:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;margin: 0 auto;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As said above, using 2 values applies the first to  &lt;strong&gt;bottom &amp;amp; top&lt;/strong&gt;, and the second to  &lt;strong&gt;left &amp;amp; right&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The modern way to center elements is to use  &lt;a href=&#34;https://flaviocopes.com/flexbox/&#34; target=&#34;_blank&#34;&gt;Flexbox&lt;/a&gt;, and its  &lt;code&gt;justify-content: center;&lt;/code&gt;  directive.&lt;/p&gt;

&lt;p&gt;Older browsers of course do not implement Flexbox, and if you need to support them  &lt;code&gt;margin: 0 auto;&lt;/code&gt;  is still a good choice.&lt;/p&gt;

&lt;h4 id=&#34;using-a-negative-margin&#34;&gt;Using a negative margin&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;margin&lt;/code&gt;  is the only property related to sizing that can have a negative value. It&amp;rsquo;s extremely useful, too. Setting a negative top margin makes an element move over elements before it, and given enough negative value it will move out of the page.&lt;/p&gt;

&lt;p&gt;A negative bottom margin moves up the elements after it.&lt;/p&gt;

&lt;p&gt;A negative right margin makes the content of the element expand beyond its allowed content size.&lt;/p&gt;

&lt;p&gt;A negative left margin moves the element left over the elements that precede it, and given enough negative value it will move out of the page.&lt;/p&gt;

&lt;h3 id=&#34;box-sizing&#34;&gt;BOX SIZING&lt;/h3&gt;

&lt;p&gt;The default behavior of browsers when calculating the width of an element is to apply the calculated width and height to the  &lt;strong&gt;content area&lt;/strong&gt;, without taking any of the padding, border and margin in consideration.&lt;/p&gt;

&lt;p&gt;This approach has proven to be quite complicated to work with.&lt;/p&gt;

&lt;p&gt;You can change this behavior by setting the  &lt;code&gt;box-sizing&lt;/code&gt;  property.&lt;/p&gt;

&lt;p&gt;The  &lt;code&gt;box-sizing&lt;/code&gt;  property is a great help. It has 2 values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;border-box&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;content-box&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;content-box&lt;/code&gt;  is the default, the one we had for ages before  &lt;code&gt;box-sizing&lt;/code&gt;  became a thing.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;border-box&lt;/code&gt;  is the new and great thing we are looking for. If you set that on an element:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.my-div {
  box-sizing: border-box;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;width and height calculation include the padding and the border. Only the margin is left out, which is reasonable since in our mind we also typically see that as a separate thing: margin is outside of the box.&lt;/p&gt;

&lt;p&gt;This property is a small change but has a big impact. CSS Tricks even declared an  &lt;a href=&#34;https://css-tricks.com/international-box-sizing-awareness-day/&#34; target=&#34;_blank&#34;&gt;international box-sizing awareness day&lt;/a&gt;, just saying, and it’s recommended to apply it to every element on the page, out of the box, with this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;*, *:before, *:after {
  box-sizing: border-box;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;display&#34;&gt;DISPLAY&lt;/h3&gt;

&lt;p&gt;The  &lt;code&gt;display&lt;/code&gt;  property of an object determines how it is rendered by the browser.&lt;/p&gt;

&lt;p&gt;It’s a very important property, and probably the one with the highest number of values you can use.&lt;/p&gt;

&lt;p&gt;Those values include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;block&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inline&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;none&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;contents&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flow-root&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;table&lt;/code&gt;  (and all the  &lt;code&gt;table-*&lt;/code&gt;  ones)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;list-item&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inline-block&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inline-table&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inline-flex&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inline-grid&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inline-list-item&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;plus others you will not likely use, like  &lt;code&gt;ruby&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Choosing any of those will considerably alter the behavior of the browser with the element and its children.&lt;/p&gt;

&lt;p&gt;In this section we’ll analyze the most important ones not covered elsewhere:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;block&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inline&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inline-block&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;none&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’ll see some of the others in later chapters, including coverage of  &lt;code&gt;table&lt;/code&gt;,  &lt;code&gt;flex&lt;/code&gt;  and  &lt;code&gt;grid&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;inline&#34;&gt;&lt;code&gt;inline&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Inline is the default display value for every element in CSS.&lt;/p&gt;

&lt;p&gt;All the HTML tags are displayed inline out of the box except some elements like  &lt;code&gt;div&lt;/code&gt;,  &lt;code&gt;p&lt;/code&gt;  and  &lt;code&gt;section&lt;/code&gt;, which are set as  &lt;code&gt;block&lt;/code&gt;  by the user agent (the browser).&lt;/p&gt;

&lt;p&gt;Inline elements don’t have any margin or padding applied.&lt;/p&gt;

&lt;p&gt;Same for height and width.&lt;/p&gt;

&lt;p&gt;You  &lt;em&gt;can&lt;/em&gt;  add them, but the appearance in the page won’t change — they are calculated and applied automatically by the browser.&lt;/p&gt;

&lt;h4 id=&#34;inline-block&#34;&gt;&lt;code&gt;inline-block&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Similar to  &lt;code&gt;inline&lt;/code&gt;, but with  &lt;code&gt;inline-block&lt;/code&gt;  &lt;code&gt;width&lt;/code&gt;  and  &lt;code&gt;height&lt;/code&gt;  applied as you specify.&lt;/p&gt;

&lt;h4 id=&#34;block&#34;&gt;&lt;code&gt;block&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;As mentioned, normally elements are displayed inline, with the exception of some elements, including&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;div&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;section&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ul&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;which are set as  &lt;code&gt;block&lt;/code&gt;  by the browser.&lt;/p&gt;

&lt;p&gt;With  &lt;code&gt;display: block&lt;/code&gt;, elements are stacked one after each other, vertically, and every element takes up 100% of the page.&lt;/p&gt;

&lt;p&gt;The values assigned to the  &lt;code&gt;width&lt;/code&gt;  and  &lt;code&gt;height&lt;/code&gt;  properties are respected, if you set them, along with  &lt;code&gt;margin&lt;/code&gt;  and  &lt;code&gt;padding&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;none&#34;&gt;&lt;code&gt;none&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Using  &lt;code&gt;display: none&lt;/code&gt;  makes an element disappear. It&amp;rsquo;s still there in the HTML, but just not visible in the browser.&lt;/p&gt;

&lt;h3 id=&#34;positioning&#34;&gt;POSITIONING&lt;/h3&gt;

&lt;p&gt;Positioning is what makes us determine where elements appear on the screen, and how they appear.&lt;/p&gt;

&lt;p&gt;You can move elements around, and position them exactly where you want.&lt;/p&gt;

&lt;p&gt;In this section we’ll also see how things change on a page based on how elements with different  &lt;code&gt;position&lt;/code&gt;  interact with each other.&lt;/p&gt;

&lt;p&gt;We have one main CSS property:  &lt;code&gt;position&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It can have those 5 values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;static&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;relative&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;absolute&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fixed&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sticky&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;static-positioning&#34;&gt;Static positioning&lt;/h4&gt;

&lt;p&gt;This is the default value for an element. Static positioned elements are displayed in the normal page flow.&lt;/p&gt;

&lt;h4 id=&#34;relative-positioning&#34;&gt;Relative positioning&lt;/h4&gt;

&lt;p&gt;If you set  &lt;code&gt;position: relative&lt;/code&gt;  on an element, you are now able to position it with an offset, using the properties&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;top&lt;/li&gt;
&lt;li&gt;right&lt;/li&gt;
&lt;li&gt;bottom&lt;/li&gt;
&lt;li&gt;left&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;which are called  &lt;strong&gt;offset properties&lt;/strong&gt;. They accept a length value or a percentage.&lt;/p&gt;

&lt;p&gt;Take  &lt;a href=&#34;https://codepen.io/flaviocopes/pen/WWGgrR&#34; target=&#34;_blank&#34;&gt;this example I made on Codepen&lt;/a&gt;. I create a parent container, a child container, and an inner box with some text:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;parent&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;child&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;box&amp;quot;&amp;gt;
      &amp;lt;p&amp;gt;Test&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;with some CSS to give some colors and padding, but does not affect positioning:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.parent {
  background-color: #af47ff;
  padding: 30px;
  width: 300px;
}

.child {
  background-color: #ff4797;
  padding: 30px;
}

.box {
  background-color: #f3ff47;
  padding: 30px;
  border: 2px solid #333;
  border-style: dotted;
  font-family: courier;
  text-align: center;
  font-size: 2rem;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;here’s the result:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/gtXUfjyrczqxDqdfrjJyec58o9ru6CqGGCFD&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can try and add any of the properties I mentioned before (&lt;code&gt;top&lt;/code&gt;,  &lt;code&gt;right&lt;/code&gt;,  &lt;code&gt;bottom&lt;/code&gt;,  &lt;code&gt;left&lt;/code&gt;) to  &lt;code&gt;.box&lt;/code&gt;, and nothing will happen. The position is  &lt;code&gt;static&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now if we set  &lt;code&gt;position: relative&lt;/code&gt;  to the box, at first apparently nothing changes. But the element is now able to move using the  &lt;code&gt;top&lt;/code&gt;,  &lt;code&gt;right&lt;/code&gt;,  &lt;code&gt;bottom&lt;/code&gt;,  &lt;code&gt;left&lt;/code&gt;  properties, and now you can alter the position of it relatively to the element containing it.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.box {
  /* ... */
  position: relative;
  top: -60px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/aYTcDVhCB9-CazlQrWrPyfxMpr3TThT0V-ho&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A negative value for  &lt;code&gt;top&lt;/code&gt;  will make the box move up relatively to its container.&lt;/p&gt;

&lt;p&gt;Or&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.box {
  /* ... */
  position: relative;
  top: -60px;
  left: 180px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/5ePc6ALKZV0fubpagz0OzfPBCzctqPAJY81p&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Notice how the space that is occupied by the box remains preserved in the container, like it was still in its place.&lt;/p&gt;

&lt;p&gt;Another property that will now work is  &lt;code&gt;z-index&lt;/code&gt;  to alter the z-axis placement. We&amp;rsquo;ll talk about it later on.&lt;/p&gt;

&lt;h4 id=&#34;absolute-positioning&#34;&gt;Absolute positioning&lt;/h4&gt;

&lt;p&gt;Setting  &lt;code&gt;position: absolute&lt;/code&gt;  on an element will remove it from the document&amp;rsquo;s flow.&lt;/p&gt;

&lt;p&gt;Remember in relative positioning that we noticed the space originally occupied by an element was preserved even if it was moved around?&lt;/p&gt;

&lt;p&gt;With absolute positioning, as soon as we set  &lt;code&gt;position: absolute&lt;/code&gt;  on  &lt;code&gt;.box&lt;/code&gt;, its original space is now collapsed, and only the origin (x, y coordinates) remain the same.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.box {
  /* ... */
  position: absolute;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/B4aFUpYab0eSO-LUQKAu2Vmbi-wnFA8qFOHm&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We can now move the box around as we please, using the  &lt;code&gt;top&lt;/code&gt;,  &lt;code&gt;right&lt;/code&gt;,  &lt;code&gt;bottom&lt;/code&gt;,  &lt;code&gt;left&lt;/code&gt;  properties:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.box {
  /* ... */
  position: absolute;
  top: 0px;
  left: 0px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/NHw-ZkR2lzBsPyb9gSYTyuYGreSvedNPsJ7J&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.box {
  /* ... */
  position: absolute;
  top: 140px;
  left: 50px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/QOYrWkDjiNv7ODZ9WtYCBVEnJf5oZwGfombH&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The coordinates are relative to the closest container that is not  &lt;code&gt;static&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This means that if we add  &lt;code&gt;position: relative&lt;/code&gt;  to the  &lt;code&gt;.child&lt;/code&gt;  element, and we set  &lt;code&gt;top&lt;/code&gt;  and  &lt;code&gt;left&lt;/code&gt;  to 0, the box will not be positioned at the top left margin of the  &lt;em&gt;window&lt;/em&gt;, but rather it will be positioned at the 0, 0 coordinates of  &lt;code&gt;.child&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.child {
  /* ... */
  position: relative;
}

.box {
  /* ... */
  position: absolute;
  top: 0px;
  left: 0px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/1FB8qKtiZgmxtp7xjd6UU7CW573XRxTrZlNc&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here’s how we already saw that  &lt;code&gt;.child&lt;/code&gt;  is static (the default):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.child {
  /* ... */
  position: static;
}

.box {
  /* ... */
  position: absolute;
  top: 0px;
  left: 0px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/eF4yC5dRIkcyezTcVUCbG36sfxOVurQX2L38&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Like for relative positioning, you can use  &lt;code&gt;z-index&lt;/code&gt;  to alter the z-axis placement.&lt;/p&gt;

&lt;h4 id=&#34;fixed-positioning&#34;&gt;Fixed positioning&lt;/h4&gt;

&lt;p&gt;Like with absolute positioning, when an element is assigned  &lt;code&gt;position: fixed&lt;/code&gt;  it&amp;rsquo;s removed from the flow of the page.&lt;/p&gt;

&lt;p&gt;The difference with absolute positioning is this: elements are now always positioned relative to the window, instead of the first non-static container.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.box {
  /* ... */
  position: fixed;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/Ium4uJdPRXPpp-gAVsMMWveviu6HY-g0nUYA&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.box {
  /* ... */
  position: fixed;
  top: 0;
  left: 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/k3-LecCC6WXUjssKdQ9u9w70EZSh3hzK3iFY&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Another big difference is that elements are not affected by scrolling. Once you put a sticky element somewhere, scrolling the page does not remove it from the visible part of the page.&lt;/p&gt;

&lt;h4 id=&#34;sticky-positioning&#34;&gt;Sticky positioning&lt;/h4&gt;

&lt;p&gt;While the above values have been around for a very long time, this one was introduced recently and it’s still relatively unsupported (&lt;a href=&#34;https://caniuse.com/#feat=css-sticky&#34; target=&#34;_blank&#34;&gt;see caniuse.com&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;The UITableView iOS component is the thing that comes to mind when I think about  &lt;code&gt;position: sticky&lt;/code&gt;. You know when you scroll in the contacts list and the first letter is stuck to the top, to let you know you are viewing that particular letter&amp;rsquo;s contacts?&lt;/p&gt;

&lt;p&gt;We used JavaScript to emulate that, but this is the approach taken by CSS to allow it natively.&lt;/p&gt;

&lt;h3 id=&#34;floating-and-clearing&#34;&gt;FLOATING AND CLEARING&lt;/h3&gt;

&lt;p&gt;Floating has been a very important topic in the past.&lt;/p&gt;

&lt;p&gt;It was used in lots of hacks and creative usages because it was one of the few ways, along with tables, we could really implement some layouts. In the past we used to float the sidebar to the left, for example, to show it on the left side of the screen and added some margin to the main content.&lt;/p&gt;

&lt;p&gt;Luckily times have changed and today we have Flexbox and Grid to help us with layout, and float has gone back to its original scope: placing content on one side of the container element, and making its siblings show up around it.&lt;/p&gt;

&lt;p&gt;The  &lt;code&gt;float&lt;/code&gt;  property supports 3 values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;left&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;right&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;none&lt;/code&gt;  (the default)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Say we have a box which contains a paragraph with some text, and the paragraph also contains an image.&lt;/p&gt;

&lt;p&gt;Here’s some code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;&amp;lt;div class=&amp;quot;parent&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;child&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;box&amp;quot;&amp;gt;
      &amp;lt;p&amp;gt;This is some random paragraph and an image. &amp;lt;img src=&amp;quot;https://via.placeholder.com/100x100&amp;quot; /&amp;gt; The image is in the middle of the text. The image is in the middle of the text. The image is in the middle of the text. The image is in the middle of the text. The image is in the middle of the text. The image is in the middle of the text. The image is in the middle of the text. The image is in the middle of the text. The image is in the middle of the text.
      &amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

.parent {
  background-color: #af47ff;
  padding: 30px;
  width: 500px;
}

.child {
  background-color: #ff4797;
  padding: 30px;
}

.box {
  background-color: #f3ff47;
  padding: 30px;
  border: 2px solid #333;
  border-style: dotted;
  font-family: courier;
  text-align: justify;
  font-size: 1rem;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the visual appearance:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/fx5ZaCoCalyWSNeIkNi6044e5uEPPlQVupJD&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the normal flow by default considers the image inline, and makes space for it in the line itself.&lt;/p&gt;

&lt;p&gt;If we add  &lt;code&gt;float: left&lt;/code&gt;  to the image, and some padding:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;img {
  float: left;
  padding: 20px 20px 0px 0px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;this is the result:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/Yftt6zI7UBrNYY30BapoEr3BAtiVCx80M4Eq&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;and this is what we get by applying a float: right, adjusting the padding accordingly:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;img {
  float: right;
  padding: 20px 0px 20px 20px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/WORQNScMck67c42LH0cfbiZJmzNnGzWde1Au&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A floated element is removed from the normal flow of the page, and the other content flows around it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://codepen.io/flaviocopes/pen/WWGqPr?editors=1100&#34; target=&#34;_blank&#34;&gt;See the example on Codepen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You are not limited to floating images, too. Here we switch the image with a  &lt;code&gt;span&lt;/code&gt;  element:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;&amp;lt;div class=&amp;quot;parent&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;child&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;box&amp;quot;&amp;gt;
      &amp;lt;p&amp;gt;This is some random paragraph and an image. &amp;lt;span&amp;gt;Some text to float&amp;lt;/span&amp;gt; The image is in the middle of the text. The image is in the middle of the text. The image is in the middle of the text. The image is in the middle of the text. The image is in the middle of the text. The image is in the middle of the text. The image is in the middle of the text. The image is in the middle of the text. The image is in the middle of the text.
      &amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

span {
  float: right;
  margin: 20px 0px 20px 20px;
  padding: 10px;
  border: 1px solid black
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and this is the result:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/Pe0oVfgmeHF7Rheb4hPwXTaq5AZ1939rMeBy&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;clearing&#34;&gt;Clearing&lt;/h4&gt;

&lt;p&gt;What happens when you float more than one element?&lt;/p&gt;

&lt;p&gt;If when floated they find another floated image, by default they are stacked up one next to the other, horizontally. Until there is no room, and they will start being stacked on a new line.&lt;/p&gt;

&lt;p&gt;Say we had 3 inline images inside a  &lt;code&gt;p&lt;/code&gt;  tag:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/15-LCn0BOSVAVMraLSiNzWpP-oWBiEKIGULW&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If we add  &lt;code&gt;float: left&lt;/code&gt;  to those images:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;img {
  float: left;
  padding: 20px 20px 0px 0px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;this is what we’ll have:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/JGZ7LTxKux1nKWIISdzIPgb2jzxcqpifbxIx&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;if you add  &lt;code&gt;clear: left&lt;/code&gt;  to images, those are going to be stacked vertically rather than horizontally:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/9J-ggQAlJFZ4C1hUbnpD74FcjuKpS960LABv&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I used the  &lt;code&gt;left&lt;/code&gt;  value for  &lt;code&gt;clear&lt;/code&gt;. It allows&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;left&lt;/code&gt;  to clear left floats&lt;/li&gt;
&lt;li&gt;&lt;code&gt;right&lt;/code&gt;  to clear right floats&lt;/li&gt;
&lt;li&gt;&lt;code&gt;both&lt;/code&gt;  to clear both left and right floats&lt;/li&gt;
&lt;li&gt;&lt;code&gt;none&lt;/code&gt;  (default) disables clearing&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;z-index&#34;&gt;Z-INDEX&lt;/h3&gt;

&lt;p&gt;When we talked about positioning, I mentioned that you can use the  &lt;code&gt;z-index&lt;/code&gt;  property to control the Z axis positioning of elements.&lt;/p&gt;

&lt;p&gt;It’s very useful when you have multiple elements that overlap each other, and you need to decide which one is visible, as nearer to the user, and which one(s) should be hidden behind it.&lt;/p&gt;

&lt;p&gt;This property takes a number (without decimals) and uses that number to calculate which elements appear nearer to the user, in the Z axis.&lt;/p&gt;

&lt;p&gt;The higher the z-index value, the more an element is positioned nearer to the user.&lt;/p&gt;

&lt;p&gt;When deciding which element should be visible and which one should be positioned behind it, the browser does a calculation on the z-index value.&lt;/p&gt;

&lt;p&gt;The default value is  &lt;code&gt;auto&lt;/code&gt;, a special keyword. Using  &lt;code&gt;auto&lt;/code&gt;, the Z axis order is determined by the position of the HTML element in the page - the last sibling appears first, as it&amp;rsquo;s defined last.&lt;/p&gt;

&lt;p&gt;By default elements have the  &lt;code&gt;static&lt;/code&gt;  value for the  &lt;code&gt;position&lt;/code&gt;  property. In this case, the  &lt;code&gt;z-index&lt;/code&gt;  property does not make any difference - it must be set to  &lt;code&gt;absolute&lt;/code&gt;,  &lt;code&gt;relative&lt;/code&gt;  or  &lt;code&gt;fixed&lt;/code&gt;  to work.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.my-first-div {
    position: absolute;
    top: 0;
    left: 0;
    width: 600px;
    height: 600px;
    z-index: 10;
}

.my-second-div {
    position: absolute;
    top: 0;
    left: 0;
    width: 500px;
    height: 500px;
    z-index: 20;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The element with class  &lt;code&gt;.my-second-div&lt;/code&gt;  will be displayed, and behind it  &lt;code&gt;.my-first-div&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here we used 10 and 20, but you can use any number. Negative numbers too. It’s common to pick non-consecutive numbers, so you can position elements in the middle. If you use consecutive numbers instead, you would need to re-calculate the z-index of each element involved in the positioning.&lt;/p&gt;

&lt;h3 id=&#34;css-grid&#34;&gt;CSS GRID&lt;/h3&gt;

&lt;p&gt;CSS Grid is the new kid in the CSS town, and while not yet fully supported by all browsers, it’s going to be the future system for layouts.&lt;/p&gt;

&lt;p&gt;CSS Grid is a fundamentally new approach to building layouts using CSS.&lt;/p&gt;

&lt;p&gt;Keep an eye on the CSS Grid Layout page on caniuse.com (&lt;a href=&#34;https://caniuse.com/#feat=css-grid&#34; target=&#34;_blank&#34;&gt;https://caniuse.com/#feat=css-grid&lt;/a&gt;) to find out which browsers currently support it. At the time of writing, April 2019, all major browsers (except IE, which will never have support for it) are already supporting this technology, covering 92% of all users.&lt;/p&gt;

&lt;p&gt;CSS Grid is not a competitor to Flexbox. They interoperate and collaborate on complex layouts, because CSS Grid works on 2 dimensions (rows AND columns) while Flexbox works on a single dimension (rows OR columns).&lt;/p&gt;

&lt;p&gt;Building layouts for the web has traditionally been a complicated topic.&lt;/p&gt;

&lt;p&gt;I won’t dig into the reasons for this complexity, which is a complex topic on its own. But you can think yourself as a very lucky human because nowadays you have 2 very powerful and well supported tools at your disposal:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CSS Flexbox&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CSS Grid&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These 2 are the tools to build the Web layouts of the future.&lt;/p&gt;

&lt;p&gt;Unless you need to support old browsers like IE8 and IE9, there is no reason to be messing with things like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Table layouts&lt;/li&gt;
&lt;li&gt;Floats&lt;/li&gt;
&lt;li&gt;clearfix hacks&lt;/li&gt;
&lt;li&gt;&lt;code&gt;display: table&lt;/code&gt;  hacks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this guide there’s all you need to know about going from zero knowledge of CSS Grid to being a proficient user.&lt;/p&gt;

&lt;h4 id=&#34;the-basics&#34;&gt;The basics&lt;/h4&gt;

&lt;p&gt;The CSS Grid layout is activated on a container element (which can be a  &lt;code&gt;div&lt;/code&gt;  or any other tag) by setting  &lt;code&gt;display: grid&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As with flexbox, you can define some properties on the container, and some properties on each individual item in the grid.&lt;/p&gt;

&lt;p&gt;These properties combined will determine the final look of the grid.&lt;/p&gt;

&lt;p&gt;The most basic container properties are  &lt;code&gt;grid-template-columns&lt;/code&gt;  and  &lt;code&gt;grid-template-rows&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;grid-template-columns-and-grid-template-rows&#34;&gt;grid-template-columns and grid-template-rows&lt;/h4&gt;

&lt;p&gt;Those properties define the number of columns and rows in the grid, and they also set the width of each column/row.&lt;/p&gt;

&lt;p&gt;The following snippet defines a grid with 4 columns each 200px wide, and 2 rows with a 300px height each.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.container {
  display: grid;
  grid-template-columns: 200px 200px 200px 200px;
  grid-template-rows: 300px 300px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/LgbgchKoiffQNAqLtBYVbPsLJMKiWB3XWvCP&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here’s another example of a grid with 2 columns and 2 rows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.container {
  display: grid;
  grid-template-columns: 200px 200px;
  grid-template-rows: 100px 100px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/sdVnLwfTJmY1alewU41wNxRMZ827XK07quWq&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;automatic-dimensions&#34;&gt;Automatic dimensions&lt;/h4&gt;

&lt;p&gt;Many times you might have a fixed header size, a fixed footer size, and the main content that is flexible in height, depending on its length. In this case you can use the auto keyword:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.container {
  display: grid;
  grid-template-rows: 100px auto 100px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;different-columns-and-rows-dimensions&#34;&gt;Different columns and rows dimensions&lt;/h4&gt;

&lt;p&gt;In the above examples we made regular grids by using the same values for rows and the same values for columns.&lt;/p&gt;

&lt;p&gt;You can specify any value for each row/column, to create a lot of different designs:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.container {
  display: grid;
  grid-template-columns: 100px 200px;
  grid-template-rows: 100px 50px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/h5vifpz6IUZQbWCzX4YvJjOhLojgzgP2F-AN&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Another example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.container {
  display: grid;
  grid-template-columns: 10px 100px;
  grid-template-rows: 100px 10px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/GGCFboj9Z6YQz8jvB69KmslqKz00sLuca843&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;adding-space-between-the-cells&#34;&gt;Adding space between the cells&lt;/h4&gt;

&lt;p&gt;Unless specified, there is no space between the cells.&lt;/p&gt;

&lt;p&gt;You can add spacing by using those properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;grid-column-gap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-row-gap&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;or the shorthand syntax  &lt;code&gt;grid-gap&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.container {
  display: grid;
  grid-template-columns: 100px 200px;
  grid-template-rows: 100px 50px;
  grid-column-gap: 25px;
  grid-row-gap: 25px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/ivVtIubdZG3BpFfoASpFy4EMJG1kXeiCx3zP&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The same layout using the shorthand:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.container {
  display: grid;
  grid-template-columns: 100px 200px;
  grid-template-rows: 100px 50px;
  grid-gap: 25px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;spawning-items-on-multiple-columns-and-or-rows&#34;&gt;Spawning items on multiple columns and/or rows&lt;/h4&gt;

&lt;p&gt;Every cell item has the option to occupy more than just one box in the row, and expand horizontally or vertically to get more space, while respecting the grid proportions set in the container.&lt;/p&gt;

&lt;p&gt;These are the properties we’ll use for that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;grid-column-start&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-column-end&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-row-start&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-row-end&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.container {
  display: grid;
  grid-template-columns: 200px 200px 200px 200px;
  grid-template-rows: 300px 300px;
}

.item1 {
  grid-column-start: 2;
  grid-column-end: 4;
}

.item6 {
  grid-column-start: 3;
  grid-column-end: 5;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/JrzZm5o6SkpvGiKZo6v8XmRDAfpajBt6mym4&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The numbers correspond to the vertical line that separates each column, starting from 1:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/JdCCwzrGzvd1O68dBAqIHSWh4hMbM6ttuJ8Z&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The same principle applies to  &lt;code&gt;grid-row-start&lt;/code&gt;  and  &lt;code&gt;grid-row-end&lt;/code&gt;, except this time instead of taking more columns, a cell takes more rows.&lt;/p&gt;

&lt;h4 id=&#34;shorthand-syntax&#34;&gt;Shorthand syntax&lt;/h4&gt;

&lt;p&gt;Those properties have a shorthand syntax provided by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;grid-column&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-row&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The usage is simple, here’s how to replicate the above layout:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.container {
  display: grid;
  grid-template-columns: 200px 200px 200px 200px;
  grid-template-rows: 300px 300px;
}

.item1 {
  grid-column: 2 / 4;
}

.item6 {
  grid-column: 3 / 5;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another approach is to set the starting column/row, and set how many it should occupy using  &lt;code&gt;span&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.container {
  display: grid;
  grid-template-columns: 200px 200px 200px 200px;
  grid-template-rows: 300px 300px;
}

.item1 {
  grid-column: 2 / span 2;
}

.item6 {
  grid-column: 3 / span 2;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;more-grid-configuration&#34;&gt;More grid configuration&lt;/h3&gt;

&lt;h4 id=&#34;using-fractions&#34;&gt;Using fractions&lt;/h4&gt;

&lt;p&gt;Specifying the exact width of each column or row is not ideal in every case.&lt;/p&gt;

&lt;p&gt;A fraction is a unit of space.&lt;/p&gt;

&lt;p&gt;The following example divides a grid into 3 columns with the same width, &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt; of the available space each.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.container {
  grid-template-columns: 1fr 1fr 1fr;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;using-percentages-and-rem&#34;&gt;Using percentages and rem&lt;/h4&gt;

&lt;p&gt;You can also use percentages, and mix and match fractions, pixels, rem and percentages:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.container {
  grid-template-columns: 3rem 15% 1fr 2fr
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;using-repeat&#34;&gt;Using  &lt;code&gt;repeat()&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;repeat()&lt;/code&gt;  is a special function that takes a number that indicates the number of times a row/column will be repeated, and the length of each one.&lt;/p&gt;

&lt;p&gt;If every column has the same width, you can specify the layout using this syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.container {
  grid-template-columns: repeat(4, 100px);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This creates 4 columns with the same width.&lt;/p&gt;

&lt;p&gt;Or using fractions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.container {
  grid-template-columns: repeat(4, 1fr);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;specify-a-minimum-width-for-a-row&#34;&gt;Specify a minimum width for a row&lt;/h4&gt;

&lt;p&gt;Common use case: Have a sidebar that never collapses more than a certain amount of pixels when you resize the window.&lt;/p&gt;

&lt;p&gt;Here’s an example where the sidebar takes &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;4&lt;/sub&gt; of the screen and never takes less than 200px:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.container {
  grid-template-columns: minmax(200px, 3fr) 9fr;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also set just a maximum value using the  &lt;code&gt;auto&lt;/code&gt;  keyword:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.container {
  grid-template-columns: minmax(auto, 50%) 9fr;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or just a minimum value:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.container {
  grid-template-columns: minmax(100px, auto) 9fr;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;positioning-elements-using-grid-template-areas&#34;&gt;Positioning elements using  &lt;code&gt;grid-template-areas&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;By default elements are positioned in the grid using their order in the HTML structure.&lt;/p&gt;

&lt;p&gt;Using  &lt;code&gt;grid-template-areas&lt;/code&gt;  you can define template areas to move them around in the grid, and also to spawn an item on multiple rows / columns instead of using  &lt;code&gt;grid-column&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here’s an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
  &amp;lt;main&amp;gt;
    ...
  &amp;lt;/main&amp;gt;
  &amp;lt;aside&amp;gt;
    ...
  &amp;lt;/aside&amp;gt;
  &amp;lt;header&amp;gt;
    ...
  &amp;lt;/header&amp;gt;
  &amp;lt;footer&amp;gt;
    ...
  &amp;lt;/footer&amp;gt;
&amp;lt;/div&amp;gt;

.container {
  display: grid;
  grid-template-columns: 200px 200px 200px 200px;
  grid-template-rows: 300px 300px;
  grid-template-areas:
    &amp;quot;header header header header&amp;quot;
    &amp;quot;sidebar main main main&amp;quot;
    &amp;quot;footer footer footer footer&amp;quot;;
}
main {
  grid-area: main;
}
aside {
  grid-area: sidebar;
}
header {
  grid-area: header;
}
footer {
  grid-area: footer;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Despite their original order, items are placed where  &lt;code&gt;grid-template-areas&lt;/code&gt;  define, depending on the  &lt;code&gt;grid-area&lt;/code&gt;  property associated to them.&lt;/p&gt;

&lt;h4 id=&#34;adding-empty-cells-in-template-areas&#34;&gt;Adding empty cells in template areas&lt;/h4&gt;

&lt;p&gt;You can set an empty cell using the dot  &lt;code&gt;.&lt;/code&gt;  instead of an area name in  &lt;code&gt;grid-template-areas&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.container {
  display: grid;
  grid-template-columns: 200px 200px 200px 200px;
  grid-template-rows: 300px 300px;
  grid-template-areas:
    &amp;quot;. header header .&amp;quot;
    &amp;quot;sidebar . main main&amp;quot;
    &amp;quot;. footer footer .&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;fill-a-page-with-a-grid&#34;&gt;Fill a page with a grid&lt;/h4&gt;

&lt;p&gt;You can make a grid extend to fill the page using  &lt;code&gt;fr&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.container {
  display: grid;
  height: 100vh;
  grid-template-columns: 1fr 1fr 1fr 1fr;
  grid-template-rows: 1fr 1fr;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;an-example-header-sidebar-content-and-footer&#34;&gt;An example: header, sidebar, content and footer&lt;/h4&gt;

&lt;p&gt;Here is a simple example of using CSS Grid to create a site layout that provides a header op top, a main part with sidebar on the left and content on the right, and a footer afterwards.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/M8qvpAE1DS6BoPXyfpb2VWAEbz2C8U4W587t&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here’s the markup:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;wrapper&amp;quot;&amp;gt;
  &amp;lt;header&amp;gt;Header&amp;lt;/header&amp;gt;
  &amp;lt;article&amp;gt;
    &amp;lt;h1&amp;gt;Welcome&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;Hi!&amp;lt;/p&amp;gt;
  &amp;lt;/article&amp;gt;
  &amp;lt;aside&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;Sidebar&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/aside&amp;gt;
  &amp;lt;footer&amp;gt;Footer&amp;lt;/footer&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and here’s the CSS:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;header {
  grid-area: header;
  background-color: #fed330;
  padding: 20px;
}
article {
  grid-area: content;
  background-color: #20bf6b;
  padding: 20px;
}
aside {
  grid-area: sidebar;
  background-color: #45aaf2;
}
footer {
  padding: 20px;
  grid-area: footer;
  background-color: #fd9644;
}
.wrapper {
  display: grid;
  grid-gap: 20px;
  grid-template-columns: 1fr 3fr;
  grid-template-areas:
    &amp;quot;header  header&amp;quot;
    &amp;quot;sidebar content&amp;quot;
    &amp;quot;footer  footer&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I added some colors to make it prettier, but basically it assigns to every different tag a  &lt;code&gt;grid-area&lt;/code&gt;  name, which is used in the  &lt;code&gt;grid-template-areas&lt;/code&gt;  property in  &lt;code&gt;.wrapper&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When the layout is smaller we can put the sidebar below the content using a media query:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;@media (max-width: 500px) {
  .wrapper {
    grid-template-columns: 4fr;
    grid-template-areas:
      &amp;quot;header&amp;quot;
      &amp;quot;content&amp;quot;
      &amp;quot;sidebar&amp;quot;
      &amp;quot;footer&amp;quot;;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://codepen.io/flaviocopes/pen/JZWOEK&#34; target=&#34;_blank&#34;&gt;See on CodePen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These are the basics of CSS Grid. There are many things I didn’t include in this introduction but I wanted to make it very simple, so you can start using this new layout system without making it feel overwhelming.&lt;/p&gt;

&lt;h3 id=&#34;flexbox&#34;&gt;FLEXBOX&lt;/h3&gt;

&lt;p&gt;Flexbox, also called Flexible Box Module, is one of the two modern layouts systems, along with CSS Grid.&lt;/p&gt;

&lt;p&gt;Compared to CSS Grid (which is bi-dimensional), flexbox is a  &lt;strong&gt;one-dimensional layout model&lt;/strong&gt;. It will control the layout based on a row or on a column, but not together at the same time.&lt;/p&gt;

&lt;p&gt;The main goal of flexbox is to allow items to fill the whole space offered by their container, depending on some rules you set.&lt;/p&gt;

&lt;p&gt;Unless you need to support old browsers like IE8 and IE9, Flexbox is the tool that lets you forget about using&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Table layouts&lt;/li&gt;
&lt;li&gt;Floats&lt;/li&gt;
&lt;li&gt;clearfix hacks&lt;/li&gt;
&lt;li&gt;&lt;code&gt;display: table&lt;/code&gt;  hacks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s dive into flexbox and become a master of it in a very short time.&lt;/p&gt;

&lt;h3 id=&#34;browser-support-1&#34;&gt;Browser support&lt;/h3&gt;

&lt;p&gt;At the time of writing (Feb 2018), it’s supported by 97.66% of the users. All the most important browsers have implemented it for years, so even older browsers (including IE10+) are covered:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/pAsJcNUmJljKeifKY7DSA8-LQasyo2vsgOoW&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;While we must wait a few years for users to catch up on CSS Grid, Flexbox is an older technology and can be used right now.&lt;/p&gt;

&lt;h3 id=&#34;enable-flexbox&#34;&gt;Enable Flexbox&lt;/h3&gt;

&lt;p&gt;A flexbox layout is applied to a container, by setting&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;display: flex;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;display: inline-flex;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The content  &lt;strong&gt;inside the container&lt;/strong&gt;  will be aligned using flexbox.&lt;/p&gt;

&lt;h4 id=&#34;container-properties&#34;&gt;Container properties&lt;/h4&gt;

&lt;p&gt;Some flexbox properties apply to the container, which sets the general rules for its items. They are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flex-direction&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;justify-content&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;align-items&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-wrap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-flow&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;align-rows-or-columns&#34;&gt;Align rows or columns&lt;/h4&gt;

&lt;p&gt;The first property we see,  &lt;code&gt;**flex-direction**&lt;/code&gt;, determines if the container should align its items as rows, or as columns:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flex-direction: row&lt;/code&gt;  places items as a  &lt;strong&gt;row&lt;/strong&gt;, in the text direction (left-to-right for western countries)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-direction: row-reverse&lt;/code&gt;  places items just like  &lt;code&gt;row&lt;/code&gt;  but in the opposite direction&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-direction: column&lt;/code&gt;  places items in a  &lt;strong&gt;column&lt;/strong&gt;, ordering top to bottom&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-direction: column-reverse&lt;/code&gt;  places items in a column, just like  &lt;code&gt;column&lt;/code&gt;  but in the opposite direction&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/o26IgBk91Cjdfe8h-uAl-NAULk6k5fUjTI8o&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;vertical-and-horizontal-alignment&#34;&gt;Vertical and horizontal alignment&lt;/h4&gt;

&lt;p&gt;By default, items start from the left if  &lt;code&gt;flex-direction&lt;/code&gt;  is row, and from the top if  &lt;code&gt;flex-direction&lt;/code&gt;  is column.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/lgTI1ZtxbWha-5GyAWbTNrmOhe03ikkpo-Gx&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can change this behavior using  &lt;code&gt;justify-content&lt;/code&gt;  to change the horizontal alignment, and  &lt;code&gt;align-items&lt;/code&gt;  to change the vertical alignment.&lt;/p&gt;

&lt;h4 id=&#34;change-the-horizontal-alignment&#34;&gt;Change the horizontal alignment&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;**justify-content**&lt;/code&gt;  has 5 possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flex-start&lt;/code&gt;: align to the left side of the container.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-end&lt;/code&gt;: align to the right side of the container.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;center&lt;/code&gt;: align at the center of the container.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;space-between&lt;/code&gt;: display with equal spacing between them.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;space-around&lt;/code&gt;: display with equal spacing around them&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/3eA5Rgtjp0xnyWoQ5v5e1aWIbgmS8YgWzgdm&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;change-the-vertical-alignment&#34;&gt;Change the vertical alignment&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;**align-items**&lt;/code&gt;  has 5 possible values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flex-start&lt;/code&gt;: align to the top of the container.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-end&lt;/code&gt;: align to the bottom of the container.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;center&lt;/code&gt;: align at the vertical center of the container.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;baseline&lt;/code&gt;: display at the baseline of the container.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stretch&lt;/code&gt;: items are stretched to fit the container.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/1pQRvAAzAtBRjO8UI8-zpoa8rL51uKkKklZR&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A note on  &lt;code&gt;baseline&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;baseline&lt;/code&gt;  looks similar to  &lt;code&gt;flex-start&lt;/code&gt;  in this example, due to my boxes being too simple. Check out  &lt;a href=&#34;https://codepen.io/flaviocopes/pen/oExoJR&#34; target=&#34;_blank&#34;&gt;this Codepen&lt;/a&gt;  to have a more useful example, which I forked from a Pen originally created by  &lt;a href=&#34;https://twitter.com/machal&#34; target=&#34;_blank&#34;&gt;Martin Michálek&lt;/a&gt;. As you can see there, item dimensions are aligned.&lt;/p&gt;

&lt;h4 id=&#34;wrap&#34;&gt;Wrap&lt;/h4&gt;

&lt;p&gt;By default, items in a flexbox container are kept on a single line, shrinking them to fit in the container.&lt;/p&gt;

&lt;p&gt;To force the items to spread across multiple lines, use  &lt;code&gt;flex-wrap: wrap&lt;/code&gt;. This will distribute the items according to the order set in  &lt;code&gt;flex-direction&lt;/code&gt;. Use  &lt;code&gt;flex-wrap: wrap-reverse&lt;/code&gt;  to reverse this order.&lt;/p&gt;

&lt;p&gt;A shorthand property called  &lt;code&gt;flex-flow&lt;/code&gt;  allows you to specify  &lt;code&gt;flex-direction&lt;/code&gt;  and  &lt;code&gt;flex-wrap&lt;/code&gt;  in a single line, by adding the  &lt;code&gt;flex-direction&lt;/code&gt;  value first, followed by  &lt;code&gt;flex-wrap&lt;/code&gt;  value, for example:  &lt;code&gt;flex-flow: row wrap&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;properties-that-apply-to-each-single-item&#34;&gt;Properties that apply to each single item&lt;/h4&gt;

&lt;p&gt;Up to this point, we’ve seen the properties you can apply to the container.&lt;/p&gt;

&lt;p&gt;Single items can have a certain amount of independence and flexibility, and you can alter their appearance using those properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;order&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;align-self&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-grow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-shrink&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-basis&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s see them in detail.&lt;/p&gt;

&lt;h4 id=&#34;moving-items-before-after-another-one-using-order&#34;&gt;Moving items before / after another one using order&lt;/h4&gt;

&lt;p&gt;Items are ordered based on the order they are assigned. By default every item has order  &lt;code&gt;0&lt;/code&gt;  and the appearance in the HTML determines the final order.&lt;/p&gt;

&lt;p&gt;You can override this property using  &lt;code&gt;order&lt;/code&gt;  on each separate item. This is a property you set on the item, not the container. You can make an item appear before all the others by setting a negative value.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/B1sZQ2N0Faporf-B6QSoT9qlksFM0ul6Ova2&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;vertical-alignment-using-align-self&#34;&gt;Vertical alignment using align-self&lt;/h4&gt;

&lt;p&gt;An item can choose to  &lt;strong&gt;override&lt;/strong&gt;  the container  &lt;code&gt;align-items&lt;/code&gt;  setting, using  &lt;code&gt;**align-self**&lt;/code&gt;, which has the same 5 possible values of  &lt;code&gt;align-items&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flex-start&lt;/code&gt;: align to the top of the container.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-end&lt;/code&gt;: align to the bottom of the container.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;center&lt;/code&gt;: align at the vertical center of the container.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;baseline&lt;/code&gt;: display at the baseline of the container.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stretch&lt;/code&gt;: items are stretched to fit the container.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/Vgk2OOS4KMX-ABecwTGMZGxu5HNOUsSCguNv&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;grow-or-shrink-an-item-if-necessary&#34;&gt;Grow or shrink an item if necessary&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;flex-grow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The defaut for any item is 0.&lt;/p&gt;

&lt;p&gt;If all items are defined as 1 and one is defined as 2, the bigger element will take the space of two “1” items.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;flex-shrink&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The defaut for any item is 1.&lt;/p&gt;

&lt;p&gt;If all items are defined as 1 and one is defined as 3, the bigger element will shrink 3x the other ones. When less space is available, it will take 3x less space.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;flex-basis&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If set to  &lt;code&gt;auto&lt;/code&gt;, it sizes an item according to its width or height, and adds extra space based on the  &lt;code&gt;flex-grow&lt;/code&gt;  property.&lt;/p&gt;

&lt;p&gt;If set to 0, it does not add any extra space for the item when calculating the layout.&lt;/p&gt;

&lt;p&gt;If you specify a pixel number value, it will use that as the length value (width or height depends on if it’s a row or a column item)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;flex&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This property combines the above 3 properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flex-grow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-shrink&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-basis&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and provides a shorthand syntax:  &lt;code&gt;flex: 0 1 auto&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;tables&#34;&gt;TABLES&lt;/h3&gt;

&lt;p&gt;Tables in the past were greatly overused in CSS, as they were one of the only ways we could create a fancy page layout.&lt;/p&gt;

&lt;p&gt;Today with Grid and Flexbox we can move tables back to the job they were intended to do: styling tables.&lt;/p&gt;

&lt;p&gt;Let’s start from the HTML. This is a basic table:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;table&amp;gt;
  &amp;lt;thead&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;th scope=&amp;quot;col&amp;quot;&amp;gt;Name&amp;lt;/th&amp;gt;
      &amp;lt;th scope=&amp;quot;col&amp;quot;&amp;gt;Age&amp;lt;/th&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/thead&amp;gt;
  &amp;lt;tbody&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;th scope=&amp;quot;row&amp;quot;&amp;gt;Flavio&amp;lt;/th&amp;gt;
      &amp;lt;td&amp;gt;36&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;th scope=&amp;quot;row&amp;quot;&amp;gt;Roger&amp;lt;/th&amp;gt;
      &amp;lt;td&amp;gt;7&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default it’s not very attractive. The browser provides some standard styles, and that’s it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/cSv50H4eDfA17z4XhwXhlwgDCzfrtAkth840&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We can use CSS to style all the elements of the table, of course.&lt;/p&gt;

&lt;p&gt;Let’s start with the border. A nice border can go a long way.&lt;/p&gt;

&lt;p&gt;We can apply it on the  &lt;code&gt;table&lt;/code&gt;  element, and on the inner elements too, like  &lt;code&gt;th&lt;/code&gt;  and  &lt;code&gt;td&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;table, th, td {
  border: 1px solid #333;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we pair it with some margin, we get a nice result:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/77EZWjHTyPL1-2BHjB6PtNKGxoefvaH8Ou0N&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;One common thing with tables is the ability to add a color to one row, and a different color to another row. This is possible using the  &lt;code&gt;:nth-child(odd)&lt;/code&gt;  or  &lt;code&gt;:nth-child(even)&lt;/code&gt;  selector:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;tbody tr:nth-child(odd) {
  background-color: #af47ff;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This gives us:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/bgYEzQ0jzePRY8Z1QsjS8Wr33gzw8Hm2R0-o&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you add  &lt;code&gt;border-collapse: collapse;&lt;/code&gt;  to the table element, all borders are collapsed into one:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/YBEKBLgWtAy6VbpdnQCbpIzfWJYKvGPesyGA&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;centering&#34;&gt;CENTERING&lt;/h3&gt;

&lt;p&gt;Centering things in CSS is a task that is very different if you need to center horizontally or vertically.&lt;/p&gt;

&lt;p&gt;In this post I explain the most common scenarios and how to solve them. If a new solution is provided by  &lt;a href=&#34;https://flaviocopes.com/flexbox/&#34; target=&#34;_blank&#34;&gt;Flexbox&lt;/a&gt;  I ignore the old techniques because we need to move forward, and Flexbox has been supported by browsers for years, IE10 included.&lt;/p&gt;

&lt;h3 id=&#34;center-horizontally&#34;&gt;Center horizontally&lt;/h3&gt;

&lt;h4 id=&#34;text&#34;&gt;Text&lt;/h4&gt;

&lt;p&gt;Text is very simple to center horizontally using the  &lt;code&gt;text-align&lt;/code&gt;  property set to  &lt;code&gt;center&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p {
  text-align: center;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;blocks&#34;&gt;Blocks&lt;/h4&gt;

&lt;p&gt;The modern way to center anything that is not text is to use Flexbox:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;#mysection {
  display: flex;
  justify-content: center;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;any element inside  &lt;code&gt;#mysection&lt;/code&gt;  will be horizontally centered.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/poUby5NpYUt0D8ADmTgP6wWXhjj2PMjWuK4p&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here is the alternative approach if you don’t want to use Flexbox.&lt;/p&gt;

&lt;p&gt;Anything that is not text can be centered by applying an automatic margin to left and right, and setting the width of the element:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;section {
  margin: 0 auto;
  width: 50%;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the above  &lt;code&gt;margin: 0 auto;&lt;/code&gt;  is a shorthand for:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;section {
  margin-top: 0;
  margin-bottom: 0;
  margin-left: auto;
  margin-right: auto;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remember to set the item to  &lt;code&gt;display: block&lt;/code&gt;  if it&amp;rsquo;s an inline element.&lt;/p&gt;

&lt;h3 id=&#34;center-vertically&#34;&gt;Center vertically&lt;/h3&gt;

&lt;p&gt;Traditionally this has always been a difficult task. Flexbox now provides us a great way to do this in the simplest possible way:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;#mysection {
  display: flex;
  align-items: center;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;any element inside  &lt;code&gt;#mysection&lt;/code&gt;  will be vertically centered.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/XOIWKiWU2zPe3VNje1LpiaHur6lJu4db8Cyp&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;center-both-vertically-and-horizontally&#34;&gt;Center both vertically and horizontally&lt;/h3&gt;

&lt;p&gt;Flexbox techniques to center vertically and horizontally can be combined to completely center an element in the page.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;#mysection {
  display: flex;
  align-items: center;
  justify-content: center;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/OtQEQ-F5AsSU0b49Oo5cGwoyLafxN05qmoLQ&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The same can be done using  &lt;a href=&#34;https://flaviocopes.com/css-grid/&#34; target=&#34;_blank&#34;&gt;CSS Grid&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;body {
  display: grid;
  place-items: center;
  height: 100vh;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;lists&#34;&gt;LISTS&lt;/h3&gt;

&lt;p&gt;Lists are a very important part of many web pages.&lt;/p&gt;

&lt;p&gt;CSS can style them using several properties.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;list-style-type&lt;/code&gt;  is used to set a predefined marker to be used by the list:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;li {
  list-style-type: square;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have lots of possible values, which you can see here  &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-type&#34; target=&#34;_blank&#34;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-type&lt;/a&gt;  with examples of their appearance. Some of the most popular ones are  &lt;code&gt;disc&lt;/code&gt;,  &lt;code&gt;circle&lt;/code&gt;,  &lt;code&gt;square&lt;/code&gt;  and  &lt;code&gt;none&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;list-style-image&lt;/code&gt;  is used to use a custom marker when a predefined marker is not appropriate:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;li {
  list-style-image: url(list-image.png);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;list-style-position&lt;/code&gt;  lets you add the marker  &lt;code&gt;outside&lt;/code&gt;  (the default) or  &lt;code&gt;inside&lt;/code&gt;  of the list content, in the flow of the page rather than outside of it&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;li {
  list-style-position: inside;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The  &lt;code&gt;list-style&lt;/code&gt;  shorthand property lets us specify all those properties in the same line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;li {
  list-style: url(list-image.png) inside;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;media-queries-and-responsive-design&#34;&gt;MEDIA QUERIES AND RESPONSIVE DESIGN&lt;/h3&gt;

&lt;p&gt;In this section we’re going to first introduce media types and media feature descriptors, then we’ll explain media queries.&lt;/p&gt;

&lt;h4 id=&#34;media-types&#34;&gt;Media types&lt;/h4&gt;

&lt;p&gt;Used in media queries and @import declarations, media types allow us to determine on which media a CSS file, or a piece of CSS, is loaded.&lt;/p&gt;

&lt;p&gt;We have the following  &lt;strong&gt;media types&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;all&lt;/code&gt;  means all the media&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print&lt;/code&gt;  used when printing&lt;/li&gt;
&lt;li&gt;&lt;code&gt;screen&lt;/code&gt;  used when the page is presented on a screen&lt;/li&gt;
&lt;li&gt;&lt;code&gt;speech&lt;/code&gt;  used for screen readers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;screen&lt;/code&gt;  is the default.&lt;/p&gt;

&lt;p&gt;In the past we had more of them, but most are deprecated as they proved to be ineffective ways of determining device needs.&lt;/p&gt;

&lt;p&gt;We can use them in @import statements like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;@import url(myfile.css) screen;
@import url(myfile-print.css) print;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can load a CSS file on multiple media types separating each with a comma:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;@import url(myfile.css) screen, print;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The same works for the  &lt;code&gt;link&lt;/code&gt;  tag in HTML:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;myfile.css&amp;quot; media=&amp;quot;screen&amp;quot; /&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;another.css&amp;quot; media=&amp;quot;screen, print&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’re not limited to just using media types in the  &lt;code&gt;media&lt;/code&gt;  attribute and in the  &lt;code&gt;@import&lt;/code&gt;  declaration. There&amp;rsquo;s more.&lt;/p&gt;

&lt;h4 id=&#34;media-feature-descriptors&#34;&gt;Media feature descriptors&lt;/h4&gt;

&lt;p&gt;First, let’s introduce  &lt;strong&gt;media feature descriptors&lt;/strong&gt;. They are additional keywords that we can add to the  &lt;code&gt;media&lt;/code&gt;  attribute of  &lt;code&gt;link&lt;/code&gt;  or the the  &lt;code&gt;@import&lt;/code&gt;  declaration, to express more conditionals over the loading of the CSS.&lt;/p&gt;

&lt;p&gt;Here’s the list of them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;width&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;height&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;device-width&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;device-height&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aspect-ratio&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;device-aspect-ratio&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;color&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;color-index&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;monochrome&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;resolution&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;orientation&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scan&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of them has a corresponding min- &lt;em&gt;and max-&lt;/em&gt;, for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;min-width&lt;/code&gt;,  &lt;code&gt;max-width&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;min-device-width&lt;/code&gt;,  &lt;code&gt;max-device-width&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and so on.&lt;/p&gt;

&lt;p&gt;Some of those accept a length value which can be expressed in  &lt;code&gt;px&lt;/code&gt;  or  &lt;code&gt;rem&lt;/code&gt;  or any length value. It&amp;rsquo;s the case of  &lt;code&gt;width&lt;/code&gt;,  &lt;code&gt;height&lt;/code&gt;,  &lt;code&gt;device-width&lt;/code&gt;,  &lt;code&gt;device-height&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;@import url(myfile.css) screen and (max-width: 800px);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that we wrap each block using media feature descriptors in parentheses.&lt;/p&gt;

&lt;p&gt;Some accept a fixed value.  &lt;code&gt;orientation&lt;/code&gt;, used to detect the device orientation, accepts  &lt;code&gt;portrait&lt;/code&gt;  or  &lt;code&gt;landscape&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;myfile.css&amp;quot; media=&amp;quot;screen and (orientation: portrait)&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;scan&lt;/code&gt;, used to determine the type of screen, accepts  &lt;code&gt;progressive&lt;/code&gt;  (for modern displays) or  &lt;code&gt;interlace&lt;/code&gt;  (for older CRT devices).&lt;/p&gt;

&lt;p&gt;Some others want an integer.&lt;/p&gt;

&lt;p&gt;Like  &lt;code&gt;color&lt;/code&gt;  which inspects the number of bits per color component used by the device. Very low-level, but you just need to know it&amp;rsquo;s there for your usage (like  &lt;code&gt;grid&lt;/code&gt;,  &lt;code&gt;color-index&lt;/code&gt;,  &lt;code&gt;monochrome&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;aspect-ratio&lt;/code&gt;  and  &lt;code&gt;device-aspect-ratio&lt;/code&gt;  accept a ratio value representing the width to height viewport ratio, which is expressed as a fraction.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@import url(myfile.css) screen and (aspect-ratio: 4/3);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;resolution&lt;/code&gt;  represents the pixel density of the device, expressed in a  &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/resolution&#34; target=&#34;_blank&#34;&gt;resolution data type&lt;/a&gt;  like  &lt;code&gt;dpi&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;@import url(myfile.css) screen and (min-resolution: 100dpi);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;logic-operators&#34;&gt;Logic operators&lt;/h4&gt;

&lt;p&gt;We can combine rules using  &lt;code&gt;and&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;myfile.css&amp;quot; media=&amp;quot;screen and (max-width: 800px)&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can perform an “or” type of logic operation using commas, which combines multiple media queries:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;@import url(myfile.css) screen, print;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can use  &lt;code&gt;not&lt;/code&gt;  to negate a media query:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;@import url(myfile.css) not screen;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Important:  &lt;code&gt;not&lt;/code&gt;  can only be used to negate an entire media query, so it must be placed at the beginning of it (or after a comma).&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;media-queries&#34;&gt;Media queries&lt;/h4&gt;

&lt;p&gt;All those above rules we saw applied to @import or the the  &lt;code&gt;link&lt;/code&gt;  HTML tag can be applied inside the CSS, too.&lt;/p&gt;

&lt;p&gt;You need to wrap them in a  &lt;code&gt;@media () {}&lt;/code&gt;  structure.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;@media screen and (max-width: 800px) {
  /* enter some CSS */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and this is the foundation for  &lt;strong&gt;responsive design&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Media queries can be quite complex. This example applies the CSS only if it’s a screen device, the width is between 600 and 800 pixels, and the orientation is landscape:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;@media screen and (max-width: 800px) and (min-width: 600px) and (orientation: landscape) {
  /* enter some CSS */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;feature-queries&#34;&gt;FEATURE QUERIES&lt;/h3&gt;

&lt;p&gt;Feature queries are a recent and relatively unknown ability of CSS, but a  &lt;a href=&#34;https://caniuse.com/#feat=css-featurequeries&#34; target=&#34;_blank&#34;&gt;well supported&lt;/a&gt;  one.&lt;/p&gt;

&lt;p&gt;We can use it to check if a feature is supported by the browser using the  &lt;code&gt;@supports&lt;/code&gt;  keyword.&lt;/p&gt;

&lt;p&gt;I think this is especially useful, at the time of writing, for checking if a browser supports CSS grid, for example, which can be done using:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;@supports (display: grid) {
  /* apply this CSS */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We check if the browser supports the  &lt;code&gt;grid&lt;/code&gt;  value for the  &lt;code&gt;display&lt;/code&gt;  property.&lt;/p&gt;

&lt;p&gt;We can use  &lt;code&gt;@supports&lt;/code&gt;  for any CSS property, to check any value.&lt;/p&gt;

&lt;p&gt;We can also use the logical operators  &lt;code&gt;and&lt;/code&gt;,  &lt;code&gt;or&lt;/code&gt;  and  &lt;code&gt;not&lt;/code&gt;  to build complex feature queries:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;@supports (display: grid) and (display: flex) {
  /* apply this CSS */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;filters&#34;&gt;FILTERS&lt;/h3&gt;

&lt;p&gt;Filters allow us to perform operations on elements.&lt;/p&gt;

&lt;p&gt;Things you normally do with Photoshop or other photo editing software, like changing the opacity or the brightness, and more.&lt;/p&gt;

&lt;p&gt;You use the  &lt;code&gt;filter&lt;/code&gt;  property. Here&amp;rsquo;s an example of it applied on an image, but this property can be used on  &lt;em&gt;any&lt;/em&gt;  element:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;img {
  filter: &amp;lt;something&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use various values here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;blur()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;brightness()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;contrast()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;drop-shadow()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grayscale()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hue-rotate()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;invert()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;opacity()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sepia()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;saturate()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;url()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Notice the parentheses after each option, because they all require a parameter.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;img {
  filter: opacity(0.5);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;means the image will be 50% transparent, because  &lt;code&gt;opacity()&lt;/code&gt;  takes one value from 0 to 1, or a percentage.&lt;/p&gt;

&lt;p&gt;You can also apply multiple filters at once:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;img {
  filter: opacity(0.5) blur(2px);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s now talk about each filter in detail.&lt;/p&gt;

&lt;h4 id=&#34;blur&#34;&gt;&lt;code&gt;blur()&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Blurs an element content. You pass it a value, expressed in  &lt;code&gt;px&lt;/code&gt;  or  &lt;code&gt;em&lt;/code&gt;  or  &lt;code&gt;rem&lt;/code&gt;  that will be used to determine the blur radius.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;img {
  filter: blur(4px);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;opacity&#34;&gt;&lt;code&gt;opacity()&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;opacity()&lt;/code&gt;  takes one value from 0 to 1, or a percentage, and determines the image transparency based on it.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;0&lt;/code&gt;, or  &lt;code&gt;0%&lt;/code&gt;, means totally transparent.  &lt;code&gt;1&lt;/code&gt;, or  &lt;code&gt;100%&lt;/code&gt;, or higher, means totally visible.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;img {
  filter: opacity(0.5);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CSS also has an  &lt;code&gt;opacity&lt;/code&gt;  property.  &lt;code&gt;filter&lt;/code&gt;  however can be hardware accelerated, depending on the implementation, so this should be the preferred method.&lt;/p&gt;

&lt;h4 id=&#34;drop-shadow&#34;&gt;&lt;code&gt;drop-shadow()&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;drop-shadow()&lt;/code&gt;  shows a shadow behind the element, which follows the alpha channel. This means that if you have a transparent image, you get a shadow applied to the image shape, not the image box. If the image does not have an alpha channel, the shadow will be applied to the entire image box.&lt;/p&gt;

&lt;p&gt;It accepts a minimum of 2 parameters, up to 5:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;offset-x&lt;/em&gt;  sets the horizontal offset. Can be negative.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;offset-y&lt;/em&gt;  sets the vertical offset. Can be negative.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;blur-radius&lt;/em&gt;, optional, sets the blur radius for the shadow. It defaults to 0, no blur.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;spread-radius&lt;/em&gt;, optional, sets the spread radius. Expressed in  &lt;code&gt;px&lt;/code&gt;,  &lt;code&gt;rem&lt;/code&gt;  or  &lt;code&gt;em&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;color&lt;/em&gt;, optional, sets the color of the shadow.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can set the color without setting the spread radius or blur radius. CSS understands the value is a color and not a length value.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;img {
  filter: drop-shadow(10px 10px 5px orange);
}

img {
  filter: drop-shadow(10px 10px orange);
}

img {
  filter: drop-shadow(10px 10px 5px 5px #333);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;grayscale&#34;&gt;&lt;code&gt;grayscale()&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Makes the element have a gray color.&lt;/p&gt;

&lt;p&gt;You pass one value from 0 to 1, or from 0% to 100%, where 1 and 100% mean completely gray, and 0 or 0% mean the image is not touched, and the original colors remain.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;img {
  filter: grayscale(50%);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;sepia&#34;&gt;&lt;code&gt;sepia()&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Makes the element have a sepia color.&lt;/p&gt;

&lt;p&gt;You pass one value from 0 to 1, or from 0% to 100%, where 1 and 100% mean completely sepia, and 0 or 0% mean the image is not touched, and the original colors remain.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;img {
  filter: sepia(50%);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;invert&#34;&gt;&lt;code&gt;invert()&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Invert the colors of an element. Inverting a color means looking up the opposite of a color in the HSL color wheel. Just search “color wheel” in Google if you have no idea what that means. For example, the opposite of yellow is blue, the opposite of red is cyan. Every single color has an opposite.&lt;/p&gt;

&lt;p&gt;You pass a number, from 0 to 1 or from 0% to 100%, that determines the amount of inversion. 1 or 100% means full inversion, 0 or 0% means no inversion.&lt;/p&gt;

&lt;p&gt;0.5 or 50% will always render a 50% gray color, because you always end up in the middle of the wheel.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;img {
  filter: invert(50%);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;hue-rotate&#34;&gt;&lt;code&gt;hue-rotate()&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;The HSL color wheel is represented in degrees. Using  &lt;code&gt;hue-rotate()&lt;/code&gt;  you can rotate the color using a positive or negative rotation.&lt;/p&gt;

&lt;p&gt;The function accepts a  &lt;code&gt;deg&lt;/code&gt;  value.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;img {
  filter: hue-rotate(90deg);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;brightness&#34;&gt;&lt;code&gt;brightness()&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Alters the brightness of an element.&lt;/p&gt;

&lt;p&gt;0 or 0% gives a total black element. 1 or 100% gives an unchanged image.&lt;/p&gt;

&lt;p&gt;Values higher than 1 or 100% make the image brighter up to reaching a total white element.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;img {
  filter: brightness(50%);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;contrast&#34;&gt;&lt;code&gt;contrast()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Alters the contrast of an element.&lt;/p&gt;

&lt;p&gt;0 or 0% gives a total gray element. 1 or 100% gives an unchanged image.&lt;/p&gt;

&lt;p&gt;Values higher than 1 or 100% give more contrast.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;img {
  filter: contrast(150%);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;saturate&#34;&gt;&lt;code&gt;saturate()&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Alters the saturation of an element.&lt;/p&gt;

&lt;p&gt;0 or 0% gives a total grayscale element (with less saturation). 1 or 100% gives an unchanged image.&lt;/p&gt;

&lt;p&gt;Values higher than 1 or 100% give more saturation.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;img {
  filter: saturate();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;url-1&#34;&gt;&lt;code&gt;url()&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;This filter allows to apply a filter defined in an SVG file. You point to the SVG file location.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;img {
  filter: url(filter.svg);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SVG filters are out of the scope of this piece, but you can read more on this Smashing Magazine post:  &lt;a href=&#34;https://www.smashingmagazine.com/2015/05/why-the-svg-filter-is-awesome/&#34; target=&#34;_blank&#34;&gt;https://www.smashingmagazine.com/2015/05/why-the-svg-filter-is-awesome/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;transforms&#34;&gt;TRANSFORMS&lt;/h3&gt;

&lt;p&gt;Transforms allow you to translate, rotate, scale, and skew elements, in the 2D or 3D space. They are a very cool CSS feature, especially when combined with animations.&lt;/p&gt;

&lt;h4 id=&#34;2d-transforms&#34;&gt;2D transforms&lt;/h4&gt;

&lt;p&gt;The  &lt;code&gt;transform&lt;/code&gt;  property accepts those functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;translate()&lt;/code&gt;  to move elements around&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rotate()&lt;/code&gt;  to rotate elements&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scale()&lt;/code&gt;  to scale elements in size&lt;/li&gt;
&lt;li&gt;&lt;code&gt;skew()&lt;/code&gt;  to twist or slant an element&lt;/li&gt;
&lt;li&gt;&lt;code&gt;matrix()&lt;/code&gt;  a way to perform any of the above operations using a matrix of 6 elements, a less user friendly syntax but less verbose&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We also have axis-specific functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;translateX()&lt;/code&gt;  to move elements around on the X axis&lt;/li&gt;
&lt;li&gt;&lt;code&gt;translateY()&lt;/code&gt;  to move elements around on the Y axis&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scaleX()&lt;/code&gt;  to scale elements in size on the X axis&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scaleY()&lt;/code&gt;  to scale elements in size on the Y axis&lt;/li&gt;
&lt;li&gt;&lt;code&gt;skewX()&lt;/code&gt;  to twist or slant an element on the X axis&lt;/li&gt;
&lt;li&gt;&lt;code&gt;skewY()&lt;/code&gt;  to twist or slant an element on the Y axis&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is an example of a transform which changes the  &lt;code&gt;.box&lt;/code&gt;  element width by 2 (duplicating it) and the height by 0.5 (reducing it to half):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.box {
    transform: scale(2, 0.5);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;[transform-origin](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin)&lt;/code&gt;  lets us set the origin (the  &lt;code&gt;(0, 0)&lt;/code&gt;  coordinates) for the transformation, letting us change the rotation center.&lt;/p&gt;

&lt;h4 id=&#34;combining-multiple-transforms&#34;&gt;Combining multiple transforms&lt;/h4&gt;

&lt;p&gt;You can combine multiple transforms by separating each function with a space.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;transform: rotateY(20deg) scaleX(3) translateY(100px);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3d-transforms&#34;&gt;3D transforms&lt;/h4&gt;

&lt;p&gt;We can go one step further and move our elements in a 3D space instead of in a 2D space. With 3D, we are adding another axis, Z, which adds depth to our visuals.&lt;/p&gt;

&lt;p&gt;Using the  &lt;code&gt;perspective&lt;/code&gt;  property you can specify how far the 3D object is from the viewer.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.3Delement {
  perspective: 100px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;perspective-origin&lt;/code&gt;  determines the appearance of the position of the viewer, how are we looking at it in the X and Y axis.&lt;/p&gt;

&lt;p&gt;Now we can use additional functions that control the Z axis, and that add up to the other X and Y axis transforms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;translateZ()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rotateZ()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scaleZ()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and the corresponding shorthands  &lt;code&gt;translate3d()&lt;/code&gt;,  &lt;code&gt;rotate3d()&lt;/code&gt;  and  &lt;code&gt;scale3d()&lt;/code&gt;  as shorthands for using the  &lt;code&gt;translateX()&lt;/code&gt;,  &lt;code&gt;translateY()&lt;/code&gt;  and  &lt;code&gt;translateZ()&lt;/code&gt;  functions and so on.&lt;/p&gt;

&lt;p&gt;3D transforms are a bit too advanced for this handbook, but are a great topic to explore on your own.&lt;/p&gt;

&lt;h3 id=&#34;transitions&#34;&gt;TRANSITIONS&lt;/h3&gt;

&lt;p&gt;CSS Transitions are the simplest way to create an animation in CSS.&lt;/p&gt;

&lt;p&gt;In a transition, you change the value of a property, and you tell CSS to slowly change it according to some parameters, towards a final state.&lt;/p&gt;

&lt;p&gt;CSS Transitions are defined by these properties:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/-84q2WYZR7Ojj24SC1gD4k8ZIRNGq2pXDfSo&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The  &lt;code&gt;transition&lt;/code&gt;  property is a handy shorthand:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.container {
  transition: property
              duration
              timing-function
              delay;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;example-of-a-css-transition&#34;&gt;Example of a CSS Transition&lt;/h4&gt;

&lt;p&gt;This code implements a CSS Transition:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.one,
.three {
  background: rgba(142, 92, 205, .75);
  transition: background 1s ease-in;
}

.two,
.four {
  background: rgba(236, 252, 100, .75);
}

.circle:hover {
  background: rgba(142, 92, 205, .25); /* lighter */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See the example on Glitch  &lt;a href=&#34;https://flavio-css-transitions-example.glitch.me/&#34; target=&#34;_blank&#34;&gt;https://flavio-css-transitions-example.glitch.me&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When hovering the  &lt;code&gt;.one&lt;/code&gt;  and  &lt;code&gt;.three&lt;/code&gt;  elements, the purple circles, there is a transition animation that eases the change of background, while the yellow circles do not, because they do not have the  &lt;code&gt;transition&lt;/code&gt;  property defined.&lt;/p&gt;

&lt;h4 id=&#34;transition-timing-function-values&#34;&gt;Transition timing function values&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;transition-timing-function&lt;/code&gt;  allows you to specify the acceleration curve of the transition.&lt;/p&gt;

&lt;p&gt;There are some simple values you can use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;linear&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ease&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ease-in&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ease-out&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ease-in-out&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://flavio-css-transitions-easings.glitch.me/&#34; target=&#34;_blank&#34;&gt;This Glitch&lt;/a&gt;  shows how these work in practice.&lt;/p&gt;

&lt;p&gt;You can create a completely custom timing function using  &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/single-transition-timing-function&#34; target=&#34;_blank&#34;&gt;cubic bezier curves&lt;/a&gt;. This is rather advanced, but basically any of those functions above are built using bezier curves. We have handy names as they are common ones.&lt;/p&gt;

&lt;h4 id=&#34;css-transitions-in-browser-devtools&#34;&gt;CSS Transitions in Browser DevTools&lt;/h4&gt;

&lt;p&gt;The  &lt;a href=&#34;https://flaviocopes.com/browser-devtools/&#34; target=&#34;_blank&#34;&gt;Browser DevTools&lt;/a&gt;  offer a great way to visualize transitions.&lt;/p&gt;

&lt;p&gt;This is Chrome:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/l6svCI9t6bLTsuniRuxjgwOnD9i1YSseno-f&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This is Firefox:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/JYAWK9J6xuzeP2WVytUt8k64RUUCHl3UJmXC&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;From those panels you can live edit the transition and experiment in the page directly without reloading your code.&lt;/p&gt;

&lt;h4 id=&#34;which-properties-you-can-animate-using-css-animations&#34;&gt;Which Properties you can Animate using CSS Animations&lt;/h4&gt;

&lt;p&gt;A lot! They are the same you can animate using CSS Transitions, too.&lt;/p&gt;

&lt;p&gt;Here’s the full list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;background&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;background-color&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;background-position&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;background-size&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-color&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-width&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-bottom&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-bottom-color&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-bottom-left-radius&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-bottom-right-radius&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-bottom-width&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-left&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-left-color&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-left-width&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-radius&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-right&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-right-color&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-right-width&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-spacing&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-top&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-top-color&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-top-left-radius&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-top-right-radius&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-top-width&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bottom&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;box-shadow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;caret-color&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clip&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;color&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;column-count&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;column-gap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;column-rule&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;column-rule-color&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;column-rule-width&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;column-width&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;columns&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;content&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-basis&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-grow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-shrink&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;font&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;font-size&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;font-size-adjust&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;font-stretch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;font-weight&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-area&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-auto-columns&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-auto-flow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-auto-rows&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-column-end&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-column-gap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-column-start&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-column&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-gap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-row-end&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-row-gap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-row-start&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-row&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-template-areas&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-template-columns&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-template-rows&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-template&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;height&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;left&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;letter-spacing&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;line-height&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;margin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;margin-bottom&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;margin-left&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;margin-right&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;margin-top&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max-height&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max-width&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;min-height&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;min-width&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;opacity&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;order&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;outline&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;outline-color&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;outline-offset&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;outline-width&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;padding&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;padding-bottom&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;padding-left&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;padding-right&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;padding-top&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;perspective&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;perspective-origin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;quotes&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;right&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tab-size&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text-decoration&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text-decoration-color&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text-indent&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text-shadow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;top&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;transform.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vertical-align&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;visibility&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;width&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;word-spacing&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;z-index&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;animations&#34;&gt;ANIMATIONS&lt;/h3&gt;

&lt;p&gt;CSS Animations are a great way to create visual animations, not limited to a single movement like CSS Transitions, but much more articulated.&lt;/p&gt;

&lt;p&gt;An animation is applied to an element using the  &lt;code&gt;animation&lt;/code&gt;  property.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.container {
  animation: spin 10s linear infinite;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;spin&lt;/code&gt;  is the name of the animation, which we need to define separately. We also tell CSS to make the animation last 10 seconds, perform it in a linear way (no acceleration or any difference in its speed) and to repeat it infinitely.&lt;/p&gt;

&lt;p&gt;You must  &lt;strong&gt;define how your animation works&lt;/strong&gt;  using  &lt;strong&gt;keyframes&lt;/strong&gt;. Example of an animation that rotates an item:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;@keyframes spin {
  0% {
    transform: rotateZ(0);
  }
  100% {
    transform: rotateZ(360deg);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inside the  &lt;code&gt;@keyframes&lt;/code&gt;  definition you can have as many intermediate waypoints as you want.&lt;/p&gt;

&lt;p&gt;In this case we instruct CSS to make the transform property to rotate the Z axis from 0 to 360 grades, completing the full loop.&lt;/p&gt;

&lt;p&gt;You can use any CSS transform here.&lt;/p&gt;

&lt;p&gt;Notice how this does not dictate anything about the temporal interval the animation should take. This is defined when you use it via  &lt;code&gt;animation&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;a-css-animations-example&#34;&gt;A CSS Animations Example&lt;/h4&gt;

&lt;p&gt;I want to draw four circles, all with a starting point in common, all 90 degrees distant from each other.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;circle one&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;circle two&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;circle three&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;circle four&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

body {
  display: grid;
  place-items: center;
  height: 100vh;
}

.circle {
  border-radius: 50%;
  left: calc(50% - 6.25em);
  top: calc(50% - 12.5em);
  transform-origin: 50% 12.5em;
  width: 12.5em;
  height: 12.5em;
  position: absolute;
  box-shadow: 0 1em 2em rgba(0, 0, 0, .5);
}

.one,
.three {
  background: rgba(142, 92, 205, .75);
}

.two,
.four {
  background: rgba(236, 252, 100, .75);
}

.one {
  transform: rotateZ(0);
}

.two {
  transform: rotateZ(90deg);
}

.three {
  transform: rotateZ(180deg);
}

.four {
  transform: rotateZ(-90deg);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see them in this Glitch:  &lt;a href=&#34;https://flavio-css-circles.glitch.me/&#34; target=&#34;_blank&#34;&gt;https://flavio-css-circles.glitch.me&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s make this structure (all the circles together) rotate. To do this, we apply an animation on the container, and we define that animation as a 360 degree rotation:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;@keyframes spin {
  0% {
    transform: rotateZ(0);
  }
  100% {
    transform: rotateZ(360deg);
  }
}

.container {
  animation: spin 10s linear infinite;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See it on  &lt;a href=&#34;https://flavio-css-animations-tutorial.glitch.me/&#34; target=&#34;_blank&#34;&gt;https://flavio-css-animations-tutorial.glitch.me&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can add more keyframes to have funnier animations:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;@keyframes spin {
  0% {
    transform: rotateZ(0);
  }
  25% {
    transform: rotateZ(30deg);
  }
  50% {
    transform: rotateZ(270deg);
  }
  75% {
    transform: rotateZ(180deg);
  }
  100% {
    transform: rotateZ(360deg);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See the example on  &lt;a href=&#34;https://flavio-css-animations-four-steps.glitch.me/&#34; target=&#34;_blank&#34;&gt;https://flavio-css-animations-four-steps.glitch.me&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;the-css-animation-properties&#34;&gt;The CSS animation properties&lt;/h4&gt;

&lt;p&gt;CSS animations offers a lot of different parameters you can tweak:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/AurqyVJOCys9sUi4S6DtBlaxKGi6evJQhsbB&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The  &lt;code&gt;animation&lt;/code&gt;  property is a shorthand for all these properties, in this order:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.container {
  animation: name
             duration
             timing-function
             delay
             iteration-count
             direction
             fill-mode
             play-state;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the example we used above:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.container {
  animation: spin 10s linear infinite;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;javascript-events-for-css-animations&#34;&gt;JavaScript events for CSS Animations&lt;/h4&gt;

&lt;p&gt;Using JavaScript you can listen for the following events:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;animationstart&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;animationend&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;animationiteration&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Be careful with  &lt;code&gt;animationstart&lt;/code&gt;, because if the animation starts on page load, your JavaScript code is always executed after the CSS has been processed, so the animation is already started and you cannot intercept the event.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const container = document.querySelector(&#39;.container&#39;)

container.addEventListener(&#39;animationstart&#39;, (e) =&amp;gt; {
  //do something
}, false)

container.addEventListener(&#39;animationend&#39;, (e) =&amp;gt; {
  //do something
}, false)

container.addEventListener(&#39;animationiteration&#39;, (e) =&amp;gt; {
  //do something
}, false)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;which-properties-you-can-animate-using-css-animations-1&#34;&gt;Which Properties You Can Animate using CSS Animations&lt;/h4&gt;

&lt;p&gt;A lot! They are the same you can animate using CSS Transitions, too.&lt;/p&gt;

&lt;p&gt;Here’s the full list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;background&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;background-color&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;background-position&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;background-size&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-color&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-width&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-bottom&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-bottom-color&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-bottom-left-radius&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-bottom-right-radius&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-bottom-width&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-left&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-left-color&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-left-width&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-radius&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-right&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-right-color&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-right-width&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-spacing&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-top&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-top-color&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-top-left-radius&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-top-right-radius&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-top-width&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bottom&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;box-shadow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;caret-color&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clip&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;color&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;column-count&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;column-gap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;column-rule&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;column-rule-color&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;column-rule-width&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;column-width&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;columns&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;content&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-basis&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-grow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-shrink&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;font&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;font-size&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;font-size-adjust&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;font-stretch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;font-weight&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-area&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-auto-columns&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-auto-flow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-auto-rows&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-column-end&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-column-gap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-column-start&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-column&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-gap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-row-end&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-row-gap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-row-start&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-row&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-template-areas&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-template-columns&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-template-rows&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-template&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;height&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;left&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;letter-spacing&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;line-height&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;margin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;margin-bottom&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;margin-left&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;margin-right&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;margin-top&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max-height&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max-width&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;min-height&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;min-width&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;opacity&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;order&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;outline&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;outline-color&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;outline-offset&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;outline-width&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;padding&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;padding-bottom&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;padding-left&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;padding-right&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;padding-top&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;perspective&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;perspective-origin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;quotes&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;right&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tab-size&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text-decoration&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text-decoration-color&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text-indent&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text-shadow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;top&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;transform.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vertical-align&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;visibility&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;width&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;word-spacing&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;z-index&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;normalizing-css&#34;&gt;NORMALIZING CSS&lt;/h3&gt;

&lt;p&gt;The default browser stylesheet is the set of rules that browsers have to apply to give some minimum style to elements.&lt;/p&gt;

&lt;p&gt;Most of the time those styles are very useful.&lt;/p&gt;

&lt;p&gt;Since every browser has its own set, it’s common to find a common ground.&lt;/p&gt;

&lt;p&gt;Rather than removing all defaults, like one of the  &lt;strong&gt;CSS reset&lt;/strong&gt;  approaches does, the normalizing process removes browser inconsistencies, while keeping a basic set of rules you can rely on.&lt;/p&gt;

&lt;p&gt;Normalize.css  &lt;a href=&#34;http://necolas.github.io/normalize.css&#34; target=&#34;_blank&#34;&gt;http://necolas.github.io/normalize.css&lt;/a&gt;  is the most commonly used solution for this problem.&lt;/p&gt;

&lt;p&gt;You must load the normalizing CSS file before any other CSS.&lt;/p&gt;

&lt;h3 id=&#34;error-handling&#34;&gt;ERROR HANDLING&lt;/h3&gt;

&lt;p&gt;CSS is resilient. When it finds an error, it does not act like JavaScript which packs up all its things and goes away altogether, terminating all the script executions after the error is found.&lt;/p&gt;

&lt;p&gt;CSS tries very hard to do what you want.&lt;/p&gt;

&lt;p&gt;If a line has an error, it skips it and jumps to the next line without any error.&lt;/p&gt;

&lt;p&gt;If you forget the semicolon on one line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p {
  font-size: 20px
  color: black;
  border: 1px solid black;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the line with the error AND the next one will  &lt;strong&gt;not&lt;/strong&gt;  be applied, but the third rule will be successfully applied on the page. Basically, it scans all until it finds a semicolon, but when it reaches it, the rule is now  &lt;code&gt;font-size: 20px color: black;&lt;/code&gt;, which is invalid, so it skips it.&lt;/p&gt;

&lt;p&gt;Sometimes it’s tricky to realize there is an error somewhere, and where that error is, because the browser won’t tell us.&lt;/p&gt;

&lt;p&gt;This is why tools like  &lt;a href=&#34;http://csslint.net/&#34; target=&#34;_blank&#34;&gt;CSS Lint&lt;/a&gt;  exist.&lt;/p&gt;

&lt;h3 id=&#34;vendor-prefixes&#34;&gt;VENDOR PREFIXES&lt;/h3&gt;

&lt;p&gt;Vendor prefixes are one way browsers use to give CSS developers access to newer features not yet considered stable.&lt;/p&gt;

&lt;p&gt;Before going on, keep in mind that this approach is declining in popularity. People now favour using  &lt;strong&gt;experimental flags&lt;/strong&gt;, which must be enabled explicitly in the user’s browser.&lt;/p&gt;

&lt;p&gt;Why? Because developers, instead of considering vendor prefixes as a way to preview features, sometimes ship them in production — something considered harmful by the CSS Working Group.&lt;/p&gt;

&lt;p&gt;Mostly because once you add a flag and developers start using it in production, browsers are in a bad position if they realise something must change. With flags, you can’t ship a feature unless you can push all your visitors to enable that flag in their browser (just joking, don’t try).&lt;/p&gt;

&lt;p&gt;That said, let’s see what vendor prefixes are.&lt;/p&gt;

&lt;p&gt;I specifically remember them for working with CSS Transitions in the past. Instead of just using the  &lt;code&gt;transition&lt;/code&gt;  property, you had to do this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.myClass {
    -webkit-transition: all 1s linear;
    -moz-transition: all 1s linear;
    -ms-transition: all 1s linear;
    -o-transition: all 1s linear;
    transition: all 1s linear;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you just use&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.myClass {
    transition: all 1s linear;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;since the property is now well supported by all modern browsers.&lt;/p&gt;

&lt;p&gt;The prefixes used are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-webkit-&lt;/code&gt;  (Chrome, Safari, iOS Safari / iOS WebView, Android)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-moz-&lt;/code&gt;  (Safari)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-ms-&lt;/code&gt;  (Edge, Internet Explorer)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-o-&lt;/code&gt;  (Opera, Opera Mini)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since Opera is Chromium-based and Edge will soon be too,  &lt;code&gt;-o-&lt;/code&gt;  and  &lt;code&gt;-ms-&lt;/code&gt;  will probably soon go out of fashion. But as we said, vendor prefixes as a whole are going out of fashion, too.&lt;/p&gt;

&lt;p&gt;Writing prefixes is hard, mostly because of uncertainty. Do you actually need a prefix for one property? Several online resources are outdated, too, which makes it even harder to do right. Projects like  &lt;a href=&#34;https://github.com/postcss/autoprefixer&#34; target=&#34;_blank&#34;&gt;Autoprefixer&lt;/a&gt;  can automate the process in its entirety without us needing to find out if a prefix is needed any more, or the feature is now stable and the prefix should be dropped. It uses data from caniuse.com, a very good reference site for all things related to browser support.&lt;/p&gt;

&lt;p&gt;If you use React or Vue, projects like  &lt;code&gt;create-react-app&lt;/code&gt;  and Vue CLI, two common ways to start building an application, use  &lt;code&gt;autoprefixer&lt;/code&gt;  out of the box, so you don&amp;rsquo;t even have to worry about it.&lt;/p&gt;

&lt;h3 id=&#34;css-for-print&#34;&gt;CSS FOR PRINT&lt;/h3&gt;

&lt;p&gt;Even though we increasingly stare at our screens, printing is still a thing.&lt;/p&gt;

&lt;p&gt;Even with blog posts. I remember one time back in 2009 I met a person that told me he made his personal assistant print every blog post I published (yes, I stared blankly for a little bit). Definitely unexpected.&lt;/p&gt;

&lt;p&gt;My main use case for looking into printing usually is printing to a PDF. I might create something inside the browser, and I want to make it available as PDF.&lt;/p&gt;

&lt;p&gt;Browsers make this very easy, with Chrome defaulting to “Save” when trying to print a document and a printer is not available, and Safari has a dedicated button in the menu bar:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/bgA5gq1sJ4vzRx7inVg4skJLVgDggyhDjhmF&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;print-css&#34;&gt;Print CSS&lt;/h4&gt;

&lt;p&gt;Some common things you might want to do when printing is to hide some parts of the document, maybe the footer, something in the header, the sidebar.&lt;/p&gt;

&lt;p&gt;Maybe you want to use a different font for printing, which is totally legit.&lt;/p&gt;

&lt;p&gt;If you have a large CSS for print, you’d better use a separate file for it. Browsers will only download it when printing:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot;
      src=&amp;quot;print.css&amp;quot;
      type=&amp;quot;text/css&amp;quot;
      media=&amp;quot;print&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;css-media-print&#34;&gt;CSS @media print&lt;/h4&gt;

&lt;p&gt;An alternative to the previous approach is media queries. Anything you add inside this block:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;@media print {
  /* ... */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is going to be applied only to printed documents.&lt;/p&gt;

&lt;h4 id=&#34;links&#34;&gt;Links&lt;/h4&gt;

&lt;p&gt;HTML is great because of links. It’s called HyperText for a good reason. When printing we might lose a lot of information, depending on the content.&lt;/p&gt;

&lt;p&gt;CSS offers a great way to solve this problem by editing the content, appending the link after the  &lt;code&gt;&amp;lt;&lt;/code&gt;;a&amp;gt; tag text, using:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;@media print {
    a[href*=&#39;//&#39;]:after {
        content:&amp;quot; (&amp;quot; attr(href) &amp;quot;) &amp;quot;;
        color: $primary;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I target  &lt;code&gt;a[href*=&#39;//&#39;]&lt;/code&gt;  to only do this for external links. I might have internal links for navigation and internal indexing purposes, which would be useless in most of my use cases. If you also want internal links to be printed, just do:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;@media print {
    a:after {
        content:&amp;quot; (&amp;quot; attr(href) &amp;quot;) &amp;quot;;
        color: $primary;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;page-margins&#34;&gt;Page margins&lt;/h4&gt;

&lt;p&gt;You can add margins to every single page.  &lt;code&gt;cm&lt;/code&gt;  or  &lt;code&gt;in&lt;/code&gt;  is a good unit for paper printing.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;@page {
    margin-top: 2cm;
    margin-bottom: 2cm;
    margin-left: 2cm;
    margin-right: 2cm;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;@page&lt;/code&gt;  can also be used to only target the first page, using  &lt;code&gt;@page :first&lt;/code&gt;, or only the left and right pages using  &lt;code&gt;@page :left&lt;/code&gt;  and  &lt;code&gt;@page: right&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;page-breaks&#34;&gt;Page breaks&lt;/h4&gt;

&lt;p&gt;You might want to add a page break after some elements, or before them. Use  &lt;code&gt;page-break-after&lt;/code&gt;  and  &lt;code&gt;page-break-before&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.book-date {
    page-break-after: always;
}

.post-content {
    page-break-before: always;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Those properties  &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/page-break-after&#34; target=&#34;_blank&#34;&gt;accept a wide variety of values&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;avoid-breaking-images-in-the-middle&#34;&gt;Avoid breaking images in the middle&lt;/h4&gt;

&lt;p&gt;I experienced this with Firefox: images by default are cut in the middle, and continue on the next page. It might also happen to text.&lt;/p&gt;

&lt;p&gt;Use&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;p {
  page-break-inside: avoid;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and wrap your images in a  &lt;code&gt;p&lt;/code&gt;  tag. Targeting  &lt;code&gt;img&lt;/code&gt;  directly didn&amp;rsquo;t work in my tests.&lt;/p&gt;

&lt;p&gt;This applies to other content as well, not just images. If you notice something is cut when you don’t want, use this property.&lt;/p&gt;

&lt;h4 id=&#34;debug-the-printing-presentation&#34;&gt;Debug the printing presentation&lt;/h4&gt;

&lt;p&gt;The Chrome DevTools offer ways to emulate the print layout:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/-uiIs0O58DxJGuPKuMjjzg356Nq2On7GH7QI&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Once the panel opens, change the rendering emulation to  &lt;code&gt;print&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/XO5KBdEIBUtWLlIXwISJMN3GaehM9Gfd22K7&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;wrapping-up&#34;&gt;WRAPPING UP&lt;/h3&gt;

&lt;p&gt;I hope this article helped you get up to speed with CSS and get an overview of the main features you can use to style your pages and apps. I wrote it to help you get comfortable with CSS and get you quickly up to speed with using this awesome tool that lets you create stunning designs on the Web, and I hope I achieved with this goal.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://flaviocopes.com/page/css-handbook/&#34; target=&#34;_blank&#34;&gt;Click here to get a PDF / ePub / Mobi version of this post to read offline&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Reference : &lt;a href=&#34;https://www.freecodecamp.org/news/the-css-handbook-a-handy-guide-to-css-for-developers-b56695917d11/?source=facebookShare-8f150b66bb03-1557572128&amp;amp;fbclid=IwAR10B0nR3jjaEA2KE8mhjzvmk9e9W2aZNe6Jg5QA7OG9L8nMQsPSSdjAfyY&amp;amp;_branch_match_id=623139837775019247&#34; target=&#34;_blank&#34;&gt;https://www.freecodecamp.org&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>
